<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

	<head>
		<title>ΤΟ ΒΙΒΛΙΟ ΤΗΣ PYTHON</title>
		<meta name="book.identifier.slug" content="vivliopython"/>
		<meta name="book.subtitle" content="Γράφοντας κώδικα" />
		<meta name="book.author" content="ΝΙΚΟΛΑΟΣ ΣΑΜΑΡΑΣ" />
		<meta name="book.author" content="ΚΩΝΣΤΑΝΤΙΝΟΣ ΤΣΙΠΛΙΔΗΣ" />
		<meta name="book.publisher" content="Εκδόσεις Κριτική" />
		<meta name="book.contact.email" content="biblia@kritiki.gr" />
		<meta name="book.contact.url" content="http://www.kritiki.gr" />
		<meta name="book.contact.address" content="Νευροκοπίου 8, 118 55 Αθήνα" />
		<meta name="book.contact.phone" content="+30 210 82 11 470" />
		<meta name="book.edition" content="1η έκδοση" />
		<meta name="book.publication-date" content="Οκτώβριος 2019" />
		<meta name="book.copyright" content="© 2019, Εκδόσεις Κριτική ΑΕ για την ελληνική γλώσσα σε όλο τον κόσμο" />
		<meta name="book.identifier.isbn.print" content="978-960-586-302-9" />
		<meta name="book.identifier.isbn.epub" content="978-960-586-326-5" />
		<link rel="book.cover" href="media/cover.png" type="image/png" />
		<link rel="book.banner" href="media/banner.png" type="image/png" />
		<!-- σελίδα βιβλίου στο kritiki.gr -->
		<!-- <link rel="book.shop.book" href="" />-->
		<!-- σελίδα αγοράς epub για Android και Windows PC από το kritiki.gr -->
		<!-- <link rel="book.shop.ebook" href="" /> -->
		<!-- σελίδα αγοράς epub για iPhone, iPod touch, iPad και Mac (OS X Mavericks) από το kritiki.gr -->
		<!-- <link rel="book.shop.ibook" href="" /> -->
		
		<meta name="book.noapps" content="true" />
		<!-- <meta name="book.mathjaxSymbol" content="$" /> -->
		
		<!-- 	<script>
    <![CDATA[
    MathJax = {
      tex2jax: {
        inlineMath: [["$", "$"]],
        displayMath: [["$$", "$$"]],
        processEscapes: true,
        skipTags: ["script","noscript","style","textarea","code"],
      },
      'HTML-CSS': {
        availableFonts : [],  // ["STIX", "TeX"],
        preferredFont  : null, // ["TeX"],
        imageFont    : null,
        // TeX, STIX-Web, Asana-Math, Neo-Euler,
        // Gyre-Pagella, Gyre-Termes, Latin-Modern
        webFont     : "STIX-Web",
        undefinedFamily : "sans-serif",
        linebreaks: {
          automatic: true,
          width: "400px",
        },
      },
      TeX: {
        extensions: ["cancel.js"]
			}
    };
    ]]>
    </script> -->
		
		<!-- <meta name="book.translations.feat-chapter-" content=""/>-->
		
		<meta name="book.translations.feat-chapter-review" content="ΠΕΡΙΛΗΨΗ"/>
		<meta name="book.translations.feat-chapter-questions" content="Ερωτήσεις κατανόησης"/>
		<meta name="book.translations.feat-chapter-assess" content="Ασκήσεις"/>
		
		
		<style>
			ol.unstyled,
			ul.unstyled {
				list-style-type:none;
			}
			.overline {
 				text-decoration: overline;
			}
			figure figcaption,
			.figure-description,
			.figure-notes {
				font-size: 80%;
			}
			figure.graphic > img {
				align: center;
			}
			.center {
				align: center;
			}
			table, th, tr, td {
 				border: 1px solid black;
			}
			.courier-code {
				font-family: 'CourierNew';
			}
			.enter, .tab{
				width: 50px;
			}
		</style>
		
		<!--<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"/> -->
	</head>

<body id="PYTHON_digital">
	<section role="aboutbook" data-restrict="bookplayer epub">
		<p>Το υλικό του βιβλίου δίνεται μέσα από απλές και εύκολα κατανοητές περιγραφές που καλύπτουν τις ιδιαιτερότητες και τα χαρακτηριστικά της Python. Με περισσότερα από 140 ολοκληρωμένα παραδείγματα, υποδειγματικά λυμένα, που συνοδεύονται με αναλυτικές περιγραφές και σχολιασμό, ο αναγνώστης έχει τη δυνατότητα να κατανοήσει και να εφαρμόσει τις δομές και τα ιδιαίτερα γνωρίσματα της γλώσσας.</p>
		<p>Ακόμα, με πάνω από 350 λίστες κώδικα με τη μορφή προγραμμάτων, παρουσιάζονται οι λειτουργίες της γλώσσας καθώς και οι λύσεις των παραδειγμάτων με επεξηγηματικά σχόλια και περιγραφές, ενώ η βαθμιαία κλιμάκωση της πολυπλοκότητας των προβλημάτων που επιλύονται θα βοηθήσει στην εκμάθηση και στη συνδυαστική χρήση των διαφορετικών δομών της γλώσσας. Ο κώδικας που παρουσιάζεται είναι διαθέσιμος και σε ηλεκτρονική μορφή, για την άμεση χρήση και δοκιμή του στην πράξη.</p>
		<p>Η ύλη του βιβλίου συνοδεύεται με περισσότερες από 60 εικόνες με σχηματικές απεικονίσεις και αναπαραστάσεις δομών, ενώ οι 30 και πλέον αναλυτικοί πίνακες παρουσιάζουν και περιγράφουν λεπτομερώς και με κατάλληλα παραδείγματα τη λειτουργία πολύπλοκων στοιχείων της γλώσσας.</p>
		<p>Για την κατανόηση των δομών της Python, δίνονται για εξάσκηση περισσότερες από 400 προγραμματιστικές ασκήσεις και ερωτήσεις κατανόησης και επανάληψης, οργανωμένες ανά κεφάλαιο. Η εμπέδωση της ύλης διευκολύνεται με αναλυτικά ευρετήρια πινάκων, εικόνων και κώδικα, καθώς επίσης και ερμηνευτικό γλωσσάρι ορολογίας, για την άμεση αναφορά και αναζήτηση κεντρικών σημείων και όρων της γλώσσας.</p>
	</section>
	<section role="aboutauthor" data-restrict="bookplayer epub">
		<div>
			<h4>
				Νικόλαος Σαμαράς
			</h4>
			<p>Ο Νικόλαος Σαμαράς είναι Καθηγητής στο Τμήμα Εφαρμοσμένης Πληροφορικής του Πανεπιστημίου Μακεδονίας. Είναι πτυχιούχος και διδάκτορας του Τμήματος Εφαρμοσμένης Πληροφορικής του Πανεπιστημίου Μακεδονίας. Τα ερευνητικά του ενδιαφέροντα εστιάζονται στην ανάλυση αλγορίθμων-πολυπλοκότητα, τον δικτυακό προγραμματισμό, τους επιστημονικούς υπολογισμούς, τις εφαρμογές υπολογιστών, τον μαθηματικό προγραμματισμό, καθώς και την υπολογιστική επιχειρησιακή έρευνα. Είναι συγγραφέας βιβλίων, μονογραφιών, κεφαλαίων και άρθρων που έχουν κυκλοφορήσει από διεθνείς και ελληνικούς εκδοτικούς οίκους, ενώ άρθρα του έχουν δημοσιευτεί σε διεθνή και ελληνικά επιστημονικά περιοδικά (με κριτές).</p>
			<h4>
				Κωνσταντίνος Τσιπλίδης
			</h4>
			<p>Ο Κωνσταντίνος Τσιπλίδης είναι Καθηγητής Πληροφορικής στη μέση εκπαίδευση. Είναι πτυχιούχος και κάτοχος μεταπτυχιακού τίτλου σπουδών του Τμήματος Εφαρμοσμένης Πληροφορικής του Πανεπιστημίου Μακεδονίας, καθώς και υποψήφιος διδάκτορας στο ίδιο Τμήμα. Πεδίο έρευνας όπου δραστηριοποιείται είναι ο προγραμματισμός και η επίλυση προβλημάτων στον χώρο των επιστημονικών υπολογισμών και της βελτιστοποίησης, ενώ στα ενδιαφέροντά του συγκαταλέγεται και η εκπαίδευση μαθητών στην ανάπτυξη εφαρμογών σε Python σχετικών με τη ρομποτική και το διαδίκτυο των πραγμάτων. Έχει συμμετάσχει στη συγγραφή βιβλίων που έχουν κυκλοφορήσει από διεθνείς εκδοτικούς οίκους. Άρθρα του έχουν δημοσιευτεί σε συνέδρια στην Ελλάδα και το εξωτερικό</p>
			
		</div>
	</section>
	<section role="titlepage" data-restrict="bookplayer microsite">
		<h1 class="hidden">Μεγάλος Τίτλος</h1>
		<div class="p tp-author">Νικόλαος Σαμαράς<br/>Κωνσταντίνος Τσιπλίδης</div>
		<div class="p tp-title">ΤΟ ΒΙΒΛΙΟ ΤΗΣ PYTHON</div>
		<div class="p tp-credits">Πρόλογος<br/>Ευστράτιος Γαλλόπουλος</div>
		<div class="p tp-publisher">ΕΚΔΟΣΕΙΣ ΚΡΙΤΙΚΗ<br />ΕΠΙΣΤΗΜΟΝΙΚΗ ΒΙΒΛΙΟΘΗΚΗ</div>
	</section>
	<section role="copyright" data-restrict="bookplayer microsite">
		<h1 class="hidden">Copyright</h1>
		<div class="p cp-notice">Απαγορευεται η αναδημοσίευση και γενικά η αναπαραγωγή του παρόντος έργου με οποιονδήποτε τρόπο, τμηματικά ή περιληπτικά, στο πρωτότυπο ή σε μετάφραση ή άλλη διασκευή χωρίς γραπτή άδεια του εκδότη, σύμφωνα με τον Ν. 2121/1993 και τη Διεθνή Σύμβαση της Βέρνης (που έχει κυρωθεί με τον Ν. 100/1975).</div>
		<div class="p cp-edition-number">1η έκδοση: Οκτώβριος 2019</div>
		<div class="p cp-title">Νικόλαος Σαμαράς, Κωνσταντίνος Τσιπλίδης, <i>Το βιβλίο της Python - Γράφοντας κώδικα</i></div>
		<div class="p cp-rights">© 2019, Εκδόσεις Κριτική ΑΕ για την ελληνική γλώσσα σε όλο τον κόσμο</div>
		<div class="p cp-publisher">Εκδόσεις Κριτική</div>
		<div class="p cp-distribution">Κεντρική διάθεση: Νευροκοπίου 8, 118 55 Αθήνα, τηλ.: 210 82 11 470</div>
		<div class="p cp-email">e-mail: <a class="link_ref" href="mailto:biblia@kritiki.gr">biblia@kritiki.gr</a></div>
		<div class="p"><a class="link_ref" href="http://www.kritiki.gr">http://www.kritiki.gr</a></div>
		<div class="p cp-isbn" id="isbn-print">ISBN 978-960-586-312-8 (Έντυπο)</div>
		<div class="p cp-isbn" id="isbn-epub">ISBN 978-960-586-326-5 (EPUB)</div>
	</section>
	<section role="dedication" id="dedication" data-restrict="bookplayer microsite">
		<h1>Αφιέρωση</h1>
		<p class="right"><i>Στη Λυδία και στον Στάθη</i></p>
		<p class="right">–Νικόλαος Σαμαράς</p>
		<p></p>
		<p class="right"><i>Στη Μαρία και στον Χρήστο</i></p>
		<p class="right">–Κωνσταντίνος Τσιπλίδης</p>
	</section>
	<section data-restrict="bookplayer microsite" role="toc" id="book-toc">
		<h1>Περιεχόμενα</h1>
	</section>
	
	<section role="chapter" id="ch1">
		<h1>ΠΡΟΛΟΓΟΣ</h1>
		<p class="no-indent">Στην εποχή της 4ης Βιομηχανικής Επανάστασης, που η Τεχνητή Νοημοσύνη, το Διαδίκτυο των Πραγμάτων και η Ανάλυση Δεδομένων βρίσκονται στις επικεφαλίδες, η Python τείνει να γίνει η κυρίαρχη γλώσσα και lingua franca των προγραμματιστών. Πρόκειται για μια διερμηνευόμενη «σεναριογλώσσα» που στηρίζεται σε ένα ανοικτό περιβάλλον, συνδυάζει την ευχρηστία με την αποτελεσματικότητα και, ως εκ τούτου, χρησιμοποιείται σε ένα απεριόριστο φάσμα εφαρμογών, από τις πιο απλές ως τις εξαιρετικά πολύπλοκες. Για παράδειγμα, η γνωστή πλατφόρμα Dropbox στηρίχθηκε σε εκατομμύρια γραμμών Python. Όπως δείχνουν τα στοιχεία που συλλέγουν οργανισμοί και μελετητές, μετά την Java και τη C, η Python είναι η τρίτη δημοφιλέστερη γλώσσα προγραμματισμού, αλλά η χρήση της αυξάνει ταχύτερα από όλες τις υπάρχουσες γλώσσες. Αποτελεί βασικό προσόν για όποιον δηλώνει γνώσεις προγραμματισμού και τείνει να επικρατήσει ως η πρώτη γλώσσα που διδάσκεται σε μαθήματα εισαγωγής στον προγραμματισμό και στους υπολογιστές. Εν τέλει, είναι ένα περιβάλλον προγραμματισμού για νέους από 7 έως 77+ ετών.</p>
		<p>Η Python, που δημιουργήθηκε στις αρχές του 1990, είναι ισχυρή, εύκολη στη χρήση σχεδόν από την πρώτη στιγμή που τη μαθαίνει κανείς και ταυτόχρονα πολυχρηστική, σαν «ελβετικός σουγιάς» του προγραμματιστή. Η επίτευξη όλων αυτών των στόχων ήταν ένα ζητούμενο από τη δεκαετία του 1960 (όπως και με τις φυσικές γλώσσες, ο κατάλογος των νεκρών γλωσσών προγραμματισμού είναι μεγάλος). Λίγο πριν από την Python, είχαν γίνει προτάσεις για λογισμικά περιβάλλοντα επίλυσης προβλημάτων (problem solving environments ή PSE) που θα παρείχαν στους επιστήμονες τη δυνατότητα να προγραμματίσουν με γλώσσα φιλική προς αυτούς, χωρίς να απαιτείται βαθιά γνώση του υλικού και του λογισμικού των πολύπλοκων νέων υπολογιστικών υποδομών και που θα διευκόλυναν το rapid prototyping. Με την τεράστια εξάπλωση της υπολογιστικής και της πληροφορικής σχεδόν σε κάθε ανθρώπινη δραστηριότητα –καθώς και την ανάγκη για μία γλώσσα που να είναι εύκολη για τον καθένα και όχι μόνο για τους επιστήμονες–, η Python, που πληρούσε αυτές τις προδιαγραφές, ήταν το κατάλληλο εργαλείο την κατάλληλη στιγμή.</p>
		<p>Το βιβλίο των Νίκου Σαμαρά και Κώστα Τσιπλίδη έρχεται και αυτό την κατάλληλη ώρα να εμπλουτίσει τη σχετικά μικρή ελληνική βιβλιογραφία και να εξυπηρετήσει την ταχύτατα αυξανόμενη κοινότητα των επίδοξων προγραμματιστών Python, καθώς και όσους ενδιαφέρονται για ένα ελληνικό εγχειρίδιο. Οι συγγραφείς έχουν πολυετή εμπειρία στη διδασκαλία εννοιών προγραμματισμού, ο πρώτος στο Πανεπιστήμιο και ο δεύτερος στη Μέση Εκπαίδευση. Ο Ν. Σαμαράς είναι διεθνώς καταξιωμένος ερευνητής, με μεγάλη εμπειρία στην υλοποίηση πολύπλοκων προγραμμάτων για εφαρμογές, όπως η βελτιστοποίηση, και ταυτόχρονα στην αξιοποίηση παράλληλων επεξεργαστών μέσω γλωσσών προγραμματισμού. Επιπλέον, είναι συγγραφέας επιστημονικών βιβλίων και μονογραφιών στα αγγλικά που έχουν εκδοθεί και κυκλοφορούν με επιτυχία από κορυφαίους διεθνείς εκδοτικούς οίκους. Ο Κ. Τσιπλίδης έχει συμμετάσχει στη συγγραφή συλλογικών τόμων και άρθρων που έχουν δημοσιευτεί από διεθνείς εκδοτικούς οίκους, ενώ διαθέτει μεγάλη εμπειρία στον προγραμματισμό και την εκπαίδευση μαθητών στην ανάπτυξη εφαρμογών, σε Python,&#160;σχετικών με τη Ρομποτική και το Διαδίκτυο των Πραγμάτων. Το βιβλίο αναδεικνύει εύγλωττα την εμπειρία και μεθοδικότητα των συγγραφέων του, καθώς είναι καλογραμμένο, με εξαιρετική οργάνωση, πληθώρα παραδειγμάτων και ασκήσεων για εξάσκηση, καθώς και κώδικες που είναι δημόσια διαθέσιμοι. Αναμφισβήτητα, οι υποψήφιες και υποψήφιοι <i>pythonistas</i> και <i>pythoneers</i> θα αποκομίσουν μεγάλο κέρδος από τη μελέτη και χρήση αυτού του πονήματος.</p>
		<p>–Καθηγητής Ευστράτιος Γαλλόπουλος</p>
		<p><i>Διευθυντής Εργαστηρίου&#160;Πληροφοριακών Συστημάτων Υψηλών Επιδόσεων Τομέας Λογικού Τμήμα Μηχανικών Η/Υ και Πληροφορικής&#160;Πολυτεχνική Σχολή Πανεπιστήμιο Πατρών</i></p>
		<p><a rel="external" href="http://scgroup.hpclab.ceid.upatras.gr/faculty/stratis.html ">http://scgroup.hpclab.ceid.upatras.gr/faculty/stratis.html</a></p>
	</section>
	<section role="chapter" id="ch2">
		<h1>Ευχαριστίες</h1>
		<p class="no-indent">Τελειώνοντας τη συγγραφή, θα θέλαμε να ευχαριστήσουμε τους ανθρώπους των Εκδόσεων Κριτική για τη συνεργασία τους και κυρίως για την εμπιστοσύνη τους. Πιο συγκεκριμένα, τον Πέτρο Πέντα, τον Κώστα Σίμο για τη φιλολογική επιμέλεια, τον Χρήστο Κεντρωτή για την τεχνική σχεδίαση και τη Μάγδα Καραβιώτη, υπεύθυνη έκδοσης των Εκδόσεων Κριτική. Με τη βοήθεια, τη συνεργασία και την υποστήριξή τους το βιβλίο πήρε τη μορφή που θέλαμε με τον καλύτερο δυνατό τρόπο.</p>
		<p>Ιδιαίτερες ευχαριστίες θέλουμε να απευθύνουμε στον Καθηγητή Στρατή Γαλλόπουλο, του Τμήματος Μηχανικών Η/Υ και Πληροφορικής του Πανεπιστημίου Πατρών για τα καλά του λόγια και για τη μεγάλη τιμή που μας έκανε να προλογίσει το βιβλίο. </p>
		<p><i>Το Βιβλίο της Python</i> δεν θα μπορούσε να γίνει χωρίς την υποστήριξη και την υπομονή που έδειξαν όλο το διάστημα που ετοιμαζόταν το βιβλίο τα μέλη των οικογενειών μας. Ένα μεγάλο και θερμό «ευχαριστώ» τους ανήκει αλλά και μια «συγνώμη» για τις ώρες που τους λείψαμε.</p>
		<p>Τέλος, ευχαριστούμε και τους μαθητές/φοιτητές μας για την ανταπόκρισή τους στην εκπαιδευτική διαδικασία και την διαφορετική κάθε φορά οπτική τους. Οι απορίες, τα προβλήματα, οι ανησυχίες και οι προβληματισμοί τους συνθέτουν πτυχές του βιβλίου και επηρέασαν σημαντικά το ύφος, τον τρόπο και την μορφή παρουσίασής του.</p>
		<p>–Νικόλαος Σαμαράς</p>
		<p class="Paragraphs--Στιλ-Παραγράφων-_body">–Κωνσταντίνος Τσιπλίδης</p>
	</section>
	<section role="chapter" id="ch3">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 1</span> Εισαγωγή</h1>
		<section role="section" id="ch3se1">
			<h1><span role="label">1.1</span> Ιστορικά στοιχεία</h1>
			<img src="media/chapter_1_image_0.jpg" alt=""/>
			<p class="no-indent">Η γλώσσα προγραμματισμού Python δημιουργήθηκε τον Δεκέμβριο του 1989 από τον Guido Van Rossum στο Ερευνητικό Κέντρο <i>CWI (Centrum Wiskunde &amp; Informatica)</i> στην Ολλανδία. Όπως περιγράφει ο ίδιος<sup class="superscript CharOverride-1"><span id="footnote-093-backlink"><a href="#footnote-093">1</a></span></sup> ξεκίνησε ως ένα πρότζεκτ για τις διακοπές των Χριστουγέννων, για την καλύτερη <i>διαχείριση του συστήματος (System Administration)</i> Amoeba. Οι βασικές επιρροές της βρίσκονται σε γλώσσες όχι ιδιαίτερα προσφιλείς, στους περισσότερους από εμάς – στη γλώσσα ABC και στη Modula 3.</p>
			<p>Οι δυο κυριότερες εκδόσεις της είναι η 2.x και η 3.x. Η έκδοση 2.x παρουσιάστηκε στις 16 Οκτωβρίου 2000 και πολύ γρήγορα ξεκίνησε να χρησιμοποιείται σε πολλούς τομείς και να αναπτύσσεται μια μεγάλη ποικιλία εφαρμογών σε Python. Η έκδοση αυτή, που δεν είναι συμβατή με την τελευταία έκδοση 3.x, χρησιμοποιείται ακόμη για την ανάπτυξη εφαρμογών. </p>
			<p>Η έκδοση 3.x παρουσιάστηκε στις 3 Δεκεμβρίου 2008, με το όνομα Python 3000 ή Py3K. Τη στιγμή που γραφόταν το βιβλίο η τελευταία έκδοση της γλώσσας ήταν η 3.7.3. Οι δοκιμές του κώδικα που περιέχει το βιβλίο έγιναν με διάφορες εκδόσεις της Python (μέχρι και την έκδοση 3.7).</p>
			<p>Το όνομα της γλώσσας δεν είναι σχετικό με το γνωστό ερπετό, παρόλο που το λογότυπο που χρησιμοποιείται από το <i>Ίδρυμα</i><i> της Python (Python Software Foundation</i><sup class="superscript CharOverride-1"><span id="footnote-092-backlink"><a href="#footnote-092">2</a></span></sup><i>)</i>, που συντηρεί την κύρια έκδοση της γλώσσας<sup class="superscript CharOverride-1"><span id="footnote-091-backlink"><a href="#footnote-091">3</a></span></sup>, παραπέμπει σε αυτό. Το όνομά της προέρχεται από την ομάδα κωμικών της δεκαετίας του 1970 με το όνομα Monty Python (<i>Flying Circus</i>), της βρετανικής τηλεόρασης (BBC). </p>
		</section>
		<section role="section" id="ch3se2">
			<h1><span role="label">1.2</span> Γιατί Python;</h1>
			<p class="no-indent">Η γλώσσα προγραμματισμού Python, παρόλο που χρησιμοποιείται εδώ και δυο δεκαετίες περίπου, έχει αποκτήσει, μόλις τα τελευταία χρόνια στην Ελλάδα, τεράστια απήχηση και αποδοχή, όχι μόνο στον χώρο της <i>επιστήμης των υπολογιστών (Computer Science)</i>, αλλά και σε άλλους εμπορικούς και επιστημονικούς τομείς. Χαρακτηριστική είναι η ταχύτατη διείσδυση της γλώσσας τόσο σε πρακτικές εφαρμογές (σε επιχειρήσεις και οργανισμούς), όσο και στον τομέα της διδασκαλίας και εκμάθησης προγραμματισμού σε διάφορα επίπεδα εκπαίδευσης (από τη μέση μέχρι την ανώτατη εκπαίδευση). </p>
			<p>Δεν είναι τυχαίο το ότι χρησιμοποιείται σε πάρα πολλούς και ασυνήθιστα, θα λέγαμε, διαφορετικούς τομείς δραστηριοτήτων και αυτό είναι κάτι που την κάνει μοναδική στο είδος της. Η ιδιαίτερη ευκολία εκμάθησης είναι ένα από τα χαρακτηριστικά της. Για αυτό τον λόγο πλέον αποτελεί, για πολλούς και πολλές, την πρώτη γλώσσα προγραμματισμού που θα μάθουν.</p>
			<p>Υπάρχουν όμως και άλλοι ακόμα πολλοί λόγοι που θα οδηγήσουν κάποιον να στραφεί στην εκμάθηση της γλώσσας και να επιλέξει την Python ως τη γλώσσα προγραμματισμού που θα χρησιμοποιεί για τη δημιουργία προγραμμάτων. Στη συνέχεια παρατίθενται οι κυριότεροι από αυτούς.</p>
			<p>Δίνοντας όμως πρώτα έναν σύντομο ορισμό για τη γλώσσα, θα λέγαμε ότι:</p>
			<p class="blockquote">Η Python είναι μια δυναμική, δωρεάν γλώσσα προγραμματισμού, υψηλού επιπέδου, διερμηνευόμενη, γενικού σκοπού, για διάφορα συστήματα, που υλοποιεί πολλαπλά προγραμματιστικά υποδείγματα</p>
			<p class="no-indent">Πιο αναλυτικά, η γλώσσα προγραμματισμού Python είναι:</p>
			<ol><li><span class="bold-italics">Δυναμική (Dynamic)</span><b>.</b> Κάθε <i>δομή δεδομένων (data structure)</i> (βλ. Εικόνα 1-1) που υποστηρίζει μπορεί να δημιουργηθεί και να αλλάξει δυναμικά κατά την εκτέλεση του προγράμματος. Δεν χρειάζεται να είναι προκαθορισμένη, κατασκευάζεται και τροποποιείται πλήρως σύμφωνα με τις ανάγκες του προγράμματος, την ώρα που αυτό τρέχει. Τα δεδομένα που υπάρχουν στη μνήμη του υπολογιστή υφίστανται δυναμική διαχείριση από την ίδια τη γλώσσα.</li>
			<li><span class="bold-italics">Δωρεάν</span><b>.</b> Είναι δωρεάν για κάθε χρήση (προσωπική και εμπορική) και διανέμεται ελεύθερα. Είναι <i>ανοιχτού κώδικα (open-source)</i> και χρησιμοποιεί την άδεια OSI<sup class="superscript CharOverride-1"><span id="footnote-090-backlink"><a href="#footnote-090">4</a></span></sup>. </li>
			<li><span class="bold-italics">Υψηλού επιπέδου (High-level)</span><b>.</b> Αυτό σημαίνει ότι παρέχει απλούς και εύκολα κατανοητούς κανόνες (συντακτικούς και γραμματικούς) για τη σύνταξη προγραμμάτων που είναι πολύ κοντά στην ανθρώπινη γλώσσα. </li>
			<li><span class="bold-italics">Διερμηνευόμενη (Interpreted)</span>. Η εκτέλεση ενός προγράμματος γραμμένου στη γλώσσα Python γίνεται με τη βοήθεια ενός ειδικού προγράμματος, του <i>διερμηνευτή (interpreter</i><i>)</i>, που αναλαμβάνει να ελέγξει την ορθότητά του και να πραγματοποιήσει την εκτέλεσή του.
				<p>Σε κάθε πρόγραμμα, οποιασδήποτε γλώσσας προγραμματισμού (από την Assembly και τη C, μέχρι τη C#, την Python ή την Java), πρέπει να γραφτεί ο κώδικας – οι εντολές ενός προγράμματος, σε κάποιο (συνήθως απλό, χωρίς μορφοποιήσεις) αρχείο κειμένου. Αυτό το αρχείο ονομάζεται αρχείο <i>πηγαίου κώδικα (source code)</i> και περιέχει όλες τις οδηγίες προς τον υπολογιστή για την επίλυση ενός προβλήματος. Για να μπορέσει όμως να εκτελέσει ο υπολογιστής αυτές τις εντολές, θα πρέπει να μετατραπούν, να μεταφραστούν δηλαδή, σε γλώσσα κατάλληλη για τον υπολογιστή, σε <i>γλώσσα μηχανής (machine language, code)</i>. Αυτή τη μετάφραση αναλαμβάνει να την κάνει ένα ειδικό πρόγραμμα που καλείται <i>μεταγλωττιστής (compiler)</i> ή <i>διερμηνευτής (interpreter</i><i>)</i>. Κάθε γλώσσα προγραμματισμού συνοδεύεται από ένα τέτοιο πρόγραμμα, διαθέσιμο είτε μέσα από κάποιο Ολοκληρωμένο Περιβάλλον Ανάπτυξης Λογισμικού (IDE, Integrated Development Environment)<sup class="superscript CharOverride-1"><span id="footnote-089-backlink"><a href="#footnote-089">5</a></span></sup>, είτε μέσα από τη <i>γραμμή εντολών (command line)</i><sup class="superscript CharOverride-1"><span id="footnote-088-backlink"><a href="#footnote-088">6</a></span></sup> του λειτουργικού συστήματος (Windows, Linux, MacOSx).</p>
				<p>Ο μεταγλωττιστής αναλαμβάνει να ελέγξει όλες τις εντολές του πηγαίου κώδικα για την ύπαρξη <i>συντακτικών σφαλμάτων (syntax errors)</i>. Αν εντοπίσει λάθη, θα σταματήσει και θα εμφανίσει, συνήθως κωδικοποιημένα, μια περιγραφή του σφάλματος και τη γραμμή όπου εντοπίστηκε αυτό. Αν το πρόγραμμα δεν έχει λάθη, η διαδικασία της μεταγλώττισης θα ολοκληρωθεί. Το αποτέλεσμα της μεταγλώττισης είναι η δημιουργία ενός αρχείου με <i>δυαδικό κώδικα (binary code)</i>, <i>εκτελέσιμου (executable)</i> από τον υπολογιστή. Σε αρκετές περιπτώσεις η διαδικασία αυτή περιλαμβάνει και τη <i>σύνδεση (link)</i> του πηγαίου κώδικα και τη <i>φόρτωση (</i><i>load)</i> άλλων προγραμμάτων και βιβλιοθηκών της γλώσσας, που είναι απαραίτητα για τη λειτουργία του προγράμματος. </p>
				<p>Ο διερμηνευτής, από την άλλη, λειτουργεί αρκετά διαφορετικά. Τις περισσότερες φορές αναλαμβάνει να ελέγξει μια εντολή, να τη μεταφράσει σε κώδικα μηχανής και να την εκτελέσει. Αμέσως μετά θα πάει στην επόμενη εντολή για να επαναλάβει την ίδια διαδικασία. Αν εντοπίσει κάποιο σφάλμα σε μια από τις εντολές του προγράμματος, θα σταματήσει εκεί, εμφανίζοντας ένα κατάλληλο μήνυμα.</p>
				<p>Η εκτέλεση ενός προγράμματος γραμμένου σε Python γίνεται από τον διερμηνευτή της γλώσσας. Κατά την εκτέλεση του προγράμματος δημιουργείται, στον ίδιο φάκελο όπου βρίσκεται το αρχείο πηγαίου κώδικα, ένα αρχείο με <i>δυαδικό κώδικα (byte code</i><i>)</i><sup class="superscript CharOverride-1"><span id="footnote-087-backlink"><a href="#footnote-087">7</a></span></sup>, με την επέκταση .pyc<sup class="superscript CharOverride-1"><span id="footnote-086-backlink"><a href="#footnote-086">8</a></span></sup> στο όνομα του αρχείου. Αυτό το αρχείο χρησιμοποιεί ο διερμηνευτής για την εκτέλεση του προγράμματος.</p>
			</li>
			<li><span class="bold-italics">Αντικειμενοστραφής (Object-oriented)</span>. Η Python είναι μια γλώσσα προσανατολισμένη στα <i>αντικείμενα (objects)</i>. Έχει τα χαρακτηριστικά μιας αντικειμενοστραφούς γλώσσας, ωστόσο, υπάρχουν αρκετές διαφωνίες<sup class="superscript CharOverride-1"><span id="footnote-085-backlink"><a href="#footnote-085">9</a></span></sup> για το αν υλοποιεί πλήρως αυτό το μοντέλο προγραμματισμού. Αυτό οφείλεται στο γεγονός ότι εφαρμόζει μια χαλαρή πολιτική σε ένα από τα χαρακτηριστικά του συγκεκριμένου μοντέλου, το χαρακτηριστικό της <i>ενθυλάκωσης (encapsulation)</i>. Παρέχει έναν υποτυπώδη και έμμεσο τρόπο προστασίας της ιδιωτικότητας των αντικειμένων. Αυτό όμως είναι μια λειτουργία που περιγράφεται αναλυτικά στο Κεφάλαιο 11.</li>
			<li><span class="bold-italics">Γενικού σκοπού (General-purpose)</span><b>.</b> Αυτό σημαίνει ότι μπορεί να χρησιμοποιηθεί σχεδόν για κάθε πρόβλημα και να καλύψει τις απαιτήσεις και τις ανάγκες για μεγάλη ποικιλία εφαρμογών. Αυτός άλλωστε είναι και ένας από τους βασικούς λόγους που χρησιμοποιείται σε τόσο πολλές και διαφορετικές περιπτώσεις.</li>
			<li><span class="bold-italics">Διαθέσιμη για διάφορα συστήματα</span><b>.</b> Ένα πρόγραμμα σε Python, που έχει γραφτεί σε περιβάλλον Windows, μπορεί, τις περισσότερες φορές, να χρησιμοποιηθεί χωρίς αλλαγές και σε άλλα λειτουργικά συστήματα. Εξαιρούνται ορισμένες περιπτώσεις όπου κάποιες βιβλιοθήκες κώδικα λειτουργούν με διαφορετικό τρόπο από το ένα σύστημα στο άλλο.</li>
			<li><span class="bold-italics">Κατάλληλη για πολλαπλά προγραμματιστικά υποδείγματα (Multi-Paradigm)</span>. Αυτό το χαρακτηριστικό περιγράφεται στην επόμενη ενότητα. Εν συντομία θα αναφέρουμε μόνο ότι ενσωματώνει διαφορετικές λειτουργίες και δίνει απόλυτη ελευθερία στον δημιουργό ενός προγράμματος για το ποια χαρακτηριστικά θα χρησιμοποιήσει κάθε φορά.</li>
			<li><span class="bold-italics">Ικανή να ενσωματώνει υπηρεσίες (Frameworks)</span><b>.</b> Αρκετά διαδεδομένη είναι η χρήση έτοιμων συστημάτων υπηρεσιών, που υλοποιούνται σε Python. Κυρίως αφορούν την εγκατάσταση και λειτουργία διαδικτυακών υπηρεσιών, όπως <i>διακομιστές ιστοσελίδων (web servers)</i>, <i>υπηρεσίες νέφους (cloud services</i><i>)</i> κ.λπ. Τα πιο γνωστά από αυτά είναι το Flask<sup class="superscript CharOverride-1"><span id="footnote-084-backlink"><a href="#footnote-084">10</a></span></sup> και το Django<sup class="superscript CharOverride-1"><span id="footnote-083-backlink"><a href="#footnote-083">11</a></span></sup>.</li>
			<li><span class="bold-italics">Υλοποιήσιμη σε πολλές εκδοχές</span><b>.</b> Υπάρχουν αρκετές διανομές της Python, με διαφορετικές <i>υλοποιήσεις (implementations)</i>. Η επίσημη έκδοση<sup class="superscript CharOverride-1"><span id="footnote-082-backlink"><a href="#footnote-082">12</a></span></sup> είναι γνωστή με το όνομα CPython, αφού χρησιμοποιεί τη γλώσσα C σε διάφορες λειτουργίες και σε ενσωματωμένες βιβλιοθήκες της. Εκτός όμως από αυτήν υπάρχουν και άλλες εκδόσεις της γλώσσας, η καθεμία με τα δικά της χαρακτηριστικά και ιδιότητες, που κυρίως αφορούν τη συνεργασία και την επικοινωνία της με άλλα συστήματα γλωσσών προγραμματισμού. Ακολουθούν οι πιο γνωστές από αυτές:
				<ul><li><b>Cython.</b> Είναι ένας μεταγλωττιστής τόσο για κώδικα γραμμένο σε απλή Python, όσο και σε ένα υπερσύνολο της γλώσσας που ονομάζεται (επίσης) Cython. Χρησιμοποιείται για τη συγγραφή <i>επεκτάσεων κώδικα (extensions of code)</i> σε C και τη σύνδεσή τους με προγράμματα σε Python. Είναι δυνατή η δημιουργία εφαρμογών για την κλήση προγραμμάτων σε C/C++ ή την ενσωμάτωσή τους σε αυτά.</li>
					<li><b>Jython.</b> Κάνει δυναμική μεταγλώττιση σε <i>δυαδικό κώδικα (byte code)</i> της Java και μπορεί να <i>επεκτείνει (extend)</i> τις κλάσεις της.</li>
					<li><b>Iron Python.</b> Είναι μια υλοποίηση της γλώσσας στενά συνδεδεμένη με το Net Framework, το οποίο μπορεί και χρησιμοποιεί. Άλλες γλώσσες του Net Framework μπορούν να χρησιμοποιούν προγράμματα φτιαγμένα σε Iron Python.</li>
					<li><b>Brython.</b> Είναι έκδοση της γλώσσας που σκοπό έχει να αντικαταστήσει την Javascript στην κατασκευή <i>κώδικα που εκτελείται σε ιστοσελίδες (web programming)</i>. Χρησιμοποιεί και αξιοποιεί πλήρως το περιβάλλον της HTML 5.</li>
					<li><b>Pyjs.</b> Κάνει εύκολη τη δημιουργία εφαρμογών για ιστοσελίδες γραμμένες εξ ολοκλήρου σε Python.</li>
				</ul></li>
			<li>Επεκτάσιμη (Extendable)<b>.</b> Μπορεί εύκολα να συνεργαστεί με άλλες γλώσσες προγραμματισμού. Σε αυτή τη λειτουργία βοηθούν και οι διάφορες υλοποιήσεις της Python.</li></ol>
			<p class="no-indent">Δεν είναι τυχαίο ότι χρησιμοποιείται (μαζί με άλλες γλώσσες προγραμματισμού) από εταιρείες<sup class="superscript CharOverride-1"><span id="footnote-081-backlink"><a href="#footnote-081">13</a></span></sup> και οργανισμούς όπως οι Dropbox, Facebook, Spotify, Netflix, Quora, Reddit, IBM, Nokia, Disney, Yahoo!, NASA, JP Morgan, Instagram, PayPal, eBay κ.ά. Χαρακτηριστικά, ένας από τους μηχανικούς λογισμικού της Google αναφέρει σε άρθρο<sup class="superscript CharOverride-1"><span id="footnote-080-backlink"><a href="#footnote-080">14</a></span></sup> του, για την απόφαση της εταιρείας να χρησιμοποιήσει την Python, ότι ήταν μια καλή επιλογή σχεδιασμού η λογική:</p>
			<p class="blockquote">Python where we can, C++ where we must</p>
		</section>
		<section role="section" id="ch3se3">
			<h1><span role="label">1.3</span> Προγραμματιστικά υποδείγματα</h1>
			<p class="no-indent">Η έννοια του <i>προγραμματιστικού υποδείγματος (programming paradigm)</i> συνδέεται με τις τεχνικές, τις λειτουργίες και τους μηχανισμούς που χρησιμοποιεί μια γλώσσα προγραμματισμού. Η γλώσσα Python διαθέτει χαρακτηριστικά και λειτουργίες <i>πολλαπλών προγραμματιστικών υποδειγμάτων (multi-</i><i>programming paradigms)</i>. Ο τρόπος χρήσης της και το μοντέλο που θα χρησιμοποιηθεί σε κάθε πρόγραμμα εξαρτάται αποκλειστικά από τον χρήστη και τον σχεδιασμό που αυτός θα κάνει σε κάθε περίπτωση, καθώς και ανάλογα με το πρόβλημα που πρέπει να αντιμετωπίσει. Σε κάθε υλοποίηση ενός προγράμματος, υπάρχουν τα κατάλληλα εργαλεία, με τις αντίστοιχες τεχνικές, που μπορεί κάποιος να επιλέξει, ώστε να επιτύχει με τον καλύτερο τρόπο τον στόχο του. Τα υποδείγματα που μπορεί να ακολουθεί ένα πρόγραμμα γραμμένο σε Python είναι τα παρακάτω:</p>
			<ol><li><span class="bold-italics">Διαδικαστικός προγραμματισμός (Procedural Programming)</span><b>.</b> Η υλοποίηση περιλαμβάνει την ιεραρχική σχεδίαση του προγράμματος και τη δημιουργία μιας σειράς από αυτόνομα τμήματα κώδικα, με τη μορφή υποπρογραμμάτων. Για αυτό τον λόγο, συνήθως ακολουθείται ο σχεδιασμός <i>από πάνω προς τα </i><i>κάτω (top to bottom)</i>, από το γενικό προς το ειδικό. Ένα πρόβλημα, επομένως, σπάει, ή χωρίζεται, σε ανεξάρτητα τμήματα, τα οποία στη συνέχεια θα αποτελέσουν αντίστοιχες ενότητες υποπρογραμμάτων, με τη μορφή συναρτήσεων ή βιβλιοθηκών κώδικα. Τα χαρακτηριστικά του <i>Δομημένου Προγραμματισμού (Structured Programming)</i> είναι διαθέσιμα και χρησιμοποιούνται για αυτό τον σκοπό. Είναι οι δομές της ακολουθίας (Κεφάλαιο 2), της επιλογής (Κεφάλαιο 3) και της επανάληψης (Κεφάλαιο 4).</li>
			<li><span class="bold-italics">Προστακτικός προγραμματισμός (Imperative Programming)</span><b>.</b> Δίνεται έμφαση στο πώς θα λυθεί ένα πρόβλημα. Το πρόγραμμα δημιουργείται με σκοπό να αλλάζει την <i>κατάσταση (state)</i> σε στοιχεία του υπολογιστή (μνήμη, επεξεργαστή κ.λπ.), ώστε τελικά να μπορέσει να λύσει το δοσμένο πρόβλημα. </li>
			<li><span class="bold-italics">Αντικειμενοστραφής προγραμματισμός (Object-oriented Programming).</span> Κύριο συστατικό αυτού του μοντέλου είναι οι κλάσεις αντικειμένων που περιγράφονται στο Κεφάλαιο 11. Κάθε οντότητα μέσα σε ένα πρόγραμμα παίρνει τη μορφή ενός <i>αντικειμένου (object)</i>, που ενσωματώνει μέσα του κώδικα και δεδομένα. Έτσι, κάθε αντικείμενο διαθέτει όχι μόνο γνωρίσματα και ιδιότητες, αλλά και κώδικα που προσδιορίζει τη συμπεριφορά του και χειρίζεται τα δεδομένα του.</li>
			<li><span class="bold-italics">Συναρτησιακός προγραμματισμός (Functional Programming)</span><b>.</b> Αν και η Python δεν ακολουθεί πιστά αυτό το μοντέλο (όπως άλλες γλώσσες σαν τη γλώσσα Haskell), ωστόσο διαθέτει αρκετά από τα χαρακτηριστικά του. Ένα από αυτά είναι η δυνατότητα μιας εντολής να παίρνει τη μορφή μαθηματικής συνάρτησης, όπου το αποτέλεσμα παράγεται μέσα από δηλώσεις και εκφράσεις, και όχι από εντολές ή οδηγίες. Τέτοια χαρακτηριστικά ενσωματώνουν οι λειτουργίες των ανώνυμων συναρτήσεων και του «κλεισίματος» που περιγράφονται στο Κεφάλαιο 10 με τις συναρτήσεις.</li>
		</ol></section>
		<section role="section" id="ch3se4">
			<h1><span role="label">1.4</span> Σε ποιους απευθύνεται το βιβλίο</h1>
			<p class="no-indent">Η γλώσσα προγραμματισμού Python αποτελεί, τη στιγμή που γράφεται το βιβλίο, μια από τις πρώτες επιλογές ως γλώσσα εισαγωγής στον προγραμματισμό. Το βιβλίο δεν απευθύνεται μόνο σε φοιτητές τμημάτων σχετικών με την πληροφορική, που έχουν ήδη κάποια εμπειρία με μια ή περισσότερες γλώσσες προγραμματισμού υψηλού επιπέδου, όπως η C/C++, η Fortran, η Java κ.ά., ή έχουν ασχοληθεί με περιβάλλοντα επιστημονικών υπολογισμών, όπως το Matlab, το Octave, το Sage, το Maple ή το Mathematica· απευθύνεται και σε όσους θέλουν να χρησιμοποιήσουν την Python ως εργαλείο για την πραγματοποίηση έρευνας και την επεξεργασία δεδομένων με σκοπό την κατασκευή προγραμμάτων σε τομείς όπως η <i>επιστήμη δεδομένων (Data Science)</i>, η <i>στατιστική</i> (όπου η Python ανταγωνίζεται, επί ίσοις όροις, και με μεγάλη επιτυχία τη γλώσσα R), σε θέματα <i>τεχνητής νοημοσύνης (Artificial Intelligence)</i>, όπως η <i>μηχανική μάθηση (Machine Learning)</i>, τα <i>νευρωνικά δίκτυα (Neural Networks)</i>, στην οικονομία, στα μαθηματικά, σε τομείς των φυσικών επιστημών και ειδικότερα στη φυσική και τις βιοεπιστήμες και, γενικά, σε κάθε χώρο που απαιτείται η επεξεργασία δεδομένων μεγάλου όγκου για την πραγματοποίηση υπολογισμών. </p>
			<p>Σκοπός μας ήταν να καταστήσουμε τα στοιχεία της Python κατανοητά και προσιτά και σε μαθητές Γυμνασίου και Λυκείου, που θέλουν να ξεκινήσουν τη γνωριμία τους με θέματα προγραμματισμού υπολογιστών. Στη δομή του βιβλίου ελήφθη υπόψη το γεγονός ότι οι μαθητές που μαθαίνουν προγραμματισμό στα σχολικά εργαστήρια πληροφορικής έχουν ήδη μια πρώτη επαφή με περιβάλλοντα όπως η Logo ή η Pascal (παλιότερα), η Visual Basic σε κάποιες περιπτώσεις, κυρίως το Scratch και το AppInventor, αλλά και σε αρκετές περιπτώσεις η C (είτε ως εργαλείο για την ενασχόληση σε θέματα IoT – Internet of Things, είτε ως μια γλώσσα για τη συμμετοχή στον Πανελλήνιο Διαγωνισμό Πληροφορικής), ή ακόμα, και η Java (ειδικά στα σχολεία που χρησιμοποιούν το Greenfoot ή το Alice και είναι μέλη του Oracle Academy). </p>
			<p>Ένα μεγάλο άλλωστε ποσοστό της γενιάς επιστημόνων και αποφοίτων μέσης εκπαίδευσης, της τελευταίας 20ετίας, έχουν κοινό χαρακτηριστικό την εξοικείωσή τους με βασικές έννοιες του προγραμματισμού μέσα από την εκμάθηση της ψευδογλώσσας για τη δημιουργία <i>αλγορίθμων (algorithms)</i>. Εξάλλου, η Python ήδη αποτελεί τη γλώσσα στην οποία εξετάζονται σε πανελλαδικό επίπεδο οι υποψήφιοι για εισαγωγή στην τριτοβάθμια εκπαίδευση μαθητές των επαγγελματικών λυκείων, όπου μαθαίνουν τα βασικά χαρακτηριστικά και τις δομές της. </p>
			<p>Φροντίσαμε λοιπόν η εισαγωγή σε έννοιες και δομές, που χρησιμοποιούνται σε ήδη γνώριμα περιβάλλοντα προγραμματισμού τα οποία αναφέρθηκαν πιο πριν, να γίνει με τρόπο κατανοητό, ώστε να φανεί η διαφορά τους με την Python, και οικείο για τους περισσότερους αναγνώστες. Για αυτό τον λόγο, σε ορισμένα σημεία του βιβλίου γίνεται αναφορά στις τεχνικές που χρησιμοποιούνται σε άλλες διαδικαστικές γλώσσες. Για παράδειγμα, η εύρεση του αθροίσματος των στοιχείων ενός πίνακα με τη χρήση αθροιστή (περισσότερα για αυτό το θέμα βλ. Κεφάλαιο 4 και Κεφάλαιο 5), ενώ αποτελεί βασική λειτουργία των πινάκων και είναι από τα βασικά που μαθαίνουμε στους μαθητές και φοιτητές μας για την ψευδογλώσσα και τη C, είναι κάτι που σπάνια θα χρησιμοποιήσουμε στην Python, δουλεύοντας με μια (αντίστοιχη με τους πίνακες) δομή όπως η λίστα.</p>
			<p>Το βιβλίο θα καλύψει τις ανάγκες τόσο του αρχάριου όσο και του προχωρημένου σε θέματα προγραμματισμού χρήστη. Δεν απαιτούνται, ωστόσο, προηγούμενες γνώσεις σε κάποια άλλη γλώσσα προγραμματισμού. Για κάθε βασικό αντικείμενο της Python, ξεκινά η περιγραφή του από τα βασικά και απολύτως απαραίτητα και προχωρεί σε εμβάθυνση στις τεχνικές και στις λειτουργίες του. Σχεδόν σε κάθε κεφάλαιο περιγράφεται μια από τις ενσωματωμένες βιβλιοθήκες της γλώσσας, όπως τα <span class="courier-code">frozensets</span>, η <span class="courier-code">math</span>, η <span class="courier-code">random</span>, αλλά και άλλες, λιγότερο γνωστές, όπως η <span class="courier-code">pickle</span>, η <span class="courier-code">array</span>, η <span class="courier-code">fraction</span> κ.ά.</p>
			<p>Το βιβλίο που κρατάς στα χέρια σου ελπίζουμε ότι θα σε βοηθήσει στη γνωριμία με τον ιδιαίτερο χαρακτήρα και τα γνωρίσματα της Python, είτε αυτή αποτελεί την πρώτη είτε την επόμενη γλώσσα προγραμματισμού που θα μάθεις.</p>
		</section>
		<section role="section" id="ch3se5">
			<h1><span role="label">1.5</span> Περίληψη κεφαλαίων</h1>
			<p class="no-indent">Το βιβλίο περιλαμβάνει τα επόμενα κεφάλαια. Δίνεται μια σύντομη περιγραφή για το καθένα. Η σειρά ανάγνωσης δεν είναι απαραίτητο να είναι γραμμική. </p>
			<ol><li><b>Εισαγωγή.</b> Δίνονται κάποιες βασικές πληροφορίες για την Python και για τα χαρακτηριστικά της, κάποια ιστορικά στοιχεία και λεπτομέρειες σχετικά με διάφορες σημάνσεις που υπάρχουν στο βιβλίο. Περιγράφονται οι βασικοί τρόποι εργασίας με τον διερμηνευτή και η διαδικασία εγκατάστασης της γλώσσας.</li>
			<li><b>Μεταβλητές και αριθμοί.</b> Αναφέρονται πληροφορίες για τους τύπους αριθμών που υποστηρίζει η Python, καθώς επίσης και κάποια βασικά στοιχεία για τη διαχείριση μεταβλητών. Γίνεται αναφορά στη διαχείριση πακέτων βιβλιοθηκών και τη χρησιμοποίησή τους μέσα σε κάποιο πρόγραμμα. Παρουσιάζονται επίσης κάποιες ενσωματωμένες βιβλιοθήκες διαχείρισης αριθμών.</li>
			<li><b>Δομές επιλογής.</b> Γίνεται αναλυτική περιγραφή των δομών επιλογής της Python και των απαραίτητων εργαλείων για τη δημιουργία λογικών ελέγχων και την κατασκευή λογικών συνθηκών και εκφράσεων. Παρουσιάζονται οι λογικοί και σχεσιακοί τελεστές, καθώς και οι δυνατότητες της γλώσσας για τη διαχείριση σφαλμάτων κατά την εκτέλεση του προγράμματος.</li>
			<li><b>Δομές επανάληψης.</b> Παρουσιάζονται οι επαναληπτικές δομές της Python και οι τρόποι που μπορούν αυτές να χρησιμοποιηθούν στην πράξη. Περιγράφεται η λειτουργία και η ενσωμάτωση ένθετων δομών.</li>
			<li><b>Λίστες.</b> Περιγράφεται μια από τις δομές ακολουθίας που διαθέτει η Python, η δομή της λίστας. Μαζί με τις σχετικές μεθόδους διαχείρισης των δεδομένων και των ιδιοτήτων μιας λίστας, δίνονται παραδείγματα για τη δημιουργία και τη χρήση της.</li>
			<li><b>Συμβολοσειρές.</b> Παρουσιάζονται τα χαρακτηριστικά των συμβολοσειρών και οι μέθοδοι χειρισμού τους, μαζί με τις διαφορετικές μορφές που μπορεί να έχουν μέσα στον κώδικα. Δίνονται πληροφορίες σχετικά με τους τρόπους κωδικοποίησης χαρακτήρων και τις μεθόδους μετατροπής κειμένου από μια μορφή σε μια άλλη.</li>
			<li><b>Πλειάδες.</b> Δίνονται τα χαρακτηριστικά, οι ιδιότητες και οι λειτουργίες της πλειάδας. Γίνεται εισαγωγή στην έννοια της γεννήτριας τιμών και πώς αυτή μπορεί να χρησιμοποιηθεί, στην πράξη, μαζί με άλλες δομές, καθώς και στη λειτουργία του πακεταρίσματος τιμών. </li>
			<li><b>Σύνολα.</b> Περιγράφεται η δομή του συνόλου, η σύνδεσή του με τη θεωρία συνόλων, οι ιδιότητές του και οι μέθοδοι χειρισμού του περιεχομένου του. Μέσα από παραδείγματα, δίνεται έμφαση στην πρακτική αξιοποίηση των ιδιοτήτων των πράξεων συνόλων, για την επίλυση σύνθετων προβλημάτων.</li>
			<li><b>Λεξικά.</b> Γίνεται περιγραφή των χαρακτηριστικών του λεξικού, της μορφής που μπορεί να έχει αυτό και των λειτουργιών του. Δίνονται παραδείγματα για την εισαγωγή, τη διαγραφή ή την ενημέρωση των στοιχείων που περιέχει, καθώς επίσης και για τους τρόπους που μπορεί να χρησιμοποιηθεί στην πράξη.</li>
			<li><b>Συναρτήσεις &amp; βιβλιοθήκες.</b> Το Κεφάλαιο 10 περιλαμβάνει την περιγραφή των τρόπων κατασκευής συναρτήσεων, γεννητριών, συναρτήσεων lambda, βιβλιοθηκών και πακέτων. Παρουσιάζονται οι διαφορετικές μορφές συναρτήσεων που υποστηρίζει η Python, καθώς και οι σύνθετες λειτουργίες όπως το «κλείσιμο» και η διακόσμηση.</li>
			<li><b>Αντικείμενα.</b> Το κεφάλαιο 11 αφορά τον αντικειμενοστραφή τρόπο λειτουργίας της Python, τη δημιουργία σύνθετων δομών, όπως οι κλάσεις αντικειμένων, καθώς και τις ειδικές λειτουργίες που μπορούν αυτές να ενσωματώνουν. Μέσα από παραδείγματα, αναλύονται όλα τα χαρακτηριστικά, οι ιδιότητες και τα ιδιαίτερα γνωρίσματα του προσανατολισμένου στα αντικείμενα προγραμματιστικού μοντέλου που υλοποιείται στην Python.</li>
			<li><b>Αρχεία.</b> Στο τελευταίο κεφάλαιο του βιβλίου γίνεται αναφορά και περιγραφή των βασικών τύπων αρχείων που διαχειρίζεται η Python, των αρχείων κειμένου και των δυαδικών αρχείων. Παρουσιάζονται, μέσα από μικρές εφαρμογές και παραδείγματα, οι τρόποι επεξεργασίας του περιεχομένου αρχείων και διαχείρισής του από τις δομές της γλώσσας. Γίνεται, τέλος, περιγραφή δυο βιβλιοθηκών διαχείρισης περιεχομένου συχνά χρησιμοποιούμενων αρχείων.</li>
			<li><b>Παράρτημα Α.</b> Μαθηματικοί τύποι. Αναφέρονται χρήσιμοι βασικοί μαθηματικοί τύποι που χρησιμοποιούνται συχνά.</li>
			<li><b>Παράρτημα Β. </b>Πίνακες χαρακτήρων. Δίνονται οι πίνακες των χαρακτήρων ASCII και των κωδίκων Unicode για τα ελληνικά. Στο τέλος παρατίθεται και ο αντίστοιχος κώδικας σε Python, για τη δημιουργία αυτών των πινάκων.</li>
			<li><b>Παράρτημα Γ.</b> Μια σελίδα <i>π</i>. Παρατίθενται μερικά (τα πρώτα 3,141) από τα ψηφία του αριθμού <i>π</i>, καθώς και ο αντίστοιχος κώδικας σε Python που τα δημιουργεί.</li>
			<li><b>Βιβλιογραφία.</b> Πηγές και αξιόλογα βιβλία για την εκμάθηση της γλώσσας Python. Αφορούν διάφορα θέματα της Python.</li>
			<li><b>Γλωσσάρι.</b> Αντιστοιχίες μεταφρασμένων όρων (από τα αγγλικά στα ελληνικά) που χρησιμοποιούνται μέσα στο βιβλίο. Περιέχει επίσης τον ορισμό και την ερμηνεία κάποιων βασικών εννοιών σχετικών με λειτουργίες της Python.</li>
			<li><b>Ευρετήριο όρων.</b> Δίνονται βασικοί όροι και στοιχεία που χρησιμοποιούνται στο βιβλίο, μαζί με τις αντίστοιχες παραπομπές τους στο κείμενο.</li>
		</ol></section>
		<section role="section" id="ch3se6">
			<h1><span role="label">1.6</span> Τύποι δεδομένων</h1>
			<p class="no-indent">Στο βιβλίο περιγράφονται οι τρόποι λειτουργίας, οι ιδιότητες και οι μέθοδοι χειρισμού των τύπων δεδομένων της Python που φαίνονται συνοπτικά και σε κατηγορίες στην Εικόνα 1-1.</p>
			<figure class="image" id="img1" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 1-1 | Βασικοί τύποι δεδομένων της Python</figcaption><img src="media/chapter_1_image_1.jpg" alt=""/></figure>
		</section>
		<section role="section" id="ch3se7">
			<h1><span role="label">1.7</span> Εγκατάσταση της Python</h1>
			<p class="no-indent">Για να μπορέσει κάποιος να φτιάξει ένα πρόγραμμα σε Python, θα πρέπει να διαθέτει στον υπολογιστή του τη γλώσσα. Αυτό μπορεί να γίνει με διάφορους τρόπους και ανάλογα με το <i>λειτουργικό σύστημα (Operating System)</i> που διαθέτει. Στις επόμενες παραγράφους περιγράφεται η <i>εγκατάσταση (installation – setup)</i> της Python σε συστήματα Windows και Linux.</p>
			<section role="subsection" id="ch3se7ss1">
				<h1><span role="label">1.7.1</span> Windows</h1>
				<p class="no-indent">Τα Windows δεν έχουν εγκατεστημένη τη γλώσσα Python. Αυτό όμως μπορεί να γίνει πολύ εύκολα και με πολλούς τρόπους. Για να εργαστεί κάποιος με την Python σε περιβάλλον Windows, μπορεί να ακολουθήσει έναν από τους δυο παρακάτω τρόπους.</p>
				<ol><li>Να εγκαταστήσει το περιβάλλον διερμηνευτή της επίσημης έκδοσης της γλώσσας<sup class="superscript CharOverride-1"><span id="footnote-079-backlink"><a href="#footnote-079">15</a></span></sup>. Αυτό του δίνει τη δυνατότητα να έχει πρόσβαση στην κονσόλα του διερμηνευτή (με το σήμα &gt;&gt;&gt;) αλλά και στο (πολύ απλό, που δεν απαιτεί πολλούς υπολογιστικούς πόρους) IDE που διαθέτει. Μπορεί να εγκατασταθεί παράλληλα και κάποιο πιο σύνθετο και με περισσότερες δυνατότητες IDE, όπως το Pycharm, που δίνει τη δυνατότητα για εγκατάσταση πακέτων βιβλιοθηκών και τη βηματική <i>εκσφαλμάτωση (debugging</i><i>)</i> των προγραμμάτων. </li>
				<li>Να εγκαταστήσει ένα ολοκληρωμένο περιβάλλον (IDE), όπως το Spyder, μέσα από το σύστημα Anaconda ή το Canopy Enthought. Αν γίνει αυτό, δεν χρειάζεται να εγκατασταθεί και ο διερμηνευτής της Python, αφού και τα δυο αυτά περιβάλλοντα περιλαμβάνουν τον δικό τους διερμηνευτή, με τη δική τους (IPython) κονσόλα εργασίας (σήμα προτροπής [xx]:). Επίσης, και τα δυο ενσωματώνουν έναν πολύ μεγάλο αριθμό <i>προεγκατεστημένων (preinstalled)</i> βιβλιοθηκών και διαθέτουν δικό τους σύστημα αναζήτησης και διαχείρισης βιβλιοθηκών.</li>
				</ol><section role="subsubsection" id="ch3se7ss1sss1">
					<h1>1.7.1.1 Εγκατάσταση της επίσημης (official) έκδοσης της Python</h1>
					<p class="no-indent">Η γλώσσα είναι διαθέσιμη από τον επίσημο ιστότοπό<sup class="superscript CharOverride-1"><span id="footnote-078-backlink"><a href="#footnote-078">16</a></span></sup> της. Μπορεί να ληφθεί ως πακέτο εγκατάστασης. Από την κεντρική σελίδα και την επιλογή Downloads (Εικόνα 1-2), επιλέγουμε το λειτουργικό σύστημα Windows και κατεβάζουμε το αρχείο εγκατάστασης.</p>
					<figure class="image" id="img2" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-2 | Εγκατάσταση της Python – 1</figcaption><img src="media/chapter_1_image_2.jpg" alt=""/></figure>
					<p class="no-indent">Μόλις ολοκληρωθεί η λήψη, με διπλό κλικ στο πρόγραμμα εγκατάστασης ξεκινά η διαδικασία εγκατάστασης της γλώσσας. Στο πρώτο παράθυρο διαλόγου που εμφανίζεται (Εικόνα 1-3) επιλέγουμε INSTALL NOW:</p>
					<figure class="image" id="img3" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-3 | Εγκατάσταση της Python – 2</figcaption><img src="media/chapter_1_image_3.jpg" alt=""/></figure>
					<p class="no-indent">Φροντίζουμε να είναι επιλεγμένο το πλαίσιο “Add Python to PATH”, ώστε ο διερμηνευτής της γλώσσας να μπορεί να εκτελεί τα προγράμματα από οποιονδήποτε φάκελο του σκληρού δίσκου. Αν δεν γίνει αυτό κατά την εγκατάσταση, στο Κεφάλαιο 10 περιγράφεται η διαδικασία που πρέπει να ακολουθηθεί.</p>
					<p>Η εγκατάσταση θα ξεκινήσει εμφανίζοντας το παράθυρο της Εικόνας 1-4.</p>
					<figure class="image" id="img4" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-4 | Εγκατάσταση της Python – 3</figcaption><img src="media/chapter_1_image_4.jpg" alt=""/></figure>
					<p class="no-indent">Μόλις τελειώσει η εγκατάσταση θα εμφανιστεί η Εικόνα 1-5. Σε αυτό το σημείο, μπορεί να γίνει επιλογή του “Disable path length limit”, ώστε να μην υπάρχει κάποιο πρόβλημα με το πλήθος των χαρακτήρων που έχει το <i>μονοπάτι (path)</i> της διαδρομής των φακέλων όπου έχει γίνει η εγκατάσταση.</p>
					<figure class="image" id="img5" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-5 | Εγκατάσταση της Python – 4</figcaption><img src="media/chapter_1_image_5.jpg" alt=""/></figure>
					<p class="no-indent">Μετά την εγκατάσταση της γλώσσας, στο μενού Έναρξη (Start menu) θα εμφανιστεί μια ομάδα εικονιδίων (Εικόνα 1-6) με όνομα “Python3…” (η αρίθμηση εξαρτάται από την έκδοση της γλώσσας που έχει εγκατασταθεί).</p>
					<figure class="image" id="img6" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-6 | Εγκατάσταση της Python – 5</figcaption><img src="media/chapter_1_image_6.jpg" alt=""/></figure>
					<p class="no-indent">Από αυτά τα εικονίδια μπορούμε να επιλέξουμε την εργασία που μας ενδιαφέρει. Από τις επιλογές που υπάρχουν, δύο είναι οι πιο σημαντικές. Η επιλογή Python 3.xx μάς επιτρέπει να ξεκινήσουμε το περιβάλλον του διερμηνευτή στην κονσόλα εντολών των Windows και να αρχίσουμε μια νέα <i>συνεδρία (</i><i>session)</i> με τον χώρο εργασίας της γλώσσας. Μόλις ξεκινήσει, θα εμφανιστεί το σήμα προτροπής του διερμηνευτή:</p>
					<p><span class="courier-code">&gt;&gt;&gt;</span></p>
					<p class="no-indent">όπου μπορούμε να δώσουμε αλληλεπιδραστικά εντολές και να βλέπουμε άμεσα τα αποτελέσματά τους. Ξεκινώντας, αρκεί να δώσουμε την παρακάτω, πρώτη, απλή εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Hello World&quot;) </span><img src="media/enter.png" class="enter"/></p>
					<p class="no-indent">που χρησιμοποιεί τη συνάρτηση <span class="courier-code">print</span>, η οποία εμφανίζει πληροφορίες στην οθόνη, και να πατήσουμε το πλήκτρο <img src="media/enter.png" class="enter"/>. Στην οθόνη του διερμηνευτή θα εμφανιστεί το αποτέλεσμα:</p>
					<p><span class="courier-code">Hello World</span></p>
					<p class="no-indent">Αυτό ήταν! Μόλις ξεκινήσαμε τον προγραμματισμό με Python! Τόσο απλά.</p>
					<p>Το συγκεκριμένο μήνυμα, που συνοδεύει συνήθως μια εντολή όπως η <span class="courier-code">print</span>, είναι παράδοση, σε κάθε βιβλίο προγραμματισμού, να είναι η πρώτη δοκιμαστική εντολή που τρέχουμε στο περιβάλλον μιας γλώσσας. Αυτό γίνεται γιατί είναι ένας εύκολος τρόπος για: </p>
					<ol><li>να γίνει δοκιμή αν έχει γίνει σωστά η εγκατάσταση της γλώσσας ή αν υπάρχουν προβλήματα.</li>
					<li>να ξεκινήσει κάποιος τη γνωριμία με τη γλώσσα, με μια απλή, εύκολη και κατανοητή εντολή.</li>
					</ol><p class="no-indent">Εκτός από το <i>αλληλεπιδραστικό περιβάλλον (interactive)</i> του διερμηνευτή, όπου καθώς δίνεται μια εντολή εμφανίζεται αμέσως το αποτέλεσμα, είναι διαθέσιμο ένα <i>ολοκληρωμένο περιβάλλον ανάπτυξης λογισμικού (IDE – Integrated Development Environment)</i>, που επιτρέπει τη συγγραφή κώδικα, για τη δημιουργία προγραμμάτων-<i>σεναρίων (scripts)</i><sup class="superscript CharOverride-1"><span id="footnote-077-backlink"><a href="#footnote-077">17</a></span></sup>. Η εγκατάσταση της γλώσσας παρέχει το περιβάλλον που ονομάζεται <i>IDLE (Integrated Development and Learning Environment)</i>, το οποίο μάλλον αποτελεί, και αυτό, μια τιμητική αναφορά στους Monty Python και σε ένα από τα μέλη τους, τον ηθοποιό Eric Idle.</p>
					<p>Για να ξεκινήσει το περιβάλλον αυτό, θα πρέπει από την ομάδα εντολών της Εικόνας 1-6 να επιλέξουμε IDLE (Python 3.xx). Στην Εικόνα 1-7 φαίνεται το περιβάλλον του IDLE.</p>
					<figure class="image" id="img7" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-7 | Περιβάλλον idle – 1</figcaption><img src="media/chapter_1_image_7.jpg" alt=""/></figure>
					<p class="no-indent">Το μόνο διαφορετικό σε σχέση με την κονσόλα του διερμηνευτή είναι ότι εδώ υπάρχουν ένα γραφικό περιβάλλον και κάποιες επιλογές στα μενού του παραθύρου. Η εργασία και εδώ γίνεται με τον ίδιο τρόπο. Στο σήμα προτροπής της γλώσσας:</p>
					<p><span class="courier-code">&gt;&gt;&gt;</span></p>
					<p class="no-indent">δίνονται και εκτελούνται εντολές. Στην Εικόνα 1-8 έχει δοθεί μια απλή εντολή και το αποτέλεσμά της φαίνεται ακριβώς από κάτω.</p>
					<figure class="image" id="img8" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-8 | Περιβάλλον idle – 2</figcaption><img src="media/chapter_1_image_8.jpg" alt=""/></figure>
					<p class="no-indent">Για τη δημιουργία σεναρίων που αποτελούνται από περισσότερες από μια εντολές, το περιβάλλον προσφέρει έναν (απλό σχετικά) συντάκτη κώδικα. Η εκκίνησή του γίνεται όπως στην Εικόνα 1-9. Από το μενού File επιλέγουμε New File:</p>
					<figure class="image" id="img9" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-9 | Περιβάλλον idle – 3</figcaption><img src="media/chapter_1_image_9.jpg" alt=""/></figure>
					<p class="no-indent">οπότε εμφανίζεται το περιβάλλον του συντάκτη που φαίνεται στην Εικόνα 1-10.</p>
					<figure class="image" id="img10" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-10 | Περιβάλλον idle – 4</figcaption><img src="media/chapter_1_image_10.jpg" alt=""/></figure>
					<p class="no-indent">Σ’ αυτό τον χώρο, θα πρέπει να γραφτούν εντολές της Python, η μια κάτω από την άλλη. Πατώντας <span class="keycaps">∞</span> ή επιλέγοντας Run Module από το μενού Run, θα ζητηθεί να γίνει αποθήκευση του αρχείου, δίνοντας ένα όνομα με επέκταση <span class="courier-code">.py</span>. Αυτό το αρχείο αποτελεί το αρχείο πηγαίου κώδικα. Μόλις γίνει η αποθήκευση, ξεκινά η εκτέλεση του κώδικα στο περιβάλλον του διερμηνευτή. Αυτό φαίνεται στην Εικόνα 1-11.</p>
					<figure class="image" id="img11" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-11 | Περιβάλλον idle – 5</figcaption><img src="media/chapter_1_image_11.jpg" alt=""/></figure>
				</section>
				<section role="subsubsection" id="ch3se7ss1sss2">
					<h1>1.7.1.2 Εγκατάσταση ενός IDE – Anaconda – Spyder</h1>
					<p class="no-indent">Υπάρχουν αρκετά <i>περιβάλλοντα ανάπτυξης προγραμμάτων (IDEs)</i> που μπορούν να χρησιμοποιηθούν με την Python. Τα πιο σημαντικά είναι: </p>
					<ul><li>PyCharm</li>
					<li>Spyder</li>
					<li>Sublime Text 3</li>
					<li>Atom</li>
					<li>Thonny</li>
					<li>Visual Studio Code (μέσα από το Visual Studio της Microsoft)</li>
					<li>Eclipse&#160;με την επέκταση&#160;PyDev</li>
					</ul><p class="no-indent">Σε αυτή την ενότητα περιγράφεται η εγκατάσταση του Spyder (που αποτελεί την προσωπική μας προτίμηση για τη δημιουργία προγραμμάτων και τη διδασκαλία της γλώσσας) για Windows, που είναι διαθέσιμο μέσα από το περιβάλλον του συστήματος Anaconda. Το Anaconda περιλαμβάνει, εκτός από το Spyder για την Python, μια σειρά από εργαλεία απαραίτητα για την επεξεργασία <i>Μεγάλων </i><i>Δεδομένων (Big Data)</i>. Η διαδικασία ξεκινά με την επίσκεψη στην ιστοσελίδα της εταιρείας<sup class="superscript CharOverride-1"><span id="footnote-076-backlink"><a href="#footnote-076">18</a></span></sup> και το κατέβασμα της έκδοσης για Windows (32- ή 64-bit). Αυτό φαίνεται στην Εικόνα 1-12.</p>
					<figure class="image" id="img12" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-12 | Εγκατάσταση anaconda spyder – 1</figcaption><img src="media/chapter_1_image_12.jpg" alt=""/></figure>
					<p class="no-indent">Το μέγεθος του αρχείου είναι αρκετά πιο μεγάλο από αυτό του IDLE, αφού το πακέτο Anaconda περιλαμβάνει –εκτός από το ίδιο το περιβάλλον του Anaconda, του Spyder και των υπόλοιπων εργαλείων– και αρκετές βιβλιοθήκες της Python. Μόλις τελειώσει το κατέβασμα του προγράμματος, με διπλό κλικ μπορεί να ξεκινήσει η εγκατάστασή του (Εικόνα 1-13).</p>
					<figure class="image" id="img13" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-13 | Εγκατάσταση anaconda spyder – 2</figcaption><img src="media/chapter_1_image_13.jpg" alt=""/></figure>
					<p class="no-indent">Πατώντας Next, εμφανίζεται το παρακάτω παράθυρο διαλόγου (Εικόνα 1-14):</p>
					<figure class="image" id="img14" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-14 | Εγκατάσταση anaconda spyder – 3</figcaption><img src="media/chapter_1_image_14.jpg" alt=""/></figure>
					<p class="no-indent">όπου αρκεί να πατήσουμε (αφού διαβάσουμε τους Όρους χρήσης του προγράμματος) το κουμπί I Agree. Εμφανίζεται το παρακάτω παράθυρο (Εικόνα 1-15).</p>
					<figure class="image" id="img15" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-15 | Εγκατάσταση anaconda spyder – 4</figcaption><img src="media/chapter_1_image_15.jpg" alt=""/></figure>
					<p class="no-indent">Αν η εργασία γίνεται σε κάποιον υπολογιστή με πολλούς χρήστες, επιλέγουμε All Users, διαφορετικά επιλέγουμε Just Me, που είναι και το προτεινόμενο. Ακολουθεί το παράθυρο επιλογής της διαδρομής εγκατάστασης του πακέτου. Συνήθως το προτεινόμενο είναι αρκετό (Εικόνα 1-16). </p>
					<figure class="image" id="img16" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-16 | Εγκατάσταση anaconda spyder – 5</figcaption><img src="media/chapter_1_image_16.jpg" alt=""/></figure>
					<p class="no-indent">Μετά την επιλογή, πατάμε πάλι Next και πάμε στην οθόνη της Εικόνας 1-17.</p>
					<figure class="image" id="img17" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-17 | Εγκατάσταση anaconda spyder – 6</figcaption><img src="media/chapter_1_image_17.jpg" alt=""/></figure>
					<p class="no-indent">Σ’ αυτό το παράθυρο δίνονται δυο επιλογές. Η μια έχει να κάνει με τη δήλωση του διερμηνευτή του Anaconda στη μεταβλητή περιβάλλοντος PATH. Είναι κάτι που δεν χρειάζεται να γίνει. Η άλλη επιλογή αφορά τη δήλωση του διερμηνευτή ως του βασικού διερμηνευτή της Python σε κάθε IDE στα Windows. Αυτό χρειάζεται να γίνει μόνο αν έχουν εγκατασταθεί και άλλοι διερμηνευτές (όπως του IDLE) στα Windows. Πατώντας Install ξεκινά η εγκατάσταση του πακέτου (Εικόνα 1-18).</p>
					<figure class="image" id="img18" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-18 | Εγκατάσταση anaconda spyder – 7</figcaption><img src="media/chapter_1_image_18.jpg" alt=""/></figure>
					<p class="no-indent">Μετά την εγκατάσταση του προγράμματος, είναι διαθέσιμες από το Μενού Έναρξης οι επιλογές που φαίνονται στην Εικόνα 1-19:</p>
					<figure class="image" id="img19" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-19 | Εγκατάσταση anaconda spyder – 8</figcaption><img src="media/chapter_1_image_19.jpg" alt=""/></figure>
					<p class="no-indent">απ’ όπου μπορεί να γίνει απευθείας εκκίνηση του περιβάλλοντος Spyder (και όχι αναγκαστικά μέσα από το περιβάλλον του Anaconda Navigator που φαίνεται λίγο πιο πάνω). </p>
					<figure class="image" id="img20" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-20 | Το ide spyder – 1</figcaption><img src="media/chapter_1_image_20.jpg" alt=""/></figure>
					<p class="no-indent">Μόλις γίνει εκκίνηση του Spyder (Εικόνα 1-20), εμφανίζεται το περιβάλλον του προγράμματος (Εικόνα 1-21).</p>
					<figure class="image" id="img21" role="graphic">
						<figcaption>ΕΙΚΟΝΑ 1-21 | Το ide spyder – 2</figcaption><img src="media/chapter_1_image_21.jpg" alt=""/></figure>
					<p class="no-indent">Το παράθυρο του Spyder αποτελείται από τρία βασικά τμήματα. Στα αριστερά (τμήμα 1) βρίσκεται ο συντάκτης κώδικα, όπου μπορεί να γίνει η κατασκευή σεναρίων-προγραμμάτων. Η εκτέλεσή τους μπορεί να γίνει από την επιλογή Run του μενού Run ή πατώντας το κουμπί <span class="keycaps">∞</span>. Τα αποτελέσματα της εκτέλεσης θα εμφανίζονται στην κονσόλα IPython (τμήμα 2). Σ’ αυτήν μπορεί να δίνονται και απευθείας εντολές, αλληλεπιδραστικά, ώστε να εμφανίζονται εκεί, άμεσα, τα αποτελέσματα. Το τμήμα 3 περιλαμβάνει κάποιες ακόμη επιλογές του περιβάλλοντος, όπως η εμφάνιση των τιμών των μεταβλητών που χρησιμοποιούνται στα προγράμματα ή στην κονσόλα. Οι Λίστες Κώδικα του βιβλίου έχουν δοκιμαστεί, κατά βάση, στο περιβάλλον του Spyder (αλλά και του IDLE). </p>
				</section>
			</section>
			<section role="subsection" id="ch3se7ss2">
				<h1><span role="label">1.7.2</span> Linux</h1>
				<p class="no-indent">Το πιο πιθανό στο Linux είναι ότι η Python θα είναι ήδη εγκατεστημένη σ’ αυτό. Συνήθως, υπάρχει η έκδοση 2.x και σε αρκετές περιπτώσεις, ταυτόχρονα, και η έκδοση 3.x. Η πρώτη είναι διαθέσιμη από το <i>τερματικό (terminal)</i> του Linux (οι παρακάτω εικόνες είναι από τη διανομή Debian Jessie για το Raspberry Pi), δίνοντας την εντολή:</p>
				<p><span class="courier-code">$python</span></p>
				<p class="no-indent">με την οποία ξεκινά η κονσόλα της γλώσσας (Εικόνα 1-22). </p>
				<figure class="image" id="img22" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-22 | Ο διερμηνευτής της Python σε περιβάλλον Linux – 1</figcaption><img src="media/chapter_1_image_22.jpg" alt=""/></figure>
				<p class="no-indent">Αντίστοιχα, η έκδοση 3.x (Εικόνα 1-23) είναι διαθέσιμη με την εντολή:</p>
				<p><span class="courier-code">$python3</span></p>
				<figure class="image" id="img23" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-23 | Ο διερμηνευτής της Python σε περιβάλλον Linux – 2</figcaption><img src="media/chapter_1_image_23.jpg" alt=""/></figure>
				<p class="no-indent">Για να εμφανιστεί ποια ακριβώς έκδοση της Python είναι εγκατεστημένη (Εικόνα 1-24), αρκεί να δοθεί στο τερματικό η εντολή: </p>
				<p><span class="courier-code">$python --version</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">$python2 --version</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">$python3 --version</span></p>
				<figure class="image" id="img24" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-24 | Ο διερμηνευτής της Python σε περιβάλλον Linux – 3</figcaption><img src="media/chapter_1_image_24.jpg" alt=""/></figure>
				<p class="no-indent">Για την εγκατάσταση συγκεκριμένης έκδοσης της Python, μπορεί να γίνει χρήση της εντολής διαχείρισης πακέτων <span class="courier-code">apt</span> (σε διανομές Ubuntu, όπως το Elementary OS που χρησιμοποιούμε στη συνέχεια). Δίνοντας την παρακάτω εντολή, γίνεται εγκατάσταση της έκδοσης 3.7.3, της πλέον πρόσφατης τη στιγμή που γραφόταν το βιβλίο:</p>
				<p><span class="courier-code">$sudo apt-get install python3.7</span></p>
				<p class="no-indent">και η εκτέλεσή της γίνεται με την εντολή: </p>
				<p><span class="courier-code">$python3.7</span></p>
				<p class="no-indent">Βέβαια, αυτή δεν είναι η καλύτερη πρακτική, γιατί στο σύστημα θα υπάρχουν πολλές και διαφορετικές εκδόσεις της γλώσσας. Αυτό αντιμετωπίζεται με τη χρήση ενός <i>εικονικού περιβάλλοντος (virtual environment)</i> όπως το Virtualenv<sup class="superscript CharOverride-1"><span id="footnote-075-backlink"><a href="#footnote-075">19</a></span></sup>, η περιγραφή του οποίου ξεφεύγει από τα πλαίσια του βιβλίου.</p>
				<p>Για την εγκατάσταση ενός ολοκληρωμένου γραφικού περιβάλλοντος εργασίας με την Python, μπορεί να χρησιμοποιηθεί τόσο το τερματικό όσο και το σύστημα</p>
				<figure class="image" id="img25" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-25 | Ide σε Linux – 1</figcaption><img src="media/chapter_1_image_25.jpg" alt=""/></figure>
				<p class="no-indent">διαχείρισης προγραμμάτων της κάθε διανομής Linux. Για το Elementary OS, μπορεί να γίνει από το <i>Κέντρο Εφαρμογών (AppCenter)</i>, όπως φαίνεται από την Εικόνα 1-25.</p>
				<p class="no-indent">Από το τερματικό μπορεί να δοθεί η εντολή:</p>
				<p><span class="courier-code">$sudo apt-get install spyder3</span></p>
				<p class="no-indent">Μετά την εγκατάσταση, το πρόγραμμα θα υπάρχει στο μενού με τις υπόλοιπες εφαρμογές. Μόλις ξεκινήσει η εκτέλεσή του, θα εμφανιστεί το περιβάλλον του στην οθόνη (Εικόνα 1-26).</p>
				<figure class="image" id="img26" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-26 | Ide σε Linux – 2</figcaption><img src="media/chapter_1_image_26.jpg" alt=""/></figure>
				<p class="no-indent">Ένα ακόμη περιβάλλον προγραμματισμού, που είναι ιδιαίτερα χρήσιμο σε υπολογιστές με περιορισμένους πόρους, είναι το Thonny. Η εγκατάστασή του γίνεται με παρόμοιο τρόπο με το Spyder. Στην Εικόνα 1-27 φαίνεται η βασική (και μινιμαλιστική) οθόνη του προγράμματος.</p>
				<figure class="image" id="img27" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-27 | Ide σε Linux – 3</figcaption><img src="media/chapter_1_image_27.jpg" alt=""/></figure>
				<p class="no-indent">Στο επάνω τμήμα είναι ο συντάκτης, όπου γράφεται ο κώδικας, ενώ στο κάτω τμήμα βρίσκεται ο διερμηνευτής της Python. Εκεί εμφανίζονται τα αποτελέσματα από την εκτέλεση του προγράμματος ή δίνονται, αλληλεπιδραστικά με τον διερμηνευτή, εντολές.</p>
				<p>Η διαχείριση βιβλιοθηκών της γλώσσας γίνεται εύκολα με το πακέτο <span class="courier-code">pip</span> (που είναι διαθέσιμο για κάθε λειτουργικό σύστημα). Αν δεν είναι εγκατεστημένο, μπορεί να εγκατασταθεί (σε Linux) με την εντολή:</p>
				<p><span class="courier-code">$sudo apt-get install python</span><span class="courier-code">-pip</span></p>
				<p class="no-indent">και είναι διαθέσιμο με εντολές όπως: </p>
				<p><span class="courier-code">$pip install numpy </span></p>
				<p class="no-indent">που εγκαθιστά το πακέτο <span class="courier-code">NumPy</span> για την έκδοση 2.x, ή αντίστοιχα:</p>
				<p><span class="courier-code">$pip3 install numpy </span></p>
				<p class="no-indent">για την έκδοση 3.x.</p>
				<p>Σε άλλες διανομές Linux, όπως OpenSuse, Fedora κ.λπ., που η διαχείριση εφαρμογών υλοποιείται με άλλα εργαλεία, μπορεί να γίνει χρήση του Διαχειριστή Εφαρμογών που διαθέτει η κάθε διανομή.</p>
				<p>Για υπολογιστές Apple, αν δεν υπάρχει ήδη κάποια έκδοση της γλώσσας που να συνοδεύει το λειτουργικό OSx, μπορεί να εγκατασταθεί η Python με τη βοήθεια του διαχειριστή πακέτων Homebrew, γράφοντας στο <i>τερματικό (terminal)</i> την εντολή: </p>
				<p><span class="courier-code">$brew install python</span></p>
				<p class="no-indent">Μετά την εγκατάσταση, η εκτέλεση του περιβάλλοντος της Python γίνεται με την εντολή:</p>
				<p><span class="courier-code">$ python</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">$ python3</span></p>
				<p class="no-indent">Για περισσότερες πληροφορίες οι αναγνώστες μπορούν να ανατρέξουν στην ηλεκτρονική πηγή του βιβλίου <i>The Hitchhiker’s Guide to Python</i><sup class="superscript CharOverride-1"><span id="footnote-074-backlink"><a href="#footnote-074">20</a></span></sup>.</p>
			</section>
			<section role="subsection" id="ch3se7ss3">
				<h1><span role="label">1.7.3</span> Άλλα περιβάλλοντα</h1>
				<p class="no-indent">Εκτός από την εγκατάσταση ενός IDE ή του διερμηνευτή της γλώσσας σε έναν υπολογιστή, προκειμένου να εργαστεί κανείς με την Python, μπορεί να χρησιμοποιήσει συστήματα που είναι ελεύθερα διαθέσιμα στο διαδίκτυο. Τα πιο γνωστά online περιβάλλοντα είναι:</p>
				<ul><li><a rel="external" href="https://repl.it/languages/python3">https://repl.it/languages/python3</a></li>
				<li><a rel="external" href="https://trinket.io/python">https://trinket.io/python</a></li>
				</ul><p class="no-indent">Για τις περιπτώσεις όπου είμαστε σε κίνηση και θέλουμε να δοκιμάσουμε λίγο κώδικα, πριν ξεκινήσουμε την εξέτασή μας στο μάθημα «Προγραμματισμός με Python», είναι διαθέσιμες μερικές αξιόλογες εφαρμογές για «έξυπνες» κινητές συσκευές (όπως tablet και smartphones), που «τρέχουν» σε Android ή iOS. Για iOS είναι οι εφαρμογές:</p>
				<ul><li>Pythonista 3</li>
				<li>Python Box</li>
				<li>Kodex</li>
				</ul><p class="no-indent">ενώ για Android είναι οι εφαρμογές:</p>
				<ul><li>Pydroid 3</li>
				<li>QPython 3</li>
				</ul><p class="no-indent">Το στιγμιότυπο οθόνης στην Εικόνα 1-28 είναι από την εφαρμογή Pydroid 3.</p>
				<figure class="image" id="img28" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 1-28 | Προγραμματίζοντας σε κινητές συσκευές</figcaption><img src="media/chapter_1_image_28.jpg" alt=""/></figure>
			</section>
		</section>
		<section role="section" id="ch3se8">
			<h1><span role="label">1.8</span> Η φιλοσοφία της Python</h1>
			<p class="no-indent">Η λογική που (θα έπρεπε τουλάχιστον να) ακολουθείται και να τηρείται σε ένα πρόγραμμα γραμμένο σε Python περιγράφεται από μια σειρά σύντομων αποφθεγμάτων του Tim Peters, που εμφανίζει ο διερμηνευτής με την εντολή:</p>
			<p><span class="courier-code">&#9;&gt;&gt;&gt; import this</span></p>
			<p><span class="courier-code">The Zen of Python, by Tim Peters</span></p>
			<p><span class="courier-code">Beautiful is better than ugly.</span></p>
			<p><span class="courier-code">Explicit is better than implicit.</span></p>
			<p><span class="courier-code">Simple is better than complex.</span></p>
			<p><span class="courier-code">Complex is better than complicated.</span></p>
			<p><span class="courier-code">Flat is better than nested.</span></p>
			<p><span class="courier-code">Sparse is better than dense.</span></p>
			<p><span class="courier-code">Readability counts.</span></p>
			<p><span class="courier-code">Special cases aren&apos;t special enough to break the rules.</span></p>
			<p><span class="courier-code">Although practicality beats purity.</span></p>
			<p><span class="courier-code">Errors should never pass silently.</span></p>
			<p><span class="courier-code">Unless explicitly silenced.</span></p>
			<p><span class="courier-code">In the face of ambiguity, refuse the temptation to guess.</span></p>
			<p><span class="courier-code">There should be one-- and preferably only one --obvious way to do it.</span></p>
			<p><span class="courier-code">Although that way may not be obvious at first unless you&apos;re Dutch.</span></p>
			<p><span class="courier-code">Now is better than never.</span></p>
			<p><span class="courier-code">Although never is often better than *right* now.</span></p>
			<p><span class="courier-code">If the implementation is hard to explain, it&apos;s a bad idea.</span></p>
			<p><span class="courier-code">If the implementation is easy to explain, it may be a good idea.</span></p>
			<p><span class="courier-code">Namespaces are one honking great idea -- let&apos;s do more of those!</span></p>
			<p class="no-indent">Αν και η ίδια η γλώσσα, σε αρκετά σημεία (όπως αυτά που προσεγγίζουν τις αρχές του συναρτησιακού μοντέλου<sup class="superscript CharOverride-1"><span id="footnote-073-backlink"><a href="#footnote-073">21</a></span></sup>), δεν τηρεί με ευλάβεια αυτούς τους «κανόνες», ωστόσο γίνεται αντιληπτός ο ιδανικός τρόπος δόμησης και λειτουργίας ενός προγράμματος σε Python.</p>
			<p>Η βιβλιοθήκη <span class="courier-code">this</span> δεν είναι η μοναδική που ενσωματώνει κάποια <i>«κρυμμένη» λειτουργία (eastern</i><i> egg)</i> της γλώσσας. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import antigravity</span></p>
			<p class="no-indent">εμφανίζει ένα νέο παράθυρο στον <i>φυλλομετρητή (browser)</i> του υπολογιστή από την ιστοσελίδα https://xkcd.com, που περιέχει μια σειρά εικόνων (Εικόνα 1-29, Εικόνα 1-30) και κόμικς σχετικών με διάφορα θέματα.</p>
			<figure class="image" id="img29" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 1-29 | Εικόνα από xkcd.com – 1</figcaption>
				<img src="media/chapter_1_image_29.jpg" alt=""/></figure>
			<figure class="image" id="img30" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 1-30 | Εικόνα από xkcd.com – 2</figcaption>
				<img src="media/chapter_1_image_30.jpg" alt=""/></figure>
		</section>
		<section role="section" id="ch3se9">
			<h1><span role="label">1.9</span> Σημάνσεις </h1>
			<p class="no-indent">Σε διάφορα σημεία, στα διάκενα των σελίδων, χρησιμοποιούνται μια σειρά από εικονίδια για την επισήμανση ειδικών τμημάτων με συγκεκριμένο περιεχόμενο. Τα εικονίδια αυτά και η ερμηνεία τους φαίνονται στον παρακάτω πίνακα.</p>
			<p><img src="media/icon-1_fmt.png" alt=""/></p>
			<p class="no-indent">Δηλώνει την εμφάνιση πηγαίου κώδικα που μπορεί να γραφτεί ως σενάριο-πρόγραμμα και να τοποθετηθεί σε κάποιο αρχείο. Η εκτέλεσή του γίνεται είτε από τη γραμμή εντολών του λειτουργικού συστήματος με την εντολή</p>
			<p><span class="courier-code">C:\&gt;python όνομα αρχείου.py</span><span class="courier-code"> </span></p>
			<p class="no-indent">είτε από τα μενού και τις επιλογές ενός IDE, όπως το Spyder.</p>
			<p><img src="media/icon-2_fmt.png" alt=""/></p>
			<p class="no-indent">Συνοδεύει μια Λίστα Κώδικα και επισημαίνει ότι η εργασία, με τις εντολές που παρατίθενται, γίνεται στη γραμμή εντολών του διερμηνευτή (&gt;&gt;&gt;), σε <i>αλληλεπιδραστική κατάσταση (interactive mode)</i>. </p>
			<p><img src="media/icon-3_fmt.png" alt=""/></p>
			<p class="no-indent">Βρίσκεται δίπλα από δοκιμαστικές εκτελέσεις κώδικα στην κονσόλα IPython. Οι επιπλέον δυνατότητες που προσφέρει στην εκτέλεση εντολών, καθώς και το γεγονός ότι ενσωματώνει αρκετές λειτουργίες που δεν είναι διαθέσιμες στο απλό περιβάλλον του διερμηνευτή (με το σήμα <span class="courier-code">&gt;&gt;&gt;</span>), έκαναν αναγκαίο να γραφτεί ο αντίστοιχος κώδικας σε ξεχωριστές ενότητες με αυτή τη σήμανση.</p>
			<p><img src="media/icon-4_fmt.png" alt=""/></p>
			<p class="no-indent">Επισημαίνει την έναρξη ενότητας με ερωτήσεις κατανόησης.</p>
			<p><img src="media/icon-5_fmt.png" alt=""/></p>
			<p class="no-indent">Ξεκινά ενότητα με ασκήσεις προς επίλυση.</p>
			<p><img src="media/icon-6_fmt.png" alt=""/></p>
			<p class="no-indent">Επισημαίνει την παρουσία επεξηγηματικών στοιχείων ή επιπλέον πληροφοριών για ένα συγκεκριμένο θέμα.</p>
			<p><img src="media/icon-7_fmt.png" alt=""/></p>
			<p class="no-indent">Παρουσιάζονται ερωτήσεις σε θέματα που αναλύθηκαν.</p>
			<p><img src="media/icon-8_fmt.png" alt=""/></p>
			<p class="no-indent">Οι κωδικοί QR-Code, που αναφέρονται σε διάφορα σημεία, αφορούν συνδέσμους οι οποίοι παραπέμπουν σε χρήσιμες πληροφορίες στο διαδίκτυο, σχετικές με το εκάστοτε θέμα. Η σάρωσή τους μπορεί να γίνει με κάποια σχετική <i>εφαρμογή</i><i> (application)</i>, την οποία ο αναγνώστης έχει τη δυνατότητα να κατεβάσει στην κινητή συσκευή του.</p>
			<p><img src="media/icon-9_fmt.png" alt=""/></p>
			<p class="no-indent">Δίνονται οι διαφορές που υπάρχουν σε ένα συγκεκριμένο θέμα στις εκδόσεις 2.x και 3.x. </p>
			<p><img src="media/icon-10_fmt.png" alt=""/></p>
			<p class="no-indent">Γίνεται επισήμανση ότι στοιχεία για ένα θέμα έχουν αντληθεί ή βασίζονται σε κάποια ιδέα από τον ιστοχώρο του StackOverflow.</p>
			<p class="no-indent">Ορισμένα από τα εικονίδια που χρησιμοποιούνται στο βιβλίο προέρχονται από τους παρακάτω ιστότοπους που διαθέτουν δωρεάν υλικό.</p>
			<p><span class="courier-code"><a rel="external" href="https://icons8.com">https://icons8.com</a></span></p>
			<p><span class="courier-code"><a rel="external" href="http://www.iconarchive.com">http://www.iconarchive.com</a></span></p>
			<p><span class="courier-code"><a rel="external" href="https://www.flaticon.com">https://www.flaticon.com</a></span></p>
			<p><span class="courier-code"><a rel="external" href="https://freeicons.io">https://freeicons.io</a></span></p>
		</section>
		<section role="section" id="ch3se10">
			<h1><span role="label">1.10</span> Συμβάσεις</h1>
			<p class="no-indent">Για κάθε στοιχείο της Python, έγινε προσπάθεια να χρησιμοποιηθούν οι αγγλικοί όροι και εκφράσεις στα ελληνικά, με τον πιο απλό, κατανοητό και συνηθισμένο για τον αναγνώστη και την αναγνώστρια τρόπο. Οι αντίστοιχοι ξενόγλωσσοι όροι δίνονται είτε με τα αρχικά τους, είτε με πλήρη μορφή μέσα σε παρενθέσεις. Στο τέλος του βιβλίου δίνεται, συγκεντρωτικά, η ερμηνεία βασικών όρων και εννοιών της Python.</p>
			<p>Σε ολόκληρο το βιβλίο, προτάσεις ή λέξεις με τις παρακάτω μορφές έχουν ιδιαίτερη σημασία και χρησιμοποιούνται για συγκεκριμένο σκοπό.</p>
			<p class="no-indent"><span class="courier-code">εντολή</span>: αυτή η μορφοποίηση χρησιμοποιείται για να δηλώσει ότι το συγκεκριμένο στοιχείο είναι κομμάτι ενός προγράμματος, είτε του πηγαίου κώδικα, είτε των αποτελεσμάτων που εμφανίζει αυτό. Κάθε στοιχείο της Python, όπως μεταβλητές, αντικείμενα, εντολές, συναρτήσεις, αλλά και <i>διαδρομές (paths)</i> φακέλων και αρχείων στον δίσκο, έχει επίσης αυτή τη μορφή. Αν είναι ολόκληρες εντολές, τότε γράφονται σε ξεχωριστή γραμμή και έχουν και μια εσοχή (ένα <img class="tab" src="media/tab.png"/>) από τα αριστερά. </p>
			<p class="no-indent">‘<b>&gt;&gt;&gt;</b>’: Τα σύμβολα αυτά χρησιμοποιούνται για να δηλώσουν ότι η εντολή που ακολουθεί πληκτρολογείται και εκτελείται στο περιβάλλον του διερμηνευτή (κονσόλα) της γλώσσας. Αυτά τα σύμβολα αποτελούν το <i>σήμα προτροπής (command prompt)</i> της κονσόλας για την εκτέλεση εντολών και, προφανώς, δεν πρέπει να πληκτρολογούνται κατά τις δοκιμές του κώδικα.</p>
			<p class="no-indent"><b>In [αριθμός]:</b> Είναι το σήμα προτροπής της κονσόλας IPython και εξυπηρετεί τον ίδιο σκοπό με τα προηγούμενα σύμβολα. Και σ’ αυτή την περίπτωση τα σύμβολα αυτά δεν πληκτρολογούνται μαζί με τις εντολές που ακολουθούν.</p>
			<p class="no-indent"><b>Out [αριθμός]:</b> Είναι το σήμα εξόδου αποτελεσμάτων της κονσόλας IPython και εξυπηρετεί τον ίδιο σκοπό με τα προηγούμενα σύμβολα. Εμφανίζεται αυτόματα κατά την έξοδο δεδομένων από εντολές όπως η <span class="courier-code">print</span> ή κατά την εκτέλεση εντολών στην κονσόλα (π.χ., αν γράψουμε <span class="courier-code">1+1</span>, θα εμφανίσει αμέσως το αποτέλεσμα).</p>
			<p class="no-indent"><span class="courier-code"><b>δεδομένα</b></span>: με έντονη γραφή δίνονται τα στοιχεία που θα πρέπει να πληκτρολογήσει κάποιος καθώς εκτελεί ένα πρόγραμμα. Είναι δοκιμαστικά δεδομένα που έχουν τεθεί από τους συγγραφείς και μπορούν να αλλάξουν από αυτόν/αυτήν που διαβάζει το βιβλίο.</p>
			<p class="no-indent"><b>Λίστα Κώδικα</b>: Αριστερά από κάθε λίστα με εντολές της Python, υπάρχει αρίθμηση και ακολουθεί μια τελεία (‘.’). Προφανώς και αυτά τα σύμβολα δεν θα πρέπει να πληκτρολογούνται κατά τη δοκιμή των προγραμμάτων ή των μεμονωμένων εντολών. Όταν υπάρχει διαδοχική και συνεχόμενη αρίθμηση των εντολών σε διαφορετικές Λίστες Κώδικα, αυτό σημαίνει πως οι εντολές αυτές αποτελούν συνέχεια, από τη μια λίστα στην άλλη, και ότι μπορεί να δοθούν όλες μαζί σε ένα πρόγραμμα (με τη σωστή, εννοείται, σειρά).</p>
			<p class="no-indent"><b>Πλαίσια κειμένου</b>: Στα γραμμοσκιασμένα πλαίσια κειμένου υπάρχουν επεξηγηματικά σχόλια για λειτουργίες που δεν αφορούν μόνο τη συγκεκριμένη ενότητα αλλά γενικότερες λειτουργίες της Python οι οποίες χρησιμοποιούνται και για άλλο σκοπό ή με άλλους τρόπους. Επίσης μπορεί να αφορούν σχολιασμό κάποιων στοιχείων που χρησιμοποιούνται μεν στο συγκεκριμένο σημείο αλλά αποτελούν τμήμα άλλων στοιχείων. Μπορεί επομένως να χρειάζεται να δοθεί η περιγραφή τους για λόγους αποσαφήνισης της συγκεκριμένης λειτουργίας.</p>
			<p class="no-indent"><b>Μηνύματα σφάλματος</b>. Τα λάθη που εμφανίζει ο διερμηνευτής κατά την εκτέλεση ενός προγράμματος περιέχουν αρκετές πληροφορίες που δεν χρειάζεται να αναφερθούν στις περιγραφές του βιβλίου. Έτσι, για λόγους συντομίας, σε όλες τις περιπτώσεις που περιγράφονται μηνύματα σφάλματος, δίνεται μόνο το είδος (το όνομα) του σφάλματος και όχι άλλες λεπτομέρειες για αυτό (αριθμός γραμμής, όνομα βιβλιοθήκης, αρχείου κ.λπ.). </p>
		</section>
		<section role="section" id="ch3se11">
			<h1><span role="label">1.11</span> Αποστολή σχολίων</h1>
			<p class="no-indent">Για κάθε σχόλιο (καλό, κακό και άσχημο), αλλά και για οποιαδήποτε λάθη ή παραλείψεις εντοπίσετε στο βιβλίο, μπορείτε να μας στείλετε σχετική υπόδειξη στις ηλεκτρονικές μας διευθύνσεις: </p>
			<p class="no-indent"><a href="mailto:samaras%40uom.edu.gr?subject=">samaras@uom.edu.gr</a></p>
			<p class="no-indent"><a href="mailto:tsiplid%40uom.edu.gr?subject=">tsiplid@uom.edu.gr</a></p>
			<p class="no-indent">Αυτό θα μας βοηθούσε να βελτιώσουμε το υλικό του βιβλίου σε επόμενες εκδόσεις.</p>
		</section>
		<section role="section" id="ch3se12">
			<h1><span role="label">1.12</span> Ηλεκτρονική διάθεση κώδικα</h1>
			<p class="no-indent">Όλες οι Λίστες Κώδικα που χρησιμοποιούνται στο βιβλίο σε παραδείγματα και εφαρμογές είναι διαθέσιμες σε ηλεκτρονική μορφή για την άμεση χρήση και δοκιμή τους στη διεύθυνση <a href="http://links.kritiki.gr/python">links.kritiki.gr/python</a>. Θα αποκτήσετε πρόσβαση με τον κωδικό που θα βρείτε στην εσωτερική πλευρά του οπισθοφύλλου, στο τέλος του βιβλίου. Τα αρχεία βρίσκονται σε μια σειρά από φακέλους, είναι οργανωμένα ανά κεφάλαιο και διατίθενται σε ένα συμπιεσμένο (rar) αρχείο. Για να μπορέσει να χρησιμοποιηθεί μια Λίστα Κώδικα, θα πρέπει να γίνει εξαγωγή (extract) του περιεχομένου του συμπιεσμένου αρχείου σε κάποιο φάκελο του υπολογιστή. Η εκτέλεσή τους μπορεί να γίνει γράφοντας στην κονσόλα του λειτουργικού συστήματος <span class="courier-code">python όνομα αρχείου.py</span></p>
			<p class="Paragraphs--Στιλ-Παραγράφων-_body"><b>ΣΗΜΕΙΩΣΗ</b>: ορισμένες από τις Λίστες Κώδικα δεν μπορούν να τρέξουν με τον πιο πάνω τρόπο γιατί περιέχουν μεμονωμένες εντολές που δίνονται απευθείας στο περιβάλλον του διερμηνευτή της γλώσσας. Αυτό φαίνεται από το σχετικό εικονίδιο που τις συνοδεύει στο βιβλίο.</p>
		</section>
	</section>
	<section role="chapter" id="ch4">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 2</span> Μεταβλητές &amp; Αριθμοί</h1>
		<section role="section" id="ch4se1">
			<h1><span role="label">2.1</span> Εισαγωγή</h1>
			<img src="media/chapter_2_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Στο κεφάλαιο αυτό</i><i> περιγράφεται ο τρόπος που γίνονται οι αριθμητικές πράξεις στο κέλυφος της Python. Εισάγεται η έννοια της μεταβλητής και αναφέρονται οι βασικοί αριθμητικοί τύποι δεδομένων της γλώσσας, ώστε να μπορούν να γίνουν απλοί, αλλά και σύνθετοι αριθμητικοί και λογικοί υπολογισμοί. Παράλληλα, περιγράφονται οι τρόποι σύγκρισης δεδομένων που θα χρειαστούν στο Κεφάλαιο 3 για τη λήψη αποφάσεων. Σημειώνονται κάποια υπολογιστικά προβλήματα που δημιουργούνται και οι περιορισμοί που υπάρχουν, καθώς και δυνατοί τρόποι αποδοτικής αντιμετώπισής τους.</i></p>
			<p><i>Περιγράφονται επίσης τρόποι εμφάνισης-παρουσίασης των δεδομένων ανάλογα με τις επιλογές του χρήστη. Δεν θα μπορούσε να λείψει  μια πρώτη εισαγωγή στη χρήση βιβλιοθηκών της Python και στην επέκταση των δυνατοτήτων της γλώσσας με την προσθήκη επιπλέον στοιχείων. Τέλος, γίνεται αναφορά σε μεθόδους χειρισμού στοιχειωδών πληροφοριών σε επίπεδο δυαδικών στοιχείων.</i></p>
		</section>
		<section role="section" id="ch4se2">
			<h1><span role="label">2.2</span> Αριθμητικές πράξεις</h1>
			<p class="no-indent">Το περιβάλλον της Python (κονσόλα ή κέλυφος) είναι διαθέσιμο με πολλούς τρόπους για την πραγματοποίηση αριθμητικών υπολογισμών. Σε περιβάλλον Windows, από τη γραμμή εντολών, με την πληκτρολόγηση της εντολής <span class="courier-code">python</span> ή <span class="courier-code">python3</span>.</p>
			<figure class="image" id="img31" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 2-1 | Το περιβάλλον της Python – Windows</figcaption><img src="media/chapter_2_image_1.jpg" alt=""/></figure>
			<p class="no-indent">Σε περιβάλλον Linux (η παρακάτω εικόνα είναι από το λειτουργικό raspbian σε Raspberry Pi 3), αφού ανοίξει μια κονσόλα-τερματικό, το περιβάλλον της Python ανοίγει με την εντολή <span class="courier-code">python3</span>. </p>
			<figure class="image" id="img32" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 2-2 | Το περιβάλλον της Python – Linux</figcaption><img src="media/chapter_2_image_2.jpg" alt=""/></figure>
			<p class="no-indent">Με την είσοδο στο περιβάλλον της Python μπορεί να γίνει ένας υπολογισμός γράφοντας τις κατάλληλες εντολές και πατώντας το πλήκτρο <img src="media/enter.png" class="enter"/>. Προκειμένου να γίνει οποιαδήποτε πράξη είναι απαραίτητη η χρήση τελεστών που περιγράφονται αμέσως μετά.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Η κονσόλα ή τερματικό της Python επιτρέπει την εκτέλεση πράξεων και την πραγματοποίηση κάθε είδους υπολογισμού. Στην πραγματικότητα όμως είναι ένα πανίσχυρο εργαλείο που χρησιμοποιείται συνήθως ή για την εκτέλεση μεμονωμένων εντολών ή, κυρίως, για την άμεση δοκιμή μικρών κομματιών κώδικα με σκοπό την υλοποίηση κάποιου αλγόριθμου (<i>prototyping</i>), πριν από την ενσωμάτωσή τους σε ένα μεγαλύτερο σενάριο-πρόγραμμα.</p>
			</aside>
		</section>
		<section role="section" id="ch4se3">
			<h1><span role="label">2.3</span> Κατηγορίες τελεστών</h1>
			<p class="no-indent">Κάθε γλώσσα έχει ειδικά σύμβολα και λέξεις για την πραγματοποίηση υπολογισμών κάθε είδους. Αυτά τα σύμβολα ή λέξεις ονομάζονται <i>τελεστές</i> (<i>operators</i>) και προσδιορίζουν κάθε φορά το είδος των υπολογισμών. Πιο συγκεκριμένα, υπάρχουν τρεις βασικές κατηγορίες τελεστών, χωρίς να αναφέρονται οι περιπτώσεις τελεστών-μεθόδων κλάσεων που χρησιμοποιούνται σε αντικείμενα (βλ. Κεφάλαιο 11: αντικειμενοστραφής προγραμματισμός). Αυτές οι κατηγορίες είναι:</p>
			<ul><li><b>Αριθμητικοί</b>: με βάση τους οποίους γίνονται όλες οι αριθμητικές πράξεις. Παρουσιάζονται αμέσως μετά.</li>
			<li><b>Συγκριτικοί ή σχεσιακοί</b>: υπεύθυνοι για τη σύγκριση δεδομένων και τον έλεγχο συνθηκών. Αναλύονται στο Κεφάλαιο 3 και χρησιμοποιούνται σε εντολές ελέγχου-επιλογής και επανάληψης.</li>
			<li><b>Λογικοί</b>: κατάλληλοι για τη δημιουργία λογικών ελέγχων ή συσχετίσεων πολλαπλών συγκρίσεων. Παρουσιάζονται στο Κεφάλαιο 3.</li>
			</ul><p class="no-indent">Η σειρά με την οποία αναφέρθηκαν είναι και η ιεράρχησή τους. Έτσι, σε μια σύνθετη έκφραση που περιέχει όλα τα παραπάνω, πρώτα γίνονται οι αριθμητικές πράξεις (προκύπτει αριθμητικό αποτέλεσμα), μετά οι συγκρίσεις (προκύπτει λογικό αποτέλεσμα: <span class="courier-code">True/False</span>) και μετά οι λογικές πράξεις.</p>
			<p>Εκτός από τους πιο πάνω βασικούς τελεστές υπάρχουν και άλλοι οι οποίοι περιγράφονται στη συνέχεια:</p>
			<ul><li><b>Δυαδικοί</b> (bitwise, <span class="courier-code">&amp;</span>, <span class="courier-code">&gt;&gt;</span> κ.λπ.): χειρισμός δεδομένων βάσει της δυαδικής αναπαράστασής τους.</li>
			<li><b>Σύνθετοι τελεστές εκχώρησης</b> (<span class="courier-code">+=</span>, <span class="courier-code">/=</span> κ.λπ.): για την αποθήκευση δεδομένων στη μνήμη του υπολογιστή.</li>
			<li><b>Τελεστές υποσυνόλων</b> (<span class="courier-code">in</span> – <span class="courier-code">not in</span>): για τον έλεγχο σχέσεων ανάμεσα σε ομάδες δεδομένων.</li>
			<li><b>Τελεστές ταυτότητας</b> (<span class="courier-code">is</span> – <span class="courier-code">is not</span>): για τον αν δύο αντικείμενα είναι ταυτόσημα ή όχι.</li>
			<li><b>Μοναδιαίοι</b> (unary): για την επισήμανση ή αντιστροφή προσήμων αριθμών αλλά και χειρισμό συνόλων.</li>
			</ul><section role="subsection" id="ch4se3ss1">
				<h1><span role="label">2.3.1</span> Αριθμητικοί τελεστές</h1>
				<p class="no-indent">Κάθε αριθμητική πράξη πραγματοποιείται με τη βοήθεια των αριθμητικών τελεστών. Αυτοί δέχονται πάντα δύο ορίσματα-τελεστέους (operands – αριθμούς) από τις δύο πλευρές τους και μπορούν να εμφανίζονται είτε σε μεμονωμένες εντολές είτε μέσα σε άλλες. Στον Πίνακα 2-1 εμφανίζονται οι αριθμητικοί τελεστές.</p>
				<img src="media/icon-9_fmt.png" alt=""/>
				<figure role="table" id="tb1">
					<figcaption><span role="label">Πίνακας 2-1</span> | Αριθμητικοί τελεστές</figcaption>
					<table id="table001">
						<tbody>
							<tr>
								
									<th><b>Τελεστής</b></th>
								
								
									<th><b>Λειτουργία</b></th>
								
								
									<th><b>Παράδειγμα</b></th>
								
								
									<th><b>Αποτέλεσμα</b></th>
								
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1 _idGenCellOverride-2">
									<p>+</p>
								</td>
								<td>
									<p>Πρόσθεση</p>
								</td>
								<td>
									<p><span class="courier-code">5+12</span></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-2 _idGenCellOverride-2">
									<p>17</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>-</p>
								</td>
								<td>
									<p>Αφαίρεση</p>
								</td>
								<td>
									<p><span class="courier-code">12-3</span></p>
								</td>
								<td>
									<p>9</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>*</p>
								</td>
								<td>
									<p>Πολλαπλασιασμός</p>
								</td>
								<td>
									<p><span class="courier-code">2*5</span></p>
								</td>
								<td>
									<p>10</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>/</p>
								</td>
								<td>
									<p>Διαίρεση<sup class="superscript CharOverride-1">*</sup></p>
								</td>
								<td>
									<p><span class="courier-code">5/2</span></p>
								</td>
								<td>
									<p>2.5</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>//</p>
								</td>
								<td>
									<p>Ακέραια διαίρεση</p>
								</td>
								<td>
									<p><span class="courier-code">5//2</span></p>
								</td>
								<td>
									<p>2</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>%</p>
								</td>
								<td>
									<p>Υπόλοιπο διαίρεσης</p>
								</td>
								<td>
									<p><span class="courier-code">5%2</span></p>
								</td>
								<td>
									<p>1</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>**</p>
								</td>
								<td>
									<p>Δύναμη</p>
								</td>
								<td>
									<p><span class="courier-code">2**5</span></p>
								</td>
								<td>
									<p>32</p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-1">
									<p>( )</p>
								</td>
								<td>
									<p>Παρενθέσεις</p>
								</td>
								<td>
									<p><span class="courier-code">(1+2+3)/3</span></p>
								</td>
								<td>
									<p>2</p>
								</td>
							</tr>
						</tbody>
					</table>
					<footer>
						<p class="table-notes">* Στην έκδοση 2.x της Python χρειάζεται προσοχή όταν χρησιμοποιείται το σύμβολο ‘/’ με ακέραιους αριθμούς. Σ’ αυτή την περίπτωση, γίνεται ακέραια διαίρεση (με στρογγυλοποίηση προς τα κάτω). Π.χ. 3/2 δίνει 1 (ακέραιος) και όχι 1.5 (πραγματικός), επειδή και οι δύο αριθμοί στη διαίρεση είναι ακέραιοι. Για να γίνει η ακριβής διαίρεση πρέπει ο ένας να είναι πραγματικός, π.χ. 3.0/2 δίνει 1.5 (!).</p>
					</footer>
				</figure>
				<p class="no-indent">Η ιεραρχία μεταξύ των αριθμητικών πράξεων έχει ως εξής: </p>
				<ol>
				<li><b>( )</b>: η χρήση παρενθέσεων γίνεται για την αλλαγή της προτεραιότητας των πράξεων. Περιττές παρενθέσεις δεν είναι λάθος, αρκεί να τοποθετούνται στο σωστό σημείο. Όσες παρενθέσεις ανοίγουν από αριστερά, τόσες πρέπει και να κλείνουν από δεξιά. Τα άγκιστρα <span class="courier-code">[]</span> και οι αγκύλες <span class="courier-code">{}</span> χρησιμοποιούνται για άλλο σκοπό και όχι για αριθμητικές πράξεις, π.χ. σε λίστες, συμβολοσειρές και λεξικά. Έτσι, ο υπολογισμός ενός μέσου όρου, π.χ. των 1, 2 και 3, που είναι 2, θα γίνει <span class="courier-code">(1+2+3)/3</span> και όχι <span class="courier-code">1+2+3/3</span>. Η τελευταία παράσταση, αν και είναι συντακτικά σωστή (ο διερμηνευτής της γλώσσας δεν θα εμφανίσει κάποιο σφάλμα – θα επιστρέψει την τιμή 4), ωστόσο δεν λύνει το δοσμένο πρόβλημα αλλά κάτι άλλο (κάνει πρώτα διαίρεση και μετά τα αθροίσματα). Αυτό το είδος λάθους σε κώδικα ονομάζεται λογικό και δεν εντοπίζεται από τον διερμηνευτή της γλώσσας αλλά εντοπίζεται μόνο κατά την εκτέλεσή του.</li>
				<li><b>**</b>: δυνάμεις, π.χ. το 2<sup class="superscript CharOverride-1">ν+1</sup> θα γραφτεί ως <span class="courier-code">2**(ν+1)</span> και όχι <span class="courier-code">2**ν+1</span>. Μπορεί να χρησιμοποιηθεί και για ρίζες, π.χ. το ￼ μπορεί να δοθεί ως <span class="courier-code">25**(1/2)</span> και το <span class="courier-code">￼</span> ως <span class="courier-code">125**(1/3)</span></li>
					<li><b>*, /, //, %</b>: έχουν την ίδια προτεραιότητα μεταξύ τους. Αν δεν υπάρχουν παρενθέσεις, γίνονται οι πράξεις όπως και στα μαθηματικά: από αριστερά προς τα δεξιά. Π.χ. <span class="courier-code">6/3*4</span> κάνει 8 και αντιπροσωπεύει το <img class="tab" src="media/pg70a.png"/>, ￼ενώ το <span class="courier-code">6/(3*4)</span> κάνει 0.5 από το <img  class="tab" src="media/pg70b.png"/>￼.</li>
				<li><b>+, -</b>: και αυτή η ομάδα έχει την ίδια ιεραρχία, οπότε, χωρίς παρενθέσεις, οι πράξεις γίνονται από αριστερά προς τα δεξιά. Π.χ. <span class="courier-code">2-3+4*5</span> επιστρέφει 19.</li>
				</ol><p class="no-indent">Ακολουθούν μερικά παραδείγματα υπολογισμών στην κονσόλα της Python.</p>
				<figure class="lista-kodika">
					<figcaption>Λίστα Κώδικα 2-1 | Αριθμητικές πράξεις</figcaption><img src="media/ListaKodika-2-1_fmt.png" alt=""/>
					<footer>
						<p class="figure-notes">* Όταν τα ορίσματα μιας διαίρεσης είναι ακέραιοι, η Python κάνει τη λεγόμενη πραγματική <i>διαίρεση</i> (<i>true division</i>) γιατί προσπαθεί να αναπαραστήσει το πηλίκο με τη μεγαλύτερη δυνατή ακρίβεια.</p>
						<p class="figure-notes">** Αυτό οφείλεται στην περιορισμένη ακρίβεια που έχει η φυσική αναπαράσταση των πραγματικών αριθμών στη μνήμη του υπολογιστή. Περισσότερα σε επόμενη ενότητα (το πρόβλημα του 1/10).</p>
					</footer>
				</figure>
				<p class="no-indent">Ιδιαίτερη αναφορά πρέπει να γίνει στις πράξεις της ακέραιας διαίρεσης (//, % - div, mod) γιατί, ενώ για θετικούς ακεραίους το αποτέλεσμα είναι το αναμενόμενο, γίνεται δηλαδή αποκοπή δεκαδικών και στρογγυλοποίηση προς το μηδέν (όπως στη C), για τους αρνητικούς αριθμούς γίνεται <i>διαίρεση πατώματος </i>(<i>floor division</i>), δηλαδή αποκοπή προς το μείον άπειρο και όχι προς το μηδέν. Στον Πίνακα 2-2 φαίνονται όλες οι περιπτώσεις και γίνεται σύγκριση με τα αντίστοιχα αποτελέσματα σε C.</p>
				<figure role="table" id="tb2">
					<figcaption><span role="label">Πίνακας 2-2</span> | Ακέραια διαίρεση</figcaption>
					<table id="table002">
						<tbody>
							<tr>
								<th>Πράξεις</th>
								<th>Συνδυασμοί τιμών</th>
								
							</tr>
							<tr>
								<td>
								</td>
								<td>
									<p>a</p>
								</td>
								<td>
									<p>7</p>
								</td>
								<td>
									<p>–7</p>
								</td>
								<td>
									<p>7</p>
								</td>
								<td>
									<p>–7</p>
								</td>
							</tr>
							<tr>
								<td>
								</td>
								<td>
									<p>b</p>
								</td>
								<td>
									<p>3</p>
								</td>
								<td>
									<p>3</p>
								</td>
								<td>
									<p>–3</p>
								</td>
								<td>
									<p>–3</p>
								</td>
							</tr>
							<tr>
								<td rowspan="2">
									<p>Python</p>
								</td>
								<td>
									<p>a//b</p>
								</td>
								<td>
									<p>2</p>
								</td>
								<td>
									<p>–3</p>
								</td>
								<td>
									<p>–3</p>
								</td>
								<td>
									<p>2</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>a%b</p>
								</td>
								<td>
									<p>1</p>
								</td>
								<td>
									<p>2</p>
								</td>
								<td>
									<p>–2</p>
								</td>
								<td>
									<p>–1</p>
								</td>
							</tr>
							<tr>
								<td rowspan="2">
									<p>C</p>
								</td>
								<td>
									<p>a/b</p>
								</td>
								<td>
									<p>2</p>
								</td>
								<td>
									<p>–2</p>
								</td>
								<td>
									<p>–2</p>
								</td>
								<td>
									<p>2</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>a%b</p>
								</td>
								<td>
									<p>1</p>
								</td>
								<td>
									<p>–1</p>
								</td>
								<td>
									<p>1</p>
								</td>
								<td>
									<p>–1</p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Η πράξη <span class="courier-code">7//(-3)</span> επιστρέφει <span class="courier-code">-3</span> ώστε με τη διαίρεση πατώματος να ικανοποιείται και για τους αρνητικούς αριθμούς η παρακάτω σχέση (Ταυτότητα Ευκλείδειας Διαίρεσης):</p>
				<p class="no-indent">Διαιρέτης ∙ Πηλίκο + Υπόλοιπο = Διαιρετέος </p>
				<p class="no-indent">ή, για τα δεδομένα του Πίνακα 2-2:</p>
				<p><span class="courier-code">&gt;&gt;&gt; b*(a//b)+a%b==a</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">Ο ίδιος ο Guido van Rossum δίνει την εξήγηση για τους λόγους που υιοθέτησε αυτή τη λογική στην ακέραια διαίρεση της γλώσσας, στο blog του για την «Ιστορία της Python»<sup class="superscript CharOverride-1"><span id="footnote-072-backlink"><a href="#footnote-072">22</a></span></sup>. </p>
			</section>
			<section role="subsection" id="ch4se3ss2">
				<h1><span role="label">2.3.2</span> Δυαδικοί τελεστές</h1>
				<p class="no-indent">Σε πολλές περιπτώσεις είναι αναγκαίο να γίνει χειρισμός σε επίπεδο δυαδικών τιμών<sup class="superscript CharOverride-1"><span id="footnote-071-backlink"><a href="#footnote-071">23</a></span></sup>. Αυτό γίνεται με τη χρήση των δυαδικών τελεστών. Στα παραδείγματα του Πίνακα 2-3 δίνονται οι αριθμοί σε δεκαδική και δυαδική μορφή.</p>
				<figure role="table" id="tb3">
					<figcaption><span role="label">Πίνακας 2-3</span> | Δυαδικοί τελεστές (bitwise operators)</figcaption>
					<table id="table003">
						<tbody>
							<tr>
								
									<th>Τελεστής</th>
								
								
									<th>Λειτουργία</th>
								
								
									<th>Παράδειγμα</th>
								
								
									<th>Αποτέλεσμα</th>
								
							</tr>
							<tr>
								<td>
									<p>&amp;</p>
									<p>ΚΑΙ(AND)</p>
								</td>
								<td>
									<p>ΣύζευξηΑντιγραφή ενός bit αν υπάρχει και στους δύο αριθμούς</p>
								</td>
								<td>
									<p><span class="courier-code">58 &amp; 38</span></p>
									<p><span class="courier-code">111010 &amp; 100110</span></p>
								</td>
								<td>
									<p><span class="courier-code">34</span></p>
									<p><span class="courier-code">100010</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>|</p>
									<p>Ή(OR)</p>
								</td>
								<td>
									<p>ΔιάζευξηΑντιγραφή ενός bit αν υπάρχει σε έναν από τους δύο αριθμούς</p>
								</td>
								<td>
									<p><span class="courier-code">58 | 38</span></p>
									<p><span class="courier-code">111010 | 100110</span></p>
								</td>
								<td>
									<p><span class="courier-code">62</span></p>
									<p><span class="courier-code">111110</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>^</p>
									<p>XOR</p>
								</td>
								<td>
									<p>Αποκλειστική διάζευξη (Exclusive OR)Αντιγραφή ενός bit αν υπάρχει σε έναν από τους δύο αριθμούς και όχι και στους δύο</p>
								</td>
								<td>
									<p><span class="courier-code">58 ^ 38</span></p>
									<p><span class="courier-code">111010 ^ 100110</span></p>
								</td>
								<td>
									<p><span class="courier-code">28</span></p>
									<p><span class="courier-code">011100</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>~</p>
								</td>
								<td>
									<p>Αντιστροφή</p>
									<p>Αντιστροφή των bit ενός αριθμού. <span class="courier-code">~Α</span> ισοδυναμεί με <span class="courier-code">-(A + 1)</span></p>
								</td>
								<td>
									<p><span class="courier-code">15</span></p>
									<p><span class="courier-code">~1111</span></p>
								</td>
								<td>
									<p><span class="courier-code">-16</span></p>
									<p><span class="courier-code">-10000</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>&lt;&lt;</p>
								</td>
								<td>
									<p>Ολίσθηση αριστερά</p>
									<p><span class="courier-code">Α&lt;&lt;n</span>: Ολίσθηση των bit του <span class="courier-code">Α</span> προς τα αριστερά κατά <span class="courier-code">n</span> θέσεις. Αν <span class="courier-code">n=1</span> διπλασιάζει τον αριθμό. Το 2ο παράδειγμα είναι ισοδύναμο με το <span class="courier-code">25</span></p>
								</td>
								<td>
									<p><span class="courier-code">17&lt;&lt;1</span></p>
									<p><span class="courier-code">10001</span></p>
									<p><span class="courier-code">2&lt;&lt;4</span></p>
									<p><span class="courier-code">10</span></p>
								</td>
								<td>
									<p><span class="courier-code">34</span></p>
									<p><span class="courier-code">100010</span></p>
									<p><span class="courier-code">32</span></p>
									<p><span class="courier-code">100000</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>&gt;&gt;</p>
								</td>
								<td>
									<p>Ολίσθηση δεξιά</p>
									<p><span class="courier-code">Α&gt;&gt;n</span>: Ολίσθηση των bit του <span class="courier-code">Α</span> προς τα δεξιά κατά <span class="courier-code">n</span> θέσεις. Αν <span class="courier-code">n=1</span> υπολογίζει την ακέραια διαίρεση του <span class="courier-code">Α</span> με το <span class="courier-code">2 (Α//2)</span></p>
								</td>
								<td>
									<p><span class="courier-code">17&gt;&gt;1</span></p>
									<p><span class="courier-code">10001</span></p>
								</td>
								<td>
									<p><span class="courier-code">8</span></p>
									<p><span class="courier-code">01000</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Ακολουθούν μερικά παραδείγματα στην κονσόλα της Python.</p>
				<img src="media/icon-3_fmt.png" alt=""/>
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-2 | Δυαδικοί τελεστές</figcaption><img src="media/ListaKodika-2-2_fmt.png" alt=""/></figure>
				<p class="no-indent">Οι λειτουργίες που εκτελούν οι δυαδικοί τελεστές γίνονται σε ακέραιους μόνο αριθμούς. Ο χειρισμός των αριθμών-τελεστέων που συνοδεύουν έναν δυαδικό τελεστή γίνεται σε επίπεδο δυαδικών ψηφίων. Έτσι, προκειμένου να χρησιμοποιηθούν σωστά, θα πρέπει οι αριθμοί στους οποίους θα λειτουργήσουν οι δυαδικοί τελεστές να είναι ακέραιοι και σε δυαδική μορφή. Μπορεί όμως να χρησιμοποιηθούν με δεκαδική αναπαράσταση, αλλά η λειτουργία τους, πάντα, γίνεται στον αντίστοιχο αριθμό στο δυαδικό σύστημα αρίθμησης. Υπάρχουν τομείς της επιστήμης των υπολογιστών όπου είναι απαραίτητη η επεξεργασία δεδομένων στη δυαδική αναπαράστασή τους, όπως για παράδειγμα η επεξεργασία πακέτων δεδομένων και η δρομολόγηση δεδομένων σε δίκτυα Η/Υ, στοιχεία γενικά συστημάτων επικοινωνίας, ψηφιακά κυκλώματα, σύνδεση, επικοινωνία και χειρισμός περιφερειακών συσκευών σε υπολογιστικά συστήματα, θέματα υλικού γενικότερα, προβλήματα ασφάλειας, θέματα κρυπτογράφησης, συμπίεση αρχείων και αλγόριθμοι κωδικοποίησης εικόνας, ήχου ή βίντεο (image, sound, video processing).</p>
			</section>
			<section role="subsection" id="ch4se3ss3">
				<h1><span role="label">2.3.3</span> Μοναδιαίοι τελεστές</h1>
				<p class="no-indent">Χρησιμοποιούνται για την αντιστροφή προσήμου ενός αριθμού. Σε ορισμένες βιβλιοθήκες κώδικα όπως η <span class="courier-code">Collections</span>, χρησιμεύουν και στον χειρισμό συνόλων.</p>
				<figure role="table" id="tb4">
					<figcaption><span role="label">Πίνακας 2-4</span> | Μοναδιαίοι τελεστές</figcaption>
					<table id="table004">
						<tbody>
							<tr>
								
									<th>Τελεστής</th>
								
								
									<th>Λειτουργία</th>
								
								
									<th>Παράδειγμα</th>
								
								
									<th>Αποτέλεσμα</th>
								
							</tr>
							<tr>
								<td>
									<p>+</p>
								</td>
								<td>
									<p>Θετική σήμανση</p>
								</td>
								<td>
									<p>+12</p>
								</td>
								<td>
									<p>12</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>–</p>
								</td>
								<td>
									<p>Αντιστροφή ή αρνητική σήμανση</p>
								</td>
								<td>
									<p>– –12–12</p>
								</td>
								<td>
									<p>12–12</p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
			</section>
		</section>
		<section role="section" id="ch4se4">
			<h1><span role="label">2.4</span> Η έννοια της μεταβλητής</h1>
			<p class="no-indent">Αν όχι το πιο δύσκολο, τότε σίγουρα ένα από τα πιο συχνά προβλήματα που προκαλούν σύγχυση σε όποιον ασχολείται για πρώτη φορά με τον προγραμματισμό είναι η έννοια της μεταβλητής. Οι ομοιότητές της, αλλά κυρίως η διαφορετική φύση και χρήση της στον προγραμματισμό απ’ ό,τι στον χώρο της επιστήμης των μαθηματικών, κάνουν τη μεταβλητή το πρώτο, πολλές φορές ανυπέρβλητο, εμπόδιο στην εκμάθηση της πρώτης γλώσσας προγραμματισμού. Η σαφής διάκριση της χρήσης της και η φιλοσοφία που «κρύβεται» πίσω από αυτήν για την κατασκευή κώδικα είναι στοιχεία που θα πρέπει από πάρα πολύ νωρίς να αποσαφηνιστούν, για να μπορέσει κάποιος να μυηθεί στον χώρο του προγραμματισμού.</p>
			<p>Από τις πρώτες τάξεις της μέσης εκπαίδευσης, γίνεται γνωστό στη βασική άλγεβρα τι είναι εξίσωση, πώς λύνονται τέτοιου είδους πραγματικά προβλήματα και πώς η επίλυσή τους ισοδυναμεί με την εύρεση μιας αριθμητικής τιμής-λύσης που θα ικανοποιεί τα δεδομένα του προβλήματος. Κύριο συστατικό αυτής της διαδικασίας είναι η μεταβλητή –ο άγνωστος, συνήθως, x– που θα αποκτήσει μια τιμή, μια λύση. Η μεταβλητή στον χώρο του προγραμματισμού αποκτά μια διαφορετική σημασία που, ενώ είναι και εδώ μια οντότητα που θα αποκτήσει κάποια τιμή (όχι πάντα αριθμητική), θα έχει όμως και μια «φυσική» υπόσταση. Με απλά λόγια:</p>
			<p class="blockquote"><i>Μεταβλητή είναι μια (αναφορά σε) θέση μνήμης, όπου αποθηκεύεται ένα κάθε φορά στοιχείο ή δεδομένο.</i></p>
			<p class="no-indent">Αυτό το περιεχόμενο είναι δυνατόν να αλλάζει (να μεταβάλλεται), όποτε κάτι τέτοιο απαιτείται από τις ανάγκες του προγράμματος. </p>
			<p>Η επόμενη μεγάλη δυσκολία έρχεται στη χρήση της μεταβλητής μέσα στον κώδικα. Η μεταβλητή καλείται να ενσωματώσει μέσα της όλα τα πιθανά δεδομένα που, κατά τον χρόνο συγγραφής του προγράμματος, δεν είναι γνωστά στον προγραμματιστή. Είναι, τις περισσότερες φορές, άγνωστο το τι πραγματικά θα λάβει μια μεταβλητή από τον τελικό χρήστη (ή χειριστή) του προγράμματος όταν αυτό θα «τρέξει». Η αφηρημένη χρήση, ως προς το περιεχόμενό της, είναι που θα κάνει ένα πρόγραμμα να εκτελείται όχι μόνο σε συγκεκριμένη περίπτωση, αλλά σε κάθε περίπτωση του ίδιου προβλήματος. </p>
			<p>Ένα από τα πιο απλά, εισαγωγικά, υπολογιστικά προβλήματα είναι αυτό της εύρεσης του εμβαδού ενός γεωμετρικού μεγέθους, όπως π.χ. του τετραγώνου. Το πρόγραμμα που θα κατασκευαστεί για αυτό τον υπολογισμό θα πρέπει να λειτουργεί και να υπολογίζει το αντίστοιχο εμβαδό για οποιοδήποτε τετράγωνο, με οποιοδήποτε μήκος πλευράς. Κάτι τέτοιο είναι αδύνατο χωρίς τη χρήση μεταβλητής.</p>
			<p>Στην Python (όπως και σε άλλες γλώσσες), η μεταβλητή δεν είναι άλλο από μια αναφορά (ή ένας <i>δείκτης – pointer</i> στη C) στη διεύθυνση της μνήμης του υπολογιστή, όπου βρίσκεται αποθηκευμένο ένα στοιχείο, μια τιμή. </p>
		</section>
		<section role="section" id="ch4se5">
			<h1><span role="label">2.5</span> Ιδιότητες μεταβλητών</h1>
			<p class="no-indent">Μια μεταβλητή έχει τα εξής χαρακτηριστικά:</p>
			<section role="subsection" id="ch4se5ss1">
				<h1><span role="label">2.5.1</span> Όνομα μεταβλητής</h1>
				<p class="no-indent">Η ονομασία (ή ονοματοδοσία) των μεταβλητών ακολουθεί κάποιους απλούς αλλά ρητούς κανόνες. </p>
				<p>Οι χαρακτήρες που μπορούν να χρησιμοποιηθούν για την ονομασία μιας μεταβλητής είναι:</p>
				<ul class="unstyled"><li><span>i.</span>Όλο το αγγλικό αλφάβητο, πεζά και κεφαλαία.</li>
				<li><span>ii.</span>Όλοι οι αριθμοί από το 0 μέχρι το 9.</li>
				<li><span>iii.</span>Ο χαρακτήρας ‘_’ (<i>κάτω παύλα</i> ή <i>υπογράμμιση – underscore</i>). Η ιδιαίτερη σημασία όμως που δίνεται σε αυτό τον χαρακτήρα και η χρήση του σε συγκεκριμένες περιπτώσεις κώδικα, σύμφωνα με τα πρότυπα της γλώσσας, υπαγορεύει τη χρήση του σε οποιοδήποτε σημείο του ονόματος αλλά όχι στην αρχή του. Στο Κεφάλαιο 11 (αντικείμενα) περιγράφεται η ειδική χρήση του χαρακτήρα υπογράμμισης σε ονομασίες μεθόδων κλάσεων.</li>
				<li><span>iv.</span>Από την έκδοση 3 της Python και μετά υποστηρίζεται κωδικοποίηση και στο σύστημα Unicode και είναι δυνατή η ονομασία μεταβλητών και στα ελληνικά. Κάτι τέτοιο όμως θα πρέπει να γίνεται προσεκτικά, γιατί μπορεί να οδηγήσει σε λάθη, δυσανάγνωστα προγράμματα που μπορεί να μην τρέχουν σε όλα τα συστήματα.</li></ul>
				<p class="no-indent">Απαγορεύεται, από την άλλη:</p>
				<ul class="unstyled"><li><span>i.</span>Η χρήση ειδικών συμβόλων *, #, %, +, -, / κ.λπ. τα οποία χρησιμεύουν για άλλες λειτουργίες (όπως για παράδειγμα για αριθμητικές πράξεις)</li>
				<li><span>ii.</span>Οι λέξεις του Πίνακα 2-5, οι οποίες θεωρούνται <i>δεσμευμένες </i>(<i>reserved words</i>), αποτελούν δομικά στοιχεία της Python και επιτελούν άλλες λειτουργίες, όπως π.χ. η λέξη «while» (αναφέρεται στη δομή επανάληψης, βλ. Κεφάλαιο 4).</li></ul>
				<figure role="table" id="tb5">
					<figcaption><span role="label">Πίνακας 2-5</span> | Δεσμευμένες λέξεις</figcaption>
					<table id="table005">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">class</span></p>
								</td>
								<td>
									<p><span class="courier-code">finally</span></p>
								</td>
								<td>
									<p><span class="courier-code">is</span></p>
								</td>
								<td>
									<p><span class="courier-code">return</span></p>
								</td>
								<td>
									<p><span class="courier-code">import</span></p>
								</td>
								<td>
									<p><span class="courier-code">pass</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">None</span></p>
								</td>
								<td>
									<p><span class="courier-code">continue</span></p>
								</td>
								<td>
									<p><span class="courier-code">for</span></p>
								</td>
								<td>
									<p><span class="courier-code">lambda</span></p>
								</td>
								<td>
									<p><span class="courier-code">try</span></p>
								</td>
								<td>
									<p><span class="courier-code">else</span></p>
								</td>
								<td>
									<p><span class="courier-code">break</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">def</span></p>
								</td>
								<td>
									<p><span class="courier-code">from</span></p>
								</td>
								<td>
									<p><span class="courier-code">nonlocal</span></p>
								</td>
								<td>
									<p><span class="courier-code">while</span></p>
								</td>
								<td>
									<p><span class="courier-code">assert</span></p>
								</td>
								<td>
									<p><span class="courier-code">raise</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">and</span></p>
								</td>
								<td>
									<p><span class="courier-code">del</span></p>
								</td>
								<td>
									<p><span class="courier-code">global</span></p>
								</td>
								<td>
									<p><span class="courier-code">not</span></p>
								</td>
								<td>
									<p><span class="courier-code">with</span></p>
								</td>
								<td>
									<p><span class="courier-code">except</span></p>
								</td>
								<td>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">as</span></p>
								</td>
								<td>
									<p><span class="courier-code">elif</span></p>
								</td>
								<td>
									<p><span class="courier-code">if</span></p>
								</td>
								<td>
									<p><span class="courier-code">or</span></p>
								</td>
								<td>
									<p><span class="courier-code">yield</span></p>
								</td>
								<td>
									<p><span class="courier-code">in</span></p>
								</td>
								<td>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Το όνομα κάθε μεταβλητής θα πρέπει να ξεκινάει με γράμμα (είτε πεζό είτε κεφαλαίο) ή υπογράμμιση αλλά όχι με αριθμό. Στην Python (όπως και σε γλώσσες όπως C/C++, Java κ.ά.) γίνεται διάκριση μεταξύ πεζών και κεφαλαίων (<i>case sensitivity</i>), κάτι που είναι γνώριμο σε χρήστες λειτουργικών συστημάτων τύπου Linux αλλά όχι σ’ αυτούς των Windows. Έτσι, οι ονομασίες <span class="courier-code">variable </span>και <span class="courier-code">Variable </span>αναφέρονται σε διαφορετικές μεταβλητές. Σύμφωνα με τα παραπάνω, ονομασίες μεταβλητών που είναι ή όχι αποδεκτές φαίνονται στον Πίνακα 2-6.</p>
				<figure role="table" id="tb6">
					<figcaption><span role="label">Πίνακας 2-6</span> | Παραδείγματα ονομάτων μεταβλητών</figcaption>
					<table id="table006">
						<tbody>
							<tr>
								
									<th>Αποδεκτά ονόματα</th>
								
								
									<th>Μη αποδεκτά ονόματα</th>
								
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">Mikos_plevras</span></p>
								</td>
								<td>
									<p><span class="courier-code">1x</span>&#9;το όνομα δεν πρέπει να ξεκινά με αριθμό </p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">pi</span></p>
								</td>
								<td>
									<p><span class="courier-code">first name</span>&#9;προσοχή στο κενό (space) ανάμεσα στις λέξεις</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">x1</span></p>
								</td>
								<td>
									<p><span class="courier-code">x-y</span>&#9;η χρήση του ‘-’ υποδηλώνει αφαίρεση</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">client_name</span></p>
								</td>
								<td>
									<p><span class="courier-code">a:</span>&#9;ο χαρακτήρας ‘:’ έχει άλλη λειτουργία (έναρξη</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">Net_Value_2017</span></p>
								</td>
								<td>
									<p><span class="courier-code">&#9;</span>μπλοκ εντολών)</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">_name</span></p>
								</td>
								<td>
									<p><span class="courier-code">date.of.birth</span>&#9;η χρήση της τελείας γίνεται σε αντικείμενα</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">hjkjkdhfg</span></p>
								</td>
								<td>
									<p><span class="courier-code">if</span>&#9;είναι δεσμευμένη λέξη</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">NetValue2017</span></p>
								</td>
								<td>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Κάθε μη έγκυρο όνομα προκαλεί την αντίδραση του διερμηνευτή της γλώσσας, του εσωτερικού μηχανισμού δηλαδή που προσπαθεί να μετατρέψει τον πηγαίο κώδικα σε δυαδικό κώδικα (γλώσσα) μηχανής, και εμφανίζει στην οθόνη του υπολογιστή ένα μήνυμα σφάλματος, διακόπτοντας την εκτέλεση του προγράμματος. Τέτοιου είδους σφάλματα ονομάζονται <i>συντακτικά </i>(<i>syntax errors</i>).</p>
				<p>Για παράδειγμα, η παρακάτω εντολή χρησιμοποιεί τη μεταβλητή <span class="courier-code">a</span> <span class="courier-code">b</span> (με κενό ανάμεσά τους) και προκαλεί τη διακοπή εκτέλεσης του κώδικα με την εμφάνιση αντίστοιχου μηνύματος.</p>
				<p><span class="courier-code">&gt;&gt;&gt; a b=5</span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code">  File &quot;&lt;iPython-input-1-a220ed9b53b0&gt;&quot;, line 1</span></p>
				<p><span class="courier-code">    a b=5</span></p>
				<p><span class="courier-code">      ^</span></p>
				<p><span class="courier-code">SyntaxError: invalid syntax</span></p>
				<p class="no-indent">Υπάρχουν επίσης κάποιες προτεινόμενες πρακτικές που είναι καλό να ακολουθούνται αναφορικά με την ονομασία μεταβλητών. Αυτές έχουν να κάνουν με τη χρήση ή τον σκοπό των μεταβλητών. Τέτοιοι κανόνες ορίζονται στα πρότυπα της Python (PEPs – Python Enhancements Proposals και συγκεκριμένα στο PEP8<sup class="superscript CharOverride-1"><span id="footnote-070-backlink"><a href="#footnote-070">24</a></span></sup>). Σκοπός τους είναι να βοηθήσουν στη συγγραφή προγραμμάτων με κοινή μορφή, ευανάγνωστων και εύκολα κατανοητών από άλλους προγραμματιστές.</p>
				<ul><li>Όλα κεφαλαία (με ή χωρίς κάτω παύλα): για τη δημιουργία σταθερών (δηλαδή μεταβλητών που δεν αλλάζουν τιμή), π.χ. <span class="courier-code">PI, FIXED_COST, FPA</span></li>
				<li>Όλα πεζά (με ή χωρίς κάτω παύλα): συνήθεις μεταβλητές ή συναρτήσεις (αναλύονται αργότερα), π.χ. <span class="courier-code">age, mobile_phone, displaymenu</span></li>
				<li>Καμηλοειδής μορφή (camel case ή, ορθότερα, πεζοκεφαλαία): ονομασία μεθόδων κλάσεων. Γίνεται χρήση κεφαλαίου γράμματος μόνο στο πρώτο γράμμα κάθε λέξης και ονομάζεται έτσι από τον γνωστό μορφότυπο του συμπαθούς θηλαστικού. Π.χ. <span class="courier-code">InventoryUpdate, dateOfBirth.</span></li>
				</ul><p class="no-indent">Μερικά περιβάλλοντα εργασίας (IDEs), όπως το PyCharm και το Spyder (μέσα από τις ρυθμίσεις του), εμφανίζουν ειδοποιήσεις για τη μη τήρηση των κανόνων PEP8. Ωστόσο, καμία από αυτές τις μορφές δεν είναι υποχρεωτικό να χρησιμοποιείται. Αν όμως ο κώδικας που γράφεται γίνεται σε συνεργασία ή δοθεί σε άλλους, αν πρόκειται για επαγγελματική δουλειά ή δημοσίευση κάποιας εργασίας, στο ίντερνετ ή σε κάποιο αποθετήριο κώδικα (π.χ. Github), τότε θα πρέπει να ακολουθούνται κοινές πρακτικές. Παρ’ όλα αυτά, όποιος τρόπος και αν χρησιμοποιηθεί θα πρέπει να ακολουθείται σε ολόκληρο το πρόγραμμα με συνέπεια.</p>
				<p>Τέλος, προτιμάται η χρήση απλών, μικρών ή και σύνθετων λέξεων αντί σκέτων γραμμάτων, που θα υποδηλώνουν το περιεχόμενο μιας μεταβλητής όπως π.χ. <span class="courier-code">mikos_plevras</span> αντί για ένα απλό <span class="courier-code">a</span>, για το μήκος μιας πλευράς ενός τετραγώνου, ή <span class="courier-code">afm</span> για τον ΑΦΜ ενός πελάτη αντί για ένα σκέτο <span class="courier-code">x</span>.</p>
			</section>
			<section role="subsection" id="ch4se5ss2">
				<h1><span role="label">2.5.2</span> Το περιεχόμενο μιας μεταβλητής </h1>
				<p class="no-indent">Μια μεταβλητή στην Python ξεκινάει να υπάρχει όταν της δοθεί μια τιμή. Αυτή η τιμή κάποια στιγμή μπορεί να αλλάξει με κάποια άλλη, ή απλά να διαγραφεί από τη μνήμη εντελώς, οπότε διαγράφεται και η μεταβλητή. </p>
				<p class="blockquote">Διαφέρει, επομένως, το όνομα μιας μεταβλητής από το περιεχόμενό της, την τιμή της.</p>
				<p class="no-indent">Κατά τη διάρκεια εκτέλεσης ενός προγράμματος το όνομα μιας μεταβλητής δεν αλλάζει, σε αντίθεση με το περιεχόμενο, την τιμή και τον τύπο της (το είδος δεδομένων που περιέχει). Και αυτό γιατί η Python, σε αντίθεση με άλλες γλώσσες, όπως η C/C++, η Java κ.ά., είναι μια δυναμική γλώσσα στη χρήση μεταβλητών. </p>
				<p>Αυτό πρακτικά σημαίνει πως μια μεταβλητή μπορεί αρχικά να περιέχει έναν αριθμό αλλά στη συνέχεια να περιέχει κείμενο, μια λίστα ή οτιδήποτε άλλο. Κάτι τέτοιο βέβαια δεν αποτελεί συνήθη ή καλή προγραμματιστική πρακτική.</p>
				<p>Τι όμως μπορεί να περιέχει μια μεταβλητή; Το περιεχόμενο ή ο τύπος δεδομένων μιας μεταβλητής μπορεί να είναι απλές αριθμητικές τιμές (5, 3.14, –2323234) και χαρακτήρες (κείμενο όπως “Εγνατίας 147” – πάντα μέσα σε εισαγωγικά), μέχρι πιο σύνθετες δομές όπως λίστες και λεξικά που περιγράφονται στα Κεφάλαια 5 και 9. Στις επόμενες παραγράφους περιγράφονται οι τρεις αριθμητικές τιμές που υποστηρίζει η Python: ακέραιοι (integers), πραγματικοί (κινητής υποδιαστολής – floating point), μιγαδικοί (complex) αριθμοί αλλά και λογικές τιμές (Boolean: True-False, ως απλό υποσύνολο των ακέραιων αριθμών). Ο Πίνακας 2-7 περιλαμβάνει τους βασικούς τύπους δεδομένων που υποστηρίζει η Python.</p>
				<figure role="table" id="tb7">
					<figcaption><span role="label">Πίνακας 2-7</span> | Τύποι δεδομένων</figcaption>
					<table id="table007">
						<tbody>
							<tr>
								
									<th>Τύποι</th>
								
								
									<th>Παραδείγματα</th>
								
							</tr>
							<tr>
								<td>
									<p>Ακέραιοι</p>
								</td>
								<td>
									<p><span class="courier-code">3, -12,  2**300</span> που δίνει έναν πολύ μεγάλο ακέραιο: <span class="courier-code">2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>Πραγματικοί</p>
								</td>
								<td>
									<p><span class="courier-code">3.14, 100.0</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>Μιγαδικοί</p>
								</td>
								<td>
									<p><span class="courier-code">12+2j</span></p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-3">
									<p><b>Λογικές τιμές</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-3">
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-4">
									<p>True (ή 1)</p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-4">
								</td>
							</tr>
							<tr>
								<td>
									<p>False (ή 0)</p>
								</td>
								<td>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-3">
									<p><b>Χαρακτήρες</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-3">
									<p><span class="courier-code">&apos;Κείμενο&apos;, &quot;Άννα&quot;, &quot;Εγνατίας 12&quot;, &quot;…είπαν το μεγάλο &apos;ΟΧΙ&apos;!&quot;</span></p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><b>Λίστες</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><span class="courier-code">[1, 3.14, &quot;a&quot;] , [1, 2, [2, 1] ]</span></p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><b>Σύνολα</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><span class="courier-code">{1, 2, 3, &quot;Πέτρος&quot;, 3.14}</span></p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><b>Πλειάδες</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><span class="courier-code">(1, 2, &quot;a&quot;)</span></p>
								</td>
							</tr>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><b>Λεξικά</b></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-5">
									<p><span class="courier-code">{1: &apos;μήλα&apos;, 2: &apos;μπανάνες&apos;} </span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Σε αντίθεση με άλλες γλώσσες προγραμματισμού (όπως οι C/C++ και Java), που θεωρούνται στατικές και απαιτείται να δηλώνεται κάθε τύπος δεδομένων, στην Python δεν απαιτείται (στην ουσία δεν είναι δυνατόν) να δηλωθεί από την αρχή ο τύπος μιας μεταβλητής. Έτσι, η εντολή: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a=10</span></p>
				<p class="no-indent">δημιουργεί μια νέα μεταβλητή με όνομα <span class="courier-code">a</span> και (ακέραια) τιμή τον αριθμό <span class="courier-code">10</span>. Λίγο πιο μετά μπορεί να ακολουθήσει μια εντολή όπως η: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a=3.14</span></p>
				<p class="no-indent">όπου η Python «ξεφορτώνεται» την παλιά τιμή (το <span class="courier-code">10</span>) και αποθηκεύει στη μεταβλητή <span class="courier-code">a</span> τον (πραγματικό αυτή τη φορά) αριθμό <span class="courier-code">3.14</span>.</p>
				<img src="media/icon-6_fmt.png" alt=""/>
				<aside>
				<p>Σε φυσικό επίπεδο, μια μεταβλητή δεν είναι παρά μόνο ένα <i>όνομα</i> (<i>name – label</i>) στον <i>χώρο ονομάτων </i>(<i>namespace</i>) που διαχειρίζεται η κονσόλα της εκάστοτε υλοποίησης της γλώσσας. Αυτό το όνομα συνοδεύεται από μια διεύθυνση μνήμης όπου βρίσκεται η τιμή της. Σε ξεχωριστό χώρο της φυσικής μνήμης του υπολογιστή, φυλάσσεται η τιμή της μεταβλητής και ο τύπος της. Πιο συγκεκριμένα, επειδή στην Python όλα είναι αντικείμενα, αποθηκεύεται ο τύπος του αντικειμένου στο οποίο «δείχνει» η μεταβλητή. Έτσι, ο διερμηνευτής της γλώσσας δεν χρειάζεται να μετατρέψει ή να αποκρυπτογραφεί τιμές κάθε φορά που θα συναντά το όνομα της μεταβλητής· όλες οι πληροφορίες βρίσκονται αποθηκευμένες μαζί με την τιμή της μεταβλητής.</p>
				</aside>
			</section>
		</section>
		<section role="section" id="ch4se6">
			<h1><span role="label">2.6</span> Εισαγωγή τιμών σε μεταβλητές </h1>
			<p class="no-indent">Μια μεταβλητή μπορεί να πάρει τιμές με αρκετούς τρόπους στην Python. Αν εξαιρέσει κανείς τη δημιουργία αντικειμένων και διάφορες βιβλιοθήκες δημιουργίας τυχαίων αριθμών, που παρουσιάζονται αργότερα, δύο είναι οι βασικοί τρόποι ανάθεσης τιμών σε μεταβλητές:</p>
			<ol><li>Μέσω της εντολής (του τελεστή) εκχώρησης κατά τη συγγραφή του προγράμματος<sup class="superscript CharOverride-1"><span id="footnote-069-backlink"><a href="#footnote-069">25</a></span></sup></li>
			<li>Μέσω της εντολής (συνάρτησης) <span class="courier-code">input</span>, με είσοδο τιμών από τον τελικό χρήστη, κατά την εκτέλεση του προγράμματος</li>
		</ol></section>
		<section role="section" id="ch4se7">
			<h1><span role="label">2.7</span> Εντολή (τελεστής) εκχώρησης ‘=’ </h1>
			<p class="no-indent">Μια ακόμη διάκριση, σε σχέση με τα μαθηματικά, γίνεται για τον χαρακτήρα ‘=’. Ενώ στα μαθηματικά δηλώνει συσχέτιση ή ισότητα δύο μερών, στον προγραμματισμό δηλώνει καταχώριση τιμών σε μεταβλητή. Έτσι, η εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; a=32</span></p>
			<p class="no-indent">πολύ απλά καταχωρεί (αναθέτει, εκχωρεί) στη μεταβλητή <span class="courier-code">a</span> την ακέραια τιμή <span class="courier-code">32</span>. Ταυτόχρονα, είναι η στιγμή που η Python δημιουργεί κάπου στη μνήμη του Η/Υ μια νέα θέση-χώρο, φτιάχνει δηλαδή μια νέα μεταβλητή, όπου θα αποθηκεύσει την τιμή <span class="courier-code">32</span>. Αυτή η νέα μεταβλητή στην ουσία είναι ένας δείκτης, αριθμός που παραπέμπει σε ποια διεύθυνση της μνήμης έχει αποθηκευτεί η τιμή της (το <span class="courier-code">32</span>). Πιο σωστά, επειδή: </p>
			<p class="blockquote">στην Python όλα είναι αντικείμενα</p>
			<p class="no-indent">η πιο πάνω εντολή είναι ο <i>δημιουργός </i>(<i>constructor</i>) ενός νέου αντικειμένου, τύπου <span class="courier-code">number</span>, με μια συγκεκριμένη τιμή, το <span class="courier-code">32</span>.</p>
			<p>Τα αντικείμενα (βλ. Κεφάλαιο 11) τύπου <span class="courier-code">number</span> είναι <i>αμετάβλητα </i>(<i>immutable</i>), που σημαίνει ότι δεν μπορούν να αλλάξουν τιμή παρά μόνο όταν δημιουργούνται στην αρχή. Αυτό σημαίνει ότι μια νέα ανάθεση τιμής σε μεταβλητή προκαλεί τη δημιουργία ενός νέου αντικειμένου και την καταστροφή του παλαιού από το σύστημα διαχείρισης μνήμης. Για παράδειγμα:</p>
			<img src="media/icon-2_fmt.png" alt=""/>
			<img src="media/ListaKodika-2-2a_fmt.png" alt=""/>
			<p class="no-indent"><b>Γραμμή 1</b>: δημιουργείται νέο αντικείμενο ή ένα <i>στιγμιότυπο </i>(<i>instance</i>) τύπου ακεραίου, με όνομα <span class="courier-code">a</span> και τιμή <span class="courier-code">12</span>. Αυτό έχει ως αποτέλεσμα σε κάποια διεύθυνση στη μνήμη να τοποθετηθεί το <i>αναγνωριστικό </i>(<i>identifier</i>)<sup class="superscript CharOverride-1"><span id="footnote-068-backlink"><a href="#footnote-068">26</a></span></sup> <span class="courier-code">a</span> που θα περιέχει μια δεικτοδότηση στον χώρο όπου αποθηκεύεται η τιμή <span class="courier-code">12</span>. Χωρίς να αλλάζουμε την ουσία, λέμε πιο απλά ότι το <span class="courier-code">a</span> «πήρε» την τιμή <span class="courier-code">12</span>.</p>
			<p class="no-indent"><b>Γραμμές 2-3</b>: γράφοντας το όνομα της μεταβλητής φαίνεται όντως ότι το <span class="courier-code">a</span> έχει την τιμή <span class="courier-code">12</span> (γραμμή 03.)</p>
			<p class="no-indent"><b>Γραμμή 4</b>: δημιουργείται νέο αντικείμενο <span class="courier-code">a</span>, τύπου <span class="courier-code">number</span>, με ταυτόχρονη καταστροφή του προηγούμενου, με νέα τιμή το <span class="courier-code">2</span>.</p>
			<p class="no-indent"><b>Γραμμές 5-6</b>: γράφοντας ξανά το όνομα της μεταβλητής εμφανίζεται το νέο περιεχόμενό της.</p>
			<p class="no-indent">Η χρήση του ‘=’ μπορεί να είναι ιδιαίτερα πιο σύνθετη. Γενικά, μια εντολή της μορφής:</p>
			<p><span class="courier-code">μεταβλητή = παράσταση</span></p>
			<p class="no-indent">εκτελείται ως εξής: γίνεται υπολογισμός της παράστασης δεξιά από το ‘=’ και η τιμή που προκύπτει –ή, γενικά, το αποτέλεσμα– δίνεται στη μεταβλητή που υπάρχει αριστερά από το ‘=’. Η εκχώρηση μπορεί να έχει μια από τις παρακάτω μορφές:</p>
			<ol><li><span class="courier-code">a=10</span> Στη μεταβλητή <span class="courier-code">a</span> δίνεται η τιμή <span class="courier-code">10</span>.</li>
			<li><span class="courier-code">a=a+1</span> Σε ό,τι περιέχει η μεταβλητή <span class="courier-code">a</span> (π.χ. <span class="courier-code">10</span>) προστίθεται το <span class="courier-code">1</span> και το αποτέλεσμα (<span class="courier-code">11</span>) καταχωρείται ως νέα τιμή στο <span class="courier-code">a</span>.</li>
			<li><span class="courier-code">a+=1</span> Προστίθεται <span class="courier-code">1</span> στη μεταβλητή <span class="courier-code">a</span>. Με αυτό τον τρόπο δημιουργείται νέο αντικείμενο, όπως στο προηγούμενο παράδειγμα. Αυτό θέλει ιδιαίτερη προσοχή όταν ένας τέτοιος σύνθετος τελεστής εφαρμόζεται σε <i>μεταβλητά </i>(<i>mutable</i>) αντικείμενα, όπως η <i>λίστα </i>(<i>list</i>). Αντίστοιχες εντολές υπάρχουν και για τις υπόλοιπες πράξεις όπως φαίνεται και στον Πίνακα 2-8 που ακολουθεί.</li>
			<li><span class="courier-code">a=b=c=12</span> Είναι ένας εύκολος τρόπος να δοθεί η ίδια τιμή σε πολλές μεταβλητές σε μια μόνο γραμμή. Εδώ και οι τρεις μεταβλητές παίρνουν την τιμή <span class="courier-code">12</span>.</li>
			<li><span class="courier-code">a,b=5,10</span> Η απόδοση πολλαπλών τιμών σε μεταβλητές, με μια εντολή, γίνεται εύκολα στην Python. Εδώ, η μεταβλητή <span class="courier-code">a</span> θα πάρει την τιμή <span class="courier-code">5</span> και η μεταβλητή <span class="courier-code">b</span> την τιμή <span class="courier-code">10</span>. Στην πραγματικότητα, αυτή η λειτουργία ονομάζεται <i>unpacking </i>και «<i>ξετυλίγει</i>» τις τιμές <span class="courier-code">5</span>, <span class="courier-code">10</span> (που στην ουσία είναι μια πλειάδα, όπως εξηγείται στο Κεφάλαιο 7) και τις εκχωρεί στις μεταβλητές <span class="courier-code">a</span> και <span class="courier-code">b</span>.</li>
			</ol>
			<img src="media/icon-7_fmt.png" alt=""/>
			<p class="no-indent"><span class="bold-italics">Πρόβλημα:</span> <i>Ποιο είναι το αποτέλεσμα της πιο κάτω εντολής;</i></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b=b,a</span></p>
			<figure role="table" id="tb8">
				<figcaption><span role="label">Πίνακας 2-8</span> | Σύνθετοι τελεστές εκχώρησης</figcaption>
				<table id="table008">
					<tbody>
						<tr>
							
								<th>Τελεστής</th>
							
							
								<th>Λειτουργία</th>
							
							
								<th>Παράδειγμα (αρχική τιμή του <span class="CharOverride-2">a</span>=2)</th>
							
							
								<th>Αποτέλεσμα</th>
							
						</tr>
						<tr>
							<td>
								<p>+=</p>
							</td>
							<td>
								<p>Πρόσθεση</p>
							</td>
							<td>
								<p><span class="courier-code">a+=5</span></p>
							</td>
							<td>
								<p><span class="courier-code">7</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>-=</p>
							</td>
							<td>
								<p>Αφαίρεση</p>
							</td>
							<td>
								<p><span class="courier-code">a-=3</span></p>
							</td>
							<td>
								<p><span class="courier-code">-1</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>*=</p>
							</td>
							<td>
								<p>Πολλαπλασιασμός</p>
							</td>
							<td>
								<p><span class="courier-code">a*=5</span></p>
							</td>
							<td>
								<p><span class="courier-code">10</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>/=</p>
							</td>
							<td>
								<p>Διαίρεση</p>
							</td>
							<td>
								<p><span class="courier-code">a/=2</span></p>
							</td>
							<td>
								<p><span class="courier-code">1</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>//=</p>
							</td>
							<td>
								<p>Ακέραια διαίρεση</p>
							</td>
							<td>
								<p><span class="courier-code">a//=3</span></p>
							</td>
							<td>
								<p><span class="courier-code">0</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>%=</p>
							</td>
							<td>
								<p>Υπόλοιπο διαίρεσης</p>
							</td>
							<td>
								<p><span class="courier-code">a%=1</span></p>
							</td>
							<td>
								<p><span class="courier-code">1</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>**=</p>
							</td>
							<td>
								<p>Δύναμη</p>
							</td>
							<td>
								<p><span class="courier-code">a**=4</span></p>
							</td>
							<td>
								<p><span class="courier-code">16</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
		</section>
		<section role="section" id="ch4se8">
			<h1><span role="label">2.8</span> Διαγραφή μεταβλητής</h1>
			<p class="no-indent">Παρόλο που δεν είναι απαραίτητο, μια μεταβλητή, εφόσον δεν χρησιμοποιείται πλέον, μπορεί να διαγραφεί από τη μνήμη με την εντολή <span class="courier-code">del</span>. Η ίδια η γλώσσα διαθέτει <i>σύστημα συλλογής απορριμμάτων </i>(<i>garbage collector</i>), που σημαίνει ότι αν μια μεταβλητή αλλάξει τιμή, η προηγούμενή της τιμή (εφόσον δεν δεικτοδοτείται από καμία άλλη μεταβλητή), πολύ απλά, διαγράφεται, για να γίνει έτσι ξανά διαθέσιμος ο χώρος για άλλα δεδομένα.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Το σύστημα συλλογής απορριμμάτων της Python χρησιμοποιεί εσωτερικά μια λίστα με μετρητές αναφορών (ακόμα και κυκλικών αναφορών, π.χ. λίστα που περιέχει τον εαυτό της) για κάθε αντικείμενο. Όταν ένας μετρητής γίνει μηδέν, αυτό σημαίνει ότι για αυτό το αντικείμενο δεν υπάρχει καμία αναφορά, οπότε διαγράφεται από τη μνήμη.</p>
			</aside>
			<p class="no-indent">Ακολουθεί απόσπασμα από εντολές σε <span class="courier-code">IPython</span> κονσόλα:</p>
			
			<img src="media/icon-3_fmt.png" alt=""/>
			<figure class="lista-kodika">
				<img src="media/ListaKodika-2-2b_fmt.png" alt=""/>
				<footer>
					<p class="figure-notes">* Ο αριθμός που επιστρέφει η συνάρτηση <span class="courier-code">id</span> αναφέρεται στη διεύθυνση μνήμης του αντικειμένου της μεταβλητής <span class="courier-code">a</span>. Αυτό γίνεται σε <span class="courier-code">CPython</span> υλοποιήσεις της γλώσσας, όπως φαίνεται και από την τεκμηρίωση της γλώσσας <a href="">http://bit.ly/2woHKc6</a>. Η έκδοση <span class="courier-code">CPython</span> είναι αυτή που χρησιμοποιείται και στον επίσημο ιστότοπο της Python. Διαφέρει από άλλες υλοποιήσεις (<span class="courier-code">Jython</span>, <span class="courier-code">IronPython</span>, <span class="courier-code">PyPy</span>) στο πώς ο <i>διερμηνευτής (interpreter)</i> της γλώσσας μεταφράζει και εκτελεί τον κώδικα. Η <span class="courier-code">CPython</span> είναι γραμμένη σε <span class="courier-code">C</span> αλλά δεν μεταφράζει τον κώδικα σε <span class="courier-code">C</span> (αυτό το κάνει η έκδοση της γλώσσας με όνομα <span class="courier-code">Cython</span>) αλλά τον μετατρέπει σε <i>byte code</i> (<i>ενδιάμεσο κώδικα</i>) και τον εκτελεί.</p>
				</footer>
			</figure>
			<p class="no-indent">Όπως φαίνεται και από την εντολή [6], η μεταβλητή <span class="courier-code">a</span> διαγράφεται από τη μνήμη.</p>
		</section>
		<section role="section" id="ch4se9">
			<h1><span role="label">2.9</span> Εντολή (συνάρτηση) <span class="courier-code">input</span></h1>
			<p class="no-indent">Κατά τη διάρκεια εκτέλεσης ενός προγράμματος είναι δυνατή η εισαγωγή τιμών από τον χρήστη μέσω της εντολής <span class="courier-code">input</span>. Η σύνταξη που ακολουθείται είναι:</p>
			<p><span class="courier-code">μεταβλητή=input(&apos;μήνυμα&apos;)</span></p>
			<p class="no-indent">Η <span class="courier-code">input</span> είναι μια ενσωματωμένη στη γλώσσα συνάρτηση. Η εντολή:</p>
			<p><span class="courier-code">a=input(&apos;Δώσε μια τιμή&apos;) </span>ή<span class="courier-code"> etos=input(&apos;Πότε γεννήθηκες;&apos;)</span></p>
			<p class="no-indent">έχει ως αποτέλεσμα την παύση εκτέλεσης του προγράμματος και την αναμονή εισαγωγής δεδομένων από τον χρήστη. Στην οθόνη εμφανίζεται το μήνυμα <span class="courier-code">&quot;Πότε γεννήθηκες;&quot;</span> (χωρίς τα εισαγωγικά), καθοδηγώντας τον χρήστη για την απάντηση που πρέπει να δώσει. Ακολουθεί μια δοκιμαστική-πιθανή εκτέλεσή του.</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [42]:</b></span><span class="courier-code"> etos=input(&apos;Πότε γεννήθηκες;&apos;)</span></p>
			<p><span class="courier-code">Πότε γεννήθηκες;</span><span class="courier-code"><b>1998</b></span><span class="courier-code"> </span><span class="keycaps">Â</span><span class="courier-code">&#9;#πιθανή απάντηση το &quot;1998&quot;</span></p>
			<p><span class="courier-code"><b>In [43]:</b></span><span class="courier-code"> print(&apos;Πολύ καλή χρονιά το&apos;,etos,&apos;!&apos;)</span></p>
			<p><span class="courier-code">Πολύ καλή χρονιά το 1998!</span></p>
			<p class="no-indent">όπου εμφανίζεται ένα μήνυμα (<span class="courier-code">Πότε</span> <span class="courier-code">γεννήθηκες;</span>). Η τιμή που εισάγεται (<span class="courier-code">1998</span>) καταχωρείται στη μεταβλητή <span class="courier-code">etos</span>. Στη συνέχεια, αυτή η τιμή χρησιμοποιείται σε μια εντολή εμφάνισης (<span class="courier-code">print</span>) ενός μηνύματος (<span class="courier-code">Πολύ καλή χρονιά το 1998 !</span>).</p>
			<p>Η εντολή <span class="courier-code">input</span> αποδίδει σε μια μεταβλητή πάντα μια αλφαριθμητική τιμή-κείμενο (string). Για την εισαγωγή αριθμητικών δεδομένων απαιτείται χρήση μιας κατάλληλης συνάρτησης μετατροπής τύπων, η οποία θα μετατρέψει το κείμενο σε αριθμό, ώστε να μπορούν να γίνουν αριθμητικοί υπολογισμοί. Αν, για παράδειγμα, πρέπει να υπολογιστεί το τετράγωνο ενός αριθμού <span class="courier-code">a</span>, που θα δοθεί από την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=input(&apos;Δώσε μια τιμή&apos;)</span></p>
			<p class="no-indent">και γίνει προσπάθεια υπολογισμού του <span class="courier-code">α2</span> με την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a*a</span></p>
			<p class="no-indent">αυτό θα προκαλέσει <i>σφάλμα χρόνου εκτέλεσης</i>, ή <i>εξαίρεση </i>(<i>exception </i>– <span class="courier-code">Type </span><span class="courier-code">Error</span>), αφού το <span class="courier-code">a</span> δεν περιέχει αριθμό αλλά κείμενο. Αν για παράδειγμα στην <span class="courier-code">input</span> δοθεί ο αριθμός <span class="courier-code">5</span>, αυτό θα περαστεί στο <span class="courier-code">a</span> ως <span class="courier-code">&apos;5&apos;</span>, δηλαδή ως κείμενο, με αποτέλεσμα η πράξη <span class="courier-code">&apos;5&apos;*&apos;5&apos;</span> που γίνεται στην αμέσως επόμενη εντολή να μην μπορέσει να εκτελεστεί, γιατί και οι δύο τελεστές είναι τύπου <span class="courier-code">string</span><sup class="superscript CharOverride-1"><span id="footnote-067-backlink"><a href="#footnote-067">27</a></span></sup>.</p>
			<img src="media/icon-9_fmt.png" alt=""/>
			<p>Στην έκδοση 2.x υπάρχει αρκετά σημαντική διαφοροποίηση στον τρόπο που εισάγονται δεδομένα από το πληκτρολόγιο (από τον χρήστη). Η <span class="courier-code">input</span> επιστρέφει πάντα αριθμό –ενώ επιλέγει μόνη της τον πιο κατάλληλο τύπο (!), ακέραιο ή πραγματικό– και σφάλμα αν δοθεί κείμενο. Επιπλέον διαθέτει και τη <span class="courier-code">raw_input()</span>, αντίστοιχη συνάρτηση με την <span class="courier-code">input()</span>της έκδοσης 3.x, η οποία όμως επιστρέφει πάντα κείμενο.</p>
		</section>
		<section role="section" id="ch4se10">
			<h1><span role="label">2.10</span> Μετατροπές τύπων </h1>
			<p class="no-indent">Όπως γίνεται εύκολα αντιληπτό, πολύ συχνά, ή, πιο σωστά, σχεδόν πάντα, είναι αναγκαίο ή και αναπόφευκτο, να γίνουν μετατροπές από τον ένα τύπο δεδομένων σε κάποιον άλλο, να αλλάξει δηλαδή ο τύπος τους. Σε κάποιες περιπτώσεις αυτό το έργο το αναλαμβάνει η ίδια η γλώσσα, όταν είναι απαραίτητο για την επίτευξη του «καλύτερου» δυνατού αποτελέσματος, ενώ σε κάποιες άλλες αυτό θα πρέπει να γίνει από τον προγραμματιστή. </p>
			<p>Η πιο συχνή περίπτωση είναι μετά από τη χρήση της εντολής <span class="courier-code">input</span> και τη μετατροπή της τιμής της (τύπου <span class="courier-code">string</span>) σε κάποια αριθμητική. Έστω ότι ζητείται να δοθεί ο αριθμός των παιδιών ενός υπαλλήλου και να υπολογιστεί ένα επίδομα τέκνων, 20€ για κάθε τέκνο. Αν δοθεί ως απόκριση ο αριθμός 2 στην παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=</span><span class="courier-code">input(&apos;Δώσε τον αριθμό παιδιών:&apos;)</span></p>
			<p class="no-indent">ο έλεγχος του τύπου της μεταβλητής με την πιο κάτω εντολή θα διευκρινίσει αρκετά την κατάσταση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
			<p class="no-indent">Επιστρέφει <span class="courier-code">&lt;class &apos;str&apos;&gt;</span>, αφού είναι κείμενο. Έτσι, η χρήση ενός τελεστή όπως του ‘*’ για τον υπολογισμό του επιδόματος, με μια τέτοια μεταβλητή, θα προκαλέσει μάλλον αναπάντεχα αποτελέσματα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a*20</span></p>
			<p class="no-indent">δίνοντας ως αποτέλεσμα <span class="courier-code">&apos;22222222222222222222&apos;</span> (20 ενωμένοι χαρακτήρες ‘<span class="courier-code">2</span>’) και όχι τον αριθμό <span class="courier-code">40</span> (από το <span class="courier-code">2*20</span>) που ίσως θα περίμενε κανείς. Αυτό συμβαίνει γιατί στην Python δεν υπάρχει αυτόματη μετατροπή από κείμενο σε αριθμό, ενώ οι αντίστοιχοι αριθμητικοί τελεστές αποκτούν άλλη λειτουργία όταν αλλάζει ο τύπος δεδομένων τον οποίο καλούνται να χειριστούν. Αυτή η λειτουργία ονομάζεται <i>υπερφόρτωση τελεστών </i>(<i>operator overloading</i>) και συμβαίνει σε όλους τους <i>ενσωματωμένους </i>(<i>built-in</i>) τύπους της γλώσσας όπως οι συμβολοσειρές, οι λίστες κ.ά. Στο Κεφάλαιο 11 (αντικείμενα) περιγράφεται ο τρόπος που μπορεί να οριστεί από τον προγραμματιστή η αλλαγή λειτουργίας των τελεστών σε δομές όπως οι κλάσεις αντικειμένων. Στο προηγούμενο παράδειγμα, προκειμένου να γίνουν οι πράξεις με το <span class="courier-code">a</span>, αυτό θα πρέπει ρητά να μετατραπεί σε ακέραιο όπως γίνεται με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=int(a) #μετατροπή της μεταβλητής a σε ακέραιο αριθμό</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
			<p><span class="courier-code">&lt;class &apos;int&apos;&gt;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a*20</span></p>
			<p><span class="courier-code">40</span></p>
			<p class="no-indent">Υπάρχουν ωστόσο και άλλες συναρτήσεις που κάνουν μετατροπές στον τύπο των δεδομένων και χρησιμοποιούνται όταν είναι γνωστό εκ των προτέρων το είδος που επιθυμείται. Κάτι τέτοιο γίνεται με μια από τις παρακάτω συναρτήσεις, με την τελευταία εξ αυτών να υπολογίζει μόνη της τον επιθυμητό τύπο βάσει των δεδομένων που δέχεται.</p>
			<p class="arabic"><span class="courier-code">int(a, base=n)</span>: μετατρέπει σε αριθμό μια συμβολοσειρά που περιέχει αριθμό. Π.χ. η: </p>
			<p><span class="courier-code">&gt;&gt;&gt; int(&apos;11&apos;) </span></p>
			<p class="no-indent">επιστρέφει τον ακέραιο αριθμό <span class="courier-code">11</span>, ενώ η: </p>
			<p><span class="courier-code">&gt;&gt;&gt; int(&apos;0b0100&apos;, base=2) </span></p>
			<p class="no-indent">επιστρέφει <span class="courier-code">4</span> κάνοντας ταυτόχρονα και μετατροπή από το δυαδικό σύστημα που είναι το <span class="courier-code">0b0100</span>, ενώ η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; int(&apos;0xff&apos;, base=16)</span></p>
			<p class="no-indent">επιστρέφει τον αριθμό <span class="courier-code">255</span> από τον δεκαεξαδικό <span class="courier-code">0</span><span class="courier-code">xff</span>. Το όρισμα <span class="courier-code">base</span> δέχεται έναν αριθμό <span class="courier-code">0</span> ή από το <span class="courier-code">2</span> μέχρι το <span class="courier-code">36</span>. Η <span class="courier-code">int</span> επίσης μπορεί να μετατρέψει έναν πραγματικό αριθμό σε ακέραιο, κάνοντας αποκοπή δεκαδικών προς το μηδέν, όπως η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; int(3.14)</span></p>
			<p class="no-indent">που επιστρέφει τον ακέραιο <span class="courier-code">3</span>, ενώ η:</p>
			<p><span class="courier-code">&gt;&gt;&gt; int(-3.14)</span></p>
			<p class="no-indent">που επιστρέφει τον ακέραιο <span class="courier-code">-3</span>.</p>
			<p class="arabic"><span class="courier-code">float()</span>: μετατρέπει κείμενο ή ακέραιο σε πραγματικό. Για παράδειγμα, η:</p>
			<p><span class="courier-code">&gt;&gt;&gt; float(3) </span>ή<span class="courier-code"> float(&apos;3&apos;)</span></p>
			<p class="no-indent">επιστρέφει τον πραγματικό <span class="courier-code">3.0</span></p>
			<p class="arabic"><span class="courier-code">complex(a,b)</span>: κάνει τη μετατροπή σε μιγαδικό αριθμό. Για παράδειγμα, η:</p>
			<p>&gt;&gt;&gt;<span class="courier-code"> complex(2,-3)</span></p>
			<p class="no-indent">δημιουργεί τον μιγαδικό <span class="courier-code">(2-3j)</span>, όπου το <span class="courier-code">2</span> είναι το πραγματικό μέρος και το <span class="courier-code">-3</span> το φανταστικό.</p>
			<p class="arabic"><span class="courier-code">str()</span>: κάνει την αντίστροφη εργασία, σε σχέση με τις προηγούμενες συναρτήσεις που μετέτρεπαν κείμενο σε αριθμό, μετατρέποντας κάποιον αριθμό σε κείμενο. Για παράδειγμα, η:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> str(12.3)</span></p>
			<p class="no-indent">επιστρέφει το κείμενο ‘<span class="courier-code">12.3&apos;</span></p>
			<p class="arabic"><span class="courier-code">eval(κείμενο)</span>: επιλέγει αυτόματα για το κείμενο τον κατάλληλο αριθμητικό τύπο. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; eval(&apos;12.3&apos;)</span></p>
			<p class="no-indent">επιστρέφει τον πραγματικό αριθμό <span class="courier-code">12.3</span>. Είναι ίσως η καλύτερη περίπτωση αναγνώρισης των δεδομένων και άμεσης μετατροπής τους στον αντίστοιχο τύπο κατευθείαν από τη γλώσσα.</p>
			<p>Στην ουσία όμως η <span class="courier-code">eval()</span> μετατρέπει το κείμενο που θα της δοθεί σε κώδικα Python, τον οποίο στη συνέχεια αναγνωρίζει και εκτελεί όπως η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; eval(&apos;print</span><span class="courier-code">(&quot;Hi&quot;)&apos;)</span></p>
			<p><span class="courier-code">Hi</span></p>
			<p class="no-indent">Αν το όρισμα δεν μπορεί να μετατραπεί σε αριθμό, ή σε κάποια έγκυρη εντολή, τότε εμφανίζεται μήνυμα σφάλματος. Ωστόσο, αυτό μπορεί να αποτελέσει σοβαρό κενό ασφαλείας αν χρησιμοποιηθεί σε λειτουργικά τύπου Linux σε συνδυασμό με την εντολή <span class="courier-code">input</span> και με πακέτα όπως αυτό του <span class="courier-code">os</span> (που προσφέρει ένα περιβάλλον διεπαφής με εντολές του λειτουργικού συστήματος): κάτι τέτοιο θα είχε ως αποτέλεσμα να μπορεί ο χρήστης του προγράμματος να εκτελέσει δικό του κώδικα μέσα από την <span class="courier-code">eval()</span>. Ένα παράδειγμα είναι: </p>
			<p><span class="courier-code">&gt;&gt;&gt; os.system(&apos;rm</span><span class="courier-code"> -rf *&apos;)</span></p>
			<p class="no-indent">που διαγράφει όλα τα αρχεία στον δίσκο.</p>
		</section>
		<section role="section" id="ch4se11">
			<h1><span role="label">2.11</span> Μεικτοί υπολογισμοί (Mixed operations) &amp; αναγωγή τύπων (Type casting)</h1>
			<p class="no-indent">Γενικά, ο τύπος των τελεστέων σε κάθε πράξη καθορίζει τον τύπο του αποτελέσματος. Έτσι, τα πιο κάτω αποτελέσματα (Λίστα Κώδικα 2-3) είναι λίγο πολύ αναμενόμενα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-3 | Μεικτοί υπολογισμοί</figcaption><img src="media/ListaKodika-2-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι πιο συχνές περιπτώσεις όπου η μετατροπή γίνεται αυτόματα είναι η πραγματοποίηση αριθμητικών πράξεων. Χαρακτηριστικό παράδειγμα η διαίρεση. Χρησιμοποιώντας τον τελεστή ‘/’ η Python πραγματοποιεί <i>πραγματική διαίρεση </i>(<i>true division</i>), ανεξάρτητα από τον τύπο των ορισμάτων της. Για παράδειγμα, η πιο κάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 4/2</span></p>
			<p class="no-indent">θα επιστρέψει τον πραγματικό αριθμό <span class="courier-code">2.0</span> για να πετύχει τη μεγαλύτερη δυνατή ακρίβεια στον υπολογισμό, ανεξάρτητα από το γεγονός ότι και οι δύο τελεστέοι είναι ακέραιοι. Αν παρ’ όλα αυτά είναι επιθυμητή η ακέραια έκφραση του αποτελέσματος, αυτό μπορεί να γίνει με τη χρήση του τελεστή ‘//’, που πραγματοποιεί διαίρεση πατώματος ή προς τα κάτω (floor division), στρογγυλοποιώντας στον πλησιέστερο ακέραιο «προς τα κάτω» (<span class="courier-code">-3//2</span> επιστρέφει <span class="courier-code">-2</span>), ή με κάποια από τις συναρτήσεις μετατροπής τύπων της Python που παρουσιάζονται σε αυτήν και στην επόμενη παράγραφο. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 4+3.2</span></p>
			<p class="no-indent">που περιλαμβάνει πράξη μεταξύ αριθμών διαφορετικού τύπου, θα μετατρέψει τον πιο απλό τύπο (ακέραιο, το <span class="courier-code">4</span>) στον πιο σύνθετο (πραγματικό, σαν το <span class="courier-code">3.2</span>, σε <span class="courier-code">4.0</span>) και θα πραγματοποιήσει τον τελικό υπολογισμό: <span class="courier-code">7.2</span> ως πραγματικό, στον πιο σύνθετο τύπο, ώστε να διατηρήσει τη μεγαλύτερη δυνατή ακρίβεια. Με παρόμοιο τρόπο, η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; (1+2j)+10</span></p>
			<p class="no-indent">επιστρέφει <span class="courier-code">11+2j</span>, ενσωματώνοντας στο αποτέλεσμα (που είναι μιγαδικός αριθμός) και τον ακέραιο αριθμό <span class="courier-code">10</span>.</p>
			<p>Ενώ η Python αφήνει αρκετή ελευθερία στον χειρισμό αριθμητικών δεδομένων διαφορετικών τύπων, φροντίζοντας να κάνει τους υπολογισμούς με κατάλληλη μετατροπή των αριθμών που χειρίζεται, ωστόσο δεν επιτρέπει την άμεση επεξεργασία δεδομένων διαφορετικών τύπων. Έτσι, δεν επιτρέπονται πράξεις αριθμητικών δεδομένων με δεδομένα που δεν είναι αριθμοί, όπως είναι οι συμβολοσειρές, αφού η Python δεν κάνει καμία αυτόματη μετατροπή από τον ένα τύπο στον άλλο. Για παράδειγμα η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 5+&apos;5&apos;</span></p>
			<p class="no-indent">θα προκαλέσει την <i>εξαίρεση εκτέλεσης </i>(<i>runtime exception</i>) και θα επιστρέψει το σφάλμα:</p>
			<p><span class="courier-code">TypeError: unsupported operand type(s) for +: &apos;int&apos; and &apos;str&apos;</span></p>
			<p class="no-indent">δίνοντας την «εξήγηση» ότι ο τελεστής <span class="courier-code">+</span> δεν μπορεί να χρησιμοποιηθεί για δεδομένα διαφορετικού τύπου (<span class="courier-code">int</span> και <span class="courier-code">str</span>). Για να μπορέσει να γίνει μια τέτοια πράξη, θα πρέπει να προηγηθεί η μετατροπή του αλφαριθμητικού <span class="courier-code">&apos;5&apos;</span> σε αριθμό με τη χρήση κατάλληλης συνάρτησης ως εξής:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 5+int(&apos;5&apos;)</span></p>
			<p class="no-indent">δίνοντας το αναμενόμενο αποτέλεσμα (<span class="courier-code">10</span>). </p>
			<p>Στην Python, εκτός από τους τελεστές, υπάρχουν και διάφοροι άλλοι τρόποι χειρισμού αριθμών, όπως οι ενσωματωμένες στην ίδια τη γλώσσα (<i>built-in</i>) συναρτήσεις, συναρτήσεις από βασικές βιβλιοθήκες, που υπάρχουν στον υπολογιστή αμέσως μετά την εγκατάσταση του διερμηνευτή της γλώσσας, συναρτήσεις από εξωτερικές βιβλιοθήκες που χρειάζεται να εγκατασταθούν ξεχωριστά (αναλύεται στο Κεφάλαιο 10), καθώς και μέθοδοι και ιδιότητες κλάσεων αριθμών. Στις επόμενες παραγράφους, περιγράφονται οι πιο βασικές από αυτές.</p>
		</section>
		<section role="section" id="ch4se12">
			<h1><span role="label">2.12</span> Ενσωματωμένες λειτουργίες χειρισμού αριθμών</h1>
			<section role="subsection" id="ch4se12ss1">
				<h1><span role="label">2.12.1</span> Μέθοδοι αντικειμένων αριθμών </h1>
				<p class="no-indent">Η Python εφαρμόζει σε κάθε αριθμητικό δεδομένο στοιχεία του αντικειμενοστραφούς προγραμματισμού. Έτσι, κάθε αριθμός, αφού είναι ένα διακριτό αντικείμενο, ενσωματώνει μέσα του όλα τα δομικά στοιχεία ενός αντικειμένου, όπως ο πολυμορφισμός και η κληρονομικότητα (περισσότερες λεπτομέρειες στο Κεφάλαιο 11). Πιο συγκεκριμένα, κάθε αριθμός έχει, ανάλογα με τον τύπο του (<span class="courier-code">Boolean, int, float, </span><span class="courier-code">complex</span>), ιδιαίτερα χαρακτηριστικά και <i>ιδιότητες </i>(<i>attributes – properties</i>) καθώς και ειδικές διαδικασίες χειρισμού τους, τις αντίστοιχες δηλαδή <i>μεθόδους </i>(<i>methods</i>). Για τη χρήση μεθόδων είναι απαραίτητη η σύνταξη με τον «<i>τρόπο της τελείας</i>» (<i>dot notation</i>). Γράφεται το αντικείμενο, ακολουθεί μια τελεία, γράφεται η μέθοδος, ή η ιδιότητα, και μέσα σε παρενθέσεις τοποθετούνται τυχόν ορίσματα ή παράμετροι που απαιτούνται:</p>
				<p><span class="courier-code">αντικείμενο.μέθοδος</span> ή <span class="courier-code">ιδιότητα (ορίσματα)</span></p>
				<p class="no-indent"><span class="bold-italics">Ακέραιοι αριθμοί</span></p>
				<p class="no-indent"><span class="courier-code">int.bit_length()</span></p>
				<p class="no-indent">Για κάθε ακέραιο αριθμό μπορεί να εμφανιστεί το μέγεθος των bit που απαιτούνται για τη δυαδική αναπαράστασή του στη μνήμη του υπολογιστή. Αυτό γίνεται με την πιο κάτω εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.bit_length()</span></p>
				<p class="no-indent">Αν το <span class="courier-code">a</span> έχει π.χ. την τιμή <span class="courier-code">128</span>, θα εμφανιστεί ως αποτέλεσμα η τιμή <span class="courier-code">8</span> που δηλώνει τον αριθμό των bit που καταλαμβάνει αυτός. Αυτό φαίνεται και από τη μετατροπή του σε δυαδική μορφή με τη συνάρτηση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; bin</span><span class="courier-code">(a)</span></p>
				<p class="no-indent">επιστρέφοντας την τιμή <span class="courier-code">&apos;0b10000000&apos;</span>. Στον αριθμό των bit δεν περιλαμβάνεται το πρόσημο του αριθμού.</p>
				<p>Επίσης, αντί για μεταβλητή, μπορεί να χρησιμοποιηθεί και αριθμός, αλλά θα πρέπει να δοθεί μέσα σε παρένθεση (για να μην υπάρχει σύγχυση με τους πραγματικούς αριθμούς), όπως γίνεται παρακάτω με τον αριθμό <span class="courier-code">12</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; (12).bit_length()</span></p>
				<p class="no-indent">που έχει ως αποτέλεσμα τον αριθμό <span class="courier-code">4</span> (bit).</p>
				<p class="no-indent"><span class="bold-italics">Πραγματικοί αριθμοί</span></p>
				<p class="no-indent"><span class="courier-code">float.as_integer_ratio()</span></p>
				<p class="no-indent">Ένας πραγματικός αριθμός <span class="courier-code">x</span> (με τιμή έστω <span class="courier-code">0.1</span>) μπορεί να δοθεί ως ο ακριβής λόγος δύο κατάλληλων ακέραιων αριθμών με τη χρήση της πιο κάτω μεθόδου:</p>
				<p><span class="courier-code">&gt;&gt;&gt; x.as_integer_ratio()</span></p>
				<p class="no-indent">Αυτό που επιστρέφεται είναι η πλειάδα-ζεύγος ακέραιων αριθμών <span class="courier-code">(360287970 1896397, 36028797018963968)</span> με πρώτο τον αριθμητή και δεύτερο τον παρονομαστή ενός κλάσματος που αποφέρει το <span class="courier-code">x</span>. Οι παρακάτω εντολές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; x=1.5</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; x.as_integer_ratio()</span></p>
				<p><span class="courier-code">(3, 2)</span></p>
				<p class="no-indent">έχουν ως αποτέλεσμα την εμφάνιση του <span class="courier-code">x</span> ως του λόγου ￼. Μια «σύντομη» μορφή του <i>π</i> μπορεί να δοθεί ως εξής:</p>
				<p><span class="courier-code">&gt;&gt;&gt; pi=3.1415</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; pi.as_integer_ratio()</span></p>
				<p><span class="courier-code">(7074029114692207, 2251799813685248)</span></p>
				<p class="no-indent">δηλαδή με τον λόγο: ￼ </p>
				<p class="no-indent"><span class="courier-code">float.is_integer()</span></p>
				<p class="no-indent">Με αυτή τη μέθοδο ελέγχεται αν ένας δοσμένος πραγματικός αριθμός έχει τη μορφή ακεραίου, δηλαδή αν περιέχει μηδέν δεκαδικά ψηφία. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; (2.34).is_</span><span class="courier-code">integer()</span></p>
				<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">False</span> (δεν είναι ακέραιος), ενώ η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; (134.0).is_integer()</span></p>
				<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">True</span> (που σημαίνει ότι είναι ακέραιος).</p>
				<p class="no-indent"><span class="courier-code">float.hex()</span></p>
				<p class="no-indent">Για τη μετατροπή ενός πραγματικού αριθμού σε δεκαεξαδική μορφή υπάρχει η μέθοδος hex. Στο παρακάτω παράδειγμα μετατρέπεται ένας πραγματικός αριθμός <span class="courier-code">s</span> (έστω 256.23), στον αντίστοιχο δεκαεξαδικό του:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s.</span><span class="courier-code">hex()</span></p>
				<p class="no-indent">Το αποτέλεσμα της εντολής είναι η επιστροφή του αριθμού <span class="courier-code">&apos;0x1.003ae147ae148p+8&apos; </span>που είναι σε δεκαεξαδική μορφή. Το γράμμα <span class="courier-code">p</span> δηλώνει δύναμη και αντικαθιστά το γράμμα <span class="courier-code">e</span> ή το <span class="courier-code">E</span> που χρησιμοποιείται στην επιστημονική γραφή στο δεκαδικό σύστημα.</p>
				<p class="no-indent"><span class="courier-code">float.fromhex(s)</span></p>
				<p class="no-indent">Σε αντίθεση με την προηγούμενη μέθοδο που εφαρμόζεται σε στιγμιότυπα αντικειμένων τύπου <span class="courier-code">float</span>, υπάρχει και η παρακάτω μέθοδος της κλάσης <span class="courier-code">float</span> που μετατρέπει έναν δεκαεξαδικό στον αντίστοιχο δεκαδικό του:</p>
				<p><span class="courier-code">&gt;&gt;&gt; float.fromhex(&apos;0xff&apos;)</span></p>
				<p class="no-indent">όπου μέσα στην παρένθεση δίνεται με μορφή συμβολοσειράς ο δεκαεξαδικός <span class="courier-code">&apos;0xff&apos;</span> και επιστρέφει τον <span class="courier-code">255.0</span> αντίστοιχό του δεκαδικό.</p>
				<p class="no-indent"><span class="bold-italics">Μιγαδικοί αριθμοί</span></p>
				<p class="no-indent">Για τους μιγαδικούς αριθμούς είναι διαθέσιμα δύο χαρακτηριστικά που μπορούν να εξάγουν από έναν τέτοιο αριθμό καθένα από τα δύο συνθετικά του μέρη, το πραγματικό και το φανταστικό. Έστω ότι <span class="courier-code">c=complex(2,3)</span>, που είναι η συνάρτηση η οποία δημιουργεί μιγαδικούς· τότε η παρακάτω γραμμή:</p>
				<p><span class="courier-code">c.real, c.imag</span></p>
				<p class="no-indent">επιστρέφει μια πλειάδα (εδώ ζεύγος) τιμών, <span class="courier-code">(2.0,</span> <span class="courier-code">3.0)</span> της πραγματικής και της φανταστικής τιμής του <span class="courier-code">c (2 + 3j</span><span class="courier-code">)</span> αντίστοιχα.</p>
			</section>
			<section role="subsection" id="ch4se12ss2">
				<h1><span role="label">2.12.2</span> Ενσωματωμένες συναρτήσεις</h1>
				<p class="no-indent">Με την εκκίνηση του διερμηνευτή της Python φορτώνεται το περιβάλλον της γλώσσας (το κέλυφος), καθώς επίσης και μια σειρά από στοιχεία, όπως η <i>ενσωματωμένη βιβλιοθήκη</i> (<i>built-in module</i>) <span class="courier-code">builtins</span>. Δίνοντας την πιο κάτω εντολή φαίνεται το περιεχόμενο (εξαιρέσεις, κλάσεις, μέθοδοι και συναρτήσεις) αυτής της βιβλιοθήκης:</p>
				<p><span class="courier-code">&gt;&gt;&gt; dir(__builtins__)</span></p>
				<p class="no-indent">Αυτό κάνει μια σειρά από συναρτήσεις (μερικές από τις οποίες εμφανίζονται στον Πίνακα 2-9) να είναι άμεσα διαθέσιμες σε κάθε πρόγραμμα γραμμένο στην Python, χωρίς να είναι απαραίτητη η εισαγωγή επιπλέον στοιχείων.</p>
				<figure role="table" id="tb9">
					<figcaption><span role="label">Πίνακας 2-9</span> | Κάποιες ενσωματωμένες συναρτήσεις</figcaption>
					<table id="table009">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">abs(</span></p>
								</td>
								<td>
									<p><span class="courier-code">chr()</span></p>
								</td>
								<td>
									<p><span class="courier-code">float()</span></p>
								</td>
								<td>
									<p><span class="courier-code">int()</span></p>
								</td>
								<td>
									<p><span class="courier-code">oct()</span></p>
								</td>
								<td>
									<p><span class="courier-code">round()</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">bin()</span></p>
								</td>
								<td>
									<p><span class="courier-code">complex()</span></p>
								</td>
								<td>
									<p><span class="courier-code">help()</span></p>
								</td>
								<td>
									<p><span class="courier-code">max()</span></p>
								</td>
								<td>
									<p><span class="courier-code">ord()</span></p>
								</td>
								<td>
									<p><span class="courier-code">sum()</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">bool()</span></p>
								</td>
								<td>
									<p><span class="courier-code">dir()</span></p>
								</td>
								<td>
									<p><span class="courier-code">hex()</span></p>
								</td>
								<td>
									<p><span class="courier-code">memoryview()</span></p>
								</td>
								<td>
									<p><span class="courier-code">pow()</span></p>
								</td>
								<td>
									<p><span class="courier-code">type()</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">bytearray()</span></p>
								</td>
								<td>
									<p><span class="courier-code">divmod()</span></p>
								</td>
								<td>
									<p><span class="courier-code">id()</span></p>
								</td>
								<td>
									<p><span class="courier-code">min()</span></p>
								</td>
								<td>
									<p><span class="courier-code">print()</span></p>
								</td>
								<td>
									<p><span class="courier-code">vars()</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">bytes()</span></p>
								</td>
								<td>
									<p><span class="courier-code">eval()</span></p>
								</td>
								<td>
									<p><span class="courier-code">input()</span></p>
								</td>
								<td>
								</td>
								<td>
								</td>
								<td>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Ο παρακάτω κώδικας (Λίστα Κώδικα 2-4) εμφανίζει μερικές τυπικές χρήσεις αυτών των συναρτήσεων. </p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-4 | Ενσωματωμένες συναρτήσεις</figcaption><img src="media/ListaKodika-2-4_fmt.png" alt=""/></figure>
				<p class="no-indent"><b>Γραμμές 9-14</b>: Η συνάρτηση <span class="courier-code">bool</span> επιστρέφει μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Το αποτέλεσμα είναι πάντοτε <span class="courier-code">True</span> για οποιοδήποτε μη μηδενικό στοιχείο, ή στοιχείο που δεν είναι κενό. Έτσι, οι περιπτώσεις <span class="courier-code">0</span>,<span class="courier-code"> &apos;&apos;</span>,<span class="courier-code"> ()</span>,<span class="courier-code"> []</span>,<span class="courier-code"> </span><span class="courier-code">{}</span>,<span class="courier-code"> None</span> επιστρέφουν <span class="courier-code">False</span>. Αντίθετα, τιμές όπως <span class="courier-code">12</span>,<span class="courier-code"> 1</span>,<span class="courier-code"> &apos;κείμενο&apos;</span>,<span class="courier-code"> [1,2]</span> και οτιδήποτε, γενικά, που έχει κάποια τιμή επιστρέφει <span class="courier-code">True</span>.</p>
				<p class="no-indent"><b>Γραμμές 35-44</b>: Η συνάρτηση <span class="courier-code">round</span> στρογγυλοποιεί έναν δοσμένο αριθμό, ακέραιο ή πραγματικό, σε συγκεκριμένο ψηφίο. Η γενική μορφή της συνάρτησης είναι:</p>
				<p><span class="courier-code">round(αριθμός, πλήθος ψηφίων)</span></p>
				<p class="no-indent">Όταν το πλήθος των ψηφίων είναι θετικός αριθμός, τότε δηλώνει το πλήθος των δεκαδικών· αν είναι αρνητικός, δηλώνει στρογγυλοποίηση σε μονάδες, δεκάδες, εκατοντάδες κ.λπ., ενώ αν παραλείπεται, ή αν είναι μηδέν, στρογγυλοποιεί στον «πλησιέστερο» ακέραιο.</p>
				<img src="media/icon-6_fmt.png" alt=""/>
				
				<aside>
					<h1 class="aside-title"><span class="bold-italics">Ειδική περίπτωση</span></h1>
					<p>Τέτοιου είδους στρογγυλοποιήσεις αριθμών, με τη <span class="courier-code">round()</span>, είναι γνωστό από τις πρώτες τάξεις του σχολείου πώς γίνονται. Αν το πρώτο ψηφίο που βρίσκεται μετά (πιο δεξιά) από το σημείο αποκοπής είναι ≥5, τότε το τελευταίο ψηφίο στρογγυλοποιείται προς τα επάνω, αλλιώς προς τα κάτω. Για παράδειγμα, αν η μεταβλητή <span class="courier-code">pi</span> έχει την τιμή <span class="courier-code">3.1415</span>, τότε η παρακάτω εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; round(pi,2)</span></p>
					<p>επιστρέφει <span class="courier-code">3.14</span>, ενώ η εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; round(pi,3)</span></p>
					<p>επιστρέφει <span class="courier-code">3.142</span>.</p>
					</aside>
				
				<p>Ιδιαίτερη προσοχή χρειάζεται όμως σε δύο περιπτώσεις όπου το αποτέλεσμα μπορεί να μην ακολουθεί τον πιο πάνω κανόνα. </p>
				<p>Η 1η περίπτωση έχει να κάνει με την αδυναμία του υλικού για την ακριβή δυαδική αναπαράσταση ενός αριθμού, που περιγράφεται σε επόμενη ενότητα. </p>
				<img src="media/icon-9_fmt.png" alt=""/>
				<p>Η 2η περίπτωση έχει να κάνει με τη διαφορετική τεχνική που υλοποιείται στην έκδοση 3.x σε σχέση με την έκδοση 2.x της Python. Στην έκδοση 2.x οι εντολές <span class="courier-code">round(0.5)</span> και <span class="courier-code">round(1.5)</span> επιστρέφουν <span class="courier-code">1.0</span> και <span class="courier-code">2.0</span> αντίστοιχα, κάνοντας πάντα στρογγυλοποίηση προς τα επάνω αν το δεκαδικό μέρος είναι ακριβώς <span class="courier-code">0.5</span>. Αντίθετα, στην έκδοση 3.x οι προηγούμενες εντολές θα επιστρέψουν <span class="courier-code">0.0</span> και <span class="courier-code">2.0</span> αντίστοιχα. Και αν στην 1η περίπτωση το αποτέλεσμα φαίνεται απόλυτα λογικό και αναμενόμενο σύμφωνα με τα μαθηματικά γυμνασίου, και τα αποτελέσματα της έκδοσης 3.x ωστόσο έχουν την εξήγησή τους. Στην τελευταία έκδοση της γλώσσας έχει αλλάξει ο αλγόριθμος στρογγυλοποίησης που χρησιμοποιείται. </p>
				<p>Πιο συγκεκριμένα, αν το κομμάτι που αποκόπτεται είναι ίσο με <span class="courier-code">.5</span>, τότε η στρογγυλοποίηση γίνεται προς τον <i>πλησιέστερο άρτιο αριθμό</i>. Αυτή η μέθοδος ονομάζεται <i>half round even</i>. Είναι ο εξ ορισμού επιλεγμένος αλγόριθμος σύμφωνα με το πρότυπο IEEE 754, στοιχεία του οποίου περιγράφονται σε επόμενη ενότητα, και είναι γνωστός ως ο <i>αλγόριθμος στρογγυλοποίησης του τραπεζίτη </i>(<i>banker’s rounding</i>). Ο λόγος που χρησιμοποιείται η συγκεκριμένη μέθοδος, όχι μόνο από την Python, αλλά και από άλλες σύγχρονες γλώσσες (όπως π.χ. στο NET Framework), έχει να κάνει με το γεγονός ότι με αυτό τον τρόπο, όταν γίνονται υπολογισμοί με πολλά στρογγυλοποιημένα ποσά, το συνολικό σφάλμα ελαχιστοποιείται και το τελικό ποσό είναι <i>αμερόληπτο </i>(<i>unbiased</i>). Αυτό, βέβαια, έχει να κάνει και με την κατανομή που τα συγκεκριμένα ποσά ακολουθούν. Αν είναι κανονική, κάθε ποσό έχει τις ίδιες πιθανότητες να καταλήγει σε άρτιο ή περιττό αριθμό.</p>
			</section>
		</section>
		<section role="section" id="ch4se13">
			<h1><span role="label">2.13</span> Ενσωματωμένες βιβλιοθήκες: <span class="courier-code">math</span></h1>
			<p class="no-indent">Σε κάθε εγκατάσταση της Python υπάρχει μια βασική βιβλιοθήκη κώδικα χειρισμού μαθηματικών που ονομάζεται <span class="courier-code">math</span>. Αυτή δεν χρειάζεται ξεχωριστή εγκατάσταση αλλά μόνο τη ρητή εισαγωγή της στον κώδικα, ώστε να είναι άμεσα διαθέσιμη. Για να μπορέσει μια βιβλιοθήκη να γίνει διαθέσιμη σε ένα πρόγραμμα, θα πρέπει να γίνει χρήση της εντολής <span class="courier-code">import</span>, η οποία περιγράφεται πιο αναλυτικά σε επόμενες ενότητες. Από τη στιγμή που θα γίνει η εισαγωγή της βιβλιοθήκης στον κώδικα, οι συναρτήσεις της είναι διαθέσιμες με τη χρήση του ονόματός της και του ονόματος μιας συνάρτησής της χωρισμένων με τελεία:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">import math</span></p>
			<p><span class="courier-code"><b>In [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">math.sqrt(25)</span></p>
			<p><span class="courier-code"><b>Out[2]</b></span><span class="courier-code">:&#9;5.0</span></p>
			<p><span class="courier-code"><b>In [3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">math.pi</span></p>
			<p><span class="courier-code"><b>Out[3]</b></span><span class="courier-code">:&#9;3.141592653589793</span></p>
			<p><span class="courier-code"><b>In [4]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">sqrt(16)&#9;#Αν δεν μπει και το όνομα της βιβλιοθήκης δεν θα εκτελεστεί η εντολή</span></p>
			<p><span class="courier-code">&#9;Traceback (most recent call last):</span></p>
			<p><span class="courier-code">&#9;&#9;File &quot;&lt;iPython-input-49-6f08bd48eb52&gt;&quot;, line 1, in &lt;module&gt;</span></p>
			<p><span class="courier-code">&#9;&#9;&#9;sqrt</span></p>
			<p><span class="courier-code">&#9;NameError: name &apos;sqrt&apos; is not defined</span></p>
			<p><span class="courier-code"><b>In [5]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">math.log10(100)</span></p>
			<p><span class="courier-code"><b>Out[5]</b></span><span class="courier-code">:&#9;2.0</span></p>
			<p class="no-indent">Στον Πίνακα 2-10 παρουσιάζονται όλες οι συναρτήσεις της ενσωματωμένης βιβλιοθήκης <span class="courier-code">math</span>.</p>
			<figure role="table" id="tb10">
				<figcaption><span role="label">Πίνακας 2-10</span> | Ενσωματωμένες συναρτήσεις <span class="courier-code">math</span></figcaption>
				<table id="table010">
					<tbody>
						<tr>
							<td>
								<p><span class="courier-code">acos</span></p>
							</td>
							<td>
								<p><span class="courier-code">ceil</span></p>
							</td>
							<td>
								<p><span class="courier-code">erfc</span></p>
							</td>
							<td>
								<p><span class="courier-code">frexp</span></p>
							</td>
							<td>
								<p><span class="courier-code">isfinite</span></p>
							</td>
							<td>
								<p><span class="courier-code">log1p</span></p>
							</td>
							<td>
								<p><span class="courier-code">sin</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">acosh</span></p>
							</td>
							<td>
								<p><span class="courier-code">copysign</span></p>
							</td>
							<td>
								<p><span class="courier-code">exp</span></p>
							</td>
							<td>
								<p><span class="courier-code">fsum</span></p>
							</td>
							<td>
								<p><span class="courier-code">isinf</span></p>
							</td>
							<td>
								<p><span class="courier-code">log2</span></p>
							</td>
							<td>
								<p><span class="courier-code">sinh</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">asin</span></p>
							</td>
							<td>
								<p><span class="courier-code">cos</span></p>
							</td>
							<td>
								<p><span class="courier-code">expm1</span></p>
							</td>
							<td>
								<p><span class="courier-code">gamma</span></p>
							</td>
							<td>
								<p><span class="courier-code">isnan</span></p>
							</td>
							<td>
								<p><span class="courier-code">modf</span></p>
							</td>
							<td>
								<p><span class="courier-code">sqrt</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">asinh</span></p>
							</td>
							<td>
								<p><span class="courier-code">cosh</span></p>
							</td>
							<td>
								<p><span class="courier-code">fabs</span></p>
							</td>
							<td>
								<p><span class="courier-code">gcd</span></p>
							</td>
							<td>
								<p><span class="courier-code">ldexp</span></p>
							</td>
							<td>
								<p><span class="courier-code">nan</span></p>
							</td>
							<td>
								<p><span class="courier-code">tan</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">atan</span></p>
							</td>
							<td>
								<p><span class="courier-code">degrees</span></p>
							</td>
							<td>
								<p><span class="courier-code">factorial</span></p>
							</td>
							<td>
								<p><span class="courier-code">hypot</span></p>
							</td>
							<td>
								<p><span class="courier-code">lgamma</span></p>
							</td>
							<td>
								<p><span class="courier-code">pi</span></p>
							</td>
							<td>
								<p><span class="courier-code">tanh</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">atan2</span></p>
							</td>
							<td>
								<p><span class="courier-code">e</span></p>
							</td>
							<td>
								<p><span class="courier-code">floor</span></p>
							</td>
							<td>
								<p><span class="courier-code">inf</span></p>
							</td>
							<td>
								<p><span class="courier-code">log</span></p>
							</td>
							<td>
								<p><span class="courier-code">pow</span></p>
							</td>
							<td>
								<p><span class="courier-code">tau</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">atanh</span></p>
							</td>
							<td>
								<p><span class="courier-code">erf</span></p>
							</td>
							<td>
								<p><span class="courier-code">fmod</span></p>
							</td>
							<td>
								<p><span class="courier-code">isclose</span></p>
							</td>
							<td>
								<p><span class="courier-code">log10</span></p>
							</td>
							<td>
								<p><span class="courier-code">radians</span></p>
							</td>
							<td>
								<p><span class="courier-code">trunc</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Ο παρακάτω κώδικας (Λίστα Κώδικα 2-5) εμφανίζει μερικές τυπικές χρήσεις αυτών των συναρτήσεων. </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-5 | Βιβλιοθήκη <span class="courier-code">math</span></figcaption><span class="courier-code"><img src="media/ListaKodika-2-5_fmt.png" alt=""/></span></figure>
		</section>
		<section role="section" id="ch4se14">
			<h1><span role="label">2.14</span> Ενσωματωμένες βιβλιοθήκες: <span class="courier-code">random</span></h1>
			<p class="no-indent">Η βιβλιοθήκη <span class="courier-code">random</span> περιέχει σειρά από μεθόδους και συναρτήσεις απαραίτητες στη συγγραφή κώδικα που σχετίζεται με τον χειρισμό τυχαίων τιμών. Είτε κατά τη δοκιμή προγραμμάτων όπου δίνονται δοκιμαστικά πολλές τυχαίες τιμές, είτε σε εφαρμογές προσομοίωσης, παιχνιδιών κ.λπ., είναι απαραίτητο να δημιουργούνται τυχαίοι αριθμοί. Η <span class="courier-code">random</span> περιέχει όλα εκείνα τα εργαλεία που μπορούν να τροφοδοτήσουν ένα πρόγραμμα με διάφορα είδη τυχαίων αριθμών. Τέτοιες τιμές μπορεί να είναι ακέραιες ή πραγματικές και να ανήκουν σε συγκεκριμένο εύρος τιμών, που μπορεί να οριστεί κάθε φορά από τον προγραμματιστή. Μπορεί ακόμη να είναι πολλαπλές τιμές, με τη μορφή ακολουθίας αριθμών (όπως λίστες), που περιγράφονται στο Κεφάλαιο 5 (Λίστες).</p>
			<p>Η παραγωγή τυχαίων αριθμών είναι ιδιαίτερα χρήσιμη σε εφαρμογές που σχετίζονται με τις φυσικές επιστήμες (φυσική, βιολογία κ.λπ.), την οικονομία, γενικότερα στη στατιστική και πιο ειδικά σε προσομοιώσεις, σε παιχνίδια, όχι μόνο τυχερά, όπως η ρουλέτα ή το πόκερ, αλλά και σε κάθε είδους παιχνίδι όπου ο υπολογιστής καλείται να πάρει τυχαίες αποφάσεις (όπως για το είδος του επόμενου τούβλου στο Tetris, τη θέση μιας βόμβας στον Ναρκαλιευτή ή την κίνηση ενός αντιπάλου σε κάποιο ποδοσφαιράκι ή First-person Shooter).</p>
			<p>Στην πραγματικότητα όμως η παραγωγή πραγματικά τυχαίων αριθμών είναι αρκετά δύσκολη, ώστε στην πράξη να χρησιμοποιούνται στη θέση τους ψευδοτυχαίοι αριθμοί, αριθμοί δηλαδή που προκύπτουν όχι ακριβώς στην τύχη αλλά εφαρμόζοντας κάποιες μεθόδους και τεχνικές. Κάθε γλώσσα έχει δικούς της μηχανισμούς για την παραγωγή τέτοιων «τυχαίων» αριθμών. Στην Python αυτό πραγματοποιείται με εργαλεία και τεχνικές που ενσωματώνονται στη βιβλιοθήκη <span class="courier-code">random</span>. Η δημιουργία ψευδοτυχαίων αριθμών γίνεται με την υλοποίηση κατάλληλων αλγορίθμων σε γεννήτριες τέτοιων τιμών. Η Python (όπως και οι περισσότερες γλώσσες) χρησιμοποιεί τη <i>γεννήτρια ψευδοτυχαίων αριθμών </i>(<i>pseudorandom number generator </i>– PRNG) Mersenne-Twister<sup class="superscript CharOverride-1"><span id="footnote-066-backlink"><a href="#footnote-066">28</a></span></sup> για τη δημιουργία ενός τυχαίου αριθμού κινητής υποδιαστολής στο διάστημα [0, 1), με ακρίβεια ψηφίων 53 bit. Ο ντετερμινιστικός χαρακτήρας της γεννήτριας όμως δεν ευνοεί τη χρήση της σε εφαρμογές με αυξημένες απαιτήσεις για ασφάλεια, όπως η κρυπτογραφία και η δημιουργία <i>κωδικών ασφαλείας </i>(<i>passwords</i>). Σε αυτές τις περιπτώσεις προτείνεται η χρήση άλλων εργαλείων όπως η βιβλιοθήκη <span class="courier-code">secrets</span>.</p>
			<p>Στη συνέχεια παρουσιάζεται η περιγραφή των μεθόδων δημιουργίας τυχαίων ακεραίων και πραγματικών τιμών.</p>
			<section role="subsection" id="ch4se14ss1">
				<h1><span role="label">2.14.1</span> Αρχικοποίηση δημιουργίας τυχαίων αριθμών</h1>
				<p><span class="courier-code">random.seed(αριθμός ή κενό)</span></p>
				<p class="no-indent">Η συνάρτηση <span class="courier-code">seed</span> χρησιμοποιείται για την αρχικοποίηση της γεννήτριας τυχαίων αριθμών. Δίνεται δηλαδή ένα σημείο εκκίνησης από όπου θα ξεκινήσει ο υπολογισμός κάθε τυχαίου αριθμού. Αυτό έχει ως συνέπεια διαδοχικές χρήσεις συναρτήσεων τυχαίων τιμών να αποδίδουν τις ίδιες ακολουθίες τιμών για κάθε συγκεκριμένο <span class="courier-code">seed</span>. Αυτό είναι αναγκαίο όταν χρειάζεται να δημιουργούνται ακολουθίες τιμών που θα είναι εκ των προτέρων γνωστές ή που θα χρησιμοποιηθούν πολλές φορές. Αν δεν δοθεί κάποιο όρισμα στη <span class="courier-code">seed</span>, τότε χρησιμοποιούνται στοιχεία από το <i>ρολόι του συστήματος</i> (<i>system clock</i>) για την αρχικοποίηση της δημιουργίας τυχαίων αριθμών.</p>
				<p><span class="courier-code">&gt;&gt;&gt; seed(5)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; seed()</span></p>
			</section>
			<section role="subsection" id="ch4se14ss2">
				<h1><span role="label">2.14.2</span> Δημιουργία τυχαίου ακεραίου</h1>
				<p><span class="courier-code">random.randint(από a, μέχρι b)</span></p>
				<p class="no-indent">Για να δημιουργηθεί ένας τυχαίος ακέραιος αριθμός χρησιμοποιείται η συνάρτηση <span class="courier-code">randint</span>. Δέχεται δύο τιμές, <span class="courier-code">a</span> και <span class="courier-code">b</span>, οι οποίες καθορίζουν το διάστημα τιμών [<i>α, b</i>] μέσα από το οποίο θα γίνει η επιλογή ενός τυχαίου αριθμού <i>n</i>, ώστε <i>α </i>≤ <i>n </i>≤ <i>b</i>. Για παράδειγμα η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; random.randint(0, 1)</span></p>
				<p><span class="courier-code">1</span></p>
				<p class="no-indent">επιστρέφει τον αριθμό <span class="courier-code">0</span> ή <span class="courier-code">1</span>, ενώ η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; random.randint(1, 49) </span></p>
				<p><span class="courier-code">24</span></p>
				<p class="no-indent">επιστρέφει έναν αριθμό από το διάστημα 1 έως 49.</p>
			</section>
			<section role="subsection" id="ch4se14ss3">
				<h1><span role="label">2.14.1</span> Δημιουργία τυχαίου πραγματικού</h1>
				<p><span class="courier-code">random.random( )</span></p>
				<p class="no-indent">Για τη δημιουργία ενός τυχαία επιλεγμένου πραγματικού αριθμού χρησιμοποιείται η συνάρτηση <span class="courier-code">random</span>. Με αυτήν επιλέγεται κάθε φορά ένας τυχαίος αριθμός <i>n</i> στο διάστημα [0, 1), ώστε να ισχύει 0.0 ≤ <i>n</i> &lt; 1.0. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; random.random( )</span></p>
				<p><span class="courier-code">0.88418723814294</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; random.random( )</span></p>
				<p><span class="courier-code">0.5605398665164447</span></p>
				<p class="no-indent">Αν η διαδικασία περιλαμβάνει τη χρήση της <span class="courier-code">seed</span>, τότε τα αποτελέσματα θα είναι επαναλαμβανόμενα. Αυτό φαίνεται στη Λίστα Κώδικα 2-6.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-6 | Βιβλιοθήκη <span class="courier-code">random</span></figcaption><span class="courier-code"><img src="media/ListaKodika-2-6_fmt.png" alt=""/></span></figure>
				<p class="no-indent">Όπως φαίνεται από τα παραπάνω αποτελέσματα, κάθε φορά που αρχικοποιείται η <span class="courier-code">random</span> με ένα συγκεκριμένο <span class="courier-code">seed</span> (εδώ είναι το <span class="courier-code">5</span>), ακόλουθες χρήσεις τυχαίων συναρτήσεων θα δώσουν τα ίδια στη σειρά αποτελέσματα με προηγούμενες εκτελέσεις. Η βιβλιοθήκη <span class="courier-code">random</span> περιλαμβάνει και άλλες συναρτήσεις για τη δημιουργία τυχαίων αριθμών που ακολουθούν συγκεκριμένες κατανομές.</p>
			</section>
		</section>
		<section role="section" id="ch4se15">
			<h1><span role="label">2.15</span> Εξωτερικές βιβλιοθήκες κώδικα (Modules)</h1>
			<p class="no-indent">Ένα από τα πλεονεκτήματα που προσφέρει η Python είναι η ποικιλία βιβλιοθηκών κώδικα τις οποίες μπορεί κανείς να ενσωματώσει στο πρόγραμμά του. Σχεδόν για κάθε θέμα ή αντικείμενο, υπάρχουν έτοιμες <i>μονάδες-αρθρώματα </i>(<i>modules</i>) κώδικα ή πακέτα που μπορούν εύκολα να χρησιμοποιηθούν και καλύπτουν χώρους όπως επιστημονικούς υπολογισμούς (<span class="courier-code">numpy</span>, <span class="courier-code">scipy</span>), ανάλυση δεδομένων (<span class="courier-code">pandas</span>), γραφικά στοιχεία (<span class="courier-code">tkinter</span>), προσομοιώσεις (<span class="courier-code">simpy</span>) και πάρα πολλά άλλα. </p>
			<p>Η χρήση ενός πακέτου μπορεί να γίνει με πολλούς τρόπους. Μια βιβλιοθήκη μπορεί να εγκαθίσταται μαζί με την εγκατάσταση της γλώσσας και να είναι έτσι άμεσα διαθέσιμη προς χρήση σε ένα πρόγραμμα, ή να χρειάζεται ξεχωριστά εγκατάσταση. Η εγκατάσταση νέου πακέτου μπορεί να γίνει με διάφορους τρόπους και εξαρτάται άμεσα από την έκδοση της γλώσσας που χρησιμοποιείται κάθε φορά. Συνήθως, όταν η Python εγκαθίσταται μέσω ολοκληρωμένου περιβάλλοντος ανάπτυξης εφαρμογών, όπως είναι για παράδειγμα το Anaconda ή το Canopy, η διαχείριση πακέτων κώδικα γίνεται μέσα από το περιβάλλον αυτό (Anaconda navigator και package manager αντίστοιχα) ή με ειδικά εργαλεία όπως το conda ή miniconda. Οι πιο συχνές περιπτώσεις είναι οι παρακάτω:</p>
			<ol><li>Σε ένα σύστημα Windows με εγκατεστημένο το IDLE (που είναι η επίσημη έκδοση της Python) ή σε λειτουργικό σύστημα Linux που είναι ήδη εγκατεστημένη η γλώσσα ή έχει εγκατασταθεί με κάποιο από τα εργαλεία διαχείρισης λογισμικού του συστήματος (μέσα από γραφικό περιβάλλον ή με τη χρήση εργαλείων όπως <span class="courier-code">apt-get</span> <span class="courier-code">install</span>), η εγκατάσταση και διαχείριση πακέτων γίνεται με το εργαλείο <span class="courier-code">pip</span> (Python package index – PyPi<sup class="superscript CharOverride-1"><span id="footnote-065-backlink"><a href="#footnote-065">29</a></span></sup>, όπου τα διαθέσιμα πακέτα είναι, τη στιγμή που γράφεται το βιβλίο, 182.001!). Στη γραμμή εντολών δίνοντας την παρακάτω εντολή:
				<p><span class="courier-code">pip install κάποιο_πακέτο</span></p>
				<p class="no-indent">γίνεται εγκατάσταση του πακέτου <span class="courier-code">κάποιο_πακέτο</span>, π.χ. με την εντολή:</p>
				<p><span class="courier-code">pip install numpy</span></p>
				<p class="no-indent">γίνεται εγκατάσταση του πακέτου <span class="courier-code">Numpy</span>.</p>
				<p>Οδηγίες και περισσότερες επιλογές του πακέτου <span class="courier-code">pip</span> δίνονται στον ιστοχώρο του πακέτου.<sup class="superscript CharOverride-1"><span id="footnote-064-backlink"><a href="#footnote-064">30</a></span></sup> </p>
				<p>Αν στον υπολογιστή είναι εγκατεστημένες και οι δύο εκδόσεις (2.x και 3.x) της Python, τότε για τη διαχείριση των πακέτων της έκδοσης 2.x γίνεται χρήση του <span class="courier-code">pip</span>, ενώ για τα πακέτα της έκδοσης 3.x γίνεται χρήση του <span class="courier-code">pip</span><span class="courier-code">3</span>.</p>
			</li>
			<li>Σε υπολογιστές που έχουν εγκατεστημένη την Python μέσω του Anaconda, μπορεί να γίνει χρήση του εργαλείου γραμμής εντολών <span class="courier-code">conda</span>, ως εξής:
				<p><span class="courier-code">conda install κάποιο_πακέτο</span></p>
				<p class="no-indent">με την οποία εγκαθίσταται το πακέτο με όνομα <span class="courier-code">κάποιο_πακέτο</span>. Για παράδειγμα, η πιο κάτω εντολή:</p>
				<p><span class="courier-code">conda install flask</span></p>
				<p class="no-indent">εγκαθιστά το πακέτο <span class="courier-code">flask</span>. </p>
			</li>
			<li>Άλλα ολοκληρωμένα περιβάλλοντα, όπως το PyCharm και το Enthought Canopy, διαθέτουν ενσωματωμένα γραφικά εργαλεία για τον εντοπισμό, το «κατέβασμα» και τη διαχείριση πακέτων βιβλιοθηκών κώδικα.
			<p class="no-indent">Η εισαγωγή και χρήση βιβλιοθηκών κώδικα γίνεται με την εντολή <span class="courier-code">import</span>. Η γενική μορφή της είναι:</p>
			<p><span class="courier-code">import όνομα_βιβλιοθήκης</span></p>
			<p class="no-indent">Για παράδειγμα, η παρακάτω εντολή:</p>
			<p><span class="courier-code">import math</span></p>
			<p class="no-indent">εισάγει μια σειρά από βοηθητικές συναρτήσεις για μαθηματικούς υπολογισμούς. Για να εμφανιστεί μια λίστα με το τι περιέχει αυτή η βιβλιοθήκη, μπορεί να χρησιμοποιηθεί η εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; dir</span><span class="courier-code">(όνομα_βιβλιοθήκης)</span></p>
			<p class="no-indent">όπως: </p>
			<p><span class="courier-code">&gt;&gt;&gt; dir(math)</span></p>
			<p><span class="courier-code">[&apos;__doc__&apos;,</span></p>
			<p><span class="courier-code"> &apos;__loader__&apos;,</span></p>
			<p><span class="courier-code"> &apos;__name__&apos;,</span></p>
			<p><span class="courier-code"> &apos;__package__&apos;,</span></p>
			<p><span class="courier-code"> &apos;__spec__&apos;,</span></p>
			<p><span class="courier-code"> &apos;acos&apos;,</span></p>
			<p><span class="courier-code"> &apos;acosh&apos;,</span></p>
			<p><span class="courier-code"> &apos;asin&apos;,</span></p>
			<p><span class="courier-code"> &apos;asinh&apos;, …]</span></p>
			<p class="no-indent">ενώ πληροφορίες για μια συγκεκριμένη συνάρτηση εμφανίζει η εντολή: </p>
			<p><span class="courier-code">help(όνομα_συνάρτησης)</span></p>
			<p class="no-indent">όπως για παράδειγμα:</p>
			<p><span class="courier-code">help(math.ceil)</span></p>
			<p><span class="courier-code">Help on built-in function ceil in module math:</span></p>
			<p><span class="courier-code">ceil(...)</span></p>
			<p><span class="courier-code">&#9;ceil(x)  </span></p>
			<p><span class="courier-code">&#9;Return the ceiling of x as an Integral.</span></p>
			<p><span class="courier-code">&#9;This is the smallest integer &gt;= x.</span></p>
			<p class="no-indent">Στην ουσία, με την εντολή <span class="courier-code">import</span>, γίνονται διαθέσιμα εργαλεία και ιδιότητες που αφορούν τη συλλογή κλάσεων με όνομα <span class="courier-code">math</span>. Για να χρησιμοποιηθεί κάποιο από αυτά, θα πρέπει να γίνει ρητή αναφορά στην κλάση <span class="courier-code">math</span> και στο συγκεκριμένο αντικείμενο με τη βοήθεια του χαρακτήρα της τελείας ‘.’. Αυτός ο χαρακτήρας χρησιμοποιείται στον αντικειμενοστραφή προγραμματισμό για να αποκτήσει κανείς πρόσβαση στις ιδιότητες ενός αντικειμένου ή στις μεθόδους που τις τροποποιούν.</p>
			<p><span class="courier-code">&gt;&gt;&gt; math.pi</span></p>
			<p><span class="courier-code">3.141592653589793</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; math.sqrt(25)</span></p>
			<p><span class="courier-code">5</span></p>
			<p class="no-indent">Πολλές φορές είναι προτιμότερο να δίνεται ένα ψευδώνυμο στον κώδικα που εισάγεται από μια βιβλιοθήκη. Κάτι τέτοιο είναι αρκετά βολικό και σε αρκετές περιπτώσεις επιβεβλημένο, ώστε να μην υπάρχουν παρανοήσεις ή λάθη στον κώδικα. Για παράδειγμα, η βιβλιοθήκη <span class="courier-code">random</span> θα μπορούσε να εισαχθεί με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import </span><span class="courier-code">random as r</span></p>
			<p class="no-indent">Από εδώ και πέρα είναι απαραίτητη η χρήση του ονόματος <span class="courier-code">r</span> με το διαχωριστικό της τελείας, για να γίνει χρήση κάποιας συνάρτησης της <span class="courier-code">random</span>, όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; r.randint(0,100)</span></p>
			<p class="no-indent">Η γενική μορφή της εντολής είναι:</p>
			<p><span class="courier-code">import βιβλιοθήκη as</span><span class="courier-code"> ψευδώνυμο</span></p>
			<p class="no-indent">Η σύνδεση ή το άνοιγμα μιας βιβλιοθήκης, με όλα τα περιεχόμενά της, μπορεί, εκτός του ότι πιθανόν να είναι περιττό, να επιβαρύνει τους χρόνους εκτέλεσης του κώδικα. Έτσι, τις περισσότερες φορές, ειδικά όταν πρόκειται για μεγάλες βιβλιοθήκες, όπως π.χ. αυτή του <span class="courier-code">scipy</span>, είναι προτιμότερο να εισάγεται μόνο το συγκεκριμένο και απαραίτητο τμήμα της. Για παράδειγμα, η βιβλιοθήκη <span class="courier-code">scipy</span> περιέχει μια ενότητα από συναρτήσεις για τη διαχείριση αραιών μητρών που ονομάζεται <span class="courier-code">sparse</span>. Με την παρακάτω εντολή, εισάγεται στον κώδικα μόνο το συγκεκριμένο εργαλείο-κομμάτι κώδικα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; from scipy import sparse</span></p>
			<p class="no-indent">όπου γίνονται διαθέσιμα όλα τα στοιχεία του πακέτου <span class="courier-code">sparse</span> της βιβλιοθήκης <span class="courier-code">scipy</span> και μόνο αυτά. Και εδώ μπορεί να γίνει χρήση ψευδώνυμου, ώστε να διευκολυνθεί η χρήση του πακέτου. Για παράδειγμα, η παρακάτω εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; from scipy import sparse as sp</span></p>
			<p class="no-indent">φορτώνει και κάνει διαθέσιμο το πακέτο <span class="courier-code">sparse</span>, από τη βιβλιοθήκη <span class="courier-code">scipy</span>, με όνομα <span class="courier-code">sp</span>. Από αυτό το σημείο και έπειτα, οποιοδήποτε στοιχείο του πακέτου <span class="courier-code">sparse</span> θα χρησιμοποιείται με σημείο αναφοράς το όνομα <span class="courier-code">sp</span>. Η παρακάτω γραμμή κώδικα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sp.csr_matrix()</span></p>
			<p class="no-indent">χρησιμοποιεί τη μέθοδο <span class="courier-code">csr_matrix()</span>, της κλάσης <span class="courier-code">sp</span>, για τη δημιουργία ενός νέου αντικειμένου αραιής μήτρας.</p>
			<p>Η ίδια λογική ισχύει και για κάθε βιβλιοθήκη, όπως και αυτές που κατασκευάζει κάθε χρήστης. Η δημιουργία βιβλιοθηκών κώδικα είναι μια καλή πρακτική γιατί:</p>
			</li>
			<li>Ο κώδικας για συγκεκριμένες εργασίες να βρίσκεται συγκεντρωμένος σε έναν χώρο-αρχείο.</li>
			<li>Να είναι εύκολος ο διαμοιρασμός του.</li>
			<li>Η χρήση του πακέτου να μπορεί να γίνει μέσα σε άλλον κώδικα πολύ εύκολα.</li>
			<li>Να είναι πιο απλή η διαχείρισή του γενικότερα, όπως και οι αλλαγές, προσθήκες ή βελτιώσεις.</li>
			<li>Να επεκτείνονται, έμμεσα, οι δυνατότητες της ίδιας της γλώσσας.
				<p class="no-indent">Για να δημιουργηθεί, για παράδειγμα, το πακέτο <span class="courier-code">mylib</span>, χρειάζεται:</p></li>
			
			<li>Συγγραφή κώδικα και αποθήκευσή του σε αρχείο <span class="courier-code">.py</span> με όνομα το όνομα του πακέτου, π.χ. <span class="courier-code">mylib.py</span></li>
			<li>Κλάσεις, αντικείμενα, μέθοδοι, συναρτήσεις και οτιδήποτε τοποθετείται σ’ αυτό θα είναι διαθέσιμα με την εισαγωγή του πακέτου. Για παράδειγμα, δημιουργείται μια συνάρτηση (περισσότερα για συναρτήσεις στο Κεφάλαιο 10) με όνομα <span class="courier-code">test</span>. </li>
			<li>Το αρχείο αποθηκεύεται στον ίδιο φάκελο με τα υπόλοιπα προγράμματα.</li>
			<li>Γίνεται εισαγωγή της βιβλιοθήκης:
				<p><span class="courier-code">&gt;&gt;&gt; import mylib </span></p></li>
			
			<li>Η συνάρτηση <span class="courier-code">test()</span> θα χρησιμοποιηθεί ως εξής:
			<p><span class="courier-code">&gt;&gt;&gt; mylib.test</span></p>
			</li>
			</ol>
			<p class="no-indent">Περισσότερες όμως λεπτομέρειες για την κατασκευή πακέτων δίνονται στο Κεφάλαιο 10 με τις συναρτήσεις.</p>
		</section>
		<section role="section" id="ch4se16">
			<h1><span role="label">2.16</span> Ακρίβεια αριθμητικών υπολογισμών</h1>
			<p class="no-indent">Όλοι οι υπολογισμοί που γίνονται σε ένα πρόγραμμα, είτε αυτό είναι γραμμένο σε Python είτε σε κάποια άλλη γλώσσα προγραμματισμού, βασίζονται, κυρίως, στο πρότυπο IEEE 754-2008. Είναι το τεχνικό σύστημα αριθμητικών υπολογισμών κινητής υποδιαστολής που έχει οριστεί από το <i>Ινστιτούτο Ηλεκτρονικών &amp; Ηλεκτρολόγων Μηχανικών </i>(<i>Institute of Electrical and Electronics Engineering</i>). Σ’ αυτό, γίνεται προσπάθεια να αντιμετωπιστούν όλα τα προβλήματα που σχετίζονται με τους υπολογισμούς και την αποθήκευση ή αναπαράσταση αριθμών στο σύγχρονο <i>υλικό </i>(<i>hardware</i>) των υπολογιστών. Γενικά, ορίζονται τα πρότυπα σχετικά με:</p>
			<p><i>Εξαιρέσεις κανόνων</i>, όπως οι περιπτώσεις υπολογισμών που είναι αδύνατο να πραγματοποιηθούν ή που οδηγούν σε προβλήματα στη χρήση μνήμης ή αναπαράστασης των αποτελεσμάτων.</p>
			<p><i>Κανόνες στρογγυλοποίησης</i> κατά τη διάρκεια υπολογισμών και μετατροπών αριθμών από ένα σύστημα αρίθμησης ή κάποιον τύπο σε κάτι άλλο.</p>
			<p><i>Διάφορες μορφές αριθμών</i> που χρησιμοποιούνται, όπως πραγματικοί αριθμοί, σε διάφορα συστήματα αρίθμησης, όπως το δυαδικό και το δεκαδικό, αλλά και ειδικές μορφές που μπορούν να προκύψουν κατά τη διαδικασία υπολογισμών. Τέτοιες μορφές υποστηρίζει και η Python, όπως ο ειδικός τύπος προσημασμένου απείρου (±∞, + ή <span class="courier-code">−infinite</span>), το μηδέν με πρόσημο (±0, για τις ειδικές περιπτώσεις πραγματικής αριθμητικής όπου 1/0 = ∞ και 1/−0 = −∞ ή 0/∞ = 0.0 και 0/−∞ = −0.0) κατά την προσέγγιση του μηδέν με όρια από κάτω ή πάνω από αυτό, αλλά και ένας ακόμα ειδικός τύπος «μη αριθμού» (<span class="courier-code">NaN</span><i> – Not a </i><i>Number</i>), για την αναπαράσταση ή την αδυναμία αναπαράστασης αριθμητικών τύπων ως αποτελέσματα πράξεων που δεν μπορούν να οριστούν ή να πραγματοποιηθούν. Παραδείγματα τέτοιων περιπτώσεων είναι η διαίρεση 0/0 που δεν ορίζει κάποιον πραγματικό αριθμό, ή η τετραγωνική ρίζα αρνητικών αριθμών που αποδίδει έναν φανταστικό αλλά όχι πραγματικό αριθμό και οι περιπτώσεις ±∞/±∞, ∞+(−∞) ή −∞+∞. Ακόμη, περιλαμβάνει αριθμούς που έχουν προκύψει μετά από υπερχείλιση ή υπoχείλιση (overflow, underflow).</p>
			<p>Τις περισσότερες φορές που χρειάζεται να γίνουν αυξημένης ακρίβειας μαθηματικοί υπολογισμοί, χρησιμοποιείται το πακέτο <span class="courier-code">numpy</span> (Numerical Python). Ο πιο κάτω κώδικας περιγράφει τη δημιουργία μιας δομής τύπου <span class="courier-code">array</span> του πακέτου <span class="courier-code">numpy</span>, όπου φαίνονται οι περιπτώσεις εμφάνισης αποτελεσμάτων τύπου <span class="courier-code">NaN</span> και <span class="courier-code">Infinite</span>. Προς το παρόν δεν είναι απαραίτητο να αναλυθεί ο κώδικας (Λίστα Κώδικα 2-7) αλλά να φανούν μερικές τυπικές περιπτώσεις εμφάνισης τέτοιων τιμών στον κώδικα.</p>
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-7 | Τύποι nan &amp; inf</figcaption><img src="media/ListaKodika-2-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Στο παραπάνω σενάριο, αφού γίνει η εισαγωγή του πακέτου <span class="courier-code">numpy</span> στο πρόγραμμα, δημιουργείται ένα νέο διάνυσμα-πίνακας τύπου <span class="courier-code">array</span> διάστασης 1 × 3 (γραμμή 2). Στη συνέχεια, γίνεται <i>βαθμωτός</i> (<i>scalar</i>) πολλαπλασιασμός του διανύσματος (πολλαπλασιάζεται δηλαδή κάθε μέλος του) με το <span class="courier-code">1/0</span> δίνοντας το αποτέλεσμα της γραμμής <span class="courier-code">4:</span> <span class="courier-code">1/0</span> δίνει <span class="courier-code">inf,</span> <span class="courier-code">-3/0</span> δίνει <span class="courier-code">–inf</span> και <span class="courier-code">0/0</span> επιστρέφει <span class="courier-code">nan</span>. Το πακέτο διαθέτει αρκετά εργαλεία (μεθόδους και κλάσεις) που μπορούν να αντιμετωπίσουν τέτοιες περιπτώσεις (μη) αριθμών, ώστε να μην προκύψουν στη συνέχεια περισσότερα προβλήματα υπολογισμών.</p>
			<p>Στον Πίνακα 2-11 παρουσιάζονται όλες οι ειδικές περιπτώσεις υπολογισμών που αντιμετωπίζονται από το πρότυπο IEEE<sup class="superscript CharOverride-1"><span id="footnote-063-backlink"><a href="#footnote-063">31</a></span></sup>.</p>
			<figure role="table" id="tb11">
				<figcaption><span role="label">Πίνακας 2-11</span> | Ειδικές περιπτώσεις τιμών</figcaption>
				<table id="table011">
					<tbody>
						<tr>
							
								<th>Τελεστής</th>
							
							
								<th>Λειτουργία</th>
							
							
								<th>Παράδειγμα (αρχική τιμή του α=2)</th>
							
						</tr>
						<tr>
							<td>
								<p>n ÷ ±∞</p>
							</td>
							<td>
								<p>±0</p>
							</td>
							<td>
								<p>Διαίρεση αριθμού με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±∞ × ±∞</p>
							</td>
							<td>
								<p>±∞</p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±<i>nonZero </i>÷ ±0</p>
							</td>
							<td>
								<p>±∞</p>
							</td>
							<td>
								<p>Διαίρεση με το μηδέν</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±<i>finite </i>× ±∞</p>
							</td>
							<td>
								<p>±∞</p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>∞ + ∞∞ − −∞</p>
							</td>
							<td>
								<p>+∞</p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>−∞ − ∞−∞ + −∞</p>
							</td>
							<td>
								<p>−∞</p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>∞ − ∞−∞ + ∞</p>
							</td>
							<td>
								<p><i>NaN</i></p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±0 ÷ ±0</p>
							</td>
							<td>
								<p><i>NaN</i></p>
							</td>
							<td>
								<p>Διαίρεση μηδέν με μηδέν</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±∞ ÷ ±∞</p>
							</td>
							<td>
								<p><i>NaN</i></p>
							</td>
							<td>
								<p>Πράξεις με το άπειρο</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>±∞ × 0</p>
							</td>
							<td>
								<p><i>NaN</i></p>
							</td>
							<td>
								<p>Πράξεις του μηδέν με το άπειρο</p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
		</section>
		<section role="section" id="ch4se17">
			<h1><span role="label">2.17</span> Άλλοι αριθμητικοί τύποι – αντιμετώπιση προβλημάτων ακρίβειας</h1>
			<p class="no-indent">Λόγω της φύσης των υπολογιστικών μηχανών, κάποιες αριθμητικές αναπαραστάσεις δεκαδικών μορφών δεν είναι δυνατόν να γίνουν απευθείας στο υλικό ενός υπολογιστή. Για αυτό τον σκοπό έχουν δημιουργηθεί υλοποιήσεις μέσω λογισμικού που αναλαμβάνουν να κάνουν, με ελεγχόμενο τρόπο, τις δεκαδικές αναπαραστάσεις αριθμών και πράξεων αριθμών. Βάσει των περιορισμών του υλικού, πράξεις όπως το <span class="courier-code">1/3</span> στη δεκαδική μορφή του αναπαριστάται ως <span class="courier-code">0.3333333333333333 </span>έχοντας άπειρα ψηφία στο τέλος του, ενώ η πράξη <span class="courier-code">1/10</span>, αν και δίνει κανονικά το αναμενόμενο αποτέλεσμα, <span class="courier-code">0.1</span>, στη δεκαδική μορφή, ωστόσο η δυαδική του (εσωτερική, στη μνήμη του Η/Υ) αναπαράσταση περιλαμβάνει μη πεπερασμένο πλήθος ψηφίων, που έχει ως αποτέλεσμα την εμφάνιση αλλά και τη συσσώρευση σφαλμάτων ακρίβειας. Έτσι, άλλες, απλές κατά τ’ άλλα, πράξεις όπως <span class="courier-code">0.1+0.2</span>, όταν δοθούν στον διερμηνευτή της γλώσσας, θα δώσουν «περίεργα» αποτελέσματα:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">0.1+0.2</span></p>
			<p><span class="courier-code"><b>Out[1]</b></span><span class="courier-code">:&#9;0.30000000000000004</span></p>
			<p class="no-indent">αποτέλεσμα που μοιάζει με <span class="courier-code">0.3</span> αλλά στην ουσία δεν είναι, οδηγώντας ελέγχους ισότητας (που περιγράφονται στο επόμενο κεφάλαιο) σε απρόσμενη αποτυχία:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In</b></span><span class="courier-code"><b> [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">0.1+0.2==0.3</span></p>
			<p><span class="courier-code"><b>Out[2]</b></span><span class="courier-code">:&#9;False</span></p>
			<p class="no-indent">Τα προβλήματα ακρίβειας των υπολογισμών είναι δεδομένα εδώ και αρκετές δεκαετίες και είναι συνυφασμένα με το υλικό των υπολογιστών. Οι λύσεις που προσφέρονται στον προγραμματιστή ωστόσο, πέρα από κατάλληλα επιλεγμένους λογικούς ελέγχους και ελεγχόμενες στρογγυλοποιήσεις, είναι αρκετές. Στην Python οι λύσεις προέρχονται μέσα από τη χρήση κατάλληλων βιβλιοθηκών κώδικα όπως οι <span class="courier-code">decimal</span>, <span class="courier-code">bigfloat</span>, <span class="courier-code">fractions</span> κ.ά. </p>
		</section>
		<section role="section" id="ch4se18">
			<h1><span role="label">2.18</span> Βιβλιοθήκη <span class="courier-code">Decimals</span></h1>
			<p><img src="media/icon-8_fmt.png" alt=""/></p>
			<p class="no-indent">Το <i>άρθρωμα-βιβλιοθήκη</i> (<i>module</i>) <span class="courier-code">decimal</span>, όπως αναφέρεται και στην τεκμηρίωση της Python<sup class="superscript CharOverride-1"><span id="footnote-062-backlink"><a href="#footnote-062">32</a></span></sup>, βασίζεται σε ένα μοντέλο αριθμών κινητής υποδιαστολής που σχεδιάστηκε με κύριο γνώμονα τον άνθρωπο και όχι τη μηχανή, ώστε να πετυχαίνει αριθμητικές πρακτικές όπως αυτές που έχει μάθει και συνηθίσει κάποιος από τα σχολικά του χρόνια. Με τη χρήση του <span class="courier-code">decimals</span> επιτυγχάνεται ακριβής αναπαράσταση οποιουδήποτε αριθμού, ώστε να αποφεύγονται αποτελέσματα της μορφής:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">1.1+2.2</span></p>
			<p><span class="courier-code"><b>Out[3]</b></span><span class="courier-code">:&#9;</span><span class="courier-code">3.3000000000000003</span></p>
			<p class="no-indent">που κάθε άλλο παρά φυσιολογικά μπορεί να θεωρηθούν. Η ακριβής αναπαράσταση πράξεων σε εφαρμογές που απαιτούν τη χρήση ελέγχων ισότητας και την αποφυγή άσκοπων στρογγυλοποιήσεων είναι μεγάλης σημασίας αν αυτές αφορούν π.χ. την πραγματοποίηση οικονομικών συναλλαγών, τον σχεδιασμό στρατιωτικών συστημάτων, όπως την καθοδήγηση βλήματος, ή την υλοποίηση πτήσεων αυτόματων μη επανδρωμένων οχημάτων (<i>drones</i>). </p>
			<p>Ένα από τα πλεονεκτήματα χρήσης τέτοιων συστημάτων είναι και η προσαρμογή του μοντέλου που χρησιμοποιείται κάθε φορά. Αυτή περιλαμβάνει τον προσδιορισμό επιθυμητής ακρίβειας των υπολογισμών και την ενεργοποίηση ή απενεργοποίηση λειτουργιών. Είναι δυνατός, για παράδειγμα, ο εντοπισμός διαιρέσεων με το μηδέν, η επιλεκτική και ανά περίπτωση, και όχι η καθολική χρήση, διαφόρων παραμέτρων που παρουσιάζονται αργότερα, η προσαρμογή του μοντέλου σε πραγματικό χρόνο και ο συνδυασμός του με άλλα δομικά στοιχεία της γλώσσας, όπως η ενσωμάτωση και ο χειρισμός τους μέσα από άλλες δομές όπως οι λίστες, οι πλειάδες και η χρήση μαθηματικών συναρτήσεων.</p>
			<p>Το κυριότερο μειονέκτημα τέτοιων υλοποιήσεων πραγματοποίησης αριθμητικών πράξεων είναι η ταχύτητα εκτέλεσής τους. Ενώ οι πράξεις μεταξύ αριθμών κινητής υποδιαστολής κανονικά πραγματοποιούνται σε συγκεκριμένο και για αυτό τον σκοπό υλικό του υπολογιστή (FPU – Floating Point Unit ή, πιο παλιά, μαθηματικοί συνεπεξεργαστές, ενώ πλέον γίνεται χρήση και των GPUs κ.λπ.), οι πράξεις μέσω αρθρωμάτων τύπου <span class="courier-code">decimal</span> γίνονται με κατάλληλες υλοποιήσεις λογισμικού. Αυτό εξ ορισμού σημαίνει ότι η πραγματοποίηση πράξεων μέσω βιβλιοθηκών κώδικα θα είναι (πολύ) πιο αργή απ’ ό,τι στην περίπτωση πράξεων κινητής υποδιαστολής στο ίδιο το υλικό. Μετρήσεις έχουν δείξει ότι η αναπαράσταση, και μόνο, αριθμών μέσω λογισμικού αυξάνει (τριπλασιάζει πολλές φορές) τον χρόνο εκτέλεσης, ενώ οι πράξεις μεταξύ τέτοιων αριθμών μπορεί να είναι μέχρι και είκοσι φορές πιο αργές! Αν και αναμενόμενη τέτοια διαφορά στην απόδοση και πολλές φορές αποδεκτή, θα πρέπει η χρήση τέτοιων βιβλιοθηκών να γίνεται με μέτρο και να περιορίζεται στα σημεία που είναι αναγκαία η μέγιστη δυνατή ακρίβεια και όπου απαιτούνται έλεγχοι ισότητας.</p>
			<p>Όπως κάθε άρθρωμα, έτσι και το <span class="courier-code">decimal</span>, θα πρέπει να εισαχθεί στον κώδικα με μια εντολή <span class="courier-code">import</span>. Αυτό μπορεί να γίνει με διάφορους τρόπους, όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import decimal</span></p>
			<p class="no-indent">όπου εισάγονται όλα τα στοιχεία της <span class="courier-code">decimal</span> αλλά απαιτείται η χρήση του προθέματος <span class="courier-code">decimal</span> σε κάθε εντολή της βιβλιοθήκης:</p>
			<p><span class="courier-code">&gt;&gt;&gt; decimal.Decimal(1)/ decimal.Decimal(3)</span></p>
			<p><span class="courier-code">Decimal(&apos;0.3333333&apos;)</span></p>
			<p class="no-indent">με την οποία δημιουργούνται δύο αντικείμενα <span class="courier-code">Decimal</span> από ακέραιους αριθμούς, μέσα από τη βιβλιοθήκη <span class="courier-code">decimal</span>, και γίνεται η διαίρεσή τους, που προκαλεί τη δημιουργία ενός νέου αντικειμένου <span class="courier-code">Decimal</span>, το οποίο περιέχει το αποτέλεσμα. </p>
			<p>Όπως φαίνεται από την προηγούμενη εντολή, είναι απαραίτητη η χρήση του ονόματος της βιβλιοθήκης (<span class="courier-code">decimal</span>) ως πρόθεμα με την τελεία σε κάθε χρήση της. Αυτό μπορεί να αποφευχθεί με την πιο κάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; from decimal import * </span><span class="courier60">#ή from decimal import Decimal</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; Decimal(&apos;0.1&apos;)+Decimal(&apos;0.2&apos;)</span></p>
			<p><span class="courier-code">Decimal(&apos;0.3&apos;)</span></p>
			<p class="no-indent">Όπως φαίνεται και από τα προηγούμενα παραδείγματα, η δημιουργία αντικειμένων τύπου <span class="courier-code">Decimal</span> γίνεται με τον <i>δημιουργό-κατασκευαστή</i> (<i>constructor</i>) <span class="courier-code">Decimal</span>, ενώ μέσα σε παρενθέσεις μπορεί να δοθούν ακέραιοι, πραγματικοί, αριθμοί ως κείμενο, πράξεις κ.λπ. Ακολουθούν μερικά παραδείγματα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-8 | Τύπος decimal</figcaption><img src="media/ListaKodika-2-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Προσοχή πρέπει να δοθεί στη συμπεριφορά αριθμών <span class="courier-code">Decimal</span> που έχουν δημιουργηθεί από αριθμούς κινητής υποδιαστολής με τη χρήση ή μη εισαγωγικών.</p>
			<p>Μια γενική θεώρηση των ενεργών κάθε φορά παραμέτρων μπορεί να εμφανιστεί στην οθόνη με την παρακάτω εντολή:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [3]</b></span><span class="courier-code">:</span> <span class="courier-code">getcontext()</span></p>
			<p><span class="courier-code"><b>Out[3]</b></span><span class="courier-code">: Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])</span></p>
			<p class="no-indent">Κάθε νέο αντικείμενο <span class="courier-code">Decimal</span>, καθώς και οι υπολογισμοί με αυτά, ακολουθεί αυτές τις ρυθμίσεις. Υπάρχουν, όπως φαίνεται, διάφορα στοιχεία που μπορούν να ρυθμίσουν τον τρόπο λειτουργίας της <span class="courier-code">Decimal</span>. Τα βασικά είναι:</p>
			<p><i>Ακρίβεια </i>(<i>precision</i>) είναι ο αριθμός των σημαντικών ψηφίων κάθε αριθμού τύπου <span class="courier-code">Decimal</span> που προκύπτει μετά από υπολογισμό (και όχι κατά τη δημιουργία του).</p>
			<p>Ως <i>κανόνας στρογγυλοποίησης </i>(<i>rounding</i>) ορίζεται ο αλγόριθμος με βάση τον οποίο θα γίνονται οι στρογγυλοποιήσεις των αριθμών τύπου <span class="courier-code">Decimal</span>.<sup class="superscript CharOverride-1"><span id="footnote-061-backlink"><a href="#footnote-061">33</a></span></sup></p>
			<p><i>Σημαίες </i>(<i>flags</i>) και <i>παγίδες </i>(<i>traps</i>), για την παγίδευση σφαλμάτων χρόνου εκτέλεσης αλλά και για την ανίχνευση επιμέρους στοιχείων υπολογισμών (π.χ. αν έγινε ακριβής εκτίμηση μιας τιμής, με πόσα δεκαδικά κ.λπ.).</p>
			<p>Για κάθε πράξη είναι δυνατός ο ορισμός της ακρίβειας, του πλήθους των σημαντικών ψηφίων που το αποτέλεσμα αυτής θα περιέχει. Η εξ ορισμού ακρίβεια ορίζεται σε 28 ψηφία, κάτι που μπορεί να αλλάξει εύκολα. Στη Λίστα Κώδικα 2-9 παρουσιάζονται οι ρυθμίσεις της <span class="courier-code">Decimal</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-9 | Ρυθμίσεις decimal</figcaption><img src="media/ListaKodika-2-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Ένα ακόμα στοιχείο που ορίζεται στο context είναι και η δυνατότητα ενεργοποίησης ή απενεργοποίησης της παγίδευσης λαθών (traps). Πολλές φορές είναι επιθυμητή η συνέχιση εκτέλεσης προγράμματος όπου πραγματοποιούνται πράξεις που αποφέρουν μη εφικτά αριθμητικά αποτελέσματα όπως άπειρο (<span class="courier-code">±Infinity</span>), μη αριθμούς (<span class="courier-code">NaN</span> – Not a Number) ή προσημασμένα μηδενικά (<span class="courier-code">±0</span>). Στη Λίστα Κώδικα 2-10 παρουσιάζονται κάποιες ειδικές περιπτώσεις.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-10 | Decimal: ειδικές περιπτώσεις</figcaption><img src="media/ListaKodika-2-10_fmt.png" alt=""/></figure>
			<p class="no-indent">που έχουν ως αποτέλεσμα είδη δεδομένων τα οποία υπάρχουν και δημιουργούνται με τον ίδιο τρόπο όπως και στο πρότυπο IEEE που περιγράφηκε σε προηγούμενη ενότητα.</p>
			<p>Τέλος, οι αριθμοί <span class="courier-code">Decimal</span> έχουν επίσης κάποιες βασικές αριθμητικές συναρτήσεις οι οποίες παρουσιάζονται στη Λίστα Κώδικα 2-11.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-11 | Decimal: συναρτήσεις</figcaption><img src="media/ListaKodika-2-11_fmt.png" alt=""/></figure>
		</section>
		<section role="section" id="ch4se19">
			<h1><span role="label">2.19</span> Βιβλιοθήκη <span class="courier-code">Fractions</span></h1>
			<p class="no-indent">Πολλές φορές μέσα σε ένα πρόγραμμα είναι απαραίτητη η χρήση αριθμού με την κλασματική μορφή του <img  class="tab" src="media/pg107a.png"/>￼. Επίσης, πολύ συχνά, είναι προτιμότερο να δίνονται οι αριθμοί ως κλάσματα, χωρίς να είναι απαραίτητη η πραγματοποίηση της πράξης της διαίρεσης. Για παράδειγμα, αντί για την αποτίμηση του <img  class="tab"  src="media/pg107b.png"/>, σε <span class="courier-code">0.3333333333333333</span> και ό,τι συνεπάγεται αυτό, θα ήταν προτιμότερο να εκφραστεί απλά ως λόγος, χωρίς να γίνει απαραίτητα η πράξη. Το άρθρωμα <span class="courier-code">fractions</span> πραγματοποιεί αυτό ακριβώς που δηλώνει και το όνομά του: τον χειρισμό αριθμών με τη μορφή κλασμάτων, έχοντας παρόμοια με την <span class="courier-code">decimal</span> αποτελέσματα αναφορικά με την ακρίβεια των υπολογισμών.</p>
			<p>Η εισαγωγή της βιβλιοθήκης γίνεται με την πιο κάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; from fractions import Fraction</span></p>
			<p class="no-indent">Για τη δημιουργία ενός αριθμού, π.χ. του 0.5, στην κλασματική μορφή του, αρκεί να δοθεί η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; Fraction(0.5) ή Fraction(&apos;0.5&apos;)</span></p>
			<p><span class="courier-code">Fraction(1,2)</span></p>
			<p class="no-indent">που αντιστοιχεί στο κλάσμα <img  class="tab" src="media/pg108.png"/>, όπου ο 1ος αριθμός του <span class="courier-code">Fraction</span> αντιστοιχεί στον αριθμητή και ο 2ος στον παρονομαστή. </p>
			<p>Για να γίνει αντιληπτή η διαφορά του <span class="courier-code">fractions</span> με τις αντίστοιχες πράξεις πραγματικών αριθμών, δίνεται το παρακάτω παράδειγμα. Έστω ότι χρειάζεται να γίνει η πράξη ￼. Οι παρακάτω γραμμές κώδικα κάνουν τον ίδιο υπολογισμό:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 1/3+1/2</span></p>
			<p><span class="courier-code">0.8333333333333333</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; Fraction(1,3)+Fraction(1,2)</span></p>
			<p><span class="courier-code">Fraction(5, 6)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; 5/6</span></p>
			<p><span class="courier-code">0.8333333333333334</span></p>
			<p class="no-indent">αλλά με διαφορετικό αποτέλεσμα η καθεμία. Ακόμα κι αν το αποτέλεσμα δεν διαφέρει και πολύ (κατά μερικά μόνο δεκαδικά στο τέλος του αποτελέσματος), αν στη συνέχεια επιχειρηθεί κι άλλος υπολογισμός, τότε τα προβλήματα ακρίβειας αρχίζουν να συσσωρεύονται και να οδηγούν σε λάθος αποτελέσματα. Έτσι, αν επιχειρηθεί ο πιο κάτω υπολογισμός:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 1/3 + 1/2 + 1/6</span></p>
			<p><span class="courier-code">0.9999999999999999</span></p>
			<p class="no-indent">ενώ φυσιολογικά θα έπρεπε να δώσει αποτέλεσμα 1, επιστρέφει ένα αποτέλεσμα κοντά στο 1 (αλλά σίγουρα όχι 1), σε αντίθεση με τα παρακάτω:</p>
			<p><span class="courier-code">&gt;&gt;&gt; Fraction(1,3)+Fraction</span><span class="courier-code">(1,2)+1/6</span></p>
			<p><span class="courier-code">1.0</span></p>
			<p class="no-indent">που περιέχουν μεικτούς υπολογισμούς (<span class="courier-code">Fractions</span> μαζί με διαίρεση) και λειτουργούν κανονικά δίνοντας το σωστό αποτέλεσμα. Με τη χρήση της κλάσης <span class="courier-code">fraction</span> επομένως, αποφεύγεται η ρητή πραγματοποίηση διαιρέσεων και δεν προκύπτουν έτσι σφάλματα αποκοπών ή στρογγυλοποιήσεων που, συνήθως, συσσωρεύονται και αλλοιώνουν τα τελικά αποτελέσματα.</p>
			<p>Τι άλλο μπορεί να δοθεί ως όρισμα στη <span class="courier-code">Fraction</span> και πώς αλλιώς μπορεί να χρησιμοποιηθεί; Στη Λίστα Κώδικα 2-12 δίνονται μερικά παραδείγματα χρήσης της.</p>
		
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-12 | Βιβλιοθήκη <span class="courier-code">fraction</span></figcaption><span class="courier-code"><img src="media/ListaKodika-2-12_fmt.png" alt=""/></span></figure>
		</section>
		<section role="section" id="ch4se20">
			<h1><span role="label">2.20</span> Μορφοποίηση εμφάνισης αριθμών</h1>
			<p class="no-indent">Ο πιο απλός τρόπος για να εμφανίζονται αποτελέσματα στην οθόνη του υπολογιστή είναι με την εντολή (συνάρτηση) <span class="courier-code">print</span>, όπου μέσα στις παρενθέσεις τοποθετούνται όλα τα προς εμφάνιση στοιχεία, χωρισμένα μεταξύ τους με κόμμα. Ένα απλό παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;αυτό&quot;, &quot;θα εμφανιστεί&quot;, &quot;εύκολα&quot;, &quot;στην οθόνη&quot;)</span></p>
			<p><span class="courier-code">αυτό θα εμφανιστεί εύκολα στην οθόνη</span></p>
			<p class="no-indent">Όπως φαίνεται, η εντολή εμφανίζει τα διάφορα ορίσματά της, στην ουσία ενώνοντας τα επιμέρους αλφαριθμητικά σε ένα ενιαίο και τοποθετώντας ένα κενό ανάμεσά τους. Εναλλακτικά, για την εμφάνιση μόνο αλφαριθμητικών τιμών ή μεταβλητών που περιέχουν κείμενο, μπορεί να χρησιμοποιηθεί και ο χαρακτήρας ‘<span class="courier-code">+</span>’ αντί για το κόμμα, όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;κι άλλο&quot;+ &quot;ένα&quot;+ &quot;κείμενο&quot;)</span></p>
			<p><span class="courier-code">κιάλλοένακείμενο</span></p>
			<p class="no-indent">πραγματοποιώντας συνένωση όλων των χαρακτήρων χωρίς την προσθήκη του κενού ανάμεσα στα τμήματα κειμένου.</p>
			<p>Με παρόμοιο τρόπο εμφανίζονται και περιεχόμενα μεταβλητών, όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a, b, c = 12, 3.14, &apos;π&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Το&quot;,c,&quot;έχει τιμή&quot;,b,&quot;.Μια άσχετη τιμή είναι το&quot;,a)</span></p>
			<p><span class="courier-code">Το π έχει τιμή 3.14 .Μια άσχετη τιμή είναι το 12</span></p>
			<p class="no-indent">Ως όρισμα μπορεί να δοθεί και αριθμητική ή λογική έκφραση, οπότε η <span class="courier-code">print</span> θα εμφανίσει το αποτέλεσμα αυτής της έκφρασης:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Ο μέσος όρος του 2 και του 3 είναι&quot;, (2+3)/2)</span></p>
			<p><span class="courier-code">2.5</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b=1,2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Είναι a&lt;b? &quot;, a&lt;b)</span></p>
			<p><span class="courier-code">Είναι a&lt;b? True</span></p>
			<p class="no-indent">Ένα όρισμα μπορεί, τέλος, να είναι μια άλλη συνάρτηση, οπότε το αποτέλεσμα που επιστρέφει η συνάρτηση αυτή θα δοθεί για εμφάνιση στην <span class="courier-code">print</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> print(&quot;Ο τύπος του a είναι:&quot;, type(a))</span></p>
			<p><span class="courier-code">Ο τύπος του a είναι: &lt;class &apos;int&apos;&gt;</span></p>
			<p class="no-indent">Η <span class="courier-code">print</span> δέχεται δύο ακόμη, προαιρετικά, ορίσματα, για την αλλαγή του τρόπου εμφάνισης των στοιχείων της: τα <span class="courier-code">sep</span> και <span class="courier-code">end</span>:</p>
			<p><span class="courier-code">sep</span>=’, ’: ανάμεσα από κάθε τμήμα εκτύπωσης δεν θα υπάρχει το κενό αλλά το κόμμα</p>
			<p><span class="courier-code">sep</span>=’’: δεν θα υπάρχουν καθόλου κενά ανάμεσα σε αυτά που τυπώνονται.</p>
			<p class="no-indent">Γενικά, ό,τι μπει μέσα στα ‘ ’ (ή “ ”) θα εμφανίζεται μετά από κάθε τμήμα εμφάνισης της <span class="courier-code">print</span>. Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(a, b, c, sep=&apos;#&apos;)</span></p>
			<p><span class="courier-code">12#3.14#π</span></p>
			<p class="no-indent">βάζοντας μετά από κάθε όρισμα τον χαρακτήρα ‘#’.</p>
			<p>Μια <span class="courier-code">print</span> εξ ορισμού τελειώνει με την αλλαγή γραμμής. Έτσι, δύο διαδοχικές εντολές <span class="courier-code">print</span> εμφανίζονται σε δύο διαφορετικές γραμμές στην οθόνη, η μια μετά και κάτω από την άλλη. Κάτι τέτοιο πολλές φορές, ειδικά αν χρειάζεται να τυπωθούν μερικές εκατοντάδες στοιχεία, δεν είναι πάντα βολικό. Το όρισμα <span class="courier-code">end</span> αλλάζει τον τρόπο με τον οποίο τελειώνει μια εντολή <span class="courier-code">print</span>. </p>
			<p>Για παράδειγμα:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span> &#9;<span class="courier-code">a, b, c =1, 22, 33 </span><img style="width:10%" src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code"><b>In [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">print(a, b, c, end=&quot;&quot;)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">&#9;… :</span>&#9;<span class="courier-code">print(c, b, a)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">&#9;… :</span>&#9;<span class="courier-code">print(a, b, c)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">&#9;… :</span>&#9;<img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code"><b>Out[2]</b></span><span class="courier-code">:</span>&#9;&#9;<span class="courier-code">1 22 3333 22 1</span></p>
			<p><span class="courier-code">&#9;&#9;1 22 33</span></p>
			<p class="no-indent">Πατώντας <img src="media/enter.png" class="enter"/> στην κονσόλα IPython αλλάζουμε γραμμή χωρίς να γίνει εκτέλεση της εντολής, επιτρέποντας τη δημιουργία περισσότερων εντολών στο κέλυφος και την εκτέλεσή τους στο τέλος όλων μαζί. </p>
			<p>Οι πρώτες δύο <span class="courier-code">print</span> θα εμφανίσουν τα αποτελέσματά τους στην ίδια γραμμή, ενώ η ακόλουθη, 3η στη σειρά, <span class="courier-code">print</span> και κάθε επόμενη θα εμφανιστεί σε καινούρια γραμμή, αφού η 2η <span class="courier-code">print</span> δεν περιέχει τμήμα <span class="courier-code">end</span>, κρατώντας την κανονική μορφή της (εξ ορισμού με δημιουργία νέας γραμμής). Επίσης, τα δεδομένα της 1ης και 2ης <span class="courier-code">print</span> εμφανίζονται αμέσως το ένα μετά το άλλο, χωρίς κενό ανάμεσά τους (το 33 του <span class="courier-code">c</span> της 1ης <span class="courier-code">print</span> «κολλάει» στο 33 του <span class="courier-code">c</span> της 2ης <span class="courier-code">print</span> γιατί στο <span class="courier-code">end</span>=“” δεν υπάρχει κενό στα “”).</p>
			<p>Το τμήμα <span class="courier-code">end</span> μπορεί να περιλαμβάνει στα “” οτιδήποτε είναι επιθυμητό να τυπώνεται στο τέλος κάθε εντολής <span class="courier-code">print</span> (καταργώντας, για αυτή την <span class="courier-code">print</span>, τη δημιουργία νέας γραμμής):</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Hello&quot;, end= &quot;:-)&quot;)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">Hello:-)</span></p>
			<p class="no-indent">Μέσα στην ίδια <span class="courier-code">print</span> μπορεί να υπάρχουν και τα δύο τμήματα <span class="courier-code">sep</span> και <span class="courier-code">end</span>. Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(a, b, c, sep</span><span class="courier-code">= &quot;#&quot;, end= &quot;…&quot;)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">1#22#33…</span></p>
			<p class="no-indent">Περισσότερες επιλογές δίνονται με τους <i>χαρακτήρες διαφυγής </i>(<i>escape characters</i>). Ακολουθεί ο Πίνακας 2-12 με τους ειδικούς αυτούς χαρακτήρες, οι οποίοι ενσωματώνονται σε οποιαδήποτε συμβολοσειρά με τη χρήση του χαρακτήρα ‘\’. </p>
			<figure role="table" id="tb12">
				<figcaption><span role="label">Πίνακας 2-12</span> | Χαρακτήρες διαφυγής (escape characters)</figcaption>
				<table id="table012">
					<tbody>
						<tr>
							<td>
								<p><span class="courier-code">\</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας διαφυγής</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&apos;</span></p>
							</td>
							<td>
								<p><span class="courier-code">Μονά εισαγωγικά για την εισαγωγή κειμένου</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&quot;</span></p>
							</td>
							<td>
								<p><span class="courier-code">Διπλά εισαγωγικά για την εισαγωγή κειμένου</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\a</span></p>
							</td>
							<td>
								<p><span class="courier-code">ASCII* χαρακτήρας κουδουνίσματος!! (Bell)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\b</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας backspace</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\f</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας FormFeed</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\r</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας Carriage Return</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\n</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας νέας γραμμής (New Line – Line Feed)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\t</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας οριοθέτησης (Tab)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\v</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας κάθετης οριοθέτησης (Vertical Tab)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\aaa</span></p>
							</td>
							<td>
								<p><span class="courier-code">Οκταδικός χαρακτήρας με τιμή aaa</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\xaa</span></p>
							</td>
							<td>
								<p><span class="courier-code">Δεκαεξαδικός χαρακτήρας με τιμή aa</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\uaaaa</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας κωδικοποίησης Unicode 16bit με δεκαεξαδικό κωδικό aaaa</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\Uaaaaaaaa</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας κωδικοποίησης Unicode 32bit </span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">\N{info}</span></p>
							</td>
							<td>
								<p><span class="courier-code">Χαρακτήρας Unicode μέσω της περιγραφής του</span></p>
							</td>
						</tr>
					</tbody>
				</table>
				<footer>
					<p class="table-notes">* ASCII: <i>American Standard Code for Information Interchange</i>, ένας πρότυπος πίνακας κωδικών για τη μεταφορά και ανταλλαγή δεδομένων. Περισσότερα στο Κεφάλαιο 6 με τις συμβολοσειρές.</p>
				</footer>
			</figure>
			<p class="no-indent">Στη συνέχεια δίνονται μερικά παραδείγματα χρήσης χαρακτήρων διαφυγής σε εντολές <span class="courier-code">print</span>.</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(a,b,c,sep=&quot;#\t&quot;,end=&quot;…\n&quot;)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">1#     22#     33…</span></p>
			<p class="no-indent">Ανάμεσα στους αριθμούς τυπώνεται το ‘<span class="courier-code">#</span>’, ενώ κάθε αριθμός τυπώνεται με ένα tab απόσταση από τον προηγούμενό του (και μετά τον χαρακτήρα ‘<span class="courier-code">#</span>’), στο τέλος τυπώνονται οι ‘…’ και δημιουργείται νέα γραμμή. </p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Κάθε\t τιμή\t σε\</span><span class="courier-code">t νέα\t στήλη&quot;)</span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">Κάθε     τιμή    σε      νέα     στήλη</span></p>
			<p class="no-indent">Κάθε χαρακτήρας που ακολουθεί το <img class="tab" src="media/tab.png"/>(<span class="courier-code">\t</span>) στοιχίζεται οκτώ χαρακτήρες μετά το προηγούμενο <img class="tab" src="media/tab.png"/>. </p>
			<p>Περισσότερα όμως για τους χαρακτήρες διαφυγής στο Κεφάλαιο 6.</p>
			<p>Τέλος, είναι δυνατή η <i>ανακατεύθυνση </i>(<i>redirecting</i>) μιας εντολής <span class="courier-code">print</span> σε κάποιο αρχείο τύπου log (αρχεία ASCII αναφορών-ημερολογίου εργασιών). Οι εργασίες με αρχεία περιγράφονται στο Κεφάλαιο 12.</p>
			<section role="subsection" id="ch4se20ss1">
				<h1><span role="label">2.20.1</span> Μορφοποίηση υπολοίπου (%)</h1>
				<p class="no-indent">Η Python διαθέτει δύο μηχανισμούς (και μια νέα μορφή χαρακτήρων που περιγράφεται στο Κεφάλαιο 6) για τη διαχείριση κειμένου και την εμφάνισή του στην κονσόλα του συστήματος. Ο πρώτος μηχανισμός, που χρησιμοποιήθηκε στην έκδοση 2.x και συνεχίζει να υπάρχει και στην έκδοση 3.x, κάνει χρήση του χαρακτήρα του υπολοίπου (%) ακέραιας διαίρεσης. Ενώ όταν χρησιμοποιείται σε πράξεις υπολογίζει υπόλοιπα ακέραιων διαιρέσεων, όταν χρησιμοποιείται μέσα σε κείμενο κάνει μορφοποίηση του κειμένου, γίνεται δηλαδή <i>υπερφόρτωση </i>(<i>overload</i>) του τελεστή υπολοίπου (<span class="courier-code">%</span>) από την κλάση <span class="courier-code">string</span> (που περιλαμβάνει όλα τα αντικείμενα και μεθόδους για συμβολοσειρές και παρουσιάζεται αναλυτικά σε επόμενο κεφάλαιο). </p>
				<p>Η γενική μορφή που μπορεί να έχει μια <span class="courier-code">print</span> με μορφοποίηση υπολοίπου είναι:</p>
				<p><span class="courier-code">print(&quot;κείμενο μαζί με σύμβολα %&quot; % (μια πλειάδα τιμών))</span></p>
				<p class="no-indent">Για παράδειγμα: </p>
				<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Τεμάχια:%d</span><span class="courier-code"> Τιμή:%d Αξία:%d ΦΠΑ:%8.2f&quot;%(10,2,20,20*0.24))</span></p>
				<p><span class="courier-code">Τεμάχια:10 Τιμή:2 Αξία:20 ΦΠΑ</span> &#95;&#95;&#95;&#95;<span class="courier-code"> 4.80</span></p>
				<p class="no-indent">όπου με τον χαρακτήρα ‘&#95;’ υποδηλώνεται η ύπαρξη ενός κενού διαστήματος.</p>
				<p>Η γενική μορφή του υπολοίπου (<span class="courier-code">%</span>) είναι: </p>
				<p><span class="courier-code">% [σημαίες] [μήκος] . [ακρίβεια] μορφή</span></p>
				<p class="no-indent">Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; print(&quot;%8.4f&quot;%(3.141592653589793))</span></p>
				<p>&#95;&#95; <span class="courier-code">3.1416 </span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(&quot;%8.2f&quot;%(3.141592653589793))</span></p>
				<p>&#95;&#95;&#95;&#95; <span class="courier-code">3.14</span></p>
				<p class="no-indent">όπου σε διάστημα 8 χαρακτήρων (είναι το [<span class="courier-code">μήκος</span>] του) τυπώνεται ο πραγματικός αριθμός 3.14 (f, είναι η <span class="courier-code">μορφή</span>), έχοντας 2 δεκαδικά (είναι η [<span class="courier-code">ακρίβεια</span>]). Ο αριθμός στοιχίζεται δεξιά, μετά από 8 θέσεις, αφήνοντας στην αρχή τέσσερα κενά (ό,τι περισσεύει δηλαδή από τους 8 χαρακτήρες που δεσμεύτηκαν μείον τα ψηφία του αριθμού και την υποδιαστολή).</p>
				<p>Για να γίνει η απαραίτητη κάθε φορά μορφοποίηση του κειμένου που θα τυπωθεί στην οθόνη, θα πρέπει να χρησιμοποιηθούν κάποιοι ειδικοί χαρακτήρες. Η χρήση αυτών των χαρακτήρων προσδιορίζει τη μορφή των προς εκτύπωση αριθμών.</p>
				<p>Ακολουθεί ο Πίνακας 2-13 με τα σύμβολα προσδιορισμού της μορφής εμφάνισης.</p>
				<figure role="table" id="tb13">
					<figcaption><span role="label">Πίνακας 2-13</span> | Χαρακτήρες τύπου αριθμών</figcaption>
					<table id="table013">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">d,i,u</span></p>
								</td>
								<td>
									<p><span class="courier-code">Ακέραιος αριθμός</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">o</span></p>
								</td>
								<td>
									<p><span class="courier-code">Οκταδικός αριθμός</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">x</span></p>
								</td>
								<td>
									<p><span class="courier-code">Δεκαεξαδικός αριθμός</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">X</span></p>
								</td>
								<td>
									<p><span class="courier-code">Δεκαεξαδικός αριθμός (κεφαλαία)</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">b</span></p>
								</td>
								<td>
									<p><span class="courier-code">Δυαδικός αριθμός</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">e,g</span></p>
								</td>
								<td>
									<p><span class="courier-code">Αριθμός σε επιστημονική γραφή</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">E, G</span></p>
								</td>
								<td>
									<p><span class="courier-code">Αριθμός σε επιστημονική γραφή (κεφαλαίο &quot;Ε&quot;)</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">f,F</span></p>
								</td>
								<td>
									<p><span class="courier-code">Αριθμός κινητής υποδιαστολής</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">c</span></p>
								</td>
								<td>
									<p><span class="courier-code">Ένας μοναδικός χαρακτήρας (string ή int)</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">s,r</span></p>
								</td>
								<td>
									<p><span class="courier-code">Μια συμβολοσειρά (string) με χρήση της συνάρτησης str και repr</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">%</span></p>
								</td>
								<td>
									<p><span class="courier-code">Ο χαρακτήρας % σηματοδοτεί την έναρξη μορφοποίησης</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Στη Λίστα Κώδικα 2-13 παρουσιάζονται μερικά παραδείγματα με τη χρήση των χαρακτήρων μορφοποίησης.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-13 | Μορφοποίηση υπολοίπου (%)</figcaption><img src="media/ListaKodika-2-13_fmt.png" alt=""/></figure>
				<p class="no-indent">Τέλος, μπορεί να προηγηθεί της μορφοποίησης κάποια «σημαία» από τον Πίνακα 2-14.</p>
				<figure role="table" id="tb14">
					<figcaption><span role="label">Πίνακας 2-14</span> | Σημαίες μορφοποίησης</figcaption>
					<table id="table014">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">#</span></p>
								</td>
								<td>
									<p><span class="courier-code">Προσθήκη του 0o, 0O, 0x ή 0X μπροστά από τον αριθμό</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">+</span></p>
								</td>
								<td>
									<p><span class="courier-code">Προσθήκη στην αρχή του αριθμού του συμβόλου + ή - για το πρόσημο</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">-</span></p>
								</td>
								<td>
									<p><span class="courier-code">Στοίχιση αριστερά</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">0</span></p>
								</td>
								<td>
									<p><span class="courier-code">Προσθήκη – γέμισμα από τα αριστερά με μηδενικά</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">κενό</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση ενός κενού αν δεν υπάρχει πρόσημο (αν είναι θετικός)</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Στη Λίστα Κώδικα 2-14 φαίνεται ο τρόπος χρήσης τους, αλλά και τα αποτελέσματα που αυτοί έχουν στην έξοδο μιας εντολής <span class="courier-code">print</span>:</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-14 | Μορφοποίηση υπολοίπου – σημαίες</figcaption><img src="media/ListaKodika-2-14_fmt.png" alt=""/></figure>
			</section>
			<section role="subsection" id="ch4se20ss2">
				<h1><span role="label">2.20.2</span> Μορφοποίηση με format</h1>
				<p class="no-indent">Η Python διαθέτει έναν πιο ολοκληρωμένο τρόπο μορφοποιημένης εμφάνισης. Αν και η περιγραφή της κλάσης <span class="courier-code">str</span>, που αφορά κείμενο, γίνεται στο Κεφάλαιο 6, κρίνεται αναγκαίο να περιγραφούν σ’ αυτό το σημείο οι βασικοί τρόποι μορφοποίησης της εμφάνισης αριθμών μέσα από τη χρήση της εντολής <span class="courier-code">print</span>. </p>
				<p>Υπάρχουν τρεις τρόποι με τους οποίους μπορεί ένας αριθμός να μορφοποιηθεί κατάλληλα. Ο ένας είναι μέσω της συνάρτησης <span class="courier-code">format</span>, ο δεύτερος μέσω της μεθόδου <span class="courier-code">format</span> μιας συμβολοσειράς και ο τρίτος με f string (βλ. παρακάτω).</p>
				<p class="no-indent"><span class="bold-italics">Η συνάρτηση format</span></p>
				<p class="no-indent">Είναι μια από τις ενσωματωμένες στη γλώσσα συναρτήσεις. Επιτρέπει τη διαμόρφωση ενός στοιχείου και τη μετατροπή του σε κείμενο. Γράφοντας:</p>
				<img src="media/icon-3_fmt.png" alt=""/>
				<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">format(0.12345,&apos;8.3f&apos;)</span> <img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out</b></span><span class="courier-code"><b>[1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">&apos;</span>&#95;&#95;&#95; <span class="courier-code">0.123&apos;</span></p>
				<p><span class="courier-code"><b>In [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">a=format(3.12345,&apos;8.3f&apos;)</span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>In [3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">a </span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out[3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">&apos;</span>&#95;&#95;&#95; <span class="courier-code">0.123&apos;</span></p>
				<p class="no-indent">στην εντολή 1 ο αριθμός <span class="courier-code">0.12345</span> μετατρέπεται σε κείμενο ακολουθώντας τη μορφοποίηση που δίνεται, <span class="courier-code">&apos;8.3f&apos;</span>, ενώ το αποτέλεσμα εμφανίζεται στην κονσόλα. Στην εντολή 2 γίνεται το ίδιο, αλλά το αποτέλεσμα δίνεται στη μεταβλητή <span class="courier-code">a</span>, η οποία, όπως φαίνεται από την εντολή 3, περιέχει το κείμενο που προέκυψε από τη χρήση της <span class="courier-code">format</span>.</p>
				<p class="no-indent"><span class="bold-italics">Η μέθοδος format</span></p>
				<p class="no-indent">Η συγκεκριμένη μέθοδος διαμορφώνει <i>κείμενο </i>(<i>string</i>). Η γενική μορφή της είναι: </p>
				<p><span class="courier-code">&apos;κείμενο&apos;.</span><span class="courier-code">format()</span></p>
				<p class="no-indent">και, επειδή η παραπάνω εντολή παράγει κείμενο, μπορεί να τεθεί ως παράμετρος της <span class="courier-code">print</span>:</p>
				<p><span class="courier-code">print(&apos;κείμενο&apos;.format())</span></p>
				<p class="no-indent">για να εμφανίσει το μορφοποιημένο κείμενο στην οθόνη.</p>
				<p>Μέσα στο <span class="courier-code">&apos;κείμενο&apos;</span> γίνεται η μορφοποίηση, με ειδικά σύμβολα μέσα σε <span class="courier-code">{}</span>, ενώ τα στοιχεία για τα οποία ορίζεται η μορφή τους δίνονται ως παράμετροι στη <span class="courier-code">format</span>. Στο παρακάτω παράδειγμα φαίνεται η χρήση της μεθόδου:</p>
				<img src="media/icon-3_fmt.png" alt=""/>
				<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">print(&apos;Μία τιμή: {0} και άλλη μία: {1}!&apos;.</span><span class="courier-code">format(10, 12))</span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out[1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">Μία τιμή: 10 και άλλη μία: 12!</span></p>
				<p><span class="courier-code"><b>In [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">print(&apos;π={0:8.3f} και π/2={1:8.2f}&apos;.format(3.1415,3.1415/2))</span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out[2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">π=3.142 και π/2=1.57</span></p>
				<p class="no-indent">Ό,τι βρίσκεται έξω από τα άγκιστρα τυπώνεται όπως δίνεται. Μέσα στα άγκιστρα, ο 1ος αριθμός προσδιορίζει τον αριθμό του ορίσματος της <span class="courier-code">format</span>: 0 για το 1ο, 1 για το 2ο κ.ο.κ. Στη συνέχεια, μετά τον χαρακτήρα ‘:’ δίνεται η μορφή του συγκεκριμένου ορίσματος. Στα προηγούμενα παραδείγματα χρησιμοποιήθηκε μορφή παρόμοια με αυτή του υπολοίπου (%). Ωστόσο, η <span class="courier-code">format</span> διαθέτει πολύ πιο πλήρη ποικιλία επιλογών, που παρουσιάζονται παρακάτω. Η γενική μορφή της μορφοποίησης είναι:</p>
				<p class="blockquote">[[γέμισμα]στοίχιση][πρόσημο][#][0][μήκος][ομαδοποίηση][.ακρίβεια][τύπος]</p>
				<p class="no-indent">Το [<span class="courier-code">γέμισμα</span>] καθορίζεται από τον πρώτο χαρακτήρα που θα δοθεί και θα «γεμίσει» τα κενά που θα μείνουν μέχρι την πλήρωση του πεδίου [<span class="courier-code">μήκος</span>].</p>
				<p>Η στοίχιση γίνεται με τους χαρακτήρες του Πίνακα 2-15.</p>
				<figure role="table" id="tb15">
					<figcaption><span role="label">Πίνακας 2-15</span> | Κωδικοί στοίχισης</figcaption>
					<table id="table015">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">&lt;</span></p>
								</td>
								<td>
									<p><span class="courier-code">Στοίχιση αριστερά</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">&gt;</span></p>
								</td>
								<td>
									<p><span class="courier-code">Στοίχιση δεξιά</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">=</span></p>
								</td>
								<td>
									<p><span class="courier-code">Στοίχιση μετά το πρόσημο και πριν από τον αριθμό</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">^</span></p>
								</td>
								<td>
									<p><span class="courier-code">Στοίχιση στο κέντρο</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Το πώς (και εάν) θα εμφανιστεί το πρόσημο καθορίζεται από τους χαρακτήρες του Πίνακα 2-16.</p>
				<figure role="table" id="tb16">
					<figcaption><span role="label">Πίνακας 2-16</span> | Κωδικοί πρόσημου</figcaption>
					<table id="table016">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">+</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση προσήμου </span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">-</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση προσήμου μόνο των αρνητικών αριθμών</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">κενό</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση ενός κενού για τους θετικούς και &apos;-&apos; για τους αρνητικούς</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Οι επιλογές ομαδοποίησης παρουσιάζονται στον Πίνακα 2-17.</p>
				<figure role="table" id="tb18">
					<figcaption><span role="label">Πίνακας 2-17</span> | Διαχωριστικά χιλιάδων</figcaption>
					<table id="table017">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">_</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση του χαρακτήρα &apos;_&apos; ως διαχωριστικού χιλιάδων </span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">,</span></p>
								</td>
								<td>
									<p><span class="courier-code">Εμφάνιση του χαρακτήρα &apos;,&apos; ως διαχωριστικού χιλιάδων</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Οι υποστηριζόμενοι τύποι είναι παρόμοιοι με τη μορφή υπολοίπου. Οι χαρακτήρες ‘<span class="courier-code">#</span>’ και ‘<span class="courier-code">0</span>’ χρησιμοποιούνται για την «εναλλακτική» μορφή ενός αριθμού (μπαίνει ένα πρόθεμα, όπως <span class="courier-code">0x</span> για δεκαεξαδικούς, ή εμφανίζει, υποχρεωτικά, δεκαδικά σε πραγματικούς).</p>
				<p>Τα υπόλοιπα στοιχεία είναι ίδια με την περίπτωση μορφοποίησης υπολοίπου. Ακολουθούν μερικά παραδείγματα (έχει προηγηθεί η εισαγωγή της βιβλιοθήκης <span class="courier-code">math</span> με την εντολή <span class="courier-code">import math</span>). Τα παραδείγματα αυτά παρουσιάζονται στη Λίστα Κώδικα 2-15.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 2-15 | Μορφοποίηση με format</figcaption><img src="media/ListaKodika-2-15_fmt.png" alt=""/></figure>
				<p class="no-indent">Για τη μορφή αριθμών στα ελληνικά απαιτείται κατ’ αρχάς η χρήση της βιβλιοθήκης <span class="courier-code">locale</span> και η μορφή αριθμού ‘<span class="courier-code">n</span>’ όπως φαίνεται στο παρακάτω παράδειγμα:</p>
				<img src="media/icon-3_fmt.png" alt=""/>
				<p><span class="courier-code"><b>In [1]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">import locale </span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>In [2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">locale.setlocale(locale.LC_ALL, &apos;&apos;) </span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out[2]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">&apos;Greek_Greece.1253&apos;</span></p>
				<p><span class="courier-code"><b>In [3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">&apos;{:22n}&apos;.format(140_000/6) </span><img src="media/enter.png" class="enter"/></p>
				<p><span class="courier-code"><b>Out[3]</b></span><span class="courier-code">:</span>&#9;<span class="courier-code">&apos;              23.333,3&apos;</span></p>
				<p class="no-indent"><span class="bold-italics">Μορφοποιημένο κείμενο</span></p>
				<p class="no-indent">Μια νέα μορφή κειμένου που υποστηρίζει η Python είναι η εξής (f string):</p>
				<p><span class="courier-code">f&apos;κείμενο {έκφραση}&apos;</span></p>
				<p class="no-indent">όπου <span class="courier-code">έκφραση</span> μπορεί να είναι μια μεταβλητή, πράξεις, ή γενικά κάποιο αντικείμενο. Αυτό ονομάζεται f string ή μορφοποιημένο κείμενο.</p>
				<p class="no-indent">Η παρακάτω εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; α=10</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(f&apos;Το α είναι {α}. Το αντίστροφό του είναι {1/α}&apos;)</span></p>
				<p class="no-indent">θα εμφανίσει:</p>
				<p><span class="courier-code">Το α είναι 10. Το αντίστροφό του είναι 0.1</span></p>
			</section>
		</section>
		<section role="section" id="ch4se21">
			<h1><span role="label">2.21</span> Παραδείγματα</h1>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 2-1</b>: Να γράψετε πρόγραμμα που θα δέχεται το μήκος πλευράς ενός τετραγώνου υπολογίζοντας και εμφανίζοντας το εμβαδόν αυτού του τετραγώνου.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 2-16 | Παράδειγμα 2-1</figcaption><img src="media/ListaKodika-2-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Για την εκτέλεση των παραδειγμάτων ακολουθείται η παρακάτω διαδικασία:</p>
			<ol><li>Σε έναν κειμενογράφο (editor όπως Σημειωματάριο, Notepad++ κ.ά.) ή σε κάποιο ολοκληρωμένο περιβάλλον (IDE), γράφεται ο κώδικας (χωρίς την αρίθμηση των γραμμών φυσικά!).</li>
			<li>Αποθηκεύεται το αρχείο π.χ. ως <span class="courier-code">px1.py</span> σε κάποιο φάκελο στον δίσκο.</li>
			<li>Στη γραμμή εντολών δίνεται η εντολή <span class="courier-code">python3 px</span><span class="courier-code">1.py</span>. </li>
			<li>Εκτελείται το πρόγραμμα.</li>
			</ol><p class="no-indent">Ακολουθεί η εκτέλεση του προγράμματος <span class="courier-code">px1.py</span>, που είναι αποθηκευμένο στον δίσκο F:\, στη γραμμή εντολών:</p>
			<p><span class="courier-code">C:\Windows\System32&gt;python3 f:\px1.py</span></p>
			<p><span class="courier-code">Δώσε το μήκος πλευράς τετραγώνου: </span><span class="courier-code"><b>10</b></span><span class="courier-code"> </span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">Το εμβαδό είναι 100</span></p>
			<p><span class="courier-code">C:\Windows\System32&gt;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 2-2: </b>Να γράψετε πρόγραμμα που θα ζητάει το όνομα του χρήστη και θα εμφανίζει ένα προσωποποιημένο μήνυμα προς αυτόν.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 2-17 | Παράδειγμα 2-2</figcaption><img src="media/ListaKodika-2-17_fmt.png" alt=""/></figure>
			<p class="no-indent">και μια δοκιμαστική εκτέλεσή του (μέσα από το περιβάλλον του IDLE):</p>
			<p><span class="courier-code">&gt;&gt;&gt; </span></p>
			<p><span class="courier-code">RESTART: C:/Python/Python35-32/px2.py </span></p>
			<p><span class="courier-code">Πώς σε λένε; </span><span class="courier-code"><b>Άννα</b></span><span class="courier-code"> </span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">Καλημέρα Άννα !</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 2-3: </b>Να γράψετε πρόγραμμα που θα ζητάει το έτος γέννησης του χρήστη και θα εμφανίζει την ηλικία του.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 2-18 | Παράδειγμα 2-3</figcaption><img src="media/ListaKodika-2-18_fmt.png" alt=""/></figure>
			<p class="no-indent">και μια δοκιμαστική εκτέλεσή του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; </span></p>
			<p><span class="courier-code"> RESTART: C:/Python</span><span class="courier-code">35-32/px3.py </span></p>
			<p><span class="courier-code">Πότε γεννήθηκες;</span><span class="courier-code"><b>1998</b></span><span class="courier-code"> </span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">Πότε έγινες κιόλας 20 χρονών!</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 2-4: </b>Να γράψετε πρόγραμμα που θα ζητάει την τιμή ενός προϊόντος και θα εμφανίζει τον ΦΠΑ και το τελικό ποσό (μαζί με τον φόρο).</p>
			</blockquote>
			<p class="no-indent">Γενικότερα, το μοτίβο που ακολουθείται στα πρώτα απλά προγράμματα (και όχι μόνο) είναι: </p>
			<p class="blockquote">Είσοδος – Επεξεργασία – Έξοδος</p>
			<p class="no-indent">Έτσι, το πρώτο βήμα περιλαμβάνει την εισαγωγή μιας τιμής. Αυτό θα γίνει με τη χρήση της <span class="courier-code">input</span> που εμφανίζει αρχικά και ένα κατάλληλο μήνυμα στην οθόνη:</p>
			<p><span class="courier-code">&gt;&gt;&gt; poso=input(&quot;Δώσε την τιμή:&quot;)</span></p>
			<p class="no-indent"> (ΦΠΑ = 24%, με ονομασία μεταβλητής <span class="courier-code">fpa</span>) θα γίνει εύκολα ως ποσοστό του ποσού (μεταβλητή <span class="courier-code">poso</span>) ως εξής:</p>
			<p class="no-indent"><img src="media/pg119a.png" />￼</p>
			<p><span class="courier-code">&gt;&gt;&gt; fpa=poso*0.24</span></p>
			<p class="no-indent">ενώ το τελικό ποσό (μεταβλητή <span class="courier-code">tp</span>), δηλαδή το ποσό που προκύπτει μετά την προσθήκη του φόρου, είναι:</p>
			<p class="no-indent"><img src="media/pg119b.png" />￼</p>
			<p class="no-indent">και η αντίστοιχη εντολή μπορεί να γραφτεί με <i>έναν</i> από τους παρακάτω τρόπους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; tp=poso+fpa</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; tp=poso+poso*0.24</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; tp=poso*1.24 #επειδή: poso+poso*0.24=poso(1+0.24)</span></p>
			<p class="no-indent">Τέλος, γίνεται η εμφάνιση του αποτελέσματος: </p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;ΦΠΑ:&quot;, fpa, &quot;Τελικό Ποσό:&quot;, tp)</span></p>
			<p class="no-indent">Βάζοντας όλα τα παραπάνω μαζί σε ένα σενάριο (script), για την ομαδική εκτέλεσή τους, προκύπτει το παρακάτω πρόγραμμα:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 2-19 | Παράδειγμα 2-4</figcaption><img src="media/ListaKodika-2-19_fmt.png" alt=""/></figure>
			<p class="no-indent">και μια δοκιμαστική εκτέλεσή του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; </span></p>
			<p><span class="courier-code"> RESTART: C:/Python35-32/</span><span class="courier-code">px4.py </span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>100</b></span><span class="courier-code"> </span><img src="media/enter.png" class="enter"/></p>
			<p><span class="courier-code">ΦΠΑ: 24 , Τελικό Ποσό: 124</span></p>
		</section>
		<section role="section" id="ch4se22"  data-featured="chapter-review">
			<h1><span role="label">2.22</span> Περίληψη</h1>
			<p class="no-indent">Σε αυτό το κεφάλαιο παρουσιάστηκαν οι βασικοί αριθμητικοί τύποι της Python και δόθηκε η ερμηνεία για τα εξής:</p>
			<ul><li>Την έννοια της μεταβλητής</li>
			<li>Τις βασικές συναρτήσεις χειρισμού αριθμών</li>
			<li>Τα προβλήματα ακρίβειας αριθμητικών υπολογισμών</li>
			<li>Την εισαγωγή κώδικα από βιβλιοθήκες</li>
			<li>Την εισαγωγή και ο χειρισμός αριθμητικών δεδομένων</li>
			</ul><p class="no-indent">Βασική επιδίωξη ήταν η μελέτη του τρόπου που χειρίζεται αριθμούς η Python. Στη συνέχεια του βιβλίου παρουσιάζονται οι υπόλοιπες δομές και τύποι δεδομένων της γλώσσας, αλλά είναι κρίσιμο να μπορεί κανείς να χειρίζεται αποτελεσματικά οποιαδήποτε αριθμητικά δεδομένα, γιατί αποτελούν στοιχεία που συνυπάρχουν και ενσωματώνονται σε άλλες δομές, όπως για παράδειγμα οι λίστες. Με την κατανόηση των βασικών στοιχείων που αναφέρονται στους αριθμητικούς υπολογισμούς, είναι δυνατή η ανάλυση και επίλυση απλών προβλημάτων υπολογισμών και αποδοτικού χειρισμού αριθμητικών δεδομένων.</p>
			
		</section>
		<section role="section" id="ch4se23" data-featured="chapter-questions">
			<h1><span role="label">2.23</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol>
			<li>Ποιους αριθμητικούς τύπους δεδομένων υποστηρίζει η γλώσσα Python;</li>
			<li>Τι είναι μια μεταβλητή στην Python;</li>
			<li>Τι είναι οι αριθμητικοί τελεστές; Ποιοι είναι; Ποια η ιεραρχία τους;</li>
			<li>Πώς μπορεί να γίνει αντιμετάθεση τιμών δύο μεταβλητών;</li>
			<li>Ποια είναι η λειτουργία της εντολής <span class="courier-code">input()</span>; Τι ορίσματα δέχεται; Τι επιστρέφει πάντα; Ποιος ο ρόλος των συναρτήσεων <span class="courier-code">int()</span> και <span class="courier-code">float()</span>;</li>
			<li>Ποια θα είναι η τιμή της μεταβλητής <span class="courier-code">a</span> μετά την εκτέλεση των πιο κάτω εντολών;
			<p><span class="courier-code">a = 6-6/3</span></p>
			<p><span class="courier-code">a = a/2-a/3-a/4</span></p>
			<p><span class="courier-code">a = 1-1/2-1/3+1/2+1/3</span></p>
			</li>
			<li>Ποιο θα είναι το αποτέλεσμα των παρακάτω εντολών αν <span class="courier-code">a=5</span>, <span class="courier-code">b=10</span> και <span class="courier-code">c=1/3</span>;
			<p><span class="courier-code">3*a-a/3,&#9;b-b+a,&#9;3*c-1,&#9;b*c-10/3</span></p>
			</li>
			<li>Ποιο θα είναι το αποτέλεσμα των παρακάτω εντολών για οποιαδήποτε (αριθμητική) τιμή των <span class="courier-code">x</span> και <span class="courier-code">y</span>;
			<p><span class="courier-code">x=x+y</span></p>
			<p><span class="courier-code">y=x-y</span></p>
			<p><span class="courier-code">x=x-y</span></p>
			</li>
			<li>Με ποιον τρόπο μπορεί να εγκατασταθεί μια βιβλιοθήκη κώδικα;</li>
			<li>Πώς εισάγεται σε σενάριο μια βιβλιοθήκη κώδικα;</li>
			<li>Πώς μπορεί να εμφανιστούν τα αποτελέσματα δύο διαδοχικών εντολών <span class="courier-code">print()</span> στην ίδια γραμμή;</li>
			<li>Γράψτε τις εντολές εκχώρησης ώστε η μεταβλητή <span class="courier-code">a</span> να πάρει τις παρακάτω τιμές:
				<ul><li>Τον μέσο όρο των μεταβλητών <span class="courier-code">b</span>, <span class="courier-code">c</span>, <span class="courier-code">d</span></li>
					<li>Το μισό του <span class="courier-code">b</span></li>
					<li>Το διπλάσιο της διαφοράς των <span class="courier-code">b</span> και <span class="courier-code">c</span></li>
					<li>Το υπόλοιπο της διαίρεσης του <span class="courier-code">b</span> με το <span class="courier-code">c</span> προσαυξημένο κατά <span class="courier-code">d</span></li>
					<li>Το ημιάθροισμα των <span class="courier-code">b</span> και <span class="courier-code">c</span></li>
					<li>Την απόλυτη τιμή της διαφοράς των <span class="courier-code">b</span> και <span class="courier-code">c</span></li>
				</ul>
			</li>
			<li>Να υπολογιστεί η παρακάτω αριθμητική παράσταση:
				<img src="media/pg121.png" alt=""/></li>
			<li>Στο παιχνίδι της ρουλέτας ο παίκτης επιλέγει (μεταξύ άλλων) ένα χρώμα (κόκκινο ή μαύρο) και έναν αριθμό (από το 0 μέχρι το 36). Μπορεί να γίνει προσομοίωση του παιχνιδιού και με ποιον τρόπο;</li>
			</ol>
			
		</section>
		<section role="section" id="ch4se24"  data-featured="chapter-assess">
			<h1><span role="label">2.24</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Να γράψετε πρόγραμμα που θα ζητάει την τιμή πώλησης ενός προϊόντος κάποιου καταστήματος και το ποσοστό της έκπτωσης που έχει αυτό, υπολογίζοντας (και εμφανίζοντας) το ποσό της έκπτωσης και το τελικό πληρωτέο ποσό. Το ποσοστό θα δίνεται ως ακέραιος αριθμός.</li>
			<li>Να γράψετε πρόγραμμα που ζητάει το κόστος ενός προϊόντος και τον αριθμό άτοκων δόσεων ενός καταστήματος, υπολογίζοντας και εμφανίζοντας το ποσό κάθε δόσης. Τι θα αλλάξει αν υπάρχει επιβάρυνση με 7% επιτόκιο στο ποσό πληρωμής;</li>
			<li>Τρεις φίλοι έχουν παίξει ένα δελτίο στοιχήματος. Καθένας έχει δώσει ένα ποσό. Να γράψετε πρόγραμμα που θα ζητάει το ποσό που έπαιξε κάθε παίκτης, καθώς και το ποσό που κέρδισε το δελτίο τους, και θα εμφανίζει τα κέρδη για τον καθένα από αυτούς.</li>
			<li>Ένας εργαζόμενος πληρώνεται κάθε εβδομάδα σύμφωνα με τις ώρες εργασίας του με ένα συγκεκριμένο ωρομίσθιο. Υπάρχουν κρατήσεις 10% για ασφάλιση και 12% για φόρο. Δικαιούται επίδομα 20€ για κάθε παιδί που έχει. Να γράψετε πρόγραμμα που θα ζητάει τις ώρες εργασίας, την αμοιβή ανά ώρα και τον αριθμό παιδιών. Θα εμφανίζει τις κρατήσεις αναλυτικά, το επίδομα παιδιών καθώς και το τελικό ποσό που θα πληρωθεί.</li>
			<li>Να γράψετε πρόγραμμα που θα ζητάει το ποσό αγοράς ενός πελάτη σουπερμάρκετ και τα χρήματα που πλήρωσε, εμφανίζοντας το ποσό 24% ΦΠΑ, το τελικό ποσό και τα ρέστα που θα πάρει. Αν για κάθε 25€ αγορών ο πελάτης δικαιούται εκπτωτικό κουπόνι, τότε να εμφανιστεί ο αριθμός κουπονιών που θα λάβει.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό δευτερολέπτων και θα επιστρέφει το πλήθος ωρών, λεπτών και δευτερολέπτων που αντιστοιχεί σ’ αυτό.</li>
			<li>Ένας αυτόματος πωλητής δέχεται και επιστρέφει μόνο κέρματα των 2, 1, 0.5, 0.1€. Να γράψετε πρόγραμμα που θα δέχεται την τιμή ενός προϊόντος και το ποσό που πλήρωσε ο πελάτης, εμφανίζοντας τα ρέστα αναλυτικά ανά κέρμα.</li>
			<li>Ένα φορτηγό πλοίο δέχεται φορτία σε κοντέινερ των 10, 5, 2 και 1 τόνων. Να γράψετε πρόγραμμα που θα ζητάει το συνολικό βάρος του φορτίου που θα δεχθεί το πλοίο και θα εμφανίζει πόσα κοντέινερ κάθε τύπου θα χρειαστούν. Για παράδειγμα, εάν το φορτίο είναι 38 τόνοι, θα χρειαστούν 3 κοντέινερ των 10, 1 των 5, 1 των 2 και 1 του ενός τόνου.</li>
			<li>Αν μια παραγγελία σε ένα κατάστημα γίνει ηλεκτρονικά, τότε ο πελάτης παίρνει έκπτωση 10% και δεν χρεώνεται με μεταφορικά 5€. Να γράψετε πρόγραμμα που θα ζητάει το ποσό της παραγγελίας και το αν έγινε ηλεκτρονικά ή όχι (χρησιμοποιώντας κατάλληλα δεδομένα), εμφανίζοντας το τελικό ποσό πληρωμής και το κόστος των μεταφορικών.</li>
			<li>Να γράψετε πρόγραμμα που να δέχεται μια θερμοκρασία σε βαθμούς Κελσίου και θα τη μετατρέπει αναλόγως, σύμφωνα με τους παρακάτω τύπους μετατροπής:
				<p><img src="media/pg122a.png" /></p></li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται την περίμετρο ενός κύκλου και θα εμφανίζει τη διάμετρό του.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται (χωρίς έλεγχο) έναν τριψήφιο αριθμό και θα τυπώνει το άθροισμα των ψηφίων του και τον αριθμό ανάποδα (με αντιστροφή των ψηφίων του).</li>
			<li>Η μελλοντική αξία ενός ποσού <i>I</i> που τοκίζεται με επιτόκιο <i>ε</i> ανά <i>ν</i> περιόδους τον χρόνο, για <i>Τ</i> χρόνια, υπολογίζεται από τον παρακάτω τύπο:
				<p><img src="media/pg122.png" />￼</p>
				<p class="no-indent">Να γράψετε πρόγραμμα που θα διαβάζει το ποσό, το επιτόκιο, τα έτη και τις περιόδους ανατοκισμού, εμφανίζοντας στο τέλος τη μελλοντική αξία του ποσού.</p>
			</li>
			<li>Αν δοθούν οι συντεταγμένες δύο σημείων στο επίπεδο, να γράψετε πρόγραμμα το οποιο θα υπολογίζει την ευκλείδεια απόστασή τους:
				<p><img src="media/pg123a.png" />￼</p>
			</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται το μήκος των δύο κάθετων πλευρών ενός ορθογώνιου τριγώνου και θα εμφανίζει το μήκος της υποτείνουσας (Πυθαγόρειο Θεώρημα).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται χρόνο σε δευτερόλεπτα και θα εμφανίζει αυτό τον χρόνο σε μέρες, ώρες, λεπτά και δευτερόλεπτα.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται μια τιμή για το <i>x</i> και θα εμφανίζει την αντίστοιχη τιμή του <i>y</i> σύμφωνα με τον παρακάτω τύπο:
				<p><img src="media/pg123b.png" />￼</p>
			</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κατάλληλα δεδομένα και θα εμφανίζει το εμβαδό τετραγώνου, ορθογωνίου, τραπεζίου, τριγώνου και κύκλου.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τους συντελεστές <i>α, β, γ</i> μιας δευτεροβάθμιας εξίσωσης:
				<p><img src="media/pg123c.png" />￼</p>
			<p class="no-indent">και θα εμφανίζει τις δύο λύσεις της βάσει του τύπου: </p>
				<p><img src="media/pg123d.png" />￼</p>
			</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται δύο ποσά και θα εμφανίζει τη διαφορά τους και την ποσοστιαία μεταβολή τους. </li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τρεις αριθμούς <span class="courier-code">a</span>, <span class="courier-code">b</span>, και <span class="courier-code">c</span> και θα εμφανίζει τον μεγαλύτερο από αυτούς, χωρίς τη χρήση της συνάρτησης <span class="courier-code">max</span>.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τρεις αριθμούς <span class="courier-code">a</span>, <span class="courier-code">b</span>, και <span class="courier-code">c</span> και θα τους εμφανίζει κατά αύξουσα σειρά, χωρίς να γίνουν έλεγχοι, συγκρίσεις ή ταξινόμηση.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">a</span> και θα τυπώνει τον αντίθετο και τον αντίστροφό του. Ποιο πρόβλημα θα μπορούσε να προκύψει σε αυτές τις πράξεις;</li>
			<li>Να γράψετε πρόγραμμα που θα διαβάζει το έτος πρόσληψης ενός εργαζόμενου και θα υπολογίζει χρονοεπίδομα 1.2% για κάθε συμπληρωμένη τριετία μέχρι σήμερα (τρέχον έτος).</li>
			<li>Ένα κιλό χρώματος μπορεί να βάψει 3 m<sup class="superscript CharOverride-1">2</sup> τοίχου. Να γράψετε πρόγραμμα που θα διαβάζει τις διαστάσεις σε m μιας επιφάνειας και θα εμφανίζει πόσα κουτιά των 3 kg χρειάζονται.</li>
			<li>Ένα κατάστημα δίνει έκπτωση 10% για κάθε αγορά και δυνατότητα πληρωμής σε ισόποσες δόσεις με επιβάρυνση 6% στο τελικό ποσό (μετά την έκπτωση και την προσθήκη φόρου 24%). Να γράψετε πρόγραμμα που θα δέχεται το ποσό αγοράς και το πλήθος των δόσεων, εμφανίζοντας την έκπτωση, τον ΦΠΑ, την επιβάρυνση των δόσεων, το ποσό κάθε δόσης και το τελικό πληρωτέο ποσό.</li>
			<li>Ο Ήρων ο Αλεξανδρινός περιέγραψε τον τύπο για το εμβαδό τριγώνου με πλευρές <i>α, β, γ</i> με βάση τον πιο κάτω τύπο:
				<p><img src="media/pg124a.png" />￼</p>￼
				<p class="no-indent">όπου <img src="media/pg124b.png" />￼ είναι η ημιπερίμετρος του τριγώνου. Να γράψετε πρόγραμμα που θα ζητάει το μήκος των τριών πλευρών και θα εμφανίζει το εμβαδό του τριγώνου.</p>
			</li>
			<li>Η ταχεία αμαξοστοιχία του ΟΣΕ ταξιδεύει με μέση ταχύτητα 90 χλμ./ώρα και κάνει το δρομολόγιο Θεσσαλονίκη-Κατερίνη-Λάρισα και αντίστροφα. Η απόσταση των πόλεων από τη Θεσσαλονίκη είναι 70 χλμ. και 150 χλμ. αντίστοιχα, ενώ η στάση διαρκεί σε κάθε σταθμό 10 λεπτά. Να γράψετε πρόγραμμα που θα δέχεται τα παραπάνω ως δεδομένα και την ώρα αναχώρησης με τη μορφή ΩΡΑ, ΛΕΠΤΑ, εμφανίζοντας τον χρόνο άφιξης της αμαξοστοιχίας σε κάθε σταθμό για ένα δρομολόγιο. Σε ποια χρονική στιγμή θα χρειαστεί ιδιαίτερος χειρισμός; Δίνεται ο τύπος υπολογισμού της απόστασης:
				<p><i>Απόσταση = Ταχύτητα <b>·</b> Χρόνος</i></p>
			</li>
			<li>Ένα αυτοκίνητο <i>L</i> καταναλώνει λίτρα καυσίμου κάθε 100 χιλιόμετρα. Να γράψετε πρόγραμμα προσομοίωσης υπολογιστή ταξιδιού που θα δέχεται την κατανάλωση ανά 100 χλμ. του αυτοκινήτου <i>L</i> και το μήκος της απόστασης <i>d</i> που θα καλύψει το αυτοκίνητο, εμφανίζοντας την ποσότητα καυσίμου που απαιτείται για αυτό.</li>
			<li>Να γράψετε πρόγραμμα που θα «ρίχνει» εικονικό νόμισμα 3 φορές, θεωρώντας ως 1 την κορόνα (head) και 0 τα γράμματα (tail). Το πρόγραμμα θα μετρά και θα εμφανίζει πόσες φορές «έπεσε» κορόνα και πόσες γράμματα, υπολογίζοντας τα ποσοστά τους.</li>
			<li>Να γράψετε πρόγραμμα που θα εμφανίζει 6 νούμερα του λότο (από το 1 μέχρι το 49). Ποιο πρόβλημα μπορεί να εμφανιστεί;</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τα μήκη των κάθετων πλευρών ενός ορθογώνιου τριγώνου και θα εμφανίζει το μήκος της τρίτης πλευράς.</li>
			<li>Αν έχετε την ηλικία κάποιου σε δευτερόλεπτα, να υπολογίσετε την ηλικία που θα είχε σε κάποιον άλλο πλανήτη. Για παράδειγμα, δίνεται ότι η περίοδος ενός έτους στον Ερμή ισοδυναμεί με 0.2408467 γήινα έτη.</li>
		</ol>
		</section>
	</section>
	<section role="chapter" id="ch5">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 3</span> Δομές Ελέγχου</h1>
		<section role="section" id="ch5se1">
			<h1><span role="label">3.1</span> Εισαγωγή</h1>
			<img src="media/chapter_3_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Σ’ αυτό το κεφάλαιο περιγράφονται πιο σύνθετες δομές και χαρακτηριστικά της Python, όπως η δυνατότητα λήψης αποφάσεων, η δημιουργία ελέγχων, η σύγκριση δεδομένων και η αναπαράσταση περιορισμών. Παρουσιάζεται ο βασικός τύπος δεδομένων λογικών ελέγχων, ενώ γίνεται περιγραφή των διαδικασιών για την παγίδευση σφαλμάτων κατά την εκτέλεση των προγραμμάτων. Ειδικές περιπτώσεις και ιδιωματισμοί της γλώσσας παρουσιάζονται μαζί με τους κανόνες που ακολουθεί η Python.</i></p>
		</section>
		<section role="section" id="ch5se2">
			<h1><span role="label">3.2</span> Παίρνοντας αποφάσεις</h1>
			<p class="no-indent">Στο προηγούμενο κεφάλαιο έγινε περιγραφή των βασικών στοιχείων της Python, απαραίτητων για την επίλυση απλών υπολογιστικών, κυρίως, προβλημάτων. Ωστόσο, τα περισσότερα καθημερινά προβλήματα που αντιμετωπίζουμε είναι πιο σύνθετα και η διαδικασία επίλυσής τους μπορεί να περιλαμβάνει πολύπλοκες διαδικασίες. Η πιο συνηθισμένη περίπτωση είναι η λήψη αποφάσεων βάσει ελέγχων που γίνονται στα δεδομένα του προβλήματος. Είναι δυνατός ο καθορισμός περιορισμών και εκτέλεσης εντολών υπό συνθήκη με βάση κριτήρια που μπορούν να τεθούν μέσα στο πρόγραμμα.</p>
			<p>Η <i>σειριακή-ακολουθιακή (serial-sequential</i><i>)</i> δομή συνεχίζει να υπάρχει και να συνοδεύει τα προγράμματα. Τα προγράμματα εξακολουθούν να εκτελούνται γραμμή γραμμή, από πάνω προς τα κάτω, αλλά σε οποιοδήποτε σημείο μπορούν να τεθούν περιορισμοί ώστε να ελέγχεται η εκτέλεση εντολών. Στις επόμενες παραγράφους περιγράφονται τα εργαλεία που διαθέτει η Python για την υπό συνθήκη εκτέλεση εντολών.</p>
		</section>
		<section role="section" id="ch5se3">
			<h1><span role="label">3.3</span> Ο λογικός τύπος Boolean</h1>
			<p class="no-indent">Μια ειδική υποκατηγορία ακέραιων αριθμών είναι οι <i>λογικές τιμές bool (Boolean)</i> <i>True</i> και <i>False</i> (<i>Αληθής-Ψευδής</i>). Ο τύπος δεδομένων bool είναι ένας ενσωματωμένος στην Python τύπος. Στην πραγματικότητα, ο τύπος bool είναι υποκλάση (subclass) της κλάσης int των ακέραιων αριθμών. Ένας τέτοιος τύπος, που θα έχει τιμές λογικές (<span class="courier-code">True</span> – <span class="courier-code">False</span>), μπορεί να προκύψει μετά από διάφορες ενέργειες. Η πιο απλή περίπτωση είναι να δοθεί ως ρητή τιμή σε μια μεταβλητή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; flag=True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(flag)</span></p>
			<p><span class="courier-code">&lt;class &apos;bool&apos;&gt;</span></p>
			<p class="no-indent">Εδώ, η μεταβλητή <span class="courier-code">flag</span> είναι <i>λογική (bool)</i> με τιμή <span class="courier-code">True</span>. Αυτές οι τιμές χρειάζονται για την πραγματοποίηση λογικών ελέγχων που περιγράφονται σε επόμενες παραγράφους. Στην πράξη, πολλές φορές χρησιμοποιούνται μεταβλητές με τιμές <span class="courier-code">1</span> ή <span class="courier-code">0</span>, αντί για λογικές μεταβλητές από τους προγραμματιστές. Αυτό ακριβώς κάνει στην ουσία η ίδια η Python εσωτερικά: αντιστοιχίζει τις τιμές <span class="courier-code">1</span> και <span class="courier-code">0</span> σε κάθε λογική τιμή <span class="courier-code">True</span> – <span class="courier-code">False</span>. Αυτό φαίνεται αμέσως από το παρακάτω παράδειγμα:</p>
			<p><span class="courier-code">&#9;&gt;&gt;&gt; True+2</span></p>
			<p><span class="courier-code">&#9;3</span></p>
			<p class="no-indent">που μπορεί αρχικά να δημιουργεί μια σύγχυση, αλλά τελικά το συνηθίζει κανείς εξασκούμενος με τον ιδιωματικό χαρακτήρα της Python. Εκφράσεις όπως η τελευταία μπορεί να κάνει δυσανάγνωστο τον κώδικα, ειδικά σε κάποιον που δεν έχει συνηθίσει αυτό τον τρόπο γραφής. Ωστόσο, αποτελεί ένα ακόμα χαρακτηριστικό της Python για άμεσο, σύντομο και αποτελεσματικό κώδικα, που πολύ συχνά απαλλάσσει τον προγραμματιστή από πολλούς περιττούς ελέγχους. </p>
			<p>Λογικές τιμές, επίσης, μπορεί να προκύψουν μετά από συγκρίσεις και λογικούς ελέγχους όπως περιγράφεται αμέσως πιο κάτω.</p>
		</section>
		<section role="section" id="ch5se4">
			<h1><span role="label">3.4</span> Κάνοντας συγκρίσεις</h1>
			<p class="no-indent">Μια από τις βασικές λειτουργίες του υλικού ενός Η/Υ είναι η πραγματοποίηση συγκρίσεων. Οι συγκρίσεις γίνονται προκειμένου να ληφθεί μια απόφαση, να εκτελεστεί δηλαδή μια ή περισσότερες εντολές ή όχι. Τέτοιες συγκρίσεις γίνονται από κάθε ηλεκτρονική συσκευή που χρησιμοποιούμε στην καθημερινότητά μας, αλλά και με απλές, συνηθισμένες αποφάσεις που καλούμαστε να πάρουμε για θέματα απλά (π.χ. τι θα φορέσουμε, τι θα φάμε το μεσημέρι) ή πιο σύνθετα (π.χ. αντιμετώπιση προβλήματος υγείας, διαπροσωπικών σχέσεων). Για παράδειγμα, ένας φοιτητής «περνάει» ένα μάθημα όταν ο βαθμός του σ’ αυτό είναι μεγαλύτερος ή ίσος με 5. Ένα σύστημα ψύξης ενεργοποιείται όταν η θερμοκρασία που συλλέγει ο αισθητήρας του ξεπερνάει (είναι μεγαλύτερη από) ένα όριο που έχει τεθεί, όπως π.χ. από έναν θερμοστάτη, από το τηλεχειριστήριο ενός κλιματιστικού ή από κάποια <i>«έξυπνη» εφαρμογή (</i><i>app)</i>. Η φωτεινή ένδειξη θερμοκρασίας στον πίνακα οργάνων ενός αυτοκινήτου εμφανίζεται όταν η θερμοκρασία της μηχανής ξεπεράσει (γίνει μεγαλύτερη από) ένα όριο που έχει θέσει ο κατασκευαστής ώστε να εγγυάται τη σωστή λειτουργία του κ.λπ.</p>
			<p>Τέτοιου είδους συγκρίσεις, επειδή οδηγούν σε μια σειρά από ενέργειες, συνήθως ονομάζονται λογικές συνθήκες ή έλεγχοι και ενσωματώνονται στις δομές ελέγχου και επανάληψης (βλ. Κεφάλαιο 4) των γλωσσών προγραμματισμού. Για την πραγματοποίηση κάθε είδους σύγκρισης χρησιμοποιείται μια ειδική κατηγορία τελεστών, οι <i>συγκριτικοί ή σχεσιακοί τελεστές (comparison </i><i>operators)</i> που φαίνονται στον Πίνακα 3-1.</p>
			<p>Όπως και οι αριθμητικοί τελεστές, ένας τελεστής σύγκρισης (όπως για παράδειγμα το ‘&gt;’, μεγαλύτερο από) δέχεται δύο τελεστέους ή ορίσματα ή παραμέτρους (αριθμούς, μεταβλητές αριθμητικές ή λογικές τιμές, πράξεις ή αντικείμενα γενικότερα) και κάνει την κατάλληλη σύγκριση μεταξύ τους. Το αποτέλεσμα που προκύπτει (πάντα) είναι μια λογική τιμή <span class="courier-code">True</span> – <span class="courier-code">False</span> (αληθής-ψευδής, ναι-όχι, ισχύει-δεν ισχύει, 1-0)<sup class="superscript CharOverride-1"><span id="footnote-060-backlink"><a href="#footnote-060">34</a></span></sup>. Αυτή η λογική τιμή στη συνέχεια μπορεί να χρησιμοποιηθεί για κάτι άλλο (π.χ. για τον έλεγχο εκτέλεσης άλλων εντολών μέσα στο πρόγραμμα).</p>
			<figure role="table" id="tb19">
				<figcaption><span role="label">Πίνακας 3-1</span> | Συγκριτικοί τελεστές</figcaption>
				<table id="table018">
					<tbody>
						<tr>
							
								<th><span class="CharOverride-3">Τελεστής</span></th>
							
							
								<th><span class="CharOverride-3">Λειτουργία</span></th>
							
							
								<th><span class="CharOverride-3">Παράδειγμα</span></th>
							
							
								<th><span class="CharOverride-3">Τι σημαίνει</span></th>
							
							
								<th><span class="CharOverride-3">Αποτέλεσμα</span></th>
							
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6 _idGenCellOverride-2">
								<p><span class="courier-code">==</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6 _idGenCellOverride-2">
								<p>Ισότητα</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6 _idGenCellOverride-2">
								<p><span class="courier-code">5==12</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6 _idGenCellOverride-2">
								<p>Είναι το 5 ίσο με 12;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6 _idGenCellOverride-2">
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">!=</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Ανισότητα</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">12!=3</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Το 12 είναι διάφορο του 3;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">&gt;</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Μεγαλύτερο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">5&gt;2</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Είναι το 5 μεγαλύτερο του 2;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">&lt;</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Μικρότερο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">-1&lt;1</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Είναι το –1 μικρότερο του 1;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">&gt;=</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Μεγαλύτερο ή ίσο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">3&gt;=3</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Είναι το 3 μεγαλύτερο ή ίσο του 3;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">&lt;=</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Μικρότερο ή ίσο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">4&lt;=2</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p>Είναι το 4 μικρότερο ή ίσο του 2;</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-6">
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Ακολουθούν μερικά παραδείγματα στην κονσόλα της Python:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]:</b></span><span class="courier-code">&#9;a, b = 5, 10 &#9;#a=5 και b=10</span></p>
			<p><span class="courier-code"><b>In [2]:</b></span><span class="courier-code">&#9;a&gt;b</span></p>
			<p><span class="courier-code"><b>Out[2]:</b></span><span class="courier-code">&#9;False</span></p>
			<p><span class="courier-code"><b>In [3]:</b></span><span class="courier-code">&#9;a!=b</span></p>
			<p><span class="courier-code"><b>Out[3]:</b></span><span class="courier-code">&#9;True</span></p>
			<p><span class="courier-code"><b>In</b></span><span class="courier-code"><b> [4]:</b></span><span class="courier-code">&#9;b==0</span></p>
			<p><span class="courier-code"><b>Out[4]:</b></span><span class="courier-code">&#9;False</span></p>
			<p class="no-indent">Όπως φαίνεται και από τις πιο πάνω εντολές, η σύγκριση μπορεί να γίνει ανάμεσα σε μεταβλητές (<span class="courier-code">a&gt;b</span>) και αριθμούς (<span class="courier-code">b</span><span class="courier-code">==0</span>), καθώς και με πολλούς άλλους τρόπους που θα δούμε στη συνέχεια. Το αποτέλεσμα από τις συγκρίσεις αυτές θα είναι είτε <span class="courier-code">True</span> είτε <span class="courier-code">False</span> και το νόημά τους είναι το εξής: στην εντολή [2]: <span class="courier-code">a&gt;b</span>, το αποτέλεσμα είναι <span class="courier-code">False</span> γιατί το <span class="courier-code">a</span> (που είναι <span class="courier-code">5</span>) δεν είναι μεγαλύτερο από το <span class="courier-code">b</span> (που είναι <span class="courier-code">10</span>), ενώ στην εντολή [3]: <span class="courier-code">a!=b</span>, το αποτέλεσμα είναι <span class="courier-code">True</span> γιατί τα <span class="courier-code">a</span> και <span class="courier-code">b</span> είναι διαφορετικά μεταξύ τους (5≠10).</p>
		</section>
		<section role="section" id="ch5se5">
			<h1><span role="label">3.5</span> Αναγωγή τύπων</h1>
			<p class="no-indent">Οι λογικές τιμές <span class="courier-code">True</span> – <span class="courier-code">False</span> αντιστοιχούν στους αριθμούς <span class="courier-code">1</span> και <span class="courier-code">0</span>.<sup class="superscript CharOverride-1"><span id="footnote-059-backlink"><a href="#footnote-059">35</a></span></sup> Κάθε αντικείμενο μπορεί να μετατραπεί σε μια από αυτές τις τιμές άμεσα, μέσω της μεθόδου <span class="courier-code">bool</span> ή έμμεσα μέσω πράξεων σε εντολές εκχώρησης. </p>
			<p>Στη δεύτερη περίπτωση, συνήθης πρακτική είναι να γίνεται σύγκριση (απ’ όπου προκύπτει ένα λογικό αποτέλεσμα) και στη συνέχεια να ακολουθεί αριθμητική πράξη (όπου, εμμέσως, το λογικό αποτέλεσμα μετατρέπεται αυτόματα σε αντίστοιχη αριθμητική τιμή <span class="courier-code">1</span> ή <span class="courier-code">0</span>). </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-1</b>: Ακολουθεί πρόγραμμα που υπολογίζει το επίδομα πολυετούς εργασίας για έναν υπάλληλο, ως ποσοστό 3% του μισθού του, όταν τα έτη εργασίας είναι περισσότερα από 15.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-1 | Συγκριτικοί τελεστές – επίδομα υπαλλήλου</figcaption><img src="media/ListaKodika-3-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη Λίστα Κώδικα 3.1, στη γραμμή 3 είναι απαραίτητη η χρήση της παρένθεσης, ώστε να γίνει πρώτα η σύγκριση απ’ όπου θα προκύψει μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Μόλις όμως αυτή η τιμή βρεθεί μαζί με έναν αριθμητικό τελεστή, η Python θα μετατρέψει ή θα χρησιμοποιήσει την αντίστοιχη (<span class="courier-code">1</span> ή <span class="courier-code">0</span>) αριθμητική αναπαράστασή του, ώστε να γίνει η αριθμητική πράξη. Στο συγκεκριμένο παράδειγμα, αν τα έτη είναι λιγότερα από 15 (ή και 15), τότε η τιμή που θα προκύψει θα είναι <span class="courier-code">False</span>, δηλαδή 0. Η αμέσως επόμενη πράξη που θα γίνει θα είναι <span class="courier-code">misthos*0*0.03</span>, οπότε θα μηδενιστεί το τελικό αποτέλεσμα, δίνοντας στη μεταβλητή <span class="courier-code">epidoma</span> την τιμή 0. Αντίθετα, αν η σύγκριση αποδώσει αποτέλεσμα <span class="courier-code">True</span>, δηλαδή <span class="courier-code">1</span>, η αμέσως επόμενη πράξη που θα γίνει θα είναι <span class="courier-code">misthos*1*0.03</span>. Σε αυτή την περίπτωση θα υπολογιστεί το 3% του μισθού και η μεταβλητή <span class="courier-code">epidoma</span> θα αποκτήσει μια κατάλληλη μη μηδενική τιμή.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-2</b>: Να γράψετε πρόγραμμα που θα διαβάζει το ποσό αγοράς και θα εμφανίζει το τελικό ποσό πληρωμής, όταν είναι γνωστό ότι υπάρχει έκπτωση 20% για ποσά μεγαλύτερα από 200€.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-2 | Συγκριτικοί τελεστές – εκπτώσεις</figcaption><img src="media/ListaKodika-3-2_fmt.png" alt=""/>
				<footer>
					<p class="figure-notes">* Οι μονάδες μέτρησης μπορούν να τοποθετούνται σε κείμενο αλλά όχι σε μεταβλητές. Για τον διερμηνευτή αποτελούν σύμβολα-χαρακτήρες και δεν έχουν καμία απολύτως άλλη σημασία.</p>
				</footer>
			</figure>
			<p class="no-indent">Εισάγοντας δοκιμαστικά μια τιμή, εμφανίζονται στην οθόνη τα παρακάτω:</p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>400</b></span></p>
			<p><span class="courier-code">Το τελικό ποσό είναι 320.0 €</span></p>
			<p><span class="courier-code">Η έκπτωση είναι 80.0 €</span></p>
			<p class="no-indent">ενώ αν εκτελεστεί άλλη μια φορά με ποσό αγοράς (<span class="courier-code">poso</span>) <span class="courier-code">150</span>:</p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>150</b></span></p>
			<p><span class="courier-code">Το τελικό ποσό είναι 150.0 €</span></p>
			<p><span class="courier-code">Η έκπτωση είναι 0.0 €</span></p>
			<p class="no-indent">Η λογική είναι παρόμοια με αυτή του Παραδείγματος 3-1, με μόνη διαφορά ότι η έκπτωση αποθηκεύεται σε ξεχωριστή μεταβλητή ώστε να τυπωθεί στην οθόνη.</p>
			<p>Ιδιαίτερη προσοχή πρέπει να δοθεί στις συγκρίσεις ισότητας μεταξύ αριθμών κινητής υποδιαστολής, σύμφωνα με όσα αναφέρθηκαν στο Κεφάλαιο 2, σχετικά με την ακρίβεια υπολογισμών και τα προβλήματα αναπαράστασής τους. Έτσι, έλεγχοι όπως οι παρακάτω είναι δυνατόν να οδηγήσουν σε σοβαρά προβλήματα και αστοχίες:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 1==1.0</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; 0.1+0.1+0.1-0.3==0</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">γιατί: </p>
			<p><span class="courier-code">&gt;&gt;&gt; 0.1+0.1+0.1-0.3</span></p>
			<p><span class="courier-code">5.551115123125783</span><span class="courier-code">e-17</span></p>
			<p class="no-indent">Η προηγούμενη πράξη δίνει έναν πολύ μικρό θετικό αριθμό, που δεν είναι όμως <span class="courier-code">0</span>, αλλά βρίσκεται πολύ κοντά στο <span class="courier-code">0</span>. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 2=2</span></p>
			<p><span class="courier-code">SyntaxError: can&apos;t assign to literal</span></p>
			<p class="no-indent">προκαλεί την εμφάνιση λάθους, γιατί δεν μπορεί να είναι εντολή εκχώρησης αριθμού σε αριθμό, αλλά ούτε και σύγκριση, όπου απαιτείται η χρήση συμβόλου διπλής ισότητας ‘<span class="courier-code">==</span>’.</p>
			<p>Γενικά, στην Python, κάθε συγκριτικός τελεστής χρησιμοποιείται με διαφορετικό τρόπο σε διαφορετικά είδη δεδομένων, αποδίδοντας όμως μια τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Αυτό έχει να κάνει με το πώς υλοποιούνται οι «ειδικές» μέθοδοι συγκρίσεων σε κάθε αντικείμενο, όπως θα δούμε αναλυτικά στο Κεφάλαιο 11 σχετικά με τον αντικειμενοστραφή προγραμματισμό. Ο τρόπος με τον οποίο γίνονται οι συγκρίσεις σε λίστες, συμβολοσειρές, σύνολα κ.λπ. περιγράφεται στα αντίστοιχα κεφάλαια. </p>
		</section>
		<section role="section" id="ch5se6">
			<h1><span role="label">3.6</span> Λογικοί τελεστές</h1>
			<p class="no-indent">Αν και οι συγκριτικοί τελεστές επιτρέπουν τη σύγκριση δεδομένων σχεδόν οποιασδήποτε μορφής, πολύ συχνά οι συνθήκες που πρέπει να ελεγχθούν είναι περισσότερο σύνθετες και απαιτείται συνδυασμός τους. Για να μπορέσει να γίνει ο έλεγχος πολλών συνθηκών γίνεται χρήση των <i>λογικών τελεστών</i><i> (logical operators)</i>. Αυτοί οι τελεστές είναι οι λέξεις <span class="courier-code">and</span>, <span class="courier-code">or</span> και <span class="courier-code">not</span> (σε αντίθεση με τις γλώσσες C/C++, Java, Javascript, PHP, που χρησιμοποιούν τα σύμβολα ‘<span class="courier-code">&amp;&amp;</span>’, ‘<span class="courier-code">||</span>’ και ‘<span class="courier-code">!</span>’ ). </p>
			<section role="subsection" id="ch5se6ss1">
				<h1><span role="label">3.6.1</span> Ο τελεστής <span class="courier-code">and</span></h1>
				<p class="no-indent">Η γενική μορφή του είναι: </p>
				<p><span class="courier-code">συνθήκη 1 </span><span class="courier-code">and συνθήκη 2</span></p>
				<p class="no-indent">ή πιο γενικά:</p>
				<p><span class="courier-code">τελεστέος 1 and τελεστέος 2</span></p>
				<p class="no-indent">όπου οι τελεστέοι μπορεί να είναι συγκρίσεις (που αποδίδουν τιμές <span class="courier-code">True</span>/<span class="courier-code">False</span>) ή αντικείμενα γενικά, που αποδίδουν την τιμή τους.</p>
				<p>Ο τελεστής <span class="courier-code">and</span>, ή τελεστής λογικής σύζευξης, χρησιμοποιείται για τη σύνδεση δυο λογικών προτάσεων, όπου απαιτείται να ελεγχθεί αν και οι δυο προτάσεις-συνθήκες αποδίδουν τη λογική τιμή <span class="courier-code">True</span>. Αν ισχύει αυτό, η <span class="courier-code">and</span> επιστρέφει την τιμή <span class="courier-code">True</span>. Σε οποιαδήποτε άλλη περίπτωση επιστρέφεται η τιμή <span class="courier-code">False</span>.</p>
				<img src="media/icon-6_fmt.png" alt=""/>
				<aside>
				<p>Χαρακτηριστικό στοιχείο του τρόπου με τον οποίο γίνεται η αποτίμηση λογικών εκφράσεων στην Python είναι ότι, αν η 1η συνθήκη έχει ως αποτέλεσμα την τιμή <span class="courier-code">False</span>, τότε ο έλεγχος θα σταματήσει εκεί. Σε αυτή την περίπτωση η 2η συνθήκη δεν θα ελεγχθεί ποτέ γιατί, πολύ απλά, το αποτέλεσμα της <span class="courier-code">and</span> έχει ήδη καθοριστεί. Ό,τι κι αν έχει η επόμενη συνθήκη, δεν πρόκειται να αλλάξει το αποτέλεσμα, θα παραμείνει <span class="courier-code">False</span>. Η 2η συνθήκη θα ελεγχθεί μόνο αν η 1η δώσει αποτέλεσμα <span class="courier-code">True</span>. Σε αυτή την περίπτωση το αποτέλεσμα της <span class="courier-code">and</span> θα καθοριστεί από την τιμή της 2ης συνθήκης. Αυτός ο μηχανισμός ονομάζεται <i>βραχυκύκλωμα (short circuit)</i><sup class="superscript CharOverride-1"><span id="footnote-058-backlink"><a href="#footnote-058">36</a></span></sup> και, ενώ κάνει την αποτίμηση λογικών εκφράσεων πολύ πιο γρήγορη, ωστόσο μπορεί να οδηγήσει σε προβλήματα. Για παράδειγμα, έστω η έκφραση <span class="courier-code">f1()</span> <span class="courier-code">and</span> <span class="courier-code">f2()</span>, όπου <span class="courier-code">f1</span> και <span class="courier-code">f2</span> είναι δυο συναρτήσεις (περιγράφονται στο Κεφάλαιο 10). Αν το αποτέλεσμα που επιστρέφει η συνάρτηση <span class="courier-code">f1</span> είναι <span class="courier-code">False</span>, τότε η <span class="courier-code">f2</span> δεν θα εκτελεστεί ποτέ.</p>
				</aside>
				<p class="no-indent">Ο Πίνακας 3-2 ονομάζεται και <i>πίνακας αληθείας (truth table</i><i>) </i>και περιλαμβάνει όλες τις πιθανές περιπτώσεις λογικών τιμών, καθώς και το αποτέλεσμα που επιστρέφει μια λογική πρόταση με τον τελεστή <span class="courier-code">and</span>.</p>
				<figure role="table" id="tb20">
					<figcaption><span role="label">Πίνακας 3-2</span> | Λογικός τελεστής <span class="courier-code">and</span></figcaption>
					<table id="table019">
						<tbody>
							<tr>
								
									<th>Λογική Πρόταση Α</th>
								
								
									<th>Λογική Πρόταση Β</th>
								
								
									<th>Α and B</th>
								
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Η μοναδική περίπτωση μια λογική πρόταση που περιέχει το <span class="courier-code">and</span> να επιστρέψει <span class="courier-code">True</span> είναι όταν και οι δυο συνθήκες έχουν την τιμή <span class="courier-code">True</span>. </p>
				<p>Ακολουθούν μερικά παραδείγματα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a,</span><span class="courier-code">b=1,2</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;0 and b&lt;10</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">Το πώς προκύπτει το παραπάνω αποτέλεσμα φαίνεται στην Εικόνα 3-1.</p>
				<figure class="image" id="img33" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-1 | Λειτουργία του τελεστή <span class="courier-code">and</span> – παράδειγμα 1</figcaption><img src="media/chapter_3_image_1.jpg" alt=""/></figure>
				<p class="no-indent">Γίνεται αποτίμηση των συγκρίσεων με βάση τις τιμές που έχουν οι μεταβλητές. Το αποτέλεσμα που προκύπτει είναι <span class="courier-code">True</span> ή <span class="courier-code">False</span> και καθορίζει το τελικό αποτέλεσμα που επιστρέφει η <span class="courier-code">and</span>.</p>
				<p>Η λειτουργία της παρακάτω εντολής:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a+1==b and </span><span class="courier-code">a!=0</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">περιγράφεται στην Εικόνα 3-2.</p>
				<figure class="image" id="img34" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-2 | Λειτουργία του τελεστή <span class="courier-code">and</span> – παράδειγμα 2</figcaption><img src="media/chapter_3_image_2.jpg" alt=""/></figure>
				<p class="no-indent">Ακολουθούν δυο ακόμη παραδείγματα, με τα αντίστοιχα διαγράμματα (Εικόνες 3-3 και 3-4).</p>
				<p><span class="courier-code">&gt;&gt;&gt; a&lt;0 and a!=b</span></p>
				<p><span class="courier-code">False</span></p>
				<figure class="image" id="img35" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-3 | Λειτουργία του τελεστή <span class="courier-code">and</span> – παράδειγμα 3</figcaption><img src="media/chapter_3_image_3.jpg" alt=""/></figure>
				<p class="no-indent">Σε αυτή την περίπτωση η 2η συνθήκη δεν θα ελεγχθεί, γιατί το αποτέλεσμα έχει ήδη καθοριστεί από την 1η.</p>
				<p><span class="courier-code">&gt;&gt;&gt; a*b&gt;0 and -a&gt;0</span></p>
				<p><span class="courier-code">False</span></p>
				<figure class="image" id="img36" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-4 | Λειτουργία του τελεστή <span class="courier-code">and</span> – παράδειγμα 4</figcaption><img src="media/chapter_3_image_4.jpg" alt=""/></figure>
				<p class="no-indent">Εδώ, η 2η συνθήκη θα ελεγχθεί, γιατί το αποτέλεσμα από την 1η είναι <span class="courier-code">True</span>. Όλες οι προηγούμενες περιπτώσεις επέστρεψαν λογικές τιμές <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Έτσι λειτουργούν οι λογικοί τελεστές σε άλλες γλώσσες προγραμματισμού. Στην Python όμως, ένας λογικός τελεστής δεν επιστρέφει πάντα λογικές τιμές. Στην πραγματικότητα δέχεται μια σειρά από αντικείμενα και επιστρέφει ένα από αυτά. Ο τρόπος λειτουργίας τους έχει να κάνει με τον χειρισμό αντικειμένων. Κάθε μη κενό αντικείμενο και μη μηδενική τιμή, όπως ένας αριθμός (το 12), μια συμβολοσειρά (‘<span class="courier-code">py&apos;</span>), μια λίστα (<span class="courier-code">[1,2,3]</span>) ή ένα σύνολο (<span class="courier-code">{1,2}</span>), όλα εκφράζουν μια τιμή <span class="courier-code">True</span>. Οποιοδήποτε άλλο στοιχείο όπως τα: <span class="courier-code">0</span>, <span class="courier-code">None</span><sup class="superscript CharOverride-1"><span id="footnote-057-backlink"><a href="#footnote-057">37</a></span></sup>, “”, <span class="courier-code">[]</span>, <span class="courier-code">{}</span>, θεωρείται <span class="courier-code">False</span>.</p>
				<p>Αυτές οι μετατροπές τιμών γίνονται εσωτερικά από την ίδια τη γλώσσα, χρησιμοποιούνται για τη λειτουργία του <span class="courier-code">and</span> αλλά δεν επιστρέφονται ως αποτέλεσμα. Το αποτέλεσμα που επιστρέφει η <span class="courier-code">and</span> (και η <span class="courier-code">or</span> που παρουσιάζεται στη συνέχεια) είναι μια από τις αρχικές τιμές των αντικειμένων. Αυτό δεν επηρεάζει σε τίποτα τη συμπεριφορά των λογικών τελεστών όταν ενσωματώνονται, όπως θα φανεί παρακάτω, σε άλλες δομές όπως η <span class="courier-code">if</span> (ή η <span class="courier-code">while</span> στο Κεφάλαιο 4).</p>
				<p>Δίνονται μερικά παραδείγματα χρήσης: </p>
				<p><span class="courier-code">&gt;&gt;&gt; 0 </span><span class="courier-code">and 3&#9;&#9;#περίπτωση Α</span></p>
				<p><span class="courier-code">0</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; [1,2] and &apos;&apos;&#9;#περίπτωση Β</span></p>
				<p><span class="courier-code">&apos;&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; 3 and &apos;2&apos;&#9;&#9;#</span><span class="courier-code">περίπτωση Γ</span></p>
				<p><span class="courier-code">&apos;2&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; [] and 0&#9;&#9;#περίπτωση Δ</span></p>
				<p><span class="courier-code">[]</span></p>
				<p class="no-indent">Όλες αυτές οι περιπτώσεις παρουσιάζονται αναλυτικά στην Εικόνα 3-5. </p>
				<figure class="image" id="img37" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-5 | Λειτουργία του τελεστή <span class="courier-code">and</span> – παραδείγματα</figcaption><img src="media/chapter_3_image_5.jpg" alt=""/></figure>
			</section>
			<section role="subsection" id="ch5se6ss2">
				<h1><span role="label">3.6.2</span> Ο τελεστής <span class="courier-code">or</span></h1>
				<p class="no-indent">Η γενική μορφή του τελεστή <span class="courier-code">or</span> είναι: </p>
				<p><span class="courier-code">συνθήκη 1 or συνθήκη 2</span></p>
				<p class="no-indent">ή γενικότερα:</p>
				<p><span class="courier-code">τελεστέος 1 or τελεστέος </span><span class="courier-code">2</span></p>
				<p class="no-indent">Μια λογική έκφραση που περιέχει τον τελεστή <span class="courier-code">or</span> αποδίδει την τιμή <span class="courier-code">True</span> όταν μια από τις συνθήκες είναι <span class="courier-code">True</span>. Η μόνη περίπτωση να επιστρέψει την τιμή <span class="courier-code">False</span> είναι αν και οι δυο συνθήκες έχουν τιμή <span class="courier-code">False</span>. Όλες οι περιπτώσεις φαίνονται στον πίνακα αληθείας στον Πίνακα 3-3.</p>
				<figure role="table" id="tb21">
					<figcaption><span role="label">Πίνακας 3-3</span> | Λογικός τελεστής <span class="courier-code">or</span></figcaption>
					<table id="table020">
						<tbody>
							<tr>
								
									<th>Λογική Πρόταση Α</th>
								
								
									<th>Λογική Πρόταση Β</th>
								
								
									<th>Α or B</th>
								
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">True</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
								<td>
									<p><span class="courier-code">False</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Ο τελεστής <span class="courier-code">or</span> έχει τον ίδιο μηχανισμό διακοπής εκτέλεσης, όπως και η <span class="courier-code">and</span>, αλλά με αντίθετη λογική. Αν η 1η συνθήκη δώσει αποτέλεσμα <span class="courier-code">True</span>, τότε ο έλεγχος σταματά εκεί και επιστρέφεται η τιμή <span class="courier-code">True</span>. Η 2η συνθήκη θα ελεγχθεί μόνο αν η 1η αποτύχει. Σε αυτή την περίπτωση η 2η συνθήκη θα καθορίσει και το τελικό αποτέλεσμα της έκφρασης. </p>
				<p>Ας θυμηθούμε ότι: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a,b=1,2</span></p>
				<p class="no-indent">Δίνεται ένα παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a&lt;0 or a!=b</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">H Εικόνα 3-6 περιγράφει την πιο πάνω λειτουργία.</p>
				<figure class="image" id="img38" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-6 | Λειτουργία του τελεστή <span class="courier-code">or</span> – παράδειγμα 1</figcaption><img src="media/chapter_3_image_6.jpg" alt=""/></figure>
				<p class="no-indent">Στη συνέχεια περιγράφονται δύο ακόμη περιπτώσεις, με τα αντίστοιχα διαγράμματά τους (Εικόνες 3-7 και 3-8).</p>
				<p>Στην πρώτη περίπτωση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a*b&gt;0 or -a&gt;0</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">το αποτέλεσμα είναι <span class="courier-code">True</span>. Αυτό έχει καθοριστεί από την 1η συνθήκη, οπότε ο έλεγχος σταμάτησε εκεί χωρίς να υπολογιστεί η 2η συνθήκη. Σχηματικά, αυτή η λειτουργία φαίνεται στην Εικόνα 3-7.</p>
				<figure class="image" id="img39" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-7 | Λειτουργία του τελεστή <span class="courier-code">or</span> – παράδειγμα 2</figcaption><img src="media/chapter_3_image_7.jpg" alt=""/></figure>
				<p class="no-indent">Το παρακάτω παράδειγμα: </p>
				<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> a&lt;0 or a==b</span></p>
				<p><span class="courier-code">False</span></p>
				<p class="no-indent">επιστρέφει <span class="courier-code">False</span> γιατί και οι δύο συνθήκες επιστρέφουν την τιμή <span class="courier-code">False</span>. Ακολουθεί το σχήμα στην Εικόνα 3-8.</p>
				<figure class="image" id="img40" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-8 | Λειτουργία του τελεστή <span class="courier-code">or</span> – παράδειγμα 3</figcaption><img src="media/chapter_3_image_8.jpg" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">or</span>, όπως και η <span class="courier-code">and</span>, δέχεται αντικείμενα και επιστρέφει ένα από αυτά. Αν το 1ο αντικείμενο είναι <span class="courier-code">True</span> (μη κενό ή μη μηδενικό) η <span class="courier-code">or</span> επιστρέφει την τιμή του. Διαφορετικά, επιστρέφεται η τιμή του 2ου αντικειμένου, όποια κι αν είναι αυτή (είτε κενό-μηδέν είτε όχι).</p>
				<p>Δίνονται μερικά παραδείγματα χρήσης: </p>
				<p><span class="courier-code">&gt;&gt;&gt; 0 or 3&#9;#περίπτωση Α</span></p>
				<p><span class="courier-code">3</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; [1,2] or &apos;&apos;&#9;#περίπτωση Β</span></p>
				<p><span class="courier-code">[1,2] </span></p>
				<p><span class="courier-code">&gt;&gt;&gt; 3 </span><span class="courier-code">or &apos;2&apos;&#9;#περίπτωση Γ</span></p>
				<p><span class="courier-code">3</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; [] or 0&#9;#περίπτωση Δ</span></p>
				<p><span class="courier-code">0</span></p>
				<p class="no-indent">Όλες αυτές οι περιπτώσεις φαίνονται στην Εικόνα 3-9.</p>
				<figure class="image" id="img41" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 3-9 | Λειτουργία του τελεστή <span class="courier-code">or</span> – παραδείγματα</figcaption><img src="media/chapter_3_image_9.jpg" alt=""/></figure>
			</section>
			<section role="subsection" id="ch5se6ss3">
				<h1><span role="label">3.6.3</span> Ο τελεστής <span class="courier-code">not</span></h1>
				<p class="no-indent">O τελεστής <span class="courier-code">not</span> χρησιμοποιείται για την αντιστροφή μιας λογικής τιμής ή έκφρασης. Για παράδειγμα, η έκφραση <span class="courier-code">not</span> <span class="courier-code">True</span> επιστρέφει <span class="courier-code">False</span>. Είναι ιδιαίτερα χρήσιμος στην αντιστροφή σύνθετων λογικών εκφράσεων. Η παρακάτω έκφραση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;0 and a&lt;100</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">ελέγχει αν το <span class="courier-code">a</span> βρίσκεται μέσα στο διάστημα (0, 100). Αν ισχύει αυτό, η πιο πάνω έκφραση επιστρέφει την τιμή <span class="courier-code">True</span>. Το αντίστροφο, αν δηλαδή το <span class="courier-code">a</span> δεν βρίσκεται μέσα σε αυτό το διάστημα, ελέγχεται είτε αντιστρέφοντας όλους τους τελεστές:</p>
				<p><span class="courier-code">a&lt;=0 or a&gt;=100</span></p>
				<p class="no-indent">είτε τοποθετώντας μια άρνηση στην αρχή της λογικής πρότασης:</p>
				<p><span class="courier-code">not(a&gt;0 and a&lt;100)</span></p>
				<p class="no-indent">Σε αντίθεση με τους τελεστές <span class="courier-code">and</span> και <span class="courier-code">or</span>, ο τελεστής <span class="courier-code">not</span> δέχεται έναν τελεστέο στα δεξιά του, που μπορεί και εδώ να είναι οποιοδήποτε αντικείμενο, ή οποιαδήποτε λογική έκφραση, και επιστρέφει πάντα μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 3-3</b>: Να γράψετε τη λογική έκφραση που ελέγχει αν περνάει (<span class="courier-code">True</span>) ένας φοιτητής κάποιο μάθημα ή όχι (<span class="courier-code">False</span>). Για να θεωρηθεί κάποιος επιτυχών, θα πρέπει να έχει βαθμό (<span class="courier-code">b</span>) από 5 και πάνω και απουσίες (<span class="courier-code">ap</span>) μέχρι 12.</p>
				</blockquote>
				<p class="no-indent">Ο απαραίτητος έλεγχος μπορεί να γίνει με πολλούς τρόπους. Ακολουθούν μερικοί από αυτούς:</p>
				<p><span class="courier-code">b&gt;=5 and not (ap&gt;12)</span></p>
				<p><span class="courier-code">b&gt;4 and ap&lt;=12</span></p>
				<p><span class="courier-code">not(b&lt;5 or </span><span class="courier-code">ap&gt;12)</span></p>
				<p class="no-indent">Ο αντίστροφος έλεγχος, αν δηλαδή κάποιος δεν περνάει το μάθημα, μπορεί να γίνει εύκολα αντιστρέφοντας μια από τις παραπάνω εκφράσεις.</p>
				<p><span class="courier-code">not(b&gt;4 and ap&lt;=12)</span></p>
				<p class="no-indent">Το ίδιο γίνεται και με την αντιστροφή των τελεστών:</p>
				<p><span class="courier-code">b&lt;=4 or ap&gt;12</span></p>
				<p class="no-indent">Προσοχή όμως, εδώ το αποτέλεσμα <span class="courier-code">True</span> δηλώνει το αντίστροφο από αυτό που εκφράζει ο αρχικός έλεγχος, δηλαδή την αποτυχία στο μάθημα.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 3-4</b>: Ένα σύστημα πυρόσβεσης ενεργοποιείται όταν ένας από τους τρεις αισθητήρες φωτιάς λάβει μέτρηση θερμοκρασίας άνω των 50<sup class="superscript CharOverride-1">ο</sup> C. Να κωδικοποιηθεί η λογική συνθήκη.</p>
				</blockquote>
				<p class="no-indent">Αν <span class="courier-code">e1</span>, <span class="courier-code">e2</span> και <span class="courier-code">e3</span> είναι οι τρεις μεταβλητές που παίρνουν τις μετρήσεις κάθε αισθητήρα, τότε η παρακάτω λογική συνθήκη ελέγχει αν ενεργοποιείται το σύστημα (<span class="courier-code">True</span>) ή όχι (<span class="courier-code">False</span>).</p>
				<p><span class="courier-code">e1&gt;50 or e2&gt;50 or e3&gt;50</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">not(e1&lt;=50 and e2&lt;=50 and e3&lt;=50)</span></p>
				<p class="no-indent">Η 1η πρόταση ελέγχει αν έστω και ένας (ή και περισσότεροι) από τους αισθητήρες έχει ξεπεράσει το όριο, ενώ η 2η πρόταση ελέγχει αν δεν είναι όλες οι τιμες μικρότερες από <span class="courier-code">50</span> (που σημαίνει ότι τουλάχιστον μια από αυτές το έχει ξεπεράσει).</p>
			</section>
		</section>
		<section role="section" id="ch5se7">
			<h1><span role="label">3.7</span> Προτεραιότητα τελεστών</h1>
			<p class="no-indent">Η προτεραιότητα των τελεστών σχετίζεται με τη σειρά με την οποία γίνονται οι έλεγχοι, οι συγκρίσεις και οι πράξεις σε μια σύνθετη έκφραση. Οι συγκριτικοί τελεστές, σε αντίθεση με τη C, έχουν την ίδια προτεραιότητα μεταξύ τους και χαμηλότερη σε σχέση με τους αριθμητικούς, τους δυαδικούς και τους τελεστές ολίσθησης. </p>
			<p>Η ιεραρχία των τελεστών, σύμφωνα με την τεκμηρίωση της Python<sup class="superscript CharOverride-1"><span id="footnote-056-backlink"><a href="#footnote-056">38</a></span></sup>, φαίνεται στον Πίνακα 3-4. Το στοιχείο που είναι πρώτο στον πίνακα (πρώτη γραμμή) έχει τη χαμηλότερη προτεραιότητα και το τελευταίο (τελευταία γραμμή) τη μεγαλύτερη.</p>
			<figure role="table" id="tb22">
				<figcaption><span role="label">Πίνακας 3-4</span> | Προτεραιότητα τελεστών</figcaption>
				<table id="table021">
					<tbody>
						<tr>
							
								<th>Τελεστής</th>
							
							
								<th>Λειτουργία</th>
							
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7 _idGenCellOverride-2">
								<p><span class="courier-code">lambda</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7 _idGenCellOverride-2">
								<p>Ανώνυμες Συναρτήσεις</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">if&#160;–&#160;else</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Δομή επιλογής</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">or</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Λογική άρνηση</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">and</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Λογική σύζευξη</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">not&#160;x</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Λογική διάζευξη</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">in,&#160;not&#160;in,&#160;is,&#160;is&#160;not,&#160;</span></p>
								<p><span class="courier-code">&lt;,</span><span class="courier-code">&#160;&lt;=,&#160;&gt;,&#160;&gt;=,&#160;!=,&#160;==</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Συγκρίσεις</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">|</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Δυαδικό <span class="courier-code">OR</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">^</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Δυαδικό <span class="courier-code">XOR</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">&amp;</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Δυαδικό <span class="courier-code">AND</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">&lt;&lt;,</span><span class="courier-code">&#160;&gt;&gt;</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Ολίσθηση</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">+,&#160;-</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Αριθμητικές πράξεις</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">*,&#160;/,</span><span class="courier-code">&#160;//,&#160;%</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Αριθμητικές πράξεις</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">+x,&#160;-x,&#160;~x</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Μοναδιαίοι τελεστές, Δυαδική άρνηση</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">**</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Δυνάμεις</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p><span class="courier-code">()</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-7">
								<p>Παρενθέσεις</p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
		</section>
		<section role="section" id="ch5se8">
			<h1><span role="label">3.8</span> Αλυσιδωτή σύγκριση</h1>
			<p class="no-indent">Μια άλλη μορφή σύγκρισης είναι και η <i>αλυσιδωτή σύγκριση (chain comparison)</i><sup class="superscript CharOverride-1"><span id="footnote-055-backlink"><a href="#footnote-055">39</a></span></sup>, όταν απαιτείται μια σειρά διαδοχικών συγκρίσεων, όπου το αποτέλεσμα της μιας τροφοδοτεί την επόμενη. Συνήθως αυτή η μορφή χρησιμοποιείται για να ελεγχθεί αν μια τιμή περιέχεται σε κάποια διαστήματα ή όρια. Η παρακάτω εντολή, για παράδειγμα,</p>
			<p><span class="courier-code">&gt;&gt;&gt; a&lt;b&lt;c</span></p>
			<p class="no-indent">ελέγχει αν η τιμή της μεταβλητής <span class="courier-code">b</span> βρίσκεται ανάμεσα στις τιμές των <span class="courier-code">a</span> και <span class="courier-code">c</span>. Αν ισχύει <span class="courier-code">a&lt;b</span>, τότε και μόνο τότε θα γίνει και ο επόμενος έλεγχος, όπου και θα γίνει η τελική αποτίμηση του λογικού αποτελέσματος. Αν όμως ισχύει <span class="courier-code">a</span><span class="math-font">≮</span><span class="courier-code">b</span>, οι έλεγχοι σταματούν εκεί, αφού το αποτέλεσμα που προκύπτει είναι <span class="courier-code">False</span> και δεν πρόκειται να αλλάξει, ό,τι κι αν δώσουν οι επόμενοι έλεγχοι.</p>
			<p class="no-indent">Ο παρακάτω έλεγχος:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a&lt;b&gt;c</span></p>
			<p class="no-indent">ελέγχει αν το <span class="courier-code">b</span> είναι ο μεγαλύτερος από τους αριθμούς <span class="courier-code">a</span> και <span class="courier-code">c</span>, ενώ αντίστοιχα ο επόμενος:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a&gt;b&lt;c</span></p>
			<p class="no-indent">ελέγχει αν το <span class="courier-code">b</span> είναι ο μικρότερος από τους τρεις αριθμούς. </p>
			<p>Στις περισσότερες γλώσσες προγραμματισμού, κάτι τέτοιο γίνεται με μια σύνθετη λογική έκφραση όπως: </p>
			<p><span class="courier-code">a&gt;b and b&lt;c</span></p>
			<p class="no-indent">που θέτει ως προϋπόθεση, για να προκύψει αποτέλεσμα <span class="courier-code">True</span>, την ικανοποίηση και των δυο συνθηκών.</p>
			<p>Η έκφραση ωστόσο <span class="courier-code">a</span><span class="courier-code">&gt;b&lt;c</span> δεν υποδηλώνει και δεν περιλαμβάνει καμία σύγκριση ανάμεσα στο <span class="courier-code">a</span> και το <span class="courier-code">c</span>. Είναι ισοδύναμη με την έκφραση <span class="courier-code">a&gt;b</span> <span class="courier-code">and</span> <span class="courier-code">b&lt;c</span>, όπου η σχέση ανάμεσα στα <span class="courier-code">a</span> και <span class="courier-code">c</span> μπορεί να είναι οποιαδήποτε.</p>
		</section>
		<section role="section" id="ch5se9">
			<h1><span role="label">3.9</span> Ο τελεστής ταυτότητας</h1>
			<p class="no-indent">Στις προηγούμενες παραγράφους έγινε παρουσίαση του συγκριτικού τελεστή ‘<span class="courier-code">==</span>’ που χρησιμοποιείται για τον έλεγχο ισότητας. Αυτός ελέγχει αν η τιμή μιας μεταβλητής είναι ίση με μια άλλη τιμή. Ο τελεστής <span class="courier-code">is</span> ελέγχει αν δυο αντικείμενα είναι ίδια ή αν δυο μεταβλητές αναφέρονται στο ίδιο αντικείμενο. Για να ισχύει αυτό, θα πρέπει τα <i>αναγνωριστικά (id)</i> και των δυο μεταβλητών να είναι ίδια. Ακολουθούν μερικά παραδείγματα: </p>
			<p><span class="courier-code">&gt;&gt;&gt; a=b=3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; id(a), id</span><span class="courier-code">(b)</span></p>
			<p><span class="courier-code">(1901915984, 1901915984)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a is b</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b=2,2.0</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; id(a), id(b)</span></p>
			<p><span class="courier-code">(1901915952, 1260745183832)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a==b</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a is b</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">Ο τελεστής <span class="courier-code">is</span> μπορεί να συνοδεύεται και με τελεστή άρνησης (<span class="courier-code">not</span>). Κάτι τέτοιο απλά αντιστρέφει το αποτέλεσμα του ελέγχου ταυτότητας του τελεστή <span class="courier-code">is</span>. Αυτό σημαίνει ότι, αν δυο αντικείμενα έχουν την ίδια αναφορά, το <span class="courier-code">is</span> επιστρέφει <span class="courier-code">True</span> και το <span class="courier-code">is</span> <span class="courier-code">not</span> επιστρέφει <span class="courier-code">False</span>. Στο τελευταίο παράδειγμα, ο έλεγχος:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a is not b</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">True</span>.</p>
		</section>
		<section role="section" id="ch5se10">
			<h1><span role="label">3.10</span> Μπλοκ εντολών</h1>
			<p class="no-indent">Στις επόμενες ενότητες, οι εντολές επιλογής που περιγράφονται περιλαμβάνουν εντολές ομαδοποιημένες σε αυτόνομα τμήματα κώδικα. Αυτά τα μπλοκ εντολών ενσωματώνονται σε άλλες δομές, όπως είναι οι εντολές <span class="courier-code">if</span>, <span class="courier-code">for</span>, οι συναρτήσεις κ.λπ. Για να δημιουργηθεί μια τέτοια ομάδα εντολών στην Python, θα πρέπει αυτές οι εντολές να ακολουθούν τον χαρακτήρα ‘<span class="courier-code">:</span>’ και να διαθέτουν αριστερές εσοχές. Το πόσο μεγάλη θα πρέπει να είναι η εσοχή δεν έχει καμία σημασία, εφόσον η ίδια εσοχή διατηρείται σε όλες τις εντολές μιας ομάδας. Αυτό που προτείνεται συνήθως είναι η χρήση τεσσάρων διαστημάτων ή ενός χαρακτήρα TAB (<img class="tab" src="media/tab.png"/>). Τα περισσότερα περιβάλλοντα ανάπτυξης λογισμικού διαθέτουν δικό τους μηχανισμό για τη δημιουργία αυτών των διαστημάτων με αυτόματο τρόπο.</p>
			<p>Αυτή η λογική ομαδοποίησης εντολών ισχύει για όλες τις εντολές της Python που χειρίζονται μπλοκ εντολών. Όσοι έχουν εμπειρία με άλλες δημοφιλείς γλώσσες προγραμματισμού, όπως οι C/C++ ή Java, θα έχουν δει ότι οι ομαδοποιήσεις εντολών γίνονται με τη χρήση των αγκίστρων ‘<span class="courier-code">{</span>‘ και ‘<span class="courier-code">}</span>’. Πέρα από θέματα αισθητικής, που είναι ξεκάθαρα υποκειμενικά, τα άγκιστρα και άλλου είδους σύμβολα ή λέξεις (όπως η <span class="courier-code">end</span> <span class="courier-code">if</span> σε κάποιες άλλες γλώσσες) προσθέτουν επιπλέον στοιχεία στον κώδικα, κάνοντάς τον πιο σύνθετο, μακροσκελή, συχνά δυσανάγνωστο και πολλές φορές βασική αιτία για πολύωρη εκσφαλμάτωση (είναι πραγματικά εκνευριστικό να μην τρέχει ένα πρόγραμμα γιατί λείπει ένα άγκιστρο ή όταν έχει μπει σε λάθος σημείο). Αυτό συντελεί στη δραστική μείωση του μεγέθους του κώδικα αλλά και στην πιο απλή και σύντομη εμφάνισή του.</p>
		</section>
		<section role="section" id="ch5se11">
			<h1><span role="label">3.11</span> Εναλλακτική εκχώρηση</h1>
			<p class="no-indent">Στην Python η αρχικοποίηση τιμής μιας μεταβλητής είναι υποχρεωτική. Αν δεν γίνει προκαλεί σφάλμα <span class="courier-code">NameError</span> κατά την εκτέλεση του κώδικα. Η απόδοση τιμής σε μεταβλητή γίνεται με διάφορους τρόπους, που παρουσιάστηκαν στο Κεφάλαιο 2. Ωστόσο, κάποιες φορές, κατά την εκτέλεση ενός προγράμματος, μια μεταβλητή μπορεί να πάρει τιμή ανάλογα με την τιμή που έχουν άλλες μεταβλητές εκείνη ακριβώς τη χρονική στιγμή. Ένα τέχνασμα, που βασίζεται στην ιδιαίτερη λειτουργία των λογικών τελεστών της Python, χρησιμεύει για την ανάθεση τιμής, εναλλακτικά μέσα από ένα σύνολο πιθανών τιμών. Για παράδειγμα, στην εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; w=x or y or z or None</span></p>
			<p class="no-indent">η μεταβλητή <span class="courier-code">w</span> παίρνει την πρώτη μη μηδενική ή μη κενή τιμή από τις τιμές των <span class="courier-code">x</span>, <span class="courier-code">y</span> και <span class="courier-code">z</span>. Έτσι, αν το <span class="courier-code">x</span> έχει κάποια αριθμητική τιμή που δεν είναι μηδέν, ή περιέχει μια ακολουθία τιμών (λίστα, πλειάδα, συμβολοσειρά κ.λπ.) που δεν είναι κενή (<span class="courier-code">[]</span>,<span class="courier-code">()</span>,<span class="courier-code">&apos;&apos;</span>), τότε αυτή η τιμή θα δοθεί στο <span class="courier-code">w</span>. Αυτό θα συμβεί γιατί το <span class="courier-code">x</span> είναι όρισμα σε έναν <span class="courier-code">or</span> τελεστή, οπότε μια μη μηδενική ή μη κενή τιμή θα αποτιμηθεί σε μια τιμή <span class="courier-code">True</span>. Κατά συνέπεια, η <span class="courier-code">or</span> θα σταματήσει εκεί και θα επιστρέψει ως τιμή στο <span class="courier-code">w</span> το πρώτο αντικείμενο με τιμή <span class="courier-code">True</span>, δηλαδή το <span class="courier-code">x</span>. Αν το <span class="courier-code">x</span> είναι κενό ή μηδέν, θα γίνει αποτίμηση της επόμενης παραμέτρου του <span class="courier-code">or</span>, δηλαδή του <span class="courier-code">y</span>, με τον ίδιο τρόπο και με τα ίδια αποτελέσματα. Αν όλες οι μεταβλητές είναι κενές ή μηδέν, τότε το <span class="courier-code">w</span> θα πάρει μια ειδική τιμή, την τιμή <span class="courier-code">None</span>. Αυτή η τιμή, όπως έχει ήδη αναφερθεί, συμβολίζει τη μη ύπαρξη κάποιας τιμής και αντιστοιχεί στην τιμή <span class="courier-code">null</span> που χρησιμοποιείται σε άλλες γλώσσες προγραμματισμού για να υποδείξει το κενό ή την απουσία τιμής.</p>
			<p>Έτσι, οι παρακάτω εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x, y</span><span class="courier-code">, z=0, 2, 4</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; w=x or y or z or None</span></p>
			<p class="no-indent">έχουν ως αποτέλεσμα την εκχώρηση στο <span class="courier-code">w</span> της τιμής του <span class="courier-code">y</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; w</span></p>
			<p><span class="courier-code">2 </span></p>
			<p class="no-indent">που είναι η πρώτη μη μηδενική τιμή της πιο πάνω έκφρασης.</p>
		</section>
		<section role="section" id="ch5se12">
			<h1><span role="label">3.12</span> Δομή επιλογής <span class="courier-code">if</span></h1>
			<p class="no-indent">Στις προηγούμενες ενότητες έγινε περιγραφή του τρόπου επίλυσης απλών προβλημάτων ακολουθώντας με τη σειρά κάποια βήματα και εκτελώντας εντολές, τη μια μετά την άλλη, ακολουθιακά, στη σειρά. Τα προβλήματα αυτά όμως είχαν ένα χαρακτηριστικό. Η εκτέλεση των εντολών τους γινόταν σειριακά γιατί δεν περιείχαν σύνθετες περιπτώσεις και περισσότερες από μια επιλογές. Με τους συγκριτικούς και λογικούς τελεστές, υπάρχει η δυνατότητα να εκτελούνται διαφορετικές εντολές. Με τη χρήση τους μπορεί ένα πρόγραμμα, καθώς εκτελείται, να αποφασίζει πότε πρέπει να εκτελεστούν κάποιες εντολές, πότε όχι και πότε κάποιες άλλες. Συγκρίνοντας επομένως και ελέγχοντας συνθήκες και δεδομένα που δημιουργούνται κατά τον <i>χρόνο εκτέλεσης (run </i><i>time)</i>, ένα πρόγραμμα αποκτά την ευελιξία να ανταποκρίνεται διαφορετικά, ανάλογα με την περίπτωση. Αυτές τις διαφορετικές περιπτώσεις (στην πράξη, κάθε δυνατή ή πιθανή περίπτωση) θα πρέπει να εντοπίσει και να χειριστεί κατάλληλα ο προγραμματιστής, κωδικοποιώντας ανάλογα το πρόγραμμά του.</p>
			<p>Η αντιμετώπιση σύνθετων προβλημάτων σε κάθε γλώσσα προγραμματισμού γίνεται με τις <i>δομές </i><i>επιλογής (selection structures)</i>, που μπορεί να έχουν διάφορες μορφές. Η Python διαθέτει μια μόνο εντολή επιλογής, την εντολή <span class="courier-code">if</span>. Σε αντίθεση με άλλες γλώσσες, που ενσωματώνουν και άλλες εντολές επιλογής (τύπου select case ή switch), η Python διαθέτει κάποιους πιο αποδοτικούς μηχανισμούς (π.χ. λεξικά – Κεφάλαιο 9) για να διαχειρίζεται πολλαπλές επιλογές δεδομένων.</p>
			<p>Η εντολή <span class="courier-code">if</span> είναι ένας σύνθετος, αλλά ευέλικτος μηχανισμός, που μπορεί να πάρει διάφορες μορφές, ανάλογα με τις ανάγκες του προγράμματος. Στη συνέχεια περιγράφονται οι τρόποι χρήσης της <span class="courier-code">if</span> και οι μορφές που μπορεί αυτή να πάρει.</p>
		</section>
		<section role="section" id="ch5se13">
			<h1><span role="label">3.13</span> Απλή δομή επιλογής</h1>
			<p class="no-indent">Η πιο απλή μορφή της εντολής <span class="courier-code">if</span> είναι: </p>
			<p><span class="courier-code">if συνθήκη:</span></p>
			<p>&#95;&#95;&#95;&#95; <span class="courier-code">εντολές</span><span class="courier-code"> Α</span></p>
			<p><span class="courier-code">εντολές Β</span></p>
			<p class="no-indent">Η <span class="courier-code">συνθήκη</span> είναι ένας λογικός έλεγχος ή μια σύγκριση (ή και κάποιο αντικείμενο) και οι <span class="courier-code">εντολές Α</span> είναι μια ή περισσότερες <i>έγκυρες (valid)</i> εντολές της Python που έχουν εσοχές και αποτελούν ένα μπλοκ εντολών που βρίσκεται «μέσα» στην <span class="courier-code">if</span>. Η λογική της εντολής <span class="courier-code">if</span> είναι η εξής: αν το αποτέλεσμα της συνθήκης είναι <span class="courier-code">True</span>, τότε θα εκτελεστούν οι <span class="courier-code">εντολές </span>που βρίσκονται στο μπλοκ εντολών <span class="courier-code">Α,</span> αμέσως μετά την <span class="courier-code">if</span>. Διαφορετικά, οι εντολές αυτές δεν εκτελούνται. Σε κάθε περίπτωση, το πρόγραμμα θα συνεχίσει την εκτέλεσή του με τις <span class="courier-code">εντολές Β</span> , μετά την <span class="courier-code">if</span>. </p>
			<p>Εκτός από τις εσοχές που θα πρέπει να έχει το μπλοκ εντολών μέσα στην <span class="courier-code">if</span>, υπάρχουν δυο ακόμη ιδιαιτερότητες. Η μια είναι η απαλλαγή από την υποχρέωση να δίνεται η συνθήκη της μέσα σε παρενθέσεις. Κάτι τέτοιο δεν είναι απαραίτητο. Ο προγραμματιστής θα πρέπει να επικεντρώσει την προσοχή του στη σωστή σύνταξη της συνθήκης και μόνο σε αυτήν, η οποία θα πρέπει να έχει παρενθέσεις όπου χρειάζεται, ώστε η προτεραιότητα των πράξεων (οποιασδήποτε μορφής) να είναι σωστά ορισμένη. </p>
			<p>Το δεύτερο στοιχείο είναι το σύμβολο ‘<span class="courier-code">:</span>’. Αυτό σηματοδοτεί την έναρξη ενός μπλοκ εντολών. Είναι κάτι που ξεχνάει κάποιος εύκολα, ειδικά στην αρχή, αλλά είναι κάτι που στη συνέχεια αποτελεί θέμα συνήθειας. Επίσης, όλα τα ολοκληρωμένα περιβάλλοντα ανάπτυξης κώδικα, όπως τα Spyder, PyCharm, Canopy κ.ά. τοποθετούν αυτόματα τον χαρακτήρα ‘<span class="courier-code">:</span>’ στο τέλος μιας <span class="courier-code">if</span>, αν δεν δοθεί από τον χρήστη.</p>
			<p>Η εκμάθηση του τρόπου σύνταξης μιας εντολής όπως η <span class="courier-code">if</span> είναι εύκολη. Το πραγματικά δύσκολο είναι να γίνει αντιληπτό το πότε, σε ποιες περιπτώσεις και με ποιον τρόπο θα χρησιμοποιηθεί αυτή και τι μορφή θα πρέπει να έχει κάθε φορά. Η απλή μορφή της <span class="courier-code">if</span> χρησιμοποιείται όταν θα πρέπει να εκτελεστούν κάποιες ενέργειες μόνο όταν ισχύει μια συνθήκη. Η συνθήκη της <span class="courier-code">if</span> θα πρέπει να ελέγχεται ώστε να τρέξει ή όχι ο κώδικας που υπάρχει στο μπλοκ εντολών της. Ακολουθούν μερικά παραδείγματα, ώστε να γίνει καλύτερα κατανοητή η χρήση της.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-5</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό και θα εμφανίζει την απόλυτη τιμή του.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-3 | Απλή <span class="courier-code">if</span> – απόλυτη τιμή</figcaption><img src="media/ListaKodika-3-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 2 ελέγχεται αν ο αριθμός που δόθηκε από τον χρήστη είναι αρνητικός. Αν είναι, μόνο τότε θα αλλάξει το πρόσημό του τρέχοντας την εντολή στη γραμμή 3. Αν δεν είναι αρνητικός, η γραμμή 3 θα παρακαμφθεί, δεν θα εκτελεστεί και θα εμφανιστεί η τιμή του στην οθόνη (γραμμή 4).</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-6</b>: Στο τμήμα παραγωγής ενός εργοστασίου εγκαταστάθηκε ένα σύστημα προειδοποίησης για τη θερμοκρασία του φούρνου από όπου περνάνε κάποια τρόφιμα. Να γράψετε πρόγραμμα που θα διαβάζει τη θερμοκρασία και θα εμφανίζει ένα μήνυμα αν αυτή ξεπεράσει τους 300<sup class="superscript CharOverride-1">ο</sup> C.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-4 | Απλή <span class="courier-code">if</span> – έλεγχος θερμοκρασίας</figcaption><img src="media/ListaKodika-3-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Τρέχοντας δοκιμαστικά το πρόγραμμα, αν δοθεί η τιμή <span class="courier-code">250</span>, ο έλεγχος στη γραμμή 2 θα αποτύχει, επιστρέφοντας τιμή <span class="courier-code">False</span> (<span class="courier-code">250</span><span class="math-font">≯</span><span class="courier-code">300</span>). Έτσι, η εντολή μέσα στην <span class="courier-code">if</span> στη γραμμή 3 δεν θα εκτελεστεί. Αντίθετα, αν δοθεί η τιμή <span class="courier-code">400</span> στη θερμοκρασία, ο έλεγχος στην <span class="courier-code">if</span> επιστρέφει <span class="courier-code">True</span>, οπότε η <span class="courier-code">print</span> στη γραμμή 3 θα εκτελεστεί, εμφανίζοντας στην οθόνη:</p>
			<p><span class="courier-code">Θερμοκρασία:400</span></p>
			<p><span class="courier-code">Προσοχή...αυξημένη θερμοκρασία</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-7</b>: Ένα κατάστημα προσφέρει έκπτωση 10% στους πελάτες του για αγορές άνω των 200€. Να γράψετε πρόγραμμα που θα δέχεται το ποσό αγοράς, εμφανίζοντας το ποσό της έκπτωσης και το τελικό ποσό που πρέπει να πληρώσει ο πελάτης μετά την έκπτωση.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 3-5 περιέχει τις απαραίτητες εντολές για την επίλυση του προβλήματος.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-5 | Απλή <span class="courier-code">if</span> – υπολογισμός έκπτωσης</figcaption><img src="media/ListaKodika-3-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Εκτελώντας το πρόγραμμα, θα εμφανιστεί στην οθόνη:</p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>100</b></span></p>
			<p class="no-indent">Έστω ότι δίνεται ως ποσό η τιμή <span class="courier-code">100</span> (<span class="courier-code">poso</span>). Μηδενίζεται η έκπτωση (γραμμή 2), ο έλεγχος (γραμμή 3) επιστρέφει <span class="courier-code">False</span> (<span class="courier-code">100</span><span class="math-font">≯</span><span class="courier-code">200</span>), οι επόμενες εντολές μέσα στην <span class="courier-code">if</span> (γραμμές 4 και 5) δεν εκτελούνται και εμφανίζεται τελικά το ποσό, με την αρχική τιμή του, και η μηδενική έκπτωση:</p>
			<p><span class="courier-code">Η έκπτωση είναι: 0.00€ και το ποσό:100.00€</span></p>
			<p class="no-indent">Αν εκτελεστεί ξανά το πρόγραμμα και δοθεί ως ποσό το <span class="courier-code">300</span>:</p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>300</b></span></p>
			<p class="no-indent">ο έλεγχος της <span class="courier-code">if</span> θα δώσει ως αποτέλεσμα την τιμή <span class="courier-code">True</span>, και σε αυτή την περίπτωση οι εντολές (γραμμές 4 και 5) που βρίσκονται μέσα στην <span class="courier-code">if</span> θα εκτελεστούν και θα υπολογιστούν νέες τιμές για την έκπτωση και για το ποσό. Αυτές οι τιμές θα εμφανιστούν στην οθόνη αμέσως μετά.</p>
			<p><span class="courier-code">Η έκπτωση είναι: 30.00€ και το ποσό:270.00€</span></p>
			<p class="no-indent">Η αρχικοποίηση της μεταβλητής <span class="courier-code">ekp</span> με μηδέν στη γραμμή 2 είναι απαραίτητη γιατί, αν δεν δικαιούται έκπτωση τελικά ο πελάτης, τότε στη γραμμή 6 η μεταβλητή <span class="courier-code">ekp</span> δεν θα έχει καμία τιμή και θα εμφανιστεί σφάλμα:</p>
			<p><span class="courier-code">NameError: name &apos;ekp&apos; is not defined </span></p>
			<p class="no-indent">Αν η Λίστα Κώδικα 3-5 είναι αποθηκευμένη στο αρχείο <span class="courier-code">sales.py</span>, το πρόγραμμα μπορεί να εκτελεστεί από τη γραμμή εντολών με την παρακάτω εντολή:</p>
			<p><span class="courier-code">C:&gt;python sales.py</span></p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>420</b></span></p>
			<p><span class="courier-code">Η έκπτωση είναι: 42.00€ και το ποσό:378.00€</span></p>
		</section>
		<section role="section" id="ch5se14">
			<h1><span role="label">3.14</span> Σύνθετη δομή επιλογής</h1>
			<p class="no-indent">Αυτή η μορφή της <span class="courier-code">if</span> χρησιμοποιείται όταν, ελέγχοντας μια συνθήκη, προκύπτουν δυο διακριτές περιπτώσεις στις οποίες θα πρέπει να γίνουν κάποιες ενέργειες και να εκτελεστούν διαφορετικές, κάθε φορά, εντολές. Η γενική μορφή της εντολής είναι:</p>
			<img src="media/img3-14_fmt.png" alt=""/>
			<p class="no-indent">Αν ο έλεγχος της συνθήκης δώσει αποτέλεσμα <span class="courier-code">True</span>, τότε εκτελείται το τμήμα εντολών <span class="courier-code">Α</span> και η εκτέλεση του προγράμματος συνεχίζεται με τις εντολές που βρίσκονται μετά την <span class="courier-code">if</span>. Σε αυτή την περίπτωση το τμήμα εντολών <span class="courier-code">Β</span> δεν εκτελείται. </p>
			<p>Αν η συνθήκη επιστρέψει αποτέλεσμα <span class="courier-code">False</span>, παρακάμπτονται οι εντολές του τμήματος <span class="courier-code">Α</span> και εκτελούνται οι εντολές που υπάρχουν στο τμήμα <span class="courier-code">Β</span>, αμέσως μετά το λεκτικό <span class="courier-code">else</span>. Το πρόγραμμα συνεχίζει με τις εντολές που ακολουθούν μετά την <span class="courier-code">if</span>, όπως και στην 1η περίπτωση.</p>
			<p>Ακολουθούν μερικά παραδείγματα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-8</b>: Να γράψετε πρόγραμμα που θα διαβάζει έναν αριθμό <i>x</i>, υπολογίζοντας και εμφανίζοντας την τιμή 1<span class="math-font">/</span><i>x</i>.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-6 | Σύνθετη <span class="courier-code">if</span> – υπολογισμός αντιστρόφου</figcaption><img src="media/ListaKodika-3-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Για να μπορέσει να γίνει ο υπολογισμός, θα πρέπει το <span class="courier-code">x</span> να μην είναι <span class="courier-code">0</span>. Αν είναι <span class="courier-code">0</span> και γίνει προσπάθεια να πραγματοποιηθεί η διαίρεση, τότε θα εμφανιστεί το μήνυμα σφάλματος:</p>
			<p><span class="courier-code">ZeroDivisionError: division by zero</span></p>
			<p class="no-indent">και η εκτέλεση του προγράμματος θα διακοπεί. Για αυτό τον λόγο είναι απαραίτητο, πριν τη διαίρεση, να γίνει έλεγχος αν το <span class="courier-code">x</span> έχει μηδενική τιμή. Υπάρχουν επομένως δυο περιπτώσεις όπου απαιτείται να γίνουν διαφορετικές ενέργειες κάθε φορά. Οι εντολές στη Λίστα Κώδικα 3-6 καλύπτουν αυτές τις περιπτώσεις με τη χρήση μιας σύνθετης δομής <span class="courier-code">if</span>.</p>
			<p>Έτσι, αν το <span class="courier-code">x</span> που θα δοθεί έχει τιμή <span class="courier-code">0</span>, θα εκτελεστεί η γραμμή 5. Διαφορετικά εκτελείται η γραμμή 3.</p>
			<p>Βέβαια, το Παράδειγμα 3-8, μπορεί να λυθεί και με τα ιδιαίτερα χαρακτηριστικά που έχει η Python. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; </span><span class="courier-code">x!=0 and 1/x or &apos;Αδύνατο&apos;</span></p>
			<p class="no-indent">θα έχει το ίδιο αποτέλεσμα με τη Λίστα Κώδικα 3-6.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-9</b>: Ένα κατάστημα προσφέρει 6 άτοκες μηνιαίες δόσεις, για αγορές πάνω από 300€. Να γράψετε πρόγραμμα όπου θα εισάγεται το ποσό αγοράς και θα εμφανίζεται μήνυμα για πληρωμή μετρητοίς ή με δόσεις, καθώς και το ποσό κάθε δόσης.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί η απάντηση στη Λίστα Κώδικα 3-7.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-7 | Σύνθετη <span class="courier-code">if</span> – υπολογισμός δόσεων</figcaption><img src="media/ListaKodika-3-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Αν το ποσό αγοράς είναι μεγαλύτερο από <span class="courier-code">300€</span>, τότε υπολογίζεται η δόση (<span class="courier-code">d</span>, γραμμή 3) και τυπώνεται στην οθόνη (γραμμή 4). Η γραμμή 6 δεν εκτελείται. Αν δοθεί στην <span class="courier-code">input</span> ως ποσό ο αριθμός <span class="courier-code">600</span>:</p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς</span><span class="courier-code">:</span><span class="courier-code"><b>600</b></span></p>
			<p class="no-indent">θα τυπωθεί το μήνυμα:</p>
			<p><span class="courier-code">Πληρωμή με δόσεις. Ποσό δόσης: 100.0</span></p>
			<p class="no-indent">Σε αντίθετη περίπτωση: </p>
			<p><span class="courier-code">Δώσε το ποσό αγοράς:</span><span class="courier-code"><b>230</b></span></p>
			<p class="no-indent">τρέχει μόνο η εντολή της γραμμής 6, τυπώνοντας:</p>
			<p><span class="courier-code">Πληρωμή μετρητοίς</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-10</b>: Ένας πωλητής παίρνει προμήθεια 15% αν οι πωλήσεις του ξεπεράσουν τα 5000€. Για πωλήσεις λιγότερες από 5000€, παίρνει μισθό 700€. Να γράψετε πρόγραμμα που θα δέχεται το ύψος των πωλήσεων, εμφανίζοντας το ποσό που θα πληρωθεί.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-8 | Σύνθετη <span class="courier-code">if</span> – υπολογισμός προμήθειας</figcaption><img src="media/ListaKodika-3-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Αφού δοθούν οι πωλήσεις (γραμμή 1), ελέγχονται (γραμμή 2) αν είναι περισσότερες από <span class="courier-code">5000</span>. Αν είναι, τρέχει η εντολή στη γραμμή 3, αλλιώς εκτελείται η εντολή στη γραμμή 5. Το τελικό αποτέλεσμα εμφανίζεται στην τελευταία εντολή. Ακολουθεί μια δοκιμαστική εκτέλεση του προγράμματος στη Λίστα Κώδικα 3-8: </p>
			<p><span class="courier-code">Δώσε το ποσό των πωλήσεων:</span><span class="courier-code"><b>5000</b></span></p>
			<p><span class="courier-code">Θα πληρωθεί: 750.0 €</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-11</b>: Για να «περάσει» κάποιος το μάθημα «Προγραμματισμός με Python», θα πρέπει να λάβει βαθμό από 5 και πάνω και να μην έχει περισσότερες από 10 απουσίες στο εργαστήριο. Να γράψετε πρόγραμμα που θα δέχεται τον βαθμό και τις απουσίες του σπουδαστή, εμφανίζοντας αν περνάει ή όχι το μάθημα.</p>
			</blockquote>
			<p class="no-indent">Το πρόγραμμα στη Λίστα Κώδικα 3-9 αποτελεί μια πιθανή λύση του προβλήματος.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-9 | Σύνθετη <span class="courier-code">if</span> – αποτελέσματα μαθήματος</figcaption><img src="media/ListaKodika-3-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Απαραίτητη προϋπόθεση για να εκτελεστεί η εντολή της γραμμής 4 είναι να ισχύουν και οι δυο συνθήκες της <span class="courier-code">if</span>. Διαφορετικά εμφανίζεται μήνυμα μέσω της γραμμής 6.</p>
			<p>Σημαντικό στοιχείο σε αυτό το κομμάτι κώδικα είναι ότι, όταν εκτελεστεί η γραμμή 6, δεν ελέγχεται ποιο από τα δυο κριτήρια δεν ικανοποιείται, αυτό του βαθμού ή αυτό των απουσιών. Έτσι, στο ερώτημα: «απορρίφθηκε λόγω βαθμού ή λόγω απουσιών;», το πρόγραμμα, έτσι όπως είναι γραμμένο, δεν μπορεί να απαντήσει. Σε αυτή την περίπτωση, όπου είναι απαραίτητο να εντοπιστεί ποιο από τα δυο κριτήρια οδήγησε στην απόρριψη, η λύση πρέπει να αλλάξει. Πρέπει να ελεγχθούν πολλά κριτήρια. Αυτή η λειτουργία γίνεται με την επόμενη μορφή της <span class="courier-code">if</span>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-12</b>: Να γράψετε πρόγραμμα για το παιχνίδι κορόνα-γράμματα. Ο παίκτης θα επιλέγει μια από τις τιμές <span class="courier-code">0</span> (κορόνα) ή <span class="courier-code">1</span> (γράμματα) και το πρόγραμμα θα παράγει μια τυχαία τιμή <span class="courier-code">0</span> ή <span class="courier-code">1</span>. Αν οι δυο επιλογές συμπίπτουν, τότε κερδίζει ο παίκτης, διαφορετικά χάνει.</p>
			</blockquote>
			<p class="no-indent">Μια κωδικοποίηση του παιχνιδιού φαίνεται στη Λίστα Κώδικα 3-10.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-10 | Σύνθετη <span class="courier-code">if</span> – το παιχνίδι κορόνα-γράμματα</figcaption><img src="media/ListaKodika-3-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Σε κάθε παιχνίδι υπάρχει το στοιχείο του τυχαίου. Στο Κεφάλαιο 2 παρουσιάστηκαν οι βασικές μέθοδοι δημιουργίας τυχαίων αριθμών. Αν συμβολίσουμε τις δυο επιλογές του παίκτη (κορόνα-γράμματα) με τους αριθμούς <span class="courier-code">0</span> και <span class="courier-code">1</span>, τότε με τη χρήση της συνάρτησης <span class="courier-code">randint</span> μπορεί να γίνει προσομοίωση για τη ρίψη ενός κέρματος, όπου το <span class="courier-code">0</span> θα συμβολίζει την επιλογή «κορόνα» και το <span class="courier-code">1</span> την επιλογή «γράμματα». Αυτό που χρειάζεται να γίνει είναι η εισαγωγή της συνάρτησης <span class="courier-code">randint</span> από τη βιβλιοθήκη <span class="courier-code">random</span>, για τη δημιουργία τυχαίων αριθμών <span class="courier-code">0</span> ή <span class="courier-code">1</span>. Σε κάθε εκτέλεση του παιχνιδιού, το πρόγραμμα θα δημιουργεί έναν τυχαίο αριθμό (<span class="courier-code">0</span> ή <span class="courier-code">1</span>) και θα δέχεται την επιλογή του παίκτη. Αρκεί ένας απλός έλεγχος <span class="courier-code">if</span> για να εμφανιστεί αν ο παίκτης «πέτυχε» την πλευρά του νομίσματος ή όχι. Μια εκτέλεση του παιχνιδιού φαίνεται στις παρακάτω γραμμές:</p>
			<p><span class="courier-code">Δώσε 0 (κορόνα) ή </span><span class="courier-code">1 (γράμματα):</span><span class="courier-code"><b>0</b></span></p>
			<p><span class="courier-code">Κέρδισες!</span></p>
		</section>
		<section role="section" id="ch5se15">
			<h1><span role="label">3.15</span> Πολλαπλή δομή επιλογής</h1>
			<p class="no-indent">Γενικά, χρησιμοποιείται όταν πρέπει να ελεγχθούν περισσότερες από δυο περιπτώσεις, όπου η καθεμία με την άλλη είναι αμοιβαία αποκλειόμενες. Όταν δηλαδή αναζητείται αν ικανοποιείται μια συνθήκη μόνο, ανάμεσα σε πολλές άλλες. Η μορφή της πολλαπλής <span class="courier-code">if</span> στην Python είναι:</p>
			<img src="media/img3-15_fmt.png" alt=""/>
			<p class="no-indent">Στην πολλαπλή μορφή της, η <span class="courier-code">if</span> ξεκινάει με τον έλεγχο της 1ης συνθήκης. Αν ισχύει, τότε εκτελείται το τμήμα εντολών <span class="courier-code">Α</span>, όλες οι υπόλοιπες εντολές της <span class="courier-code">if</span> αγνοούνται και το πρόγραμμα συνεχίζει να εκτελείται με ό,τι υπάρχει μετά την <span class="courier-code">if</span>. Αν ο έλεγχος όμως επιστρέψει ως αποτέλεσμα την τιμή <span class="courier-code">False</span>, ελέγχεται η επόμενη συνθήκη, η <span class="courier-code">συνθήκη</span><span class="courier-code"> 2</span>. Με παρόμοιο τρόπο, αν υπάρχει αποτέλεσμα <span class="courier-code">True</span>, εκτελείται το τμήμα εντολών <span class="courier-code">Β</span> και συνεχίζει το πρόγραμμα μετά την <span class="courier-code">if</span>· διαφορετικά, ελέγχονται, μια μια, όλες οι υπόλοιπες συνθήκες. Αν καμία από τις συνθήκες δεν ισχύει, τότε εκτελούνται οι εντολές μετά το τμήμα <span class="courier-code">else</span>. Το τμήμα <span class="courier-code">else</span> μπορεί να μην υπάρχει καθόλου, δεν είναι υποχρεωτικό. Μπαίνει στην <span class="courier-code">if</span> για να καλύψει όλες εκείνες τις περιπτώσεις όπου δεν ικανοποιείται καμία από τις συνθήκες της <span class="courier-code">if</span>.</p>
			<p>Για τα δεδομένα του Παραδείγματος 3-11 η λύση θα μπορούσε να ήταν αυτή της Λίστας Κώδικα 3-11.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-11 | Πολλαπλή <span class="courier-code">if</span> – αποτελέσματα μαθήματος</figcaption><img src="media/ListaKodika-3-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Κάθε περίπτωση ελέγχεται ξεχωριστά και μπορεί να εντοπιστεί ακριβώς ο λόγος απόρριψης. Αν ο βαθμός και οι απουσίες είναι μέσα στα αποδεκτά όρια (γραμμή 3), τότε θα εμφανιστεί:</p>
			<p><span class="courier-code">Το πέρασες!!!</span></p>
			<p class="no-indent">και η εκτέλεση της <span class="courier-code">if</span> θα τερματιστεί. Διαφορετικά, συνεχίζει ο έλεγχος με την επόμενη συνθήκη (γραμμή 5), όπου ελέγχεται αν και τα δυο στοιχεία είναι μη αποδεκτά, εμφανίζοντας κατάλληλο μήνυμα:</p>
			<p><span class="courier-code">Απορρίπτεσαι. Βαθμός και απουσίες μη αποδεκτές</span></p>
			<p class="no-indent">Αν δεν ισχύει και η 2η συνθήκη, γνωρίζουμε ήδη ότι ο συγκεκριμένος φοιτητής έχει απορριφθεί αλλά δεν ξέρουμε πού οφείλεται αυτό. Αυτό ελέγχεται στην επόμενη συνθήκη (γραμμή 7). Αν η απόρριψη οφείλεται σε χαμηλό βαθμό, θα εμφανιστεί: </p>
			<p><span class="courier-code">Απορρίπτεσαι λόγω βαθμού</span></p>
			<p class="no-indent">κάτι που θα οδηγήσει στη διακοπή της <span class="courier-code">if</span>. Αν και η 3η συνθήκη δεν ισχύει, η τελευταία συνθήκη (γραμμή 9) θα ελέγξει αν οι απουσίες είναι περισσότερες από το αποδεκτό και θα εμφανίσει το αντίστοιχο μήνυμα:</p>
			<p><span class="courier-code">Απορρίπτεσαι λόγω απουσιών</span></p>
			<p class="no-indent">Το τμήμα <span class="courier-code">else</span> δεν είναι υποχρεωτικό να υπάρχει. Αν υπάρχει όμως, θα πρέπει να μπαίνει με προσοχή, γιατί καλύπτει κάθε πιθανή αιτία αποτυχίας των προηγουμένων ελέγχων και κάτι τέτοιο δεν είναι πάντα εύκολο να γίνει αντιληπτό. Με την προϋπόθεση ότι οι τιμές που έχουν περαστεί στο πρόγραμμα δεν περιέχουν λάθη, θα μπορούσε η τελευταία συνθήκη να μη γραφτεί και να αντικατασταθεί με ένα τμήμα: </p>
			<p><span class="courier-code">else:</span></p>
			<p class="no-indent">Αυτό μπορεί να γίνει γιατί, αν δεν ισχύει καμία από τις τρεις πρώτες συνθήκες, δηλαδή ο φοιτητής δεν έχει περάσει, δεν έχει ταυτόχρονα και τα δυο στοιχεία εκτός ορίων και η απόρριψή του δεν οφείλεται στον βαθμό, τότε σίγουρα θα οφείλεται στον αριθμό των απουσιών.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-13</b>: Ο χαρακτηρισμός του βαθμού γίνεται σύμφωνα με τις αντιστοιχίες του παρακάτω πίνακα.</p>
			</blockquote>
			
				<table id="table022">
					<tbody>
						<tr>
							<td>
								<p><b>ΒΑΘΜΟΣ</b></p>
							</td>
							<td>
								<p><b>ΧΑΡΑΚΤΗΡΙΣΜΟΣ</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>[0-5)</p>
							</td>
							<td>
								<p>Ανεπαρκής</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>[5-7)</p>
							</td>
							<td>
								<p>Καλός</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>[7-8.5)</p>
							</td>
							<td>
								<p>Πολύ καλός</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>[8.5-10]</p>
							</td>
							<td>
								<p>Άριστος</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Ζητείται πρόγραμμα όπου θα εισάγεται ένας βαθμός και θα εμφανίζεται ο κατάλληλος χαρακτηρισμός.</p>
			<p class="no-indent">Μια λύση του προβλήματος φαίνεται στη Λίστα Κώδικα 3-12.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-12 | Πολλαπλή <span class="courier-code">if</span> – χαρακτηρισμός βαθμού</figcaption><img src="media/ListaKodika-3-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Κάθε συνθήκη, και επομένως κάθε όριο, ελέγχεται ξεχωριστά, με τη σειρά, από πάνω προς τα κάτω και εμφανίζεται το αντίστοιχο μήνυμα. Αν ο βαθμός δεν ανήκει σε κανένα από τα διαστήματα που έχουν δοθεί, τότε υπονοείται ότι ο βαθμός είναι στο τελευταίο διάστημα που έχει μείνει: από 8.5 μέχρι 10. Μόλις εκτελεστεί το πρόγραμμα δίνοντας ως βαθμό <span class="courier-code">6</span>, θα εμφανίσει το αντίστοιχο αποτέλεσμα:</p>
			<p><span class="courier-code">Δώσε τον Βαθμό:</span><span class="courier-code"><b>6</b></span></p>
			<p><span class="courier-code">Καλός</span></p>
			<p class="no-indent">Ωστόσο, σε πραγματικές εφαρμογές, όταν εισάγονται δεδομένα από το πληκτρολόγιο, αυτή η διαδικασία εμπεριέχει έναν μεγάλο κίνδυνο λανθασμένης πληκτρολόγησης. Αν επομένως δοθεί ως βαθμός το –3 αντί για 3, που προφανώς είναι λάθος, το πρόγραμμα θα εμφανίσει τον χαρακτηρισμό <span class="courier-code">Άριστος</span>. Τέτοια λάθη θα πρέπει να εντοπίζονται και να απορρίπτονται από ένα πρόγραμμα, ως μη αποδεκτές τιμές. Η διαδικασία παγίδευσης λαθών, αλλά και αποτροπής του χρήστη από το να εισάγει μη έγκυρες τιμές, ονομάζεται <i>έλεγχος εγκυρότητας (validity check)</i>, περιγράφεται σε επόμενη ενότητα και, συνήθως, απαιτεί, όπως θα δούμε στη συνέχεια, τη χρήση κάποιας δομής επανάληψης (βλ. Κεφάλαιο 4).</p>
			<p>Η Λίστα Κώδικα 3-12 θα μπορούσε να γραφτεί διαφορετικά, για να συμπεριλάβει και έναν τέτοιο έλεγχο. Αυτό φαίνεται στη Λίστα Κώδικα 3-13.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-13 | Πολλαπλή <span class="courier-code">if</span> – χαρακτηρισμός βαθμού - απλοί έλεγχοι</figcaption><img src="media/ListaKodika-3-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Εκτός από την προσθήκη ξεχωριστού ελέγχου, για τον εντοπισμό λανθασμένων τιμών (γραμμή 2), έχουν αλλάξει και οι υπόλοιπες συνθήκες. Αν δεν ισχύει <span class="courier-code">b&lt;5</span> στη γραμμή 4, τότε, υποχρεωτικά, θα ισχύει ότι <span class="courier-code">b&gt;=5</span>, οπότε δεν χρειάζεται να ελεγχθεί κάτι τέτοιο στην επόμενη συνθήκη. Τέτοιες απλοποιήσεις ελέγχων επιτρέπονται, αλλά θα πρέπει να γίνονται προσεκτικά. Στο συγκεκριμένο παράδειγμα δεν θα μπορούσε να γίνει κάτι τέτοιο αν τα διαστήματα ελέγχων δεν ήταν συνεχή.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-14</b>: Να γράψετε πρόγραμμα που θα δέχεται μια τιμή για το <i>x</i>, υπολογίζοντας και εμφανίζοντας την τιμή της αριθμητικής παράστασης: </p>
			</blockquote>
			<img src="media/example-3-14_fmt.png" alt=""/>
			<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 3-14.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-14 | Πολλαπλή <span class="courier-code">if</span> – υπολογισμός αριθμητικής παράστασης</figcaption><img src="media/ListaKodika-3-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Μια δοκιμαστική εκτέλεση του προγράμματος για <span class="courier-code">x=4</span> θα εμφανίσει:</p>
			<p><span class="courier-code">Δώσε τιμή για το x:4</span></p>
			<p><span class="courier-code">f(x)=f(4.0)=8.0</span></p>
			<p class="no-indent">Η τελευταία περίπτωση, αν και περιέχει διαίρεση με άγνωστη τιμή, δεν έχει κίνδυνο να μην μπορέσει να εκτελεστεί, γιατί αυτό θα συμβαίνει για τιμές του <span class="courier-code">x</span> μεγαλύτερες του <span class="courier-code">3</span>, οπότε θα ισχύει σίγουρα <span class="courier-code">x-3</span><span class="math-font">≠</span><span class="courier-code">0</span>.</p>
		</section>
		<section role="section" id="ch5se16">
			<h1><span role="label">3.16</span> Απλές και σύνθετες εντολές <span class="courier-code">if</span> μιας γραμμής</h1>
			<p class="no-indent">Μια σύνθετη δομή <span class="courier-code">if</span> μπορεί να γραφτεί σε μια γραμμή, με <i>τρία</i><i> τμήματα (ternary if)</i>, όταν κάθε τμήμα περιέχει μια μόνο εντολή. Η γενική μορφή της είναι:</p>
			<p><span class="courier-code">μεταβλητή=τιμή 1 if συνθήκη else τιμή 2</span></p>
			<p class="no-indent">Η μεταβλητή θα λάβει την <span class="courier-code">τιμή 1</span> αν ισχύει η συνθήκη, διαφορετικά θα πάρει την <span class="courier-code">τιμή 2</span>. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-15</b>: Ένα κατάστημα προσφέρει έκπτωση 10%. Για αγορές πάνω από 200€ δίνει έκπτωση 20%. Να γράψετε πρόγραμμα που θα δέχεται το ποσό αγοράς και θα εμφανίζει το τελικό ποσό μετά την έκπτωση.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-15 | <span class="courier-code">if </span>μιας γραμμής – υπολογισμός έκπτωσης</figcaption><img src="media/ListaKodika-3-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Αφού δοθεί το ποσό αγοράς (γραμμή 1), ελέγχεται (γραμμή 2) αν είναι μεγαλύτερο από 200€. Αν είναι, τρέχει η εντολή στη γραμμή 3, αλλιώς εκτελείται η εντολή στη γραμμή 5. Η <span class="courier-code">if</span> μιας γραμμής δίνεται στη γραμμή 8 και είναι αντίστοιχη με την <span class="courier-code">if</span> των γραμμών 2 έως και 6.</p>
			<p>Με παρόμοιο τρόπο μπορούν να εκτελεστούν και εντολές, χωρίς να γίνεται εκχώρηση σε κάποια μεταβλητή, γράφοντας:</p>
			<p><span class="courier-code">εντολή 1 if συνθήκη else εντολή 2</span></p>
			<p class="no-indent">Η παρακάτω εντολή τυπώνει τη λέξη “<span class="courier-code">Αρνητικός</span>” ή τη φράση “<span class="courier-code">Θετικός</span> <span class="courier-code">ή μηδέν</span>”, ανάλογα με την τιμή της μεταβλητής <span class="courier-code">a</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&apos; Αρνητικός &apos;) if a&lt;0 else print(&apos; Θετικός ή μηδέν &apos;)</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-16</b>: Ένας υπάλληλος θα πάρει έκτακτο επίδομα βάσει του 30% του μισθού του, το οποίο δεν μπορεί να ξεπερνά τα 200€. Να γράψετε πρόγραμμα που θα δέχεται τον μισθό του υπαλλήλου και θα εμφανίζει το ποσό του επιδόματος.</p>
			</blockquote>
			<p class="no-indent">Η απάντηση με χρήση <span class="courier-code">if</span> μιας γραμμής φαίνεται στη Λίστα Κώδικα 3-16.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-16 | <span class="courier-code">if </span>μιας γραμμής – επίδομα υπαλλήλου</figcaption><img src="media/ListaKodika-3-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Η <span class="courier-code">if</span> θα μπορούσε να έχει τη μορφή που δίνεται στις Λίστες Κώδικα 3-17 και 3-18.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-17 | Σύνθετη <span class="courier-code">if</span> – επίδομα υπαλλήλου</figcaption><img src="media/ListaKodika-3-17_fmt.png" alt=""/></figure>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-18 | Απλή <span class="courier-code">if</span> – επίδομα υπαλλήλου</figcaption><img src="media/ListaKodika-3-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πλεονέκτημα της τελευταίας μορφής είναι ότι η έκφραση <span class="courier-code">sal*30/100</span> υπολογίζεται μόνο μια φορά. Η <span class="courier-code">if</span> μιας γραμμής βοηθάει στη συμπύκνωση του κώδικα και στη μείωση του αριθμού των γραμμών ενός προγράμματος, αλλά συχνά οδηγεί σε όχι και τόσο ευανάγνωστο κώδικα.</p>
			<p>Εκτός από την προηγούμενη περίπτωση σύνθετων εντολών <span class="courier-code">if</span>, η Python επιτρέπει τη δημιουργία απλών εντολών <span class="courier-code">if</span> σε μια γραμμή με την ακόλουθη μορφή:</p>
			<p><span class="courier-code">if συνθήκη: εντολή</span></p>
			<p class="no-indent">όπου ως εντολή μπορεί να δοθεί οποιαδήποτε έγκυρη <i>μη σύνθετη (non-compound)</i> εντολή της γλώσσας, αρκεί αυτή να μην περιέχει άλλες. Η αμέσως επόμενη εντολή, μετά την <span class="courier-code">if</span>, εκτελείται κάθε φορά και ανεξάρτητα από την τιμή της συνθήκης. Η επόμενη εντολή:</p>
			<p><span class="courier-code">if x&lt;0:x*=-1</span></p>
			<p class="no-indent">πάρα πολύ απλά αντιστρέφει το πρόσημο του <span class="courier-code">x</span>, αν αυτό είναι αρνητικό, υπολογίζοντας έτσι, σε μια μόνο γραμμή, την απόλυτη τιμή ενός αριθμού. Αυτός ο τρόπος συγγραφής απλών εντολών <span class="courier-code">if</span>, σε μια γραμμή, είναι μια καλή πρακτική όταν απαιτείται σύμπτυξη του κώδικα, ώστε να εμφανίζονται μόνο πιο σύνθετες δομές, αποκρύπτοντας απλές και εύκολα κατανοητές δομές. </p>
			<p class="no-indent">Στο παρακάτω παράδειγμα, παρουσιάζονται δυο τέτοιες διαδοχικές εντολές <span class="courier-code">if</span>:</p>
			<p><span class="courier-code">if x&gt;maxx: maxx=x</span></p>
			<p><span class="courier-code">if x&lt;minn: minn=x</span></p>
			<p class="no-indent">Σε αυτές τις δυο γραμμές υπολογίζεται αν το <span class="courier-code">x</span> είναι μεγαλύτερο ή μικρότερο από δυο άλλες τιμές. Οι αντίστοιχες απλές <span class="courier-code">if</span> που κάνουν το ίδιο ακριβώς είναι:</p>
			<p><span class="courier-code">if x&gt;maxx: </span></p>
			<p><span class="courier-code">&#9;maxx=x</span></p>
			<p><span class="courier-code">if x&lt;minn: </span></p>
			<p><span class="courier-code">&#9;minn=x</span></p>
			<p class="no-indent">Η ανάμειξη εντολών, πότε με τη μια και πότε με την άλλη μορφή, θα πρέπει, γενικά, να αποφεύγεται, γιατί προκαλεί τεράστιες δυσκολίες τόσο στον έλεγχο και την ανάγνωση, όσο και στην ενημέρωση του κώδικα. Έτσι, η μορφή εντολών:</p>
			<p><span class="courier-code">if temp&lt;0: print(&apos;Έχει παγωνιά&apos;)</span></p>
			<p><span class="courier-code">if temp&gt;35:</span></p>
			<p><span class="courier-code">&#9;print(&apos;Έχει καύσωνα&apos;)</span></p>
			<p class="no-indent">προκαλεί, χωρίς λόγο, αρκετά προβλήματα και θα πρέπει να αποφεύγεται.</p>
		</section>
		<section role="section" id="ch5se17">
			<h1><span role="label">3.17</span> Εμφωλευμένες <span class="courier-code">if</span></h1>
			<p class="no-indent">Κάθε τμήμα της εντολής <span class="courier-code">if</span> μπορεί να περιέχει οποιοδήποτε πλήθος και είδος εντολών. Έτσι, μπορεί να δημιουργηθεί μια δομή με εντολές <span class="courier-code">if</span> που περιέχουν άλλες <span class="courier-code">if</span>. Αυτές οι εντολές <span class="courier-code">if</span> που περιέχονται μέσα σε άλλες ονομάζονται <i>ένθετες</i> ή <i>εμφωλευμένες (nested)</i>. Μια μορφή που μπορεί να έχει μια εμφωλευμένη δομή <span class="courier-code">if</span> είναι: </p>
			<img src="media/img3-17_fmt.png" alt=""/>
			<p class="no-indent">Η ακριβής μορφή σε μια τέτοια δομή καθορίζεται από τις ανάγκες του προγράμματος και υπάρχει απόλυτη ελευθερία για το πώς θα εκφραστεί.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-17</b>: Μια εταιρεία κούριερ τιμολογεί τους πελάτες της σύμφωνα με τις χρεώσεις του παρακάτω πίνακα, ανάλογα με το βάρος του δέματος σε γραμμάρια και τον τρόπο αποστολής του.</p>
			</blockquote>
			
				<table id="table023">
					<tbody>
						<tr>
							<td  rowspan="2">
								<p><b>ΒΑΡΟΣ (gr)</b></p>
							</td>
							<td  colspan="2">
								<p><b>ΧΡΕΩΣΗ ΑΠΟΣΤΟΛΗΣ (€)</b></p>
							</td>
						</tr>
						<tr>
							<td >
								<p><b>ΚΑΝΟΝΙΚΟ</b></p>
							</td>
							<td >
								<p><b>ΕΞΠΡΕΣ</b></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>0-1000</p>
							</td>
							<td >
								<p>3</p>
							</td>
							<td >
								<p>5</p>
							</td>
						</tr>
						<tr>
							<td >
								<p>1001-2000</p>
							</td>
							<td >
								<p>4</p>
							</td>
							<td >
								<p>7</p>
							</td>
						</tr>
						<tr>
							<td >
								<p>2001-4000</p>
							</td>
							<td >
								<p>5</p>
							</td>
							<td >
								<p>9</p>
							</td>
						</tr>
						<tr>
							<td >
								<p>4001-…</p>
							</td>
							<td >
								<p>8</p>
							</td>
							<td >
								<p>12</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Να γράψετε πρόγραμμα που θα δέχεται τον τρόπο αποστολής (κανονικό ή εξπρές) και το βάρος του δέματος, υπολογίζοντας και εμφανίζοντας το ποσό της χρέωσης.</p>
			<p class="no-indent">Η Λίστα Κώδικα 3-19 περιγράφει τη λύση του προβλήματος.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-19 | Εμφωλευμένη <span class="courier-code">if</span> – χρέωση κούριερ</figcaption><img src="media/ListaKodika-3-19_fmt.png" alt=""/></figure>
			<p class="no-indent">Κάνοντας μια δοκιμαστική εκτέλεση του προγράμματος, με βάρος (<span class="courier-code">we</span>) <span class="courier-code">3141</span> και τρόπο αποστολής express (<span class="courier-code">tr</span>), θα εμφανιστούν στην οθόνη:</p>
			<p><span class="courier-code">Δώσε το βάρος:</span><span class="courier-code"><b>3141</b></span></p>
			<p><span class="courier-code">Δώσε τον τρόπο αποστολής (0:κανονικό,1:express):</span><span class="courier-code"><b>1</b></span></p>
			<p><span class="courier-code">Έξοδα αποστολής: 9</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 3-18</b>: Να γράψετε πρόγραμμα που θα διαβάζει έναν αριθμό και θα ελέγχει αν είναι άρτιος ή περιττός. Στην περίπτωση που είναι άρτιος θα εμφανίζει τον αντίστροφό του, ενώ αν είναι περιττός θα εμφανίζει αν είναι θετικός ή αρνητικός.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 3-20 περιέχει τις απαραίτητες εντολές του παραδείγματος.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-20 | Εμφωλευμένη <span class="courier-code">if</span> – άρτιος-περιττός</figcaption><img src="media/ListaKodika-3-20_fmt.png" alt=""/></figure>
			<p class="no-indent">Ακολουθούν δυο δοκιμαστικές εκτελέσεις του προγράμματος. Μια με την τιμή <span class="courier-code">12</span>:</p>
			<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>12</b></span></p>
			<p><span class="courier-code">0.08333333333333333</span></p>
			<p class="no-indent">και μια με το <span class="courier-code">0</span>:</p>
			<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>0</b></span></p>
			<p><span class="courier-code">Αδύνατος υπολογισμός</span></p>
		</section>
		<section role="section" id="ch5se18">
			<h1><span role="label">3.18</span> Μετατροπές</h1>
			<p class="no-indent">Η χρήση των δομών επιλογής για ένα συγκεκριμένο πρόβλημα μπορεί να γίνει με περισσότερους από έναν τρόπους. Κάθε δομή, ανάλογα βέβαια με την περίπτωση, μπορεί να εκφραστεί με διαφορετικό τρόπο. Μια σύνθετη δομή μπορεί εύκολα να μετατραπεί σε μια ισοδύναμη διπλή <span class="courier-code">if</span>. Για παράδειγμα, η επόμενη <span class="courier-code">if</span>, που εμφανίζει αν ένας αριθμός <span class="courier-code">a</span> είναι άρτιος ή περιττός,</p>
			<p><span class="courier-code">if a%2:</span></p>
			<p><span class="courier-code">&#9;print(&apos;Άρτιος&apos;)</span></p>
			<p><span class="courier-code">else:</span></p>
			<p><span class="courier-code">&#9;print(&apos;Περιττός&apos;)</span></p>
			<p class="no-indent">μπορεί να γραφτεί με τη βοήθεια απλών εντολών <span class="courier-code">if</span>:</p>
			<p><span class="courier-code">if a%2:</span></p>
			<p><span class="courier-code">&#9;print(&apos;Άρτιος&apos;)</span></p>
			<p><span class="courier-code">if not a%2:</span></p>
			<p><span class="courier-code">&#9;print(&apos;Περιττός&apos;)</span></p>
			<p class="no-indent">Υπάρχουν περιπτώσεις που η χρήση απλών δομών <span class="courier-code">if</span> είναι αναγκαστική. Το παρακάτω παράδειγμα ελέγχει και υπολογίζει αν ένας αριθμός <span class="courier-code">x</span> είναι μεγαλύτερος ή μικρότερος από δυο άλλους:</p>
			<p><span class="courier-code">if x&gt;mymax:</span></p>
			<p><span class="courier-code">&#9;mymax=x</span></p>
			<p><span class="courier-code">if x&lt;mymin:</span></p>
			<p><span class="courier-code">&#9;mymin=x</span></p>
			<p class="no-indent">Η μετατροπή των απλών <span class="courier-code">if</span> του πιο πάνω τμήματος προγράμματος σε μια σύνθετη <span class="courier-code">if</span> είναι λάθος:</p>
			<p><span class="courier-code">if x&gt;mymax:</span></p>
			<p><span class="courier-code">&#9;mymax=x</span></p>
			<p><span class="courier-code">else:</span></p>
			<p><span class="courier-code">&#9;mymin=x</span></p>
			<p class="no-indent">γιατί συμπεραίνει λανθασμένα ότι αν ο <span class="courier-code">x</span> δεν είναι μεγαλύτερος από το <span class="courier-code">mymax</span> θα είναι οπωσδήποτε μικρότερος από το <span class="courier-code">mymin</span>. Κάτι τέτοιο όμως μπορεί και να μην ισχύει. Ο <span class="courier-code">x</span> μπορεί να βρίσκεται ανάμεσα στους δυο αυτούς αριθμούς.</p>
		</section>
		<section role="section" id="ch5se19">
			<h1><span role="label">3.19</span> Εκσφαλμάτωση</h1>
			<p class="no-indent">Το επόμενο, πιο χρονοβόρο και δύσκολο, βήμα μετά τη συγγραφή ενός προγράμματος είναι η δοκιμή και ο έλεγχος με πραγματικά δεδομένα. Η διαδικασία ελέγχου των εντολών ενός προγράμματος για την εύρεση <i>λαθών (bugs)</i> ονομάζεται <i>εκσφαλμάτωση,</i><i> ή αποσφαλμάτωση (debugging)</i><sup class="superscript CharOverride-1"><span id="footnote-054-backlink"><a href="#footnote-054">40</a></span></sup>. Η Python διαθέτει τους απαραίτητους, για τέτοιου είδους ελέγχους, μηχανισμούς. Επίσης, τα περισσότερα <i>ολοκληρωμένα περιβάλλοντα ανάπτυξης (IDE)</i> διαθέτουν εργαλεία που βοηθούν στη βηματική εκτέλεση των προγραμμάτων, την προβολή των τιμών των μεταβλητών κ.ά.</p>
			<p>Στις επόμενες ενότητες περιγράφονται τρόποι διαχείρισης των εντολών κατά τη συγγραφή αλλά και την εκτέλεσή τους με εντολές όπως η <span class="courier-code">pass</span>, η <span class="courier-code">assert</span> και η <span class="courier-code">try</span>. </p>
			<section role="subsection" id="ch5se19ss1">
				<h1><span role="label">3.19.1</span> Το λεκτικό <span class="courier-code">pass</span></h1>
				<p class="no-indent">Συχνά, κατά τη συγγραφή του κώδικα, είναι αναγκαίο να γραφτούν κάποιες εντολές αρχικά, ώστε να γίνει ο έλεγχός τους και να ολοκληρωθεί η συγγραφή στη συνέχεια. Αν πρέπει, για παράδειγμα, να δοθεί η παρακάτω <span class="courier-code">if</span>:</p>
				<p><span class="courier-code">if x&gt;0:</span></p>
				<p class="no-indent">και δεν είμαστε ακόμη έτοιμοι να γράψουμε τι θα γίνεται σε αυτή την περίπτωση, το σώμα της <span class="courier-code">if</span> δεν μπορεί να μείνει κενό. Μπορεί όμως να γίνει χρήση του λεκτικού <span class="courier-code">pass</span>: </p>
				<p><span class="courier-code">if x&gt;0:</span></p>
				<p><span class="courier-code">&#9;pass</span></p>
				<p class="no-indent">ώστε να μη συμβαίνει τίποτα αν ισχύει η συνθήκη της <span class="courier-code">if</span>, αλλά η εντολή να είναι αποδεκτή από τον διερμηνευτή. </p>
				<p>Μέχρι επομένως να αποφασίσουμε ποιες εντολές θα πρέπει να βάλουμε στην <span class="courier-code">if</span> για να φύγει το <span class="courier-code">pass</span>, το πρόγραμμα θα μπορεί να εκτελείται κανονικά. Αν ισχύει η συνθήκη της <span class="courier-code">if</span>, το πρόγραμμα θα συναντά το <span class="courier-code">pass</span> και δεν θα εκτελεί καμία ενέργεια. Κάτι τέτοιο μπορεί να χρησιμοποιηθεί και σε περιπτώσεις όπου χρειάζεται να ελεγχθεί κάτι και να μη γίνεται καμία ενέργεια αν ισχύει η συνθήκη. Ακολουθεί ένα παράδειγμα: </p>
				<p><span class="courier-code">if a&lt;x&lt;b:</span></p>
				<p><span class="courier-code">&#9;pass</span></p>
				<p><span class="courier-code">else:</span></p>
				<p><span class="courier-code">&#9;print(&apos;</span><span class="courier-code">εκτός ορίων΄)</span></p>
				<p class="no-indent">αντί του:</p>
				<p><span class="courier-code">if not(a&lt;x&lt;b):</span></p>
				<p><span class="courier-code">&#9;print(&apos;εκτός ορίων΄)</span></p>
			</section>
			<section role="subsection" id="ch5se19ss2">
				<h1><span role="label">3.19.2</span> Παραδοχές – <span class="courier-code">assertions</span></h1>
				<p class="no-indent">Κατά τη συγγραφή ενός προγράμματος, είναι τις περισσότερες φορές αναγκαίο να ελεγχθούν πρώτα κάποια τμήματά του, διεξοδικά, με αρκετά δοκιμαστικά δεδομένα, ώστε περαιτέρω ενέργειες να είναι σίγουρο ότι θα εκτελούνται σωστά. Η <i>λέξη κλειδί (keyword)</i> <span class="courier-code">assert</span> επιτρέπει την προσθήκη ενός προσωρινού σημείου ελέγχου μέσα στον κώδικα. Σε αυτό το σημείο ελέγχου, γίνεται μια παραδοχή, μια υπόθεση ή έλεγχος σε μια κατάσταση. Αν η παραδοχή αυτή ισχύει, τότε το πρόγραμμα περνάει το σημείο ελέγχου και συνεχίζει ομαλά την εκτέλεσή του. Αν όμως δεν ισχύει, τότε η εκτέλεσή του διακόπτεται για τον έλεγχο και τις απαραίτητες αλλαγές και διορθώσεις στον κώδικα. Η γενική μορφή της εντολής <span class="courier-code">assert</span> είναι η εξής:</p>
				<p><span class="courier-code">assert συνθήκη</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">assert συνθήκη, μήνυμα</span></p>
				<p class="no-indent">Οι εντολές στη Λίστα Κώδικα 3-21 ξεκινούν την περιγραφή της <span class="courier-code">assert</span> με μια απλή περίπτωση.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-21 | <span class="courier-code">assert</span></figcaption><img src="media/ListaKodika-3-21_fmt.png" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">assert</span> θα ελέγξει αν κάθε δοσμένη τιμή του <span class="courier-code">x</span> ικανοποιεί τον περιορισμό <span class="courier-code">x&gt;=0</span>. Όσο αυτό συμβαίνει, η αμέσως επόμενη εντολή θα εκτελείται (όπως και οι επόμενες, μετά από αυτήν). Κάθε φορά δηλαδή που ικανοποιείται η παραδοχή που τέθηκε, η εκτέλεση θα γίνεται κανονικά. Αν σε κάποια δοκιμαστική εκτέλεση του προγράμματος προκύψει <span class="courier-code">x&lt;0</span>, τότε η εκτέλεση θα τερματιστεί αμέσως μετά το σημείο ελέγχου, εμφανίζοντας το μήνυμα:</p>
				<p><span class="courier-code">AssertionError</span></p>
				<p class="no-indent">και θα πρέπει να γίνουν όλες οι απαραίτητες αλλαγές ή προσθήκες εντολών στον κώδικα, όπως, για παράδειγμα, η τελική προσθήκη ενός ελέγχου <span class="courier-code">if</span> πριν τον υπολογισμό, ή η προσαρμογή των εντολών σε μια δομή <span class="courier-code">try</span> που περιγράφεται αργότερα.</p>
				<p>Η προηγούμενη εντολή θα μπορούσε να περιλαμβάνει και ένα μήνυμα όπως: </p>
				<p><span class="courier-code">assert x&gt;=0, &apos;Προσοχή, δόθηκε αρνητική ποσότητα!&apos;</span></p>
				<p class="no-indent">Στην περίπτωση που η τιμή του <span class="courier-code">x</span> δεν επαληθεύει τον παραπάνω έλεγχο, θα εμφανιστεί το μήνυμα:</p>
				<p><span class="courier-code">AssertionError: Προσοχή, δόθηκε αρνητική ποσότητα!</span></p>
				<p class="no-indent">και θα τερματιστεί η εκτέλεση του προγράμματος.</p>
				<p>Μόλις το τελικό πρόγραμμα είναι έτοιμο, αυτά τα σημεία ελέγχου θα πρέπει να αφαιρούνται ή και να αντικαθίστανται, αν χρειάζεται, με ελέγχους <span class="courier-code">if</span> ή εξαιρέσεις, που περιγράφονται στην επόμενη ενότητα.</p>
			</section>
			<section role="subsection" id="ch5se19ss3">
				<h1><span role="label">3.19.3</span> Διαχείριση εξαιρέσεων – <span class="courier-code">exceptions</span></h1>
				<p class="no-indent">Ένα τελικό πρόγραμμα θα πρέπει να εκτελείται σε κάθε περίπτωση χωρίς καμία εξαίρεση. Για την απρόσκοπτη λειτουργία του θα πρέπει να περάσει από κάθε είδους έλεγχο και να συμπεριληφθούν όλες εκείνες οι περιπτώσεις που θα οδηγούσαν σε <i>σφάλματα κατά την εκτέλεση (runtime errors)</i>. </p>
				<p>Η Python διαθέτει όλες τις απαραίτητες εντολές για τη διαχείριση περιπτώσεων αδυναμίας εκτέλεσης του κώδικα, με τρόπο παρόμοιο με ό,τι γίνεται σε άλλες γλώσσες προγραμματισμού, όπως, για παράδειγμα, στην Java. Η εντολή που μπορεί να διαχειριστεί σφάλματα χρόνου εκτέλεσης, ή αλλιώς <i>εξαιρέσεις</i><i> (exceptions)</i> από την ομαλή εκτέλεση ενός προγράμματος, λέγεται <span class="courier-code">try</span>. Η συνήθης πρακτική είναι η εξής: λίγο προτού εκτελεστούν μια ή περισσότερες εντολές, ως προς τις οποίες υπάρχει αμφιβολία για το κατά ποσό θα μπορούν να εκτελούνται σωστά κάθε φορά, τοποθετείται ένα τμήμα <span class="courier-code">try</span>. Αυτό προετοιμάζει τον διερμηνευτή της γλώσσας, ώστε, μετά την προσπάθειά του να εκτελέσει τις επόμενες εντολές, αν αυτή αποτύχει, να μη διακοπεί η λειτουργία του αλλά να προβεί σε διορθώσεις, όπως εμφάνιση μηνυμάτων, αλλαγή ροής εκτέλεσης, προσθήκη επιπλέον εντολών κ.λπ. Αυτές οι διορθώσεις τοποθετούνται μέσα σε ένα μπλοκ εντολών που ξεκινάει με τη λέξη <span class="courier-code">except</span>. Αν λοιπόν η εντολή ή οι εντολές του τμήματος <span class="courier-code">try</span> αποτύχουν, τότε ο έλεγχος περνά στο τμήμα της <span class="courier-code">except</span>, όπου και εκτελείται η εντολή ή οι εντολές που βρίσκονται εκεί.</p>
				<p>Για ποιο λόγο όμως πρέπει να χρησιμοποιούνται αυτές οι εντολές και πότε; Κατά την εκτέλεση ενός προγράμματος από τον <i>τελικό χρήστη (end user)</i>, πολλά είναι τα προβλήματα που μπορεί να προκύψουν. Από τη διακοπή σύνδεσης σε μια δικτυακή υπηρεσία, με την οποία συνδέεται το πρόγραμμα, μέχρι την αδυναμία ανοίγματος ενός τοπικού αρχείου δεδομένων (είτε γιατί δεν υπάρχει αυτό, είτε γιατί δεν βρίσκεται στον τρέχοντα φάκελο, είτε γιατί δεν υπάρχουν τα απαραίτητα δικαιώματα χειρισμού του), μέχρι τη λανθασμένη εισαγωγή δεδομένων από τον χρήστη και την αδυναμία εκτέλεσης πράξεων (όταν, για παράδειγμα, ενώ θα έπρεπε να εισαχθεί αριθμός, τελικά εισάγεται κείμενο, ή όταν γίνεται διαίρεση με το μηδέν, και πολλά άλλα). Σε κάθε περίπτωση, θα πρέπει να διαφυλάσσεται η απρόσκοπτη λειτουργία του προγράμματος και η αποφυγή πρόκλησης σφαλμάτων κατά την εκτέλεσή του.</p>
				<p>Η γενική μορφή που έχει μια τυπική διαδικασία ελέγχου είναι η ακόλουθη:</p>
				<p><span class="courier-code">try: </span></p>
				<p><span class="courier-code">&#9;εντολή (ή εντολές) Α</span></p>
				<p><span class="courier-code">except:</span></p>
				<p><span class="courier-code">&#9;εντολή (ή εντολές) Β</span></p>
				<p class="no-indent">Αν η εκτέλεση της <span class="courier-code">εντολής Α</span> αποτύχει, τότε θα εκτελεστεί η <span class="courier-code">εντολή Β</span>, ενώ η εκτέλεση του προγράμματος θα συνεχιστεί με ό,τι υπάρχει μετά από αυτές. Αν η <span class="courier-code">εντολή Α</span> εκτελεστεί με επιτυχία, τότε η <span class="courier-code">εντολή Β</span> δεν εκτελείται και συνεχίζεται ομαλά η εκτέλεση του υπόλοιπου προγράμματος.</p>
				<p>Η παραπάνω εντολή ανιχνεύει κάθε είδους εξαίρεση στην ομαλή λειτουργία του προγράμματος. Το τμήμα <span class="courier-code">except</span>, σε αυτή την περίπτωση, το μόνο που μπορεί να περιέχει είναι ίσως κάποιο προειδοποιητικό μήνυμα ότι κάτι πήγε στραβά. Στις περισσότερες όμως περιπτώσεις, για κάθε είδους σφάλμα, θα πρέπει να υπάρχει αντίστοιχος κώδικας που θα το αντιμετωπίζει κατάλληλα, ενώ και τα μηνύματα που θα εμφανίζονται θα πρέπει να είναι σχετικά με αυτό το σφάλμα. </p>
				<p>Έστω το τμήμα προγράμματος της Λίστας Κώδικα 3-22.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-22 | <span class="courier-code">try</span> – ανίχνευση πολλαπλών σφαλμάτων</figcaption><img src="media/ListaKodika-3-22_fmt.png" alt=""/></figure>
				<p class="no-indent">Στις γραμμές 2 έως και 4, γίνεται η εισαγωγή, ο υπολογισμός και η εμφάνιση κάποιων τιμών. Κάποια όμως από αυτές τις εντολές υπάρχει πιθανότητα να μην εκτελεστεί σωστά και να αποτύχει. Αν η <span class="courier-code">input</span> δεχθεί κείμενο αντί για έναν αριθμό, τότε η γραμμή 2 θα αποτύχει, θα εμφανιστεί το μήνυμα της <span class="courier-code">print</span> στη γραμμή 6 και θα συνεχιστεί η εκτέλεση του προγράμματος με τις εντολές που υπάρχουν μετά την <span class="courier-code">try</span>, από τη γραμμή 7 και μετά. Το ίδιο όμως θα συμβεί αν δοθεί ως αριθμός το <span class="courier-code">0</span>. Τότε θα αποτύχει η εκτέλεση της γραμμής 3, ώστε να αποφύγει ο διερμηνευτής να κάνει διαίρεση με το <span class="courier-code">0</span>, αλλά θα εμφανιστεί πάλι το ίδιο μήνυμα. Αν δοκιμάσουμε να τρέξουμε το πρόγραμμα δίνοντας την τιμή <span class="courier-code">2</span>, θα εμφανιστούν:</p>
				<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>2</b></span></p>
				<p><span class="courier-code">0.5</span></p>
				<p><span class="courier-code">Τέλος προγράμματος</span></p>
				<p class="no-indent">Δίνοντας όμως την τιμή <span class="courier-code">0</span>, εμφανίζεται κατάλληλο μήνυμα:</p>
				<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>0</b></span></p>
				<p><span class="courier-code">Δυστυχώς ο υπολογισμός δεν έγινε</span></p>
				<p><span class="courier-code">Τέλος προγράμματος</span></p>
				<p class="no-indent">Η Python διαθέτει έναν αρκετά μεγάλο αριθμό εξαιρέσεων, που μπορεί να διαχειριστεί κανείς εύκολα και ξεχωριστά, με την παρακάτω μορφή της <span class="courier-code">try</span>.</p>
				<p><span class="courier-code">try: </span></p>
				<p><span class="courier-code">&#9;εντολή (ή εντολές) Α</span></p>
				<p><span class="courier-code">except εξαίρεση 1 ή (εξαίρεση 1, εξαίρεση 2…</span><span class="courier-code">):</span></p>
				<p><span class="courier-code">&#9;εντολή (ή εντολές) Β</span></p>
				<p><span class="courier-code">except εξαίρεση 3:</span></p>
				<p><span class="courier-code">&#9;εντολή (ή εντολές) Β</span></p>
				<p class="no-indent">Με αυτόν, τον πιο αναλυτικό, τρόπο, μπορεί να γίνει η διαχείριση συγκεκριμένων σφαλμάτων, παίρνοντας κάθε φορά τις κατάλληλες αποφάσεις και κάνοντας τις απαιτούμενες ενέργειες.</p>
				<p>Το προηγούμενο παράδειγμα θα μπορούσε να γραφτεί πιο λεπτομερειακά, με τον παρακάτω τρόπο.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-23 | <span class="courier-code">try</span> – ανίχνευση πολλαπλών σφαλμάτων ξεχωριστά</figcaption><img src="media/ListaKodika-3-23_fmt.png" alt=""/></figure>
				<p class="no-indent">Με αυτό τον τρόπο, κάθε περίπτωση λάθους αντιμετωπίζεται ξεχωριστά και ο χρήστης είναι πλέον σε θέση να αντιληφθεί τι λάθος έγινε και το πρόγραμμα δεν λειτούργησε όπως θα περίμενε και όπως θα έπρεπε.</p>
				<p>Τέτοιοι έλεγχοι θα μπορούσαν να γίνουν με την προσθήκη κατάλληλων εντολών <span class="courier-code">if</span>. Ωστόσο, η διαχείριση εξαιρέσεων είναι πολύ πιο ισχυρή γιατί μπορεί να συμπεριλάβει και σφάλματα χρόνου εκτέλεσης, που δεν έχουν προβλεφθεί από πριν, αλλά και να ενσωματώσει τα μηνύματα των σφαλμάτων σε μια πολύ πιο προσωποποιημένη πληροφόρηση του τελικού χρήστη, χωρίς να προσθέτει επιπλέον ελέγχους. </p>
				<p>Η εντολή <span class="courier-code">try</span> μπορεί να παγιδεύσει περισσότερα από ένα σφάλματα ταυτόχρονα, αρκεί αυτά να δοθούν μέσα σε μια πλειάδα. Συνεχίζοντας με το προηγούμενο παράδειγμα, η επόμενη μορφή της <span class="courier-code">try</span> δέχεται το μήνυμα ενός σφάλματος που δημιουργείται κατά την εκτέλεση του κώδικα και το αξιοποιεί.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-24 | <span class="courier-code">try</span> – καταγραφή μηνύματος 1</figcaption><img src="media/ListaKodika-3-24_fmt.png" alt=""/></figure>
				<p class="no-indent">Η προσθήκη που έγινε αφορά την πλειάδα σφαλμάτων που παγιδεύει η <span class="courier-code">except</span> και την αποθήκευση του μηνύματος στη μεταβλητή <span class="courier-code">e</span>. Η τιμή του <span class="courier-code">e</span> μπορεί πλέον να χρησιμοποιηθεί σε άλλες εντολές, όπως στην <span class="courier-code">print</span> της γραμμής 6. Το σημαντικό εδώ είναι ότι, αφού εμφανιστεί το μήνυμα σφάλματος, η εκτέλεση δεν διακόπτεται και συνεχίζεται κανονικά από τη γραμμή 7 και μετά, μέχρι που να τελειώσει το πρόγραμμα. Ακολουθεί ένα ακόμη παράδειγμα στη Λίστα Κώδικα 3-25.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-25 | <span class="courier-code">try</span> – καταγραφή μηνύματος 2</figcaption><img src="media/ListaKodika-3-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">except</span> σε αυτή την περίπτωση ανιχνεύει ένα από τα δυο λάθη, <span class="courier-code">ValueError</span> και <span class="courier-code">ZeroDivisionError</span>. Όποιο από τα δυο κι αν εμφανιστεί, θα προκληθεί η αντίστοιχη εξαίρεση, θα εμφανιστεί το κατάλληλο μήνυμα και θα συνεχιστεί η εκτέλεση του προγράμματος. Προσοχή όμως χρειάζεται αν ισχύει <span class="courier-code">x&lt;0</span>. Σε αυτή την περίπτωση, το <span class="courier-code">y</span> δεν θα πάρει καμία τιμή (όπως και το <span class="courier-code">z</span>), αφού θα προκληθεί διακοπή εκτέλεσης του κώδικα που υπάρχει μέχρι το <span class="courier-code">except</span>.</p>
				<p>Η διαχείριση εξαιρέσεων στην Python περιλαμβάνει δυο ακόμα προαιρετικές παραμέτρους που προσθέτουν αρκετή ευελιξία και επιπλέον δυνατότητες στον χειρισμό σφαλμάτων. Η πρώτη παράμετρος είναι το <span class="courier-code">else</span> και μπορεί να συμπεριλάβει κώδικα που θα τρέξει μόνο εφόσον δεν προκύψει κάποιο σφάλμα. Συνηθισμένη περίπτωση χρήσης του <span class="courier-code">else</span> είναι στη διαχείριση αρχείων. Αν δεν προκύψει κάποιο σφάλμα κατά το άνοιγμα ενός αρχείου, μόνο τότε θα επιτραπεί η πρόσβαση σε αυτό (για ανάγνωση ή εγγραφή). Η διαχείριση αρχείων περιγράφεται στο Κεφάλαιο 12. Ακολουθεί ένα απλό παράδειγμα εύρεσης της ποσότητας 1<span class="math-font">/</span><i>x</i>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-26 | <span class="courier-code">try</span> – χρήση του <span class="courier-code">else</span></figcaption><img src="media/ListaKodika-3-26_fmt.png" alt=""/></figure>
				<p class="no-indent">Αν <span class="courier-code">x=0</span>, τότε θα εμφανιστεί το μήνυμα της γραμμής 4, η εμφάνιση του αποτελέσματος στη γραμμή 6 δεν θα γίνει και η εκτέλεση θα συνεχιστεί από τη γραμμή 7 και μετά. Αυτό είναι ιδιαίτερα βολικό γιατί η μεταβλητή <span class="courier-code">y</span> δεν θα έχει πάρει τιμή, ώστε να προκληθεί ένα ακόμη σφάλμα. Αν όμως ο υπολογισμός του 1<span class="math-font">/</span><i>x</i> γίνει κανονικά, τότε η εντολή του τμήματος <span class="courier-code">else</span> θα εκτελεστεί κανονικά και θα εμφανιστεί το αποτέλεσμα (γραμμή 6). Η λειτουργία του τμήματος <span class="courier-code">else</span> επιτρέπει την εκτέλεση εντολών μετά τον έλεγχο ύπαρξης σφαλμάτων και εφόσον δεν έχει εμφανιστεί κανένα.</p>
				<p>Η δεύτερη προαιρετική παράμετρος ονομάζεται <span class="courier-code">finally</span>. Με την προσθήκη της είναι δυνατό να γραφτεί κώδικας ο οποίος θα εκτελείται πάντα, άσχετα με τον αν παρουσιάστηκε κάποιο σφάλμα ή όχι. Η πιο συχνή χρήση του είναι σε περιπτώσεις διαχείρισης αρχείων. Μετά το άνοιγμα ενός αρχείου και μετά τον επιτυχή χειρισμό του ή την εμφάνιση κάποιου σφάλματος, το αρχείο θα πρέπει να κλείσει. Άλλη περίπτωση έχει να κάνει με την απομακρυσμένη σύνδεση, π.χ. με κάποιον ftp server, όπου άσχετα με το αν συμβεί σφάλμα ή όχι, η σύνδεση θα πρέπει στο τέλος να διακοπεί ομαλά.</p>
				<p>Ακολουθεί ένα παράδειγμα χρήσης της παραμέτρου <span class="courier-code">finally</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 3-27 | <span class="courier-code">try</span> – χρήση του <span class="courier-code">finally</span></figcaption><img src="media/ListaKodika-3-27_fmt.png" alt=""/></figure>
				<p class="no-indent">Η μεταβλητή <span class="courier-code">mo</span> αποκτά ως τιμή είτε το αποτέλεσμα της πράξης στη γραμμή 2, είτε το κείμενο <span class="courier-code">&apos;Απροσδιόριστο&apos;</span> αν προκληθεί κάποιο σφάλμα. Η εντολή <span class="courier-code">print</span> όμως, στη γραμμή 6, στο τμήμα <span class="courier-code">finally</span>, θα τρέξει κανονικά και σε κάθε περίπτωση. Αν το <i>n</i> έχει τιμή <span class="courier-code">0</span>, θα εμφανιστεί στην οθόνη: </p>
				<p><span class="courier-code">Απροσδιόριστο</span></p>
				<p><span class="courier-code">...το πρόγραμμα συνεχίζεται...</span></p>
			</section>
		</section>
		<section role="section" id="ch5se20" data-featured="chapter-review">
			<h1><span role="label">3.20</span> Περίληψη</h1>
			<p class="no-indent">Σε αυτό το κεφάλαιο έγινε περιγραφή της λειτουργίας των λογικών σταθερών και των συγκριτικών και λογικών τελεστών της Python, για την πραγματοποίηση λογικών ελέγχων και τη χρήση δομών επιλογών. Δόθηκε ο τρόπος που λειτουργούν απλές και σύνθετες λογικές εκφράσεις, με τη χρήση των τελεστών της γλώσσας, και οι αναγωγές τύπων στις περιπτώσεις λογικών ελέγχων. Έγινε ανάλυση της αλυσιδωτής σύγκρισης, του τελεστή ταυτότητας και της εναλλακτικής εκχώρησης. Παρουσιάστηκε η λειτουργία και η μορφή που μπορεί να έχει μια εντολή επιλογής όπως η <span class="courier-code">if</span>, καθώς και οι περιπτώσεις όπου είναι απαραίτητη. Τέλος, έγινε αναφορά στα σφάλματα χρόνου εκτέλεσης και πώς αντιμετωπίζονται με τον μηχανισμό παγίδευσης σφαλμάτων που διαθέτει η Python.</p>
			
		</section>
		<section role="section" id="ch5se21"  data-featured="chapter-questions">
			<h1><span role="label">3.21</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol>
			<li>Τι είναι ο τύπος Boolean; Τι αντιπροσωπεύει; Πώς χρησιμοποιείται;</li>
			<li>Ποια είδη τελεστών γνωρίζετε;</li>
			<li>Τι είναι η αλυσιδωτή σύγκριση και η εναλλακτική εκχώρηση; </li>
			<li>Ποια η χρησιμότητα των λογικών τελεστών; Πότε χρησιμοποιούνται; </li>
			<li>Τι ονομάζεται «βραχυκύκλωμα» και πώς λειτουργεί σε σύνθετες λογικές εκφράσεις;</li>
			<li>Ποια είναι η ιεραρχία τελεστών;</li>
			<li>Ποια είναι η λειτουργία και πότε χρησιμοποιείται ο τελεστής ταυτότητας;</li>
			<li>Ποια είναι τα δυο στοιχεία που πρέπει να διαθέτει ένα μπλοκ εντολών;</li>
			<li>Τι μπορεί να περιέχει μια σύνθετη λογική έκφραση;</li>
			<li>Τι είναι η αναγωγή τύπων; Πότε και πώς χρησιμοποιείται; </li>
			<li>Πόσες εντολές επιλογής έχει η Python;</li>
			<li>Ποια είναι η λειτουργία της <span class="courier-code">assert</span>;</li>
			<li>Τι είναι οι εξαιρέσεις; Πώς αντιμετωπίζονται;</li>
		</ol>
			
		</section>
		<section role="section" id="ch5se22"  data-featured="chapter-assess">
			<h1><span role="label">3.22</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Σε έναν διαγωνισμό η βαθμολόγηση του υποψηφίου γίνεται σε τρία μαθήματα, με βαθμούς από 0 έως και 100. Κάθε υποψήφιος θεωρείται επιτυχών αν έχει συγκεντρώσει βαθμολογία σε κάθε μάθημα από 50 και πάνω ή αν ο μέσος όρος του είναι πάνω από 75. Να γράψετε πρόγραμμα που θα δέχεται τους τρεις βαθμούς και θα εμφανίζει μήνυμα αν ο υποψήφιος πέτυχε ή όχι.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό και θα εμφανίζει αν είναι θετικός, αρνητικός ή μηδέν, καθώς και ακέραιος ή πραγματικός.</li>
			<li>Ένα πάρκινγκ χρεώνει τους πελάτες του για τις πρώτες 2 ώρες 5€ και για κάθε επόμενη ώρα 1.5€ επιπλέον. Να γράψετε πρόγραμμα που θα δέχεται τον χρόνο παραμονής του οχήματος και θα εμφανίζει το ποσό που πρέπει να πληρωθεί.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τους συντελεστές μιας δευτεροβάθμιας εξίσωσης και θα εμφανίζει τις λύσεις (αν υπάρχουν).</li>
			<li>Μια εταιρεία κινητής τηλεφωνίας χρεώνει τους συνδρομητές της σύμφωνα με τα στοιχεία του παρακάτω πίνακα.
			
				<table id="table024">
					<tbody>
						<tr>
							<td>
								<p><b>ΧΡΟΝΟΣ ΟΜΙΛΙΑΣ</b></p>
								<p><b>ΛΕΠΤΑ</b></p>
							</td>
							<td>
								<p><b>ΧΡΕΩΣΗ/ΛΕΠΤΟ</b></p>
							</td>
							<td>
								<p><b>SMS</b></p>
							</td>
							<td>
								<p><b>ΧΡΕΩΣΗ</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>0-60</p>
							</td>
							<td>
								<p>0.03</p>
							</td>
							<td>
								<p>0-100</p>
							</td>
							<td>
								<p>5</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>61-120</p>
							</td>
							<td>
								<p>0.025</p>
							</td>
							<td>
								<p>101-200</p>
							</td>
							<td>
								<p>10</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>121-…</p>
							</td>
							<td>
								<p>0.018</p>
							</td>
							<td>
								<p>201-…</p>
							</td>
							<td>
								<p>15</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Πάγιο: 5€ - ΦΠΑ: 24% επιπλέον</p>
			<p class="no-indent">Οι πιο πάνω χρεώσεις επιβαρύνονται με 24% ΦΠΑ. Να γράψετε πρόγραμμα που θα δέχεται τα λεπτά ομιλίας και το πλήθος των μηνυμάτων ενός πελάτη, εμφανίζοντας το ποσό που πρέπει ο πελάτης να πληρώσει.</p>
			</li>
			<li>Σε μια επιχείρηση δίνεται στους υπαλλήλους επίδομα σύμφωνα με τα στοιχεία του παρακάτω πίνακα.
			
				<table id="table025">
					<tbody>
						<tr>
							<td>
								<p><b>ΕΠΙΠΕΔΟ ΕΚΠΑΙΔΕΥΣΗΣ</b></p>
							</td>
							<td>
								<p><b>ΕΤΗ ΥΠΗΡΕΣΙΑΣ</b></p>
							</td>
							<td>
								<p><b>ΕΠΙΔΟΜΑ</b></p>
							</td>
						</tr>
						<tr>
							<td rowspan="2">
								<p>ΠΡΩΤΟΒΑΘΜΙΑ</p>
							</td>
							<td>
								<p>0-15</p>
							</td>
							<td>
								<p>–</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>16-…</p>
							</td>
							<td>
								<p>100</p>
							</td>
						</tr>
						<tr>
							<td rowspan="2">
								<p>ΔΕΥΤΕΡΟΒΑΘΜΙΑ</p>
							</td>
							<td>
								<p>0-15</p>
							</td>
							<td>
								<p>40</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>16-…</p>
							</td>
							<td>
								<p>140</p>
							</td>
						</tr>
						<tr>
							<td rowspan="2">
								<p>ΤΡΙΤΟΒΑΘΜΙΑ</p>
							</td>
							<td>
								<p>0-10</p>
							</td>
							<td>
								<p>80</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>11-…</p>
							</td>
							<td>
								<p>200</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Να γράψετε πρόγραμμα που θα διαβάζει τον τύπο εκπαίδευσης (ΠΕ, ΔΕ και ΤΕ) και τα έτη υπηρεσίας, εμφανίζοντας το ποσό του επιδόματος.</p>
			</li>
			<li>Η φορολογία εισοδήματος φυσικών προσώπων ακολουθεί την κλίμακα του παρακάτω πίνακα.
			
				<table id="table026">
					<tbody>
						<tr>
							<td>
								<p><b>ΕΙΣΟΔΗΜΑ</b></p>
							</td>
							<td>
								<p><b>ΠΟΣΟ ΦΟΡΟΥ</b></p>
							</td>
							<td>
								<p><b>ΣΥΝΤΕΛΕΣΤΗΣ ΚΛΙΜΑΚΑΣ</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>0-5,000</p>
							</td>
							<td>
								<p>0 ή 750</p>
							</td>
							<td>
								<p>0% ή 15%</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>5,001-12,000</p>
							</td>
							<td>
								<p>1,050</p>
							</td>
							<td>
								<p>15%</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>12,001-30,000</p>
							</td>
							<td>
								<p>4,500</p>
							</td>
							<td>
								<p>25%</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>30,001-…</p>
							</td>
							<td>
							</td>
							<td>
								<p>35%</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Για να δικαιούται ένας φορολογούμενος το αφορολόγητο της 1ης κλίμακας, θα πρέπει να έχει κάνει ηλεκτρονικές αγορές μεγαλύτερες από το 15% του εισοδήματός του. Να γράψετε πρόγραμμα που θα δέχεται το ποσό του εισοδήματος και το ποσό των ηλεκτρονικών αγορών που πραγματοποίησε, εμφανίζοντας το ποσό του φόρου που του αναλογεί.</p>
			</li>
			<li>Μια εταιρεία παράγει και πουλάει δυο κατηγορίες υφασμάτων: τύπου Α, με 0,2, και τύπου Β, με 0,4€/μέτρο. Για παραγγελίες ποσότητας μέχρι 300 μέτρα ή αξίας μέχρι 100€, δίνει έκπτωση 5%, ενώ για μεγαλύτερες ποσότητες ή αξία δίνει έκπτωση 15%. Να γράψετε πρόγραμμα που θα δέχεται τις ποσότητες αγοράς από τα δυο είδη υφασμάτων και θα εμφανίζει το τελικό πληρωτέο ποσό.</li>
			<li>Η μέτρηση της ποιότητας ενός παραγόμενου προϊόντος γίνεται με τρεις δείκτες, με τιμές από 0 έως και 10. Η ποιότητα εκτιμάται ως «άριστη», αν και οι τρεις δείκτες είναι πάνω από 7, «ικανοποιητική», αν τουλάχιστον δυο δείκτες είναι πάνω από 6 και «μη αποδεκτή» αν ο μέσος όρος είναι κάτω από 5 ή αν έστω και ένας είναι 0. Σε κάθε άλλη περίπτωση η ποιότητα θεωρείται «αποδεκτή». Να γράψετε πρόγραμμα που θα δέχεται τις τρεις τιμές και θα εμφανίζει κατάλληλο μήνυμα.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τρεις αριθμούς και θα τους εμφανίζει σε φθίνουσα διάταξη (<b>ΣΗΜΕΙΩΣΗ</b>: να μη χρησιμοποιηθεί λίστα ή κάποια άλλη δομή, αλλά μόνο απλές αριθμητικές μεταβλητές).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τρεις αριθμούς, εμφανίζοντας τον μεγαλύτερο και τον μικρότερο, χωρίς τη χρήση έτοιμων συναρτήσεων της Python.</li>
			<li>Ένας εργαζόμενος αμείβεται με μηνιαίο μισθό και με 10€/ώρα για κάθε ώρα υπερωρίας μέχρι τις 15 ώρες και 12€/ώρα για περισσότερες από 15 ώρες. Έχει 15% κρατήσεις για ασφάλεια και μετά από αυτές παρακρατείται φόρος 20%. Να γράψετε πρόγραμμα που θα δέχεται τον μηνιαίο μισθό και τις ώρες υπερωρίας, εμφανίζοντας τις κρατήσεις και το τελικό πληρωτέο ποσό.</li>
			<li>Σε ένα εργαστήριο γίνονται αναλύσεις μιας ουσίας. Η πυκνότητά της καθορίζεται ανάλογα με τις στροφές λειτουργίας του αντιδραστήρα, σύμφωνα με τον παρακάτω πίνακα.
			
				<table id="table027">
					
						
						
					
					<tbody>
						<tr>
							<td>
								<p><b>ΣΤΡΟΦΕΣ/ΛΕΠΤΟ</b></p>
							</td>
							<td>
								<p><b>ΠΥΚΝΟΤΗΤΑ</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>0-800</p>
							</td>
							<td>
								<p>0.1</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>801-1,800</p>
							</td>
							<td>
								<p>0.3</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>1,801-2,500</p>
							</td>
							<td>
								<p>0.5</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>2,501-… </p>
							</td>
							<td>
								<p>0.7</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Να γράψετε πρόγραμμα που θα δέχεται τις στροφές λειτουργίας του αντιδραστήρα για την ανάλυση μιας ουσίας, θα υπολογίζει και θα εμφανίζει την πυκνότητα της ουσίας.</p>
			</li>
			<li>Ένας μαθητής περνάει ένα μάθημα αν έχει σε αυτό άθροισμα τριών βαθμών (δυο προφορικοί και ένας γραπτός) πάνω από 27 ή αν έχει γενικό μέσο όρο μεγαλύτερο από 13. Διαφορετικά, θεωρείται μετεξεταστέος. Να γράψετε πρόγραμμα που θα δέχεται τους τρεις βαθμούς και τον γενικό μέσο όρο του, εμφανίζοντας κατάλληλο μήνυμα.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τα μήκη των πλευρών ενός τριγώνου και θα εμφανίζει αν είναι ισόπλευρο (και οι τρεις πλευρές ίσες), ισοσκελές (δυο πλευρές ίσες) ή σκαληνό (καμία πλευρά ίση με κάποια άλλη).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τον αριθμό ενός μήνα και θα εμφανίζει την εποχή.</li>
			<li>Στις επόμενες εκλογές ένας πολίτης υποχρεούται να ψηφίσει αν είναι από 17 ετών και πάνω, ενώ αν είναι πάνω από 75 δεν είναι υποχρεωτικό να ψηφίσει. Να γράψετε πρόγραμμα που θα δέχεται την ηλικία ενός ψηφοφόρου και θα εμφανίζει κατάλληλο μήνυμα για το αν μπορεί ή αν πρέπει να ψηφίσει ή αν δεν είναι υποχρεωτικό κάτι τέτοιο.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται ένα έτος και θα εμφανίζει αν είναι δίσεκτο ή όχι. Για να είναι ένα έτος δίσεκτο, θα πρέπει να διαιρείται ακριβώς με το 4 και όχι με το 100, εκτός και αν διαιρείται με το 400.</li>
			<li>Ένας αριθμός είναι αριθμός Armstrong αν ισούται με το άθροισμα των ψηφίων του υψωμένων σε δύναμη σύμφωνα με το πλήθος τους. Να γράψετε πρόγραμμα που θα δέχεται έναν τριψήφιο αριθμό και θα εμφανίζει αν είναι αριθμός Armstrong.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τρεις αριθμούς και θα εμφανίζει τους δύο μεγαλύτερους.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τις συντεταγμένες (από 1 έως 8) για τη βασίλισσα και άλλο ένα πιόνι σε μια σκακιέρα, εμφανίζοντας αν το πιόνι απειλείται από τη βασίλισσα (αν είναι στην ίδια γραμμή, στήλη ή διαγώνιο με αυτήν).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τις συντεταγμένες (από 1 έως 8) από δυο σημεία σε μια σκακιέρα και θα εμφανίζει αν ένας πύργος μπορεί να μετακινηθεί από την 1η θέση στη 2η.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τις συντεταγμένες (από 1 έως 8) σε μια σκακιέρα για δυο σημεία και θα εμφανίζει το μήνυμα «Ίδιο χρώμα» ή «Διαφορετικό χρώμα», ανάλογα με το χρώμα στο οποίο αντιστοιχούν.</li>
			<li>Μια σοκολάτα αποτελείται από <i>μ</i><span class="math-font">×</span><i>ν</i> τετράγωνα κομμάτια. Να γράψετε πρόγραμμα που δέχεται αυτούς τους αριθμούς και έναν αριθμό <i>λ</i>, εμφανίζοντας αν μπορεί η σοκολάτα να σπάσει στη μέση, μοιράζοντας <i>λ</i> κομμάτια.</li>
			<li> Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό και θα εμφανίζει μήνυμα αν είναι πολλαπλάσιο του 3, του 5 ή του 7.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό, ένα σύμβολο από τα ‘+-*/’ και έναν δεύτερο αριθμό και θα πραγματοποιεί την αντίστοιχη πράξη, εμφανίζοντας στο τέλος το αποτέλεσμα.</li>
			<li>Δίνονται δυο αριθμοί. Να γράψετε πρόγραμμα που θα εμφανίζει ποιος από τους δυο είναι πιο κοντά στο μηδέν. Θεωρήστε ότι οι αριθμοί μπορεί να έχουν οποιαδήποτε τιμή.</li>
			<li>Στο τυχερό παιχνίδι ζαριών («κόκαλα»), ο παίκτης κερδίζει αν φέρει 7 ή 11, χάνει αν φέρει 2, 3, ή 12 και παίρνει πόντο με 4, 5, 6, 8, 9 ή 10. Να γράψετε πρόγραμμα που θα δέχεται την τιμή κάθε ζαριού και θα εμφανίζει αντίστοιχο μήνυμα.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τις γωνίες ενός τριγώνου και θα εμφανίζει αν είναι έγκυρος ο αριθμός τους.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν τυχαίο αριθμό από το 0 μέχρι το 36 ως αποτέλεσμα του παιχνιδιού της ρουλέτας και θα εμφανίζει το χρώμα του ως εξής:
			<ul><li>Πράσινο αν είναι 0</li>
			<li>Κόκκινο αν είναι μονός αριθμός στα διαστήματα 1-10 και 19-28 και ζυγός στα διαστήματα 11-18 και 29-36 και</li>
			<li>Μαύρο αν είναι ζυγός στα διαστήματα 1-10 και 19-28 και μονός στα διαστήματα 11-18 και 29-36.</li>
			</ul>
			</li>
			<li>Στο παιχνίδι Blackjack ένας παίκτης «καίγεται» αν έχει πάνω από 21 πόντους, ενώ πρέπει να τραβήξει νέο φύλλο αν έχει λιγότερους από 17 πόντους. Αν έχει 21 κερδίζει. Να γράψετε πρόγραμμα για το παιχνίδι με έναν παίκτη, με αντίπαλο τον υπολογιστή. Το πρόγραμμα θα δημιουργεί δύο τυχαίους αριθμούς από το 1 μέχρι το 21. Ο 1ος θα αντιστοιχεί στον υπολογιστή και ο 2ος στον παίκτη. Το πρόγραμμα θα αποφασίζει: 
			<ul><li>Αν έχασε ο παίκτης (έχει λιγότερους πόντους από τον υπολογιστή ή «κάηκε»)</li>
			<li>Αν κέρδισε ο παίκτης (έχει περισσότερους πόντους από τον υπολογιστή ή έχει 21)</li>
			<li>Αν ο παίκτης πρέπει να ξαναπαίξει, οπότε θα «τραβάει» στην τύχη έναν ακόμη τυχαίο αριθμό μεταξύ 1 και 10 και θα αποφασίζει αν κέρδισε ή αν έχασε και πόσους πόντους είχε.</li>
			</ul>
			</li>
			<li>Να γράψετε πρόγραμμα για την παραλλαγή παιχνιδιού Πέτρα-Ψαλίδι-Χαρτί-Σαύρα-Σποκ<sup class="superscript CharOverride-1"><span id="footnote-053-backlink"><a href="#footnote-053">41</a></span></sup>. Οι κανόνες είναι:
			<ul><li>Το ψαλίδι κόβει το χαρτί.</li>
			<li>Το χαρτί τυλίγει την πέτρα.</li>
			<li>Η πέτρα συνθλίβει τη σαύρα.</li>
			<li>Η σαύρα δηλητηριάζει τον Σποκ.</li>
			<li>Το ψαλίδι αποκεφαλίζει τη σαύρα.</li>
			<li>Η σαύρα τρώει το χαρτί.</li>
			<li>Ο Σποκ σπάει το ψαλίδι.</li>
			<li>Το χαρτί απορρίπτει τον Σποκ.</li>
			<li>Ο Σποκ εξαϋλώνει την πέτρα.</li>
			<li>Η πέτρα συνθλίβει το ψαλίδι.</li></ul>
			</li>
			<li>Στο κέντρο της πόλης επιτρέπεται η κυκλοφορία οχημάτων με μονό αριθμό κυκλοφορίας τους ζυγούς μήνες και το ανάποδο. Να γράψετε πρόγραμμα που θα δέχεται τον αριθμό του οχήματος και τον αριθμό του μήνα, εμφανίζοντας κατάλληλο μήνυμα.</li>
			<li>Να γράψετε πρόγραμμα που θα υπολογίζει τη συνάρτηση <i>f</i><span class="math-font">(</span><i>x</i>, <i>y</i><span class="math-font">)</span> για διάφορες τιμές των <i>x</i> και <i>y</i> που δίνονται από τον χρήστη. Η συνάρτηση <i>f</i><span class="math-font">(</span><i>x</i>, <i>y</i><span class="math-font">) </span>είναι:</li>
			</ol>
			<img src="media/exercise-34_fmt.png" alt=""/>
		</section>
	</section>
	<section role="chapter" id="ch6">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 4</span> Δομές Επανάληψης</h1>
		<section role="section" id="ch6se1">
			<h1><span role="label">4.1</span> Εισαγωγή</h1>
			<img src="media/chapter_4_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Η περιγραφή των δομών λήψης αποφάσεων και των βασικών στοιχείων της Python για την πραγματοποίηση</i><i> υπολογισμών επέτρεψε τη δημιουργία προγραμμάτων που επιλύουν σύνθετα προβλήματα. Το επόμενο τμήμα,</i><i> που περιγράφει τις επαναληπτικές δομές, έρχεται να συμπληρώσει τις βασικές δομές της γλώσσας. Έχει</i><i> να κάνει με τη διαχείριση μεγάλου όγκου δεδομένων και με τη δυνατότητα να χειριζόμαστε επαναληπτικά αυτά τα δεδομένα αλλά</i><i> και τις δομές απόφασης για την επίλυση ακόμα πιο σύνθετων προβλημάτων. Σε αυτό το κεφάλαιο γίνεται περιγραφή των </i><i>εντολών επανάληψης της Python, καθώς και μια πρώτη γνωριμία με ένα βασικό στοιχείο της γλώσσας, τη λίστα</i><i>. Παρουσιάζονται μερικές βασικές, έτοιμες συναρτήσεις που συνοδεύουν συνήθως τις εντολές επανάληψης και εισάγονται</i><i> ιδιαίτερα στοιχεία της γλώσσας για τον χειρισμό δεδομένων. Μετά τη μελέτη αυτού του κεφαλαίου, </i><i>ο αναγνώστης θα είναι σε θέση να δημιουργεί προγράμματα για να χειρίζεται πολλά δεδομένα, άγνωστα σε πλήθος, πολλές φορές</i><i>, κατά τη συγγραφή του προγράμματος, και να παίρνει πολλές και διαφορετικές, ίσως, κάθε φορά</i><i> αποφάσεις κατά την εκτέλεσή τους. Αυτές οι επαναληπτικές δομές αποτελούν, μαζί με τις δομές της ακολουθίας και της επιλογής</i><i>, τα βασικά δομικά στοιχεία του διαδικαστικού προγραμματιστικού μοντέλου που υλοποιεί η Python.</i></p>
		</section>
		<section role="section" id="ch6se2">
			<h1><span role="label">4.2</span> Η συνάρτηση <span class="courier-code">range</span></h1>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">range</span> είναι μια <i>ενσωματωμένη (built-in)</i> στην Python συνάρτηση, που χρησιμοποιείται για την παραγωγή ακολουθίας τιμών. Η γενική μορφή της είναι:</p>
			<p><span class="courier-code">range(αρχή, τέλος</span><span class="courier-code">, βήμα)</span></p>
			<p class="no-indent">όπου η παράμετρος <span class="courier-code">αρχή</span> δηλώνει το σημείο έναρξης της παραγόμενης ακολουθίας τιμών, η παράμετρος <span class="courier-code">τέλος</span> δηλώνει την επόμενη τιμή μετά το τελευταίο στοιχείο της ακολουθίας και το <span class="courier-code">βήμα</span> εκφράζει τη διαφορά κάθε τιμής από την προηγούμενή της. Η 1η και η 3η παράμετρος είναι προαιρετικές, δεν χρειάζεται να ορίζονται κάθε φορά. Αυτό εξαρτάται από τη μορφή της ακολουθίας τιμών που πρέπει να δημιουργηθεί. Χρησιμοποιώντας ένα μόνο όρισμα στη <span class="courier-code">range</span>, η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; range(10)</span></p>
			<p><span class="courier-code">range(0, 10)</span></p>
			<p class="no-indent">δημιουργεί ένα αντικείμενο ακολουθίας αριθμών από το 0 μέχρι, αλλά χωρίς, το 10. Επειδή όμως η ακολουθία αυτή είναι ένα αντικείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; type(range(10))</span></p>
			<p><span class="courier-code">&lt;class &apos;range&apos;&gt;</span></p>
			<p class="no-indent">η εμφάνισή της στην οθόνη δεν μπορεί να γίνει δίνοντας απλά το όνομά της στην κονσόλα, ή τοποθετώντας τη μέσα σε μια εντολή <span class="courier-code">print</span>, όπως στην παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(range(10))</span></p>
			<p><span class="courier-code">range(0, 10)</span></p>
			<p class="no-indent">όπου επιστρέφεται το αντικείμενο <span class="courier-code">range</span> και όχι το περιεχόμενό του.</p>
			<p>Μπορεί, ωστόσο, να εμφανιστεί αυτή η ακολουθία μέσω της λειτουργίας <i>ξετυλίγματος (unpacking)</i> των τιμών της, με τη χρήση του αστερίσκου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(*range(10))</span></p>
			<p><span class="courier-code">0 1 2 3 4 5 6 7 8 9</span></p>
			<p class="no-indent">Συνήθως όμως ενσωματώνεται σε άλλες εντολές ή συναρτήσεις, όπως χρησιμοποιείται στην παρακάτω περίπτωση με τη συνάρτηση <span class="courier-code">list</span>, για τη δημιουργία μιας νέας λίστας τιμών: </p>
			<p><span class="courier-code">&gt;&gt;&gt; list(range(5))</span></p>
			<p><span class="courier-code">[0, 1, 2, 3, 4] </span></p>
			<p class="no-indent">που εμφανίζεται στην κονσόλα, ή μέσω εντολών εκχώρησης: </p>
			<p><span class="courier-code">&gt;&gt;&gt; </span><span class="courier-code">b=list(range(10))</span></p>
			<p class="no-indent">όπου το περιεχόμενο της λίστας <span class="courier-code">b</span> θα είναι η ακολουθία τιμών που παράγει η <span class="courier-code">range</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></p>
			<p class="no-indent">με τιμές από το 0 μέχρι το 9.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Η <i>λίστα (list)</i>, μια από τις πλέον σημαντικές, λόγω της χρησιμότητάς της, δομές της Python, είναι ένα αντικείμενο που μπορεί να περιέχει σειρά άλλων αντικειμένων και περιγράφεται αναλυτικά στο Κεφάλαιο 5. Η πρόσβαση στα στοιχεία της γίνεται με τη βοήθεια ενός αριθμού-<i>δείκτη (index)</i>, που δηλώνει τη θέση στην οποία αποθηκεύεται ένα στοιχείο, μια τιμή της λίστας. Ο δείκτης τοποθετείται σε αγκύλες μετά το όνομα της λίστας. Στη συνέχεια του κεφαλαίου θα γίνει συχνή αναφορά στις λίστες, τα στοιχεία των οποίων, συνήθως, υφίστανται επεξεργασία μέσα σε επαναληπτικές δομές.</p>
			</aside>
			<p class="no-indent">Το σημείο έναρξης, αν δεν ορίζεται κάτι διαφορετικό, είναι πάντα το 0, ενώ το όρισμα της <span class="courier-code">range</span> καθορίζει τον τελευταίο ακέραιο αριθμό της ακολουθίας, στο παράδειγμα το 9 (το 10 δεν συμπεριλαμβάνεται σε αυτήν). Εάν απαιτείται η έναρξη της σειράς τιμών να γίνεται από κάποια άλλη τιμή, εκτός του 0, τότε πρέπει να χρησιμοποιηθούν δυο ορίσματα στη <span class="courier-code">range</span>, όπου το 1ο όρισμα καθορίζει τον πρώτο αριθμό και το 2ο τον τελευταίο. Δίνοντας για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list(range(-5,5))</span></p>
			<p class="no-indent">δημιουργείται η σειρά αριθμών από το –5 μέχρι και το 4 (το 5 δεν συμπεριλαμβάνεται στην ακολουθία):</p>
			<p><span class="courier-code">[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]</span></p>
			<p class="no-indent">Για τη δημιουργία τέτοιων, συνεχόμενων, ακέραιων τιμών το βήμα από τον ένα αριθμό στον άλλο είναι <span class="courier-code">1</span>, εκτός αν δοθεί κάτι διαφορετικό, όπως η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list(range(5,51,5))</span></p>
			<p><span class="courier-code">[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]</span></p>
			<p class="no-indent">που δέχεται τρία ορίσματα και δημιουργεί μια σειρά αριθμών με τα πολλαπλάσια του 5, ξεκινώντας από το 5 και φτάνοντας μέχρι και το 50. Το 1ο όρισμα είναι το σημείο έναρξης, το 2ο το σημείο τερματισμού και το 3ο το βήμα της ακολουθίας για τη μετάβαση από τον ένα αριθμό στον επόμενό του. </p>
			<p>Το πλήθος των αριθμών που παράγει η <span class="courier-code">range</span> περιορίζεται μόνο από τη διαθέσιμη μνήμη του υπολογιστή και αφορά μόνο ακέραιους αριθμούς. Αν πρέπει να δημιουργηθούν ακολουθίες με πραγματικούς αριθμούς, θα πρέπει αυτό να γίνει με άλλο τρόπο. Η παρακάτω εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; [</span><span class="courier-code">x/10 for x in range(-3,4)]</span></p>
			<p><span class="courier-code">[-0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3]</span></p>
			<p class="no-indent">δημιουργεί μια σειρά τιμών από το –3 μέχρι και το 3, αλλά διαιρεί καθεμιά από αυτές με το 10, δίνοντας τελικά πραγματικές τιμές ως αποτέλεσμα. Η προηγούμενη μορφή λέγεται <i>σύνθεση λίστας (list comprehension)</i> και περιγράφεται αναλυτικά, στο Κεφάλαιο 5 με τις λίστες.</p>
		</section>
		<section role="section" id="ch6se3">
			<h1><span role="label">4.3</span> Ο τελεστής <span class="courier-code">in</span></h1>
			<p class="no-indent">Ο τελεστής ελέγχου ιδιότητας μέλους, <span class="courier-code">in</span>, παρουσιάστηκε στο Κεφάλαιο 2. Χρησιμοποιείται σε πολλές περιπτώσεις για τον έλεγχο ύπαρξης μιας τιμής σε μια ακολουθία τιμών (λίστα, πλειάδα, συμβολοσειρά κ.λπ.), αλλά αποτελεί και δομικό στοιχείο της εντολής επανάληψης <span class="courier-code">for</span>, που παρουσιάζεται σε επόμενη ενότητα. Ως στοιχείο ελέγχου, η χρήση του <span class="courier-code">in</span> είναι ιδιαίτερα απλή: δίνεται ένα στοιχείο (αντικείμενο γενικότερα) και ελέγχεται αν ανήκει σε ένα σύνολο στοιχείων, ενώ επιστρέφεται πάντα μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 5 in [1,2,5,12]</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">True</span>, γιατί, πολύ απλά, το <span class="courier-code">5</span> υπάρχει στη λίστα αριθμών που δόθηκε. Αντίθετα, η παρακάτω εντολή ελέγχει αν στην ίδια λίστα υπάρχει ο αριθμός <span class="courier-code">3</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 3 in [1,2,5,12]</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">δίνοντας αρνητική απάντηση, αφού το <span class="courier-code">3</span> δεν υπάρχει στη λίστα στοιχείων που δόθηκε. Η άρνηση του <span class="courier-code">in</span> έρχεται με την προσθήκη της λογικής άρνησης <span class="courier-code">not</span> μπροστά από το <span class="courier-code">in</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 0 not in [1,2,5,12]</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">κάτι που τελικά ισχύει, αφού το <span class="courier-code">0</span> δεν υπάρχει πουθενά στη λίστα τιμών. </p>
			<p>Ο τελεστής <span class="courier-code">in</span> χρησιμοποιείται όχι μόνο με αριθμούς αλλά και με κείμενο. (Κείμενο, ή γενικά, συμβολοσειρά είναι μια ακολουθία χαρακτήρων που περικλείονται σε μονά ή διπλά εισαγωγικά και περιγράφεται στο Κεφάλαιο 6.) Στην επόμενη εντολή ελέγχεται αν ο χαρακτήρας ‘<span class="courier-code">p</span>’ υπάρχει μέσα στο λεκτικό ‘<span class="courier-code">python</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;p&apos; in &apos;python&apos;</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">και επιστρέφει την τιμή <span class="courier-code">True</span> γιατί το ‘<span class="courier-code">p</span>’ βρίσκεται μέσα στο κείμενο που δόθηκε. Η παρακάτω όμως εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;P&apos; in &apos;python&apos;</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">False</span> επειδή το κεφαλαίο ‘<span class="courier-code">P</span>’ δεν υπάρχει μέσα στο κείμενο.</p>
		</section>
		<section role="section" id="ch6se4">
			<h1><span role="label">4.4</span> Η εντολή <span class="courier-code">for</span></h1>
			<p class="no-indent">Οι δομές επανάληψης βοηθούν στην εκτέλεση των ίδιων εντολών περισσότερες από μια φορές. Έστω ότι για τον υπολογισμό του ΦΠΑ και της τελικής τιμής ενός προϊόντος χρησιμοποιείται το πρόγραμμα στη Λίστα Κώδικα 4-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-1 | Υπολογισμός ΦΠΑ για ένα προϊόν</figcaption><img src="media/ListaKodika-4-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα δέχεται την τιμή ενός προϊόντος, υπολογίζοντας και εμφανίζοντας την τελική τιμή και τον ΦΠΑ που του αντιστοιχεί. Τι θα γινόταν όμως αν έπρεπε να γίνει αυτός ο υπολογισμός για εκατοντάδες ή και χιλιάδες προϊόντα; Πώς θα μπορούσαν να υπολογιστούν στοιχεία που αφορούν μεγάλο πλήθος δεδομένων όπως η μέση τιμή όλων των προϊόντων της επιχείρησης; Η απάντηση στο πρόβλημα της επεξεργασίας πολλών δεδομένων, που συχνά μπορεί και να μην είναι γνωστό πόσα είναι αυτά, έρχεται με τη δομή επανάληψης. Μια τέτοια δομή επιτρέπει την επαναληπτική εκτέλεση τμημάτων εντολών. </p>
			<p>Η Python διαθέτει δυο εντολές επανάληψης, τη <span class="courier-code">while</span> και τη <span class="courier-code">for</span>, σε αντίθεση με άλλες γλώσσες προγραμματισμού, όπως η C, που διαθέτουν συνήθως τρεις δομές επανάληψης. Καθεμιά από αυτές χρησιμοποιείται για συγκεκριμένο σκοπό: η <span class="courier-code">while</span> για άγνωστο πλήθος δεδομένων, ενώ η <span class="courier-code">for</span> για γνωστό πλήθος, που συνήθως ενσωματώνεται σε κάποια δομή δεδομένων όπως η λίστα.</p>
			<p>Η εντολή <span class="courier-code">for</span> είναι μια από τις δυο δομές επανάληψης που διαθέτει η Python. Χρησιμοποιείται όταν είναι γνωστό το πλήθος των δεδομένων εκ των προτέρων ή όταν χρειάζεται να γίνει διαχείριση δεδομένων που διατίθενται από συλλογές στοιχείων όπως η λίστα, η πλειάδα, το σύνολο κ.λπ. Η γενική μορφή της εντολής είναι:</p>
			<p><span class="courier-code">for μεταβλητή in ακολουθία τιμών:</span></p>
			<p>&#95;&#95;&#95;&#95; <span class="courier-code">εντολές Α</span></p>
			<p class="no-indent">Η μεταβλητή που υπάρχει στον ορισμό της <span class="courier-code">for</span> αποκτά διαδοχικά, μια προς μια, τις τιμές της ακολουθίας. Για καθεμιά από αυτές τις τιμές εκτελείται μια φορά το τμήμα εντολών <span class="courier-code">Α</span> που βρίσκεται μέσα στη <span class="courier-code">for</span>. Η εντολή <span class="courier-code">for</span> περιλαμβάνει και ένα προαιρετικό τμήμα <span class="courier-code">else</span> το οποίο όμως περιγράφεται αργότερα.</p>
			<p>Η ακολουθία τιμών μπορεί να είναι μια συλλογή δεδομένων (λίστα, πλειάδα, σύνολο κ.λπ.) ή τιμές που παράγει μια γεννήτρια συνάρτηση (περισσότερα για τις συναρτήσεις στο Κεφάλαιο 10). Στο παράδειγμα που ακολουθεί, οι παρακάτω γραμμές:</p>
			<p><span class="courier-code">for i in range(5):</span></p>
			<p><span class="courier-code">&#9;print(i**2, end=&apos; &apos;)</span></p>
			<p class="no-indent">θα εμφανίσουν στην οθόνη:</p>
			<p><span class="courier-code">0 1 4 9 16</span></p>
			<p class="no-indent">τις 5 πρώτες δυνάμεις του 2. Η <span class="courier-code">for</span> δέχεται από τη συνάρτηση <span class="courier-code">range</span> μια σειρά τιμών από το <span class="courier-code">0</span> μέχρι και το <span class="courier-code">4</span> και αποδίδει αυτές τις τιμές, μια κάθε φορά, στη μεταβλητή <span class="courier-code">i</span>. Για κάθε τιμή του <span class="courier-code">i</span> εκτελείται η εντολή <span class="courier-code">print</span>. Έτσι, το <span class="courier-code">i</span> αρχικά παίρνει την τιμή <span class="courier-code">0</span>, εκτελείται η <span class="courier-code">print</span> εμφανίζοντας το 0<sup class="superscript CharOverride-1">2</sup>, στη συνέχεια ο έλεγχος περνά πάλι στη <span class="courier-code">for</span> όπου το <span class="courier-code">i</span> παίρνει την τιμή <span class="courier-code">1</span> και η <span class="courier-code">print</span> εμφανίζει το 1<sup class="superscript CharOverride-1">2</sup> και ακολουθούν, με τον ίδιο τρόπο, και οι υπόλοιπες τιμές της <span class="courier-code">range</span>. Η <span class="courier-code">print</span> θα εκτελεστεί 5 φορές (0<sup class="superscript CharOverride-1">2</sup>, 1<sup class="superscript CharOverride-1">2</sup>, 2<sup class="superscript CharOverride-1">2</sup>, 3<sup class="superscript CharOverride-1">2</sup>, 4<sup class="superscript CharOverride-1">2</sup>), θα γίνουν επομένως 5 επαναλήψεις.</p>
			<p>Στο παρακάτω παράδειγμα:</p>
			<p><span class="courier-code">for i in range(5):</span></p>
			<p><span class="courier-code">&#9;print(&apos;Καλημέρα&apos;</span><span class="courier-code">,end=&apos; &apos;)</span></p>
			<p class="no-indent">εμφανίζεται στην οθόνη:</p>
			<p><span class="courier-code">Καλημέρα Καλημέρα Καλημέρα Καλημέρα Καλημέρα</span></p>
			<p class="no-indent">Η <span class="courier-code">range</span> παράγει πέντε τιμές και αντίστοιχα η <span class="courier-code">print</span> εκτελείται πέντε φορές. Μόλις τελειώσει την παραγωγή τιμών η <span class="courier-code">range</span>, η <span class="courier-code">for</span> σταματάει και η εκτέλεση του προγράμματος συνεχίζεται με τις επόμενες εντολές μετά τη <span class="courier-code">for</span>.</p>
			<p>Ακολουθεί ένα ολοκληρωμένο παράδειγμα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-1</b>: <b>α)</b> Δίνεται λίστα με τα ονόματα φοιτητών. Να γράψετε κώδικα που θα εμφανίζει τα στοιχεία τους στην οθόνη.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-2 | <span class="courier-code">for</span> – ονόματα φοιτητών</figcaption><img src="media/ListaKodika-4-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις εκτελεστεί το πρόγραμμα στη Λίστα Κώδικα 4-2, θα εμφανιστούν στην οθόνη: </p>
			<p><span class="courier-code">Όνομα φοιτητή: Εύα</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: Έφη</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: Γιώργος</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: Πέτρος</span></p>
			<p><span class="courier-code">Τέλος προγράμματος</span></p>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">name</span> σε κάθε επανάληψη της <span class="courier-code">for</span> αποκτά μια από τις τιμές της λίστας <span class="courier-code">names</span>. Μόλις γίνει η προσπέλαση όλων των στοιχείων της λίστας, τερματίζεται η <span class="courier-code">for</span>.</p>
			<p><b>β)</b> Δίνεται και δεύτερη λίστα με τους βαθμούς των φοιτητών. Να εμφανιστούν σε κάθε γραμμή τα στοιχεία κάθε φοιτητή.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-3 | <span class="courier-code">for</span> – βαθμοί και ονόματα φοιτητών</figcaption><img src="media/ListaKodika-4-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Τρέχοντας το πρόγραμμα της Λίστας Κώδικα 4-3, εμφανίζονται τα πιο κάτω αποτελέσματα:</p>
			<p><span class="courier-code">Όνομα φοιτητή: Εύα Βαθμός: 8</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: Έφη Βαθμός: 6</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: Γιώργος Βαθμός: 9</span></p>
			<p><span class="courier-code">Όνομα φοιτητή: </span><span class="courier-code">Πέτρος Βαθμός: 5</span></p>
			<p><span class="courier-code">Τέλος προγράμματος</span></p>
			<p class="no-indent">Το τελευταίο παράδειγμα χρησιμοποιεί μια μεταβλητή <span class="courier-code">i</span> ως δείκτη για τις δυο λίστες, κάτι που πλησιάζει πολύ στον τρόπο εργασίας με πίνακες, σε γλώσσες όπως η C. Η συνάρτηση <span class="courier-code">len</span> επιστρέφει το πλήθος των στοιχείων της λίστας, δηλαδή <span class="courier-code">4</span>, οπότε η <span class="courier-code">range</span> θα δημιουργήσει τιμές μέχρι και το 3. Σε κάθε επανάληψη, η μεταβλητή <span class="courier-code">i</span> αποκτά καθεμία από τις τιμές που παράγει η <span class="courier-code">range</span> (<span class="courier-code">0</span>, <span class="courier-code">1</span>, <span class="courier-code">2</span> και <span class="courier-code">3</span>), η οποία στη συνέχεια χρησιμοποιείται ως δείκτης στις λίστες, εμφανίζοντας τα στοιχεία τους.</p>
			<p>Στο παράδειγμα θα μπορούσε να χρησιμοποιηθεί και η συνάρτηση <span class="courier-code">zip</span>, όπως φαίνεται στη Λίστα Κώδικα 4-4.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-4 | <span class="courier-code">for</span> – στοιχεία φοιτητών – χρήση της <span class="courier-code">zip</span></figcaption><img src="media/ListaKodika-4-4_fmt.png" alt=""/></figure>
			<p class="no-indent">εμφανίζοντας ακριβώς τα ίδια αποτελέσματα. Η <span class="courier-code">zip</span> δέχεται δυο συλλογές δεδομένων και αποδίδει ένα ζεύγος τιμών, με κάθε επανάληψη, στις μεταβλητές <span class="courier-code">name</span> και <span class="courier-code">grade</span>. Οι τιμές αυτές είναι στοιχεία των δυο ορισμάτων της <span class="courier-code">zip</span>, ένα από το καθένα, από τις αντίστοιχες θέσεις.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-2</b>: Στις τελικές εξετάσεις στο μάθημα του προγραμματισμού με Python, συμμετείχαν 120 φοιτητές. Ο τελικός βαθμός προκύπτει από το 30% του προφορικού βαθμού και το 70% του γραπτού. Να γράψετε πρόγραμμα που </p>
			</blockquote>
			<p class="no-indent"><b>α)</b> θα δέχεται τον γραπτό βαθμό των εξετάσεων και τον προφορικό βαθμό, εμφανίζοντας τον τελικό βαθμό κάθε φοιτητή και το αποτέλεσμα. </p>
			<p class="no-indent">Ακολουθεί η Λίστα Κώδικα 4-5 με τις κατάλληλες εντολές για το πρόβλημα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-5 | <span class="courier-code">for</span> – υπολογισμός τελικού βαθμού</figcaption><img src="media/ListaKodika-4-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Η <span class="courier-code">for</span> θα τρέξει 120 φορές. Στο συγκεκριμένο παράδειγμα, τα δεδομένα δεν αποθηκεύονται πουθενά και χάνονται μετά τον τερματισμό του προγράμματος. Στο Κεφάλαιο 5, θα δούμε πώς αυτά τα δεδομένα μπορούν να αποθηκευτούν σε δομές όπως η λίστα, ενώ στο Κεφάλαιο 12 παρουσιάζονται τρόποι μόνιμης αποθήκευσης των στοιχείων σε αρχεία.</p>
			<p>Με τη χρήση επαναληπτικών δομών μπορούν να απαντηθούν και άλλα ερωτήματα για το τελευταίο παράδειγμα, όπως</p>
			<p><b>β)</b> Πόσοι πέρασαν το μάθημα και ποιος είναι ο μέσος όρος τους;</p>
			<p><b>γ)</b> Πόσοι δεν εξετάστηκαν προφορικά (πήραν βαθμό 0);</p>
			<p><b>δ)</b> Ποιος ήταν ο μεγαλύτερος προφορικός βαθμός από αυτούς που κόπηκαν;</p>
			<p class="no-indent">Ακολουθεί η Λίστα Κώδικα 4-6 με όλες τις απαντήσεις στα παραπάνω ερωτήματα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-6 | <span class="courier-code">for</span> – αποτελέσματα εξετάσεων</figcaption><img src="media/ListaKodika-4-6_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-3</b>: Δίνονται αρχικές τιμές σε όλες τις μεταβλητές. Η μεταβλητή <span class="courier-code">maxx</span> παίρνει ως αρχική τιμή το <span class="courier-code">-1</span>, ώστε στην 1η κιόλας επανάληψη αυτή η τιμή να αντικατασταθεί με μια έγκυρη τιμή του προγράμματος.</p>
			<p class="no-indent"><b>Γραμμή 4</b>: Ο ορισμός της εντολής <span class="courier-code">for</span> για την επαναληπτική διαδικασία. </p>
			<p class="no-indent"><b>Γραμμές 5-18</b>: Είναι οι εντολές που βρίσκονται μέσα στη <span class="courier-code">for</span> και εκτελούνται σε κάθε επανάληψη. </p>
			<p class="no-indent"><b>Γραμμές 5-6</b>: Δίνονται οι βαθμοί για κάθε φοιτητή.</p>
			<p class="no-indent"><b>Γραμμές 7-8</b>: Υπολογίζεται και τυπώνεται ο τελικός βαθμός για κάθε φοιτητή.</p>
			<p class="no-indent"><b>Γραμμή 9</b>: Γίνεται ο έλεγχος του τελικού αποτελέσματος για την καταμέτρηση των επιτυχόντων.</p>
			<p class="no-indent"><b>Γραμμές 11-12</b>: Απαντάται το ερώτημα που είναι σχετικό με τον μέσο όρο. Υπολογίζεται το πλήθος αυτών που πέρασαν το μάθημα και το άθροισμα της βαθμολογίας τους.</p>
			<p class="no-indent"><b>Γραμμή 13</b>: Το τμήμα <span class="courier-code">else</span> αφορά όσους δεν πέρασαν το μάθημα.</p>
			<p class="no-indent"><b>Γραμμές 15-16</b>: Υπολογίζεται ο μεγαλύτερος προφορικός βαθμός από αυτούς που δεν πέρασαν το μάθημα. Βρίσκεται μέσα σε ένθετο <span class="courier-code">if</span>.</p>
			<p class="no-indent"><b>Γραμμές 17-18</b>: Απαντάται το ερώτημα πόσοι ήταν αυτοί με μηδενικό βαθμό στα προφορικά. Εδώ ελέγχεται ο βαθμός αν είναι μηδέν και υπολογίζεται το πλήθος αυτών των βαθμών.</p>
			<p class="no-indent"><b>Γραμμές 19-20</b>: Καλύπτει την περίπτωση που δεν «κόπηκε» κανένας, ενώ η μεταβλητή <span class="courier-code">maxx</span> συνεχίζει να έχει την αρχική της τιμή (<span class="courier-code">-1</span>).</p>
			<p class="no-indent"><b>Γραμμή 24</b>: Έλεγχος για το αν δεν πέρασε κανείς. Αυτό πρέπει να γίνει γιατί, αν δεν ισχύει, θα γίνει διαίρεση με το 0 στον υπολογισμό του μέσου όρου.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-3</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα υπολογίζει την παρακάτω αριθμητική σειρά:</p>
			</blockquote>
			<p class="no-indent"><img src="media/pg177.png" />￼</p>
			<p class="no-indent">H λύση δίνεται στη Λίστα Κώδικα 4-7.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-7 | <span class="courier-code">for</span> – υπολογισμός αριθμητικής σειράς 1</figcaption><img src="media/ListaKodika-4-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Το στοιχείο <span class="courier-code">i/(i+1)</span> είναι κάθε μέλος της ακολουθίας και υπολογίζεται για κάθε τιμή του <span class="courier-code">i</span>. Τα αποτελέσματα του προγράμματος για διάφορες τιμές του <span class="courier-code">n</span> είναι:</p>
			
				<table id="table028">
					
						
						
					
					<tbody>
						<tr>
							<td>
								<p><b>Τιμές του </b><span class="courier-code"><b>n</b></span></p>
							</td>
							<td>
								<p><b>Αποτέλεσμα</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">5</span></p>
							</td>
							<td>
								<p><span class="courier-code">3.5500000000000003</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">10</span></p>
							</td>
							<td>
								<p><span class="courier-code">11.530122655122655</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">15</span></p>
							</td>
							<td>
								<p><span class="courier-code">24.14939366189366</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">20</span></p>
							</td>
							<td>
								<p><span class="courier-code">41.50403495713092</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-4</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα υπολογίζει την παρακάτω αριθμητική σειρά:</p>
			</blockquote>
			<p class="no-indent"><img src="media/pg178.png" />￼</p>
			<p class="no-indent">H Λίστα Κώδικα 4-8 περιλαμβάνει τις εντολές για το πρόβλημα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-8 | <span class="courier-code">for</span> – υπολογισμός αριθμητικής σειράς 2</figcaption><img src="media/ListaKodika-4-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Τα αποτελέσματα που εμφανίζονται για διάφορες τιμές του <span class="courier-code">n</span> είναι:</p>
			
				<table id="table029">
					
					
					<tbody>
						<tr>
							<td>
								<p><b>Τιμές του </b><span class="courier-code"><b>n</b></span></p>
							</td>
							<td>
								<p><b>Αποτέλεσμα</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">5</span></p>
							</td>
							<td>
								<p><span class="courier-code">3.671875</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">10</span></p>
							</td>
							<td>
								<p><span class="courier-code">3.982421875</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">15</span></p>
							</td>
							<td>
								<p><span class="courier-code">3.9992218017578125</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">20</span></p>
							</td>
							<td>
								<p><span class="courier-code">3.9999685287475586</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-5</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα υπολογίζει την παρακάτω αριθμητική σειρά:</p>
			</blockquote>
			<p class="no-indent"><img src="media/pg178b.png" />￼</p>
			<p class="no-indent">H Λίστα Κώδικα 4-9 περιέχει το αντίστοιχο πρόγραμμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-9 | <span class="courier-code">for</span> – υπολογισμός αριθμητικής σειράς 3</figcaption><img src="media/ListaKodika-4-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Τα αποτελέσματα που εμφανίζονται για διάφορες τιμές του <span class="courier-code">n</span> είναι:</p>
			
				<table id="table030">
					<tbody>
						<tr>
							<td>
								<p><b>Τιμές του </b><span class="courier-code"><b>n</b></span></p>
							</td>
							<td>
								<p><b>Αποτέλεσμα</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">5</span></p>
							</td>
							<td>
								<p><span class="courier-code">1.421875</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">10</span></p>
							</td>
							<td>
								<p><span class="courier-code">1.328125</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">15</span></p>
							</td>
							<td>
								<p><span class="courier-code">1.3335723876953125</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">20</span></p>
							</td>
							<td>
								<p><span class="courier-code">1.3333234786987305</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-6</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα υπολογίζει το <i>n</i> παραγοντικό (<span class="courier-code">n!</span>).</p>
			</blockquote>
			<p class="no-indent"><i>n!</i> <span class="math-font">=</span> 1 <span class="math-font">∙</span> 2 <span class="math-font">∙</span> 3 <span class="math-font">∙</span> <span class="math-font">…</span> <span class="math-font">∙</span> <span class="math-font">(</span><i>n</i> <span class="math-font">−</span> 1<span class="math-font">)</span> <span class="math-font">∙</span> <i>n</i></p>
			<p class="no-indent">H Λίστα Κώδικα 4-9 περιέχει το αντίστοιχο πρόγραμμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-10 | <span class="courier-code">for</span> – υπολογισμός n!</figcaption><img src="media/ListaKodika-4-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Μια δοκιμαστική εκτέλεση του προγράμματος στη Λίστα Κώδικα 4-10 θα δώσει αποτελέσματα όπως:</p>
			<p><span class="courier-code">Δώσε το n:</span><span class="courier-code"><b>20</b></span></p>
			<p><span class="courier-code">n!= 2432902008176640000</span></p>
			<p class="no-indent">Για<span class="courier-code"> n=40 </span>το πρόγραμμα εμφανίζει:</p>
			<p><span class="courier-code">Δώσε το n:</span><span class="courier-code"><b>40</b></span></p>
			<p><span class="courier-code">n!= 815915283247897734345611269596115894272000000000</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-7</b>: Να γράψετε πρόγραμμα που θα διαβάζει τη θερμοκρασία από 15 σταθμούς μέτρησης και θα εμφανίζει:</p>
			</blockquote>
			<p><b>α)</b> Τη μέση θερμοκρασία.</p>
			<p><b>β)</b> Πόσοι σταθμοί είχαν θερμοκρασία κάτω από το 0, τη μέση θερμοκρασία τους και πόσοι είχαν τη μικρότερη θερμοκρασία.</p>
			<p class="no-indent">H Λίστα Κώδικα 4-11 περιέχει το αντίστοιχο πρόγραμμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-11 | <span class="courier-code">for</span> – μετεωρολογικός σταθμός</figcaption><img src="media/ListaKodika-4-11_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-3</b>: Δίνονται αρχικές τιμές στις μεταβλητές. Η μεταβλητή <span class="courier-code">minn</span> παίρνει ως αρχική τιμή μια πολύ μεγάλη, ώστε στην 1η επανάληψη η αυθαίρετη αυτή τιμή να αντικατασταθεί με μια από τις τιμές που θα δοθούν μέσα στο πρόγραμμα.</p>
			<p class="no-indent"><b>Γραμμή 4</b>: Ο ορισμός της εντολής <span class="courier-code">for</span> με χρήση μεταβλητής με όνομα “<span class="courier-code">_</span>”. Αυτή η ονομασία δίνεται σε μεταβλητές των οποίων οι τιμές δεν θα χρησιμοποιηθούν πουθενά μέσα στο πρόγραμμα.</p>
			<p class="no-indent"><b>Γραμμές 5-14</b>: Είναι οι εντολές που βρίσκονται μέσα στη <span class="courier-code">for</span>. Σε κάθε επανάληψη, εκτελούνται με τη σειρά, από πάνω προς τα κάτω. </p>
			<p class="no-indent"><b>Γραμμές 10-14</b>: Υπολογίζεται η μικρότερη θερμοκρασία. Η μεταβλητή <span class="courier-code">p2</span> κρατάει το πλήθος των σταθμών που είχαν τη μικρότερη θερμοκρασία. Κάθε φορά που εντοπίζεται μια νέα μικρότερη θερμοκρασία, ο μετρητής <span class="courier-code">p2</span> μηδενίζεται για να ξεκινήσει την καταμέτρηση από την αρχή.</p>
			<p class="no-indent"><b>Γραμμές 15-16</b>: Υπολογίζεται και εμφανίζεται η μέση θερμοκρασία από όλους τους σταθμούς.</p>
			<p class="no-indent"><b>Γραμμές 17-22</b>: Εμφανίζονται το πλήθος των σταθμών με θερμοκρασίες κάτω από το μηδέν και η αντίστοιχη μέση θερμοκρασία τους. Αν δεν υπάρχει καμία μέτρηση που να είναι αρνητική, εμφανίζεται κατάλληλο μήνυμα και δεν πραγματοποιείται ο υπολογισμός του μέσου όρου.</p>
			<p class="no-indent"><b>Γραμμές 23-24</b>: Εμφανίζεται η μικρότερη θερμοκρασία και πόσοι σταθμοί την είχαν.</p>
			<p class="no-indent">Οι τεχνικές για την εύρεση του μεγαλύτερου και του μικρότερου, του μέσου όρου, του πλήθους στοιχείων με κάποιο χαρακτηριστικό κ.ά., είναι οι πιο συνηθισμένες σε όλες τις δημοφιλείς γλώσσες προγραμματισμού και είναι κάποιες από τις πρώτες λειτουργίες που μαθαίνουμε όταν ξεκινάμε τη γνωριμία μας με μια γλώσσα όπως η C. Ωστόσο, στην Python, όπως θα δούμε και αργότερα σε άλλα κεφάλαια, υπάρχουν ενσωματωμένες στη γλώσσα τεχνικές και δομές, όπου αυτές οι λειτουργίες εκτελούνται πολύ πιο εύκολα και γρήγορα. Για παράδειγμα, στην Python ποτέ δεν θα χρειαστεί να δημιουργηθεί κάποιος βρόχος <span class="courier-code">for</span> για τον υπολογισμό του αθροίσματος μιας σειράς στοιχείων που είναι αποθηκευμένα σε μια λίστα (περιγράφεται στο Κεφάλαιο 5), γιατί κάτι τέτοιο υπολογίζεται άμεσα με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; max([1,3,5])</span></p>
			<p><span class="courier-code">5</span></p>
			<p class="no-indent">σε μία μόλις γραμμή κώδικα, και χωρίς να γίνει προσπέλαση των στοιχείων της λίστας ένα προς ένα, με τη χρήση κάποιας δομής επανάληψης, όπως θα συνέβαινε σε κάποια άλλη γλώσσα προγραμματισμού. Συστήνεται μάλιστα, η χρήση τέτοιων συναρτήσεων, παρά δομών επανάληψης, γιατί είναι πολύ πιο αποδοτική. Υπάρχουν και άλλες έτοιμες συναρτήσεις που υπολογίζουν στοιχεία όπως αθροίσματα κ.λπ. Η παρακάτω εντολή εντοπίζει άμεσα το άθροισμα της προηγούμενης λίστας τιμών, με τη χρήση άλλης έτοιμης συνάρτησης, της <span class="courier-code">sum</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sum([1,3,5])</span></p>
			<p><span class="courier-code">9</span></p>
			<p class="no-indent">χωρίς να χρειαστεί να αθροιστούν ένα ένα τα στοιχεία μέσα από μια δομή επανάληψης.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-8</b>: Να γράψετε πρόγραμμα για το Πέτρα-Ψαλίδι-Χαρτί. Το πρόγραμμα θα ζητάει τον αριθμό των γύρων που θα κρίνουν τον τελικό νικητή.</p>
			</blockquote>
			<p class="no-indent">H Λίστα Κώδικα 4-12 περιέχει το αντίστοιχο πρόγραμμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-12 | Πέτρα-ψαλίδι-χαρτί</figcaption><img src="media/ListaKodika-4-12_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-5</b>: Εισάγεται η βιβλιοθήκη <span class="courier-code">random</span>, δίνονται αρχικές τιμές στις μεταβλητές και ζητείται από τον χρήστη το πλήθος των γύρων που θα παίξει. Η μεταβλητή <span class="courier-code">choices</span> είναι λίστα (βλ. Κεφάλαιο 5) η οποία περιέχει τα λεκτικά που βοηθούν στην άμεση εμφάνισή τους στην οθόνη.</p>
			<p class="no-indent"><b>Γραμμές 7-20</b>: Είναι όλες οι εντολές του βρόχου όπου παίζεται το παιχνίδι. Ζητείται από τον παίκτη να δώσει την επιλογή του (<span class="courier-code">0</span>, <span class="courier-code">1</span>, ή <span class="courier-code">2</span> που συμβολίζουν τις επιλογές «πέτρα», «ψαλίδι» και «χαρτί»). Αντίστοιχα η <span class="courier-code">randint</span> δημιουργεί έναν τυχαίο ακέραιο από το 0 έως και το 2.</p>
			<p class="no-indent"><b>Γραμμές 11-20</b>: Γίνεται ο έλεγχος για την έκβαση του παιχνιδιού και εμφανίζεται το αποτέλεσμα. Ο χαρακτήρας ‘<span class="courier-code">\</span>’ χρησιμεύει για την αναδίπλωση των γραμμών 13-15 και την καλύτερη εμφάνιση της <span class="courier-code">if</span>.</p>
			<p class="no-indent"><b>Γραμμές 22-27</b>: Γίνεται ο τελικός έλεγχος για την ανάδειξη του νικητή του παιχνιδιού. </p>
			<p class="no-indent">Ακολουθεί μια δοκιμαστική εκτέλεση του προγράμματος:</p>
			<p><span class="courier-code">Δώσε το πλήθος των γύρων:</span><span class="courier-code"><b>3</b></span></p>
			<p><span class="courier-code">Πέτρα(0), Ψαλίδι(1) ή Χαρτί</span><span class="courier-code">(2);</span><span class="courier-code"><b>2</b></span></p>
			<p><span class="courier-code">Ο αντίπαλος είχε: Πέτρα. Κέρδισες</span></p>
			<p><span class="courier-code">Πέτρα(0), Ψαλίδι(1) ή Χαρτί(2);</span><span class="courier-code"><b>2</b></span></p>
			<p><span class="courier-code">Ο αντίπαλος είχε: Χαρτί. Ισοπαλία</span></p>
			<p><span class="courier-code">Πέτρα(0), Ψαλίδι(1) ή Χαρτί(2);</span><span class="courier-code"><b>0</b></span></p>
			<p><span class="courier-code">Ο αντίπαλος είχε: Χαρτί. Έχασες</span></p>
			<p><span class="courier-code">Κέρδισες </span><span class="courier-code">1 παιχνίδια...και ήρθατε ισοπαλία.</span></p>
		</section>
		<section role="section" id="ch6se5">
			<h1><span role="label">4.5</span> Η εντολή <span class="courier-code">while</span></h1>
			<p class="no-indent">Η δεύτερη εντολή επανάληψης που διαθέτει η Python είναι η εντολή <span class="courier-code">while</span>. Χρησιμοποιείται όταν δεν είναι γνωστό το πλήθος των δεδομένων ή όταν τα δεδομένα δεν είναι ενσωματωμένα σε κάποια δομή της γλώσσας. Η γενική μορφή της <span class="courier-code">while</span> είναι:</p>
			<p><span class="courier-code">while συνθήκη:</span></p>
			<p>&#95;&#95;&#95;&#95; <span class="courier-code">εντολές Α</span></p>
			<p class="no-indent">Κάθε φορά που εκτελείται η 1η γραμμή της <span class="courier-code">while</span>, γίνεται, από τον διερμηνευτή, αποτίμηση της συνθήκης σε μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Αν το αποτέλεσμα της <span class="courier-code">while</span> είναι <span class="courier-code">True</span>, τότε εκτελούνται οι εντολές του τμήματος <span class="courier-code">Α</span>, δηλαδή όσες βρίσκονται με εσοχή, μέσα στη <span class="courier-code">while</span>. Όσο επομένως η συνθήκη ισχύει, εκτελούνται οι εντολές μέσα στη <span class="courier-code">while</span>. Μόλις εκτελεστεί και η τελευταία εντολή, ο έλεγχος περνάει πάλι πίσω στην 1η γραμμή της <span class="courier-code">while</span>, όπου γίνεται ξανά έλεγχος και αποτίμηση της συνθήκης, που καθορίζει τη συνέχεια ή το σταμάτημα των επαναλήψεων. </p>
			<p>Αν ο <i>βρόχος (loop)</i> δεν σταματά ποτέ, αν δηλαδή η συνθήκη της <span class="courier-code">while</span> συνεχίζει για πάντα να είναι αληθής, τότε τέτοιου είδους δομή επανάληψης ονομάζεται <i>ατέρμων βρόχος (infinite loop)</i>. Αν προκύψει κάτι τέτοιο, τότε το πρόγραμμα μπορεί να διακοπεί μόνο με τον συνδυασμό των πλήκτρων <span class="keycaps">ç</span><span class="keycaps">c</span>. Ωστόσο, τέτοιοι βρόχοι κατασκευάζονται συχνά μέσα σε ένα πρόγραμμα σε Python. Η έξοδος από τέτοιες επαναλήψεις γίνεται από άλλο σημείο και όχι μέσω της συνθήκης της εντολής. Αυτή η λειτουργία περιγράφεται αργότερα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-9</b>: Να γράψετε πρόγραμμα που θα δέχεται αριθμούς και θα εμφανίζει τα τετράγωνά τους. Η διαδικασία θα σταματά όταν δοθεί αρνητικός αριθμός, οπότε και θα τυπώνει το πλήθος των αριθμών που δόθηκαν.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-13 | <span class="courier-code">while</span> – τετράγωνα αριθμών</figcaption><img src="media/ListaKodika-4-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Η γραμμή 2 δέχεται έναν αριθμό <span class="courier-code">x</span> από το πληκτρολόγιο. Αν αυτός είναι αρνητικός, τότε η <span class="courier-code">while</span> θα επιστρέψει <span class="courier-code">False</span> και δεν θα εκτελεστούν οι εντολές μέσα της (γραμμές 4 έως 6). Σε αυτή την περίπτωση, δεν θα γίνει καμία επανάληψη, και το πρόγραμμα θα συνεχίσει την εκτέλεσή του με την επόμενη εντολή μετά τον βρόχο, στη γραμμή 7. Αν όμως η συνθήκη βγει <span class="courier-code">True</span>, τότε θα ξεκινήσει μια επανάληψη, θα τρέξουν οι εντολές στις γραμμές 4 έως και 6, όπου θα ζητηθεί μια καινούργια τιμή για το <span class="courier-code">x</span>. Για αυτή την τιμή δεν θα συμβεί τίποτα προτού ελεγχθεί ότι δεν είναι αρνητική. Έτσι, ο έλεγχος μετά τη γραμμή 6 θα επιστρέψει στη γραμμή 3, όπου και θα γίνει εκ νέου αποτίμηση της συνθήκης και θα ληφθεί νέα απόφαση για το αν θα συνεχιστεί για τη 2η επανάληψη ή όχι ο βρόχος, με βάση τη νέα τιμή του <span class="courier-code">x</span>. Στο τέλος δηλαδή κάθε επανάληψης, η <span class="courier-code">input</span> θα δεχθεί μια τιμή, η οποία θα τυπωθεί στην επόμενη επανάληψη ή θα καθορίσει τον τερματισμό των επαναλήψεων.</p>
			<p>Σημαντικό στοιχείο στη <span class="courier-code">while</span> είναι ότι όλες οι μεταβλητές που συμμετέχουν στη συνθήκη της θα πρέπει:</p>
			<p><b>α)</b> Να έχουν αρχική τιμή πριν και έξω από τη <span class="courier-code">while</span>.</p>
			<p><b>β)</b> Να ενημερώνονται ή να αλλάζουν τιμή (τουλάχιστον μια από αυτές) μέσα στο εσωτερικό (και συνήθως στο τέλος) της <span class="courier-code">while</span>.</p>
			<p class="no-indent">Αν δεν τηρηθεί το στοιχείο (α), θα προκύψει <i>σφάλμα χρόνου εκτέλεσης (runtime error)</i> <span class="courier-code">NameError</span> και θα διακοπεί η εκτέλεση του προγράμματος. Αν δεν ληφθεί μέριμνα για το στοιχείο (β), τότε μπορεί να προκύψει ατέρμων βρόχος και το πρόγραμμα να κολλήσει εκεί και να μην τερματίσει ποτέ.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-10</b>: Ο Στάθης θέλει να αγοράσει μια κονσόλα PS5 που κοστίζει 450€. Για αυτό τον σκοπό αποταμιεύει χρήματα από το χαρτζιλίκι του κάθε εβδομάδα. Να γράψετε πρόγραμμα που θα δέχεται το ποσό αποταμίευσης κάθε εβδομάδας. Στο τέλος θα εμφανίζει μετά από πόσες εβδομάδες θα μπορέσει να κάνει την αγορά του PS5 και πόσα χρήματα θα του περισσέψουν.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-14 | <span class="courier-code">while</span> – αποταμίευση</figcaption><img src="media/ListaKodika-4-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 1 γίνεται η απαραίτητη αρχικοποίηση (μηδενισμός) των μεταβλητών <span class="courier-code">weeks</span> και <span class="courier-code">total</span>. Ο έλεγχος στη γραμμή 2 αποφασίζει τη διακοπή ή τη συνέχιση του βρόχου, της διαδικασίας δηλαδή αποταμίευσης, ή τον τερματισμό του και τη δυνατότητα πραγματοποίησης της αγοράς. Κάθε επανάληψη εδώ, στην ουσία, είναι και μια εβδομάδα, όπου ζητείται ένα ποσό (γραμμή 3), ενημερώνεται το συνολικό ποσό που έχει συγκεντρωθεί έως την τρέχουσα επανάληψη (γραμμή 4) και αυξάνεται ένας μετρητής (<span class="courier-code">weeks</span>) που καταγράφει το πλήθος των εβδομάδων ή των επαναλήψεων του βρόχου (γραμμή 5). Όσο το συνολικό ποσό (<span class="courier-code">total</span>) δεν επαρκεί για την αγορά, ο βρόχος συνεχίζεται. Μόλις το συνολικό ποσό καλύψει το κόστος αγοράς (450€), τότε η επαναληπτική διαδικασία σταματά, τυπώνοντας μήνυμα σχετικά με τον αριθμό των εβδομάδων που χρειάστηκε να περάσουν ώστε να συγκεντρωθεί το ποσό, καθώς και πόσα περίσσεψαν μετά την αγορά.</p>
			<p>Και εδώ το μοτίβο είναι το ίδιο, ακολουθεί τους ίδιους «κανόνες». Η μεταβλητή που συμμετέχει στη συνθήκη της <span class="courier-code">while</span> αρχικοποιείται με μηδέν (με την υπόθεση ότι πριν δεν υπήρχαν καθόλου χρήματα) και κάθε φορά (σε κάθε επανάληψη) ενημερώνεται με το ποσό που αποταμιεύεται.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-11</b>: Ένας πελάτης διαθέτει δωροεπιταγή 500€ για την αγορά προϊόντων από ένα κατάστημα. Να γράψετε πρόγραμμα που θα δέχεται επαναληπτικά την τιμή για καθένα από τα προϊόντα που επιθυμεί να αγοράσει. Η διαδικασία θα συνεχίζεται μέχρι κάποιο από τα προϊόντα που ζητάει να αγοράσει να ξεπερνά το διαθέσιμο ποσό, ή μέχρι να καλύψει το ποσό της δωροεπιταγής, χωρίς όμως να το ξεπεράσει, οπότε και θα τερματίζεται το πρόγραμμα. Στο τέλος θα πρέπει να εμφανίζει πόσα ξόδεψε, αν του περίσσεψαν χρήματα και πόσα ήταν αυτά, καθώς επίσης και πόσα προϊόντα αγόρασε.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-15 | <span class="courier-code">while</span> – δωροεπιταγή</figcaption><img src="media/ListaKodika-4-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη Λίστα Κώδικα 4-15, φαίνεται μια υλοποίηση του προγράμματος για την επίλυση του Παραδείγματος 4-11. Η συνθήκη στη <span class="courier-code">while</span> περιέχει δυο μεταβλητές. Αυτές οι μεταβλητές έχουν πάρει αρχικές τιμές (στις γραμμές 1 και 2), πριν το σημείο όπου πρέπει να ελεγχθούν (στη γραμμή 3), ενώ και οι δυο ενημερώνονται στο εσωτερικό της <span class="courier-code">while</span>. Η μεταβλητή <span class="courier-code">price</span> παίρνει τιμές από την <span class="courier-code">input</span>. Την 1η τιμή της την παίρνει έξω από την επανάληψη και κάθε επόμενη τιμή την παίρνει πριν το τέλος κάθε επανάληψης, ώστε αμέσως μετά να ελέγξει αν με το νέο αυτό προϊόν δεν ξεπερνάει το όριο των 500€ που υπάρχει. Οι επαναλήψεις θα σταματήσουν όταν δοθεί τιμή (<span class="courier-code">price</span>) η οποία, μόλις προστεθεί στο σύνολο (<span class="courier-code">total</span>), θα ξεπεραστεί το όριο. Το πρόγραμμα τελειώνει με την εμφάνιση των αποτελεσμάτων. Αν από την αρχή δοθεί ως 1ο ποσό ένα ποσό μεγαλύτερο από το όριο των 500€, τότε δεν θα γίνει καμία επανάληψη και το πρόγραμμα θα τερματιστεί χωρίς να εκτελεστούν οι εντολές μέσα στη <span class="courier-code">while</span>. Ακολουθεί μια δοκιμαστική εκτέλεση του προγράμματος:</p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>120</b></span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>300</b></span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>150</b></span></p>
			<p><span class="courier-code">Περίσσεψαν 80.0 €</span></p>
			<p><span class="courier-code">Αγόρασες 2 προϊόντα</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-12</b>: Ένας ανελκυστήρας μπορεί να δεχθεί μέχρι και 7 άτομα και έως 650 κιλά. Να γράψετε πρόγραμμα που θα δέχεται επαναληπτικά το βάρος κάθε ατόμου που εισέρχεται στο ασανσέρ και θα εμφανίζει πόσα άτομα τελικά μπήκαν, καθώς και το συνολικό τους βάρος.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-16 | <span class="courier-code">while</span> – ανελκυστήρας</figcaption><img src="media/ListaKodika-4-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνθήκη στο παράδειγμα είναι πιο σύνθετη, ωστόσο περιγράφει τις δυο περιπτώσεις που η είσοδος ατόμων θα πρέπει να σταματήσει: είτε αν συμπληρωθούν τα 7 άτομα, είτε αν εισέλθει άτομο, το βάρος του οποίου ξεπερνά το όριο. Η χρήση του <span class="courier-code">and</span> γίνεται ώστε, αν ένα από τα δυο κριτήρια σταματήσει να ισχύει, να σταματήσει η είσοδος άλλων ατόμων στον ανελκυστήρα. Κάτι τέτοιο θα μπορούσε να γίνει και σε κάποια πραγματική υλοποίηση, μετρώντας το συνολικό βάρος και τα άτομα που έχουν μπει στον ανελκυστήρα, ώστε να ακουστεί κάποιο ηχητικό σήμα ή να ανάψει κάποια φωτεινή ένδειξη προειδοποίησης κ.λπ. Μια δοκιμή του προγράμματος θα εμφανίσει:</p>
			<p><span class="courier-code">Βάρος:90</span></p>
			<p><span class="courier-code">Βάρος:30</span></p>
			<p><span class="courier-code">Βάρος:70</span></p>
			<p><span class="courier-code">Βάρος:120</span></p>
			<p><span class="courier-code">Βάρος:45</span></p>
			<p><span class="courier-code">Βάρος:88</span></p>
			<p><span class="courier-code">Βάρος:92</span></p>
			<p><span class="courier-code">Βάρος:110</span></p>
			<p><span class="courier-code">Άτομα: 7 Συνολικό βάρος: 535.0</span></p>
			<p class="no-indent">Όπως και στα προηγούμενα παραδείγματα, όλες οι μεταβλητές που συμμετέχουν στη συνθήκη της <span class="courier-code">while</span> αρχικοποιούνται (με <span class="courier-code">0</span> αφού ο ανελκυστήρας στην αρχή είναι άδειος: 0 άτομα και <span class="courier-code">0</span> συνολικό βάρος). Μέσα στη <span class="courier-code">while</span>, και αφού ελεγχθεί ότι το επόμενο άτομο μπορεί να εισέλθει, ενημερώνεται το συνολικό βάρος (<span class="courier-code">total</span>) στη γραμμή 4, το σύνολο των ατόμων που έχουν εισέλθει (<span class="courier-code">persons</span>) στη γραμμή 5, ενώ ζητείται το βάρος του επόμενου ατόμου (<span class="courier-code">weight</span>) στη γραμμή 6, το οποίο θα ελεγχθεί στην αρχή της επόμενης επανάληψης (προτού ξεκινήσει αυτή). Αν τα άτομα που βρίσκονται μέσα είναι 7, τότε ο έλεγχος της <span class="courier-code">while</span> θα δώσει <span class="courier-code">False</span> (<span class="courier-code">persons</span><span class="courier-code">&lt;7</span>) και θα τελειώσει η διαδικασία. Ο βρόχος θα σταματήσει και για λιγότερα άτομα αν το συνολικό βάρος ξεπεράσει το όριο. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-13</b>: Μια μέθοδος για τον υπολογισμό του <i>π</i> είναι με τη χρήση της μεθόδου προσομοίωσης Monte Carlo. Δημιουργείται ένας κύκλος με κέντρο την αρχή των αξόνων και ακτίνα 1, τμήμα του οποίου βρίσκεται μέσα στο τετράγωνο με πλευρά 1 της Εικόνας 4-1. Η μέθοδος δημιουργεί τυχαίους αριθμούς που χρησιμεύουν ως συντεταγμένες σημείων μέσα στο τετράγωνο. Στη συνέχεια ελέγχεται αν τα σημεία αυτά βρίσκονται μέσα στο τμήμα του κύκλου. Ισχύει ότι <img src="media/pg187.png" />. Αν συμβολίσουμε με <i>n</i> το πλήθος των σημείων που δημιουργήθηκαν και με <i>m</i> το πλήθος των σημείων που βρίσκονται μέσα στον κύκλο, τότε ο λόγος τους είναι:</p>
			</blockquote>
			<p class="no-indent">￼ </p>
			<p class="no-indent">οπότε ￼ σημεία βρίσκονται μέσα στον κύκλο. Έτσι, ￼ ή ￼ που δίνει και την εκτίμηση της τιμής του <i>π</i>.</p>
			<figure class="image" id="img42" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 4-1 | Κύκλος<sup class="superscript CharOverride-1"><span id="footnote-052-backlink"><a href="#footnote-052">42</a></span></sup> με ακτίνα <i>R</i></figcaption><i><img src="media/chapter_4_image_1.jpg" alt=""/></i></figure>
			<p class="no-indent">Σχηματικά η παραπάνω διαδικασία παρουσιάζεται στην Εικόνα 4-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-17 | Υπολογισμός του <i>π</i> με προσομοίωση Monte Carlo</figcaption><img src="media/ListaKodika-4-17_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 4</b>: Ζητείται η ακρίβεια των υπολογισμών. Ο αριθμός που θα δοθεί μετατρέπεται σε δεκαδικό ο οποίος χρησιμοποιείται στη γραμμή 7 για τον τερματισμό των υπολογισμών.</p>
			<p class="no-indent"><b>Γραμμές 8, 9</b>: Δημιουργείται ένα σημείο με τις συντεταγμένες <span class="courier-code">x</span> και <span class="courier-code">y</span>.</p>
			<p class="no-indent"><b>Γραμμές 15-17</b>: Εμφανίζεται στην οθόνη η τιμή του <i>π</i>, όπως υπολογίστηκε από τη διαδικασία. Η εμφάνιση γίνεται με χρονοκαθυστέρηση 0.25 δευτερολέπτων ώστε να τυπώνεται στην οθόνη στην ίδια θέση, χωρίς να αλλάζει γραμμή η κάθε <span class="courier-code">print</span>. Για αυτό τον λόγο χρησιμοποιείται η συνάρτηση <span class="courier-code">sleep</span> της βιβλιοθήκης <span class="courier-code">time</span>.</p>
			<p class="no-indent">Δοκιμάζοντας το πρόγραμμα με ακρίβεια 4 ψηφίων, εμφανίζονται στην οθόνη τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">Ακρίβεια:</span><span class="courier-code"><b>4</b></span></p>
			<p><span class="courier-code">3.141518275538894</span></p>
			<p><span class="courier-code">3.141592653589793</span></p>
		</section>
		<section role="section" id="ch6se6">
			<h1><span role="label">4.6</span> Η εντολή <span class="courier-code">break</span></h1>
			<p class="no-indent">Η εντολή <span class="courier-code">break</span> σταματά τις επαναλήψεις και οδηγεί τον έλεγχο του προγράμματος έξω από τον βρόχο, ανεξάρτητα από την καταμέτρηση τιμών της <span class="courier-code">for</span> και τον έλεγχο συνθηκών της <span class="courier-code">while</span>. Η χρήση της γίνεται συνήθως σε συνδυασμό με έναν έλεγχο <span class="courier-code">if</span>, ο οποίος θα ανιχνεύσει την περίπτωση όπου απαιτείται ο άμεσος τερματισμός του βρόχου και της τρέχουσας επανάληψης. Η <span class="courier-code">break</span> μπορεί να δοθεί σε οποιοδήποτε σημείο μέσα σε έναν βρόχο <span class="courier-code">for</span> ή <span class="courier-code">while</span>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-14</b>: Σε ένα πρόγραμμα ζητείται να δοθεί από τον χρήστη ένας θετικός ακέραιος αριθμός. Αν δεν δοθεί τέτοιος αριθμός, τότε να επαναλαμβάνεται η διαδικασία εισαγωγής στοιχείων μέχρι να δοθεί θετικός ακέραιος. </p>
			</blockquote>
			<p class="no-indent">Αυτή η διαδικασία περιγράφηκε στο Κεφάλαιο 3, με τις δομές ελέγχου, και αναφέρεται συχνά ως <i>έλεγχος εγκυρότητας</i><i> (validity check)</i>. Γίνεται πολύ εύκολα με τις λειτουργίες <i>διαχείρισης εξαιρέσεων (exceptions handling)</i> της Python και στο σημείο αυτό παρουσιάζεται ολοκληρωμένα. Η διαδικασία που κωδικοποιείται στη Λίστα Κώδικα 4-18 περιλαμβάνει, εκτός από τις δομές <span class="courier-code">except</span>, και εντολές επανάληψης.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-18 | <span class="courier-code">while</span> – έλεγχος εγκυρότητας</figcaption><img src="media/ListaKodika-4-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Η γραμμή 1 του κώδικα δημιουργεί τεχνητά έναν ατέρμονα βρόχο και αυτό είναι κάτι που συνήθως προκαλεί, τουλάχιστον, σύγχυση σε κάποιον που δεν έχει συνηθίσει τους ιδιωματισμούς της Python<sup class="superscript CharOverride-1"><span id="footnote-051-backlink"><a href="#footnote-051">43</a></span></sup>. Η έξοδος από τον βρόχο δεν γίνεται από τη συνθήκη της <span class="courier-code">while</span> (η οποία είναι συνέχεια <span class="courier-code">True</span> και αυτό δεν αλλάζει), αλλά από το σημείο που υπάρχει η εντολή <span class="courier-code">break</span>. Αν όλα πάνε όπως πρέπει, δηλαδή αν δοθεί ακέραιος και θετικός αριθμός, τότε θα εκτελεστεί η <span class="courier-code">break</span> και θα σταματήσει ο βρόχος εκεί. Οι επόμενες εντολές μετά την <span class="courier-code">break</span> δεν θα εκτελεστούν και η <span class="courier-code">while</span> θα τερματιστεί. </p>
			<p>Λίγο πιο πριν (στις γραμμές 2 έως 6), ελέγχεται η δυνατότητα μετατροπής του αριθμού που δίνεται μέσω της <span class="courier-code">input</span> σε ακέραιο, με τη χρήση παγίδευσης σφαλμάτων. Αν ο αριθμός που δοθεί δεν μπορέσει να μετατραπεί σε ακέραιο (γραμμή 3) μέσω της συνάρτησης <span class="courier-code">int</span>, θα εμφανιστεί κατάλληλο μήνυμα και θα ξεκινήσει η επόμενη επανάληψη. Αν ο αριθμός μπορέσει να μετατραπεί σε ακέραιο (από κείμενο που επιστρέφει πάντα η <span class="courier-code">input</span>), τότε θα ελεγχθεί με μια <span class="courier-code">if</span> αν είναι θετικός. Αν είναι, τότε θα εκτελεστεί η <span class="courier-code">break</span>, οπότε ότι υπάρχει μετά από αυτή την εντολή θα αγνοηθεί, ο βρόχος θα τερματιστεί άμεσα και ο έλεγχος θα περάσει στην αμέσως επόμενη, μετά τη <span class="courier-code">while</span>, εντολή. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-15</b>: Να γράψετε πρόγραμμα που θα δέχεται 10 αριθμούς ή και λιγότερους, αν το άθροισμά τους είναι μεγαλύτερο από 100.</p>
			</blockquote>
			<p class="no-indent">Το παράδειγμα θα υλοποιηθεί στη Λίστα Κώδικα 4-19 με τρεις διαφορετικούς τρόπους, καθένας από τους οποίους μπορεί να χρησιμοποιηθεί ξεχωριστά, σε κάθε περίπτωση.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-19 | <span class="courier-code">while</span> – διακοπή εισαγωγής στοιχείων</figcaption><img src="media/ListaKodika-4-19_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-7</b>: Χρησιμοποιείται η <span class="courier-code">for</span> με τη χρήση της συνάρτησης <span class="courier-code">range</span> που παράγει 10 αριθμούς. Οι επαναλήψεις θα τελειώσουν, είτε μετά τη λειτουργία της <span class="courier-code">for</span>, είτε, εναλλακτικά, μετά την εκτέλεση της <span class="courier-code">break</span>.</p>
			<p class="no-indent"><b>Γραμμές 8-13</b>: Η <span class="courier-code">while</span> χρησιμοποιεί μια σύνθετη συνθήκη, με διπλό έλεγχο, που μπορεί να τερματίσει τις επαναλήψεις για οποιοδήποτε από τα δυο κριτήρια έχουν τεθεί.</p>
			<p class="no-indent"><b>Γραμμές 14-21</b>: Δημιουργείται ένας βρόχος με άπειρες επαναλήψεις ο οποίος τερματίζεται με έναν έλεγχο σε <span class="courier-code">if</span>. <b>ΣΗΜΕΙΩΣΗ</b>: ο έλεγχος της <span class="courier-code">if</span> είναι ακριβώς ο αντίθετος από τον έλεγχο της <span class="courier-code">while</span> στη γραμμή 10. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-16</b>: Να γράψετε πρόγραμμα που θα ζητάει από τον χρήστη να βρει έναν αριθμό που έχει «επιλέξει» ο υπολογιστής, δίνοντας αριθμούς μέχρι να τον βρει. Κάθε φορά που ο αριθμός που επιλέγει ο χρήστης είναι μικρότερος ή μεγαλύτερος από τον μυστικό αριθμό, θα εμφανίζεται μήνυμα που θα τον καθοδηγεί αν ο μυστικός αριθμός βρίσκεται πιο πάνω ή πιο κάτω από αυτόν που έδωσε. Στο τέλος να εμφανίζεται το πλήθος των αριθμών που χρειάστηκε να δώσει ο χρήστης μέχρι να βρει τον αριθμό.</p>
			</blockquote>
			<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 4-20.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-20 | Μάντεψε τον αριθμό</figcaption><img src="media/ListaKodika-4-20_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-2</b>: Εισάγεται η βιβλιοθήκη <span class="courier-code">random</span> και χρησιμοποιείται η συνάρτηση <span class="courier-code">randint</span> για τη δημιουργία ενός τυχαίου αριθμού από το 1 έως το 100. Αυτός θα είναι ο μυστικός αριθμός που θα πρέπει να βρει ο παίκτης.</p>
			<p class="no-indent"><b>Γραμμές 4-12</b>: Ο κύριος βρόχος (ατέρμων) του προγράμματος, όπου ο παίκτης δίνει αριθμούς και το πρόγραμμα ανταποκρίνεται με κατάλληλες απαντήσεις-μηνύματα. Η έξοδος γίνεται από άλλο σημείο μέσα στη <span class="courier-code">while</span> με χρήση της <span class="courier-code">break</span>, μόνο στην περίπτωση που βρεθεί ο αριθμός.</p>
			<p class="no-indent"><b>Γραμμές 3, 5</b>: Η μεταβλητή <span class="courier-code">tries</span> είναι στην ουσία ένας μετρητής που καταγράφει το πλήθος των προσπαθειών του παίκτη να «μαντέψει» τον κρυμμένο αριθμό. Το μοτίβο λειτουργίας της είναι ίδιο όπως σε κάθε μετρητή: έξω από τον βρόχο παίρνει μια αρχική τιμή, συνήθως το μηδέν, ενώ σε κάθε επανάληψη ενημερώνεται κατάλληλα, αυξάνεται δηλαδή κατά ένα.</p>
			<p class="no-indent"><b>Γραμμή 6</b>: Ζητείται ένας ακέραιος από τον παίκτη. Η 1η εκτέλεση της εντολής θα δώσει μια τιμή στη μεταβλητή <span class="courier-code">number</span>, χωρίς να είναι γνωστό κάποιο άλλο στοιχείο για το πού βρίσκεται ο μυστικός αριθμός. Σε κάθε επόμενη εκτέλεσή της όμως θα έχει προηγηθεί ένα μήνυμα από το πρόγραμμα για το αν ο μυστικός αριθμός βρίσκεται πιο πάνω ή πιο κάτω από τον επιλεγμένο αριθμό. Αν ο παίκτης επιλέξει κατάλληλα τους αριθμούς του, θα μπορέσει να βρει τον μυστικό αριθμό σε τόσα βήματα, όσα χρειάζεται και ο αλγόριθμος της <i>δυαδικής αναζήτησης (binary search)</i>.</p>
			<p class="no-indent"><b>Γραμμές 7-8</b>: Το σημείο ελέγχου αν βρέθηκε ο αριθμός. Αν βρέθηκε, γίνεται η έξοδος από τον βρόχο.</p>
			<p class="no-indent"><b>Γραμμές 9-12</b>: Σημείο ελέγχου για την εμφάνιση μηνύματος σχετικά με το πού βρίσκεται ο αριθμός. Το τμήμα <span class="courier-code">else</span> αναφέρεται στην περίπτωση που ο αριθμός του παίκτη δεν είναι ίσος αλλά ούτε και μεγαλύτερος από τον μυστικό αριθμό, δηλαδή είναι μικρότερος από αυτόν. </p>
			<p class="no-indent"><b>Γραμμή 13</b>: Το τελικό μήνυμα του παιχνιδιού που πληροφορεί τον νικητή, πλέον, του παιχνιδιού, με πόσες προσπάθειες εντόπισε τον μυστικό αριθμό. Είναι η 1η εντολή μετά τον βρόχο της <span class="courier-code">while</span> και η τελευταία του παιχνιδιού. Χαρακτηριστικά εδώ, δεν απαιτείται κάποιος επιπλέον έλεγχος για το αν τον βρήκε ή όχι, αφού η έξοδος από τον βρόχο θα γίνει μόνο σε αυτή την περίπτωση.</p>
		</section>
		<section role="section" id="ch6se7">
			<h1><span role="label">4.7</span> Η εντολή <span class="courier-code">continue</span></h1>
			<p class="no-indent">Πολλές φορές χρειάζεται να μην ολοκληρώνεται η εκτέλεση όλων των εντολών μιας επανάληψης, να παρακάμπτονται κάποιες και να συνεχίζεται η ροή του προγράμματος με την εκτέλεση της επόμενης επανάληψης. Αυτό μπορεί να γίνει με τη χρήση της εντολής <span class="courier-code">continue</span>. Μόλις εκτελεστεί αυτή, ο διερμηνευτής τερματίζει την τρέχουσα επανάληψη και επιστρέφει τον έλεγχο πίσω στην εντολή επανάληψης (στον ορισμό της <span class="courier-code">for</span> ή της <span class="courier-code">while</span>), ώστε να προχωρήσει άμεσα στην εκτέλεση της επόμενης επανάληψης ή στον τερματισμό της και στην έξοδο από τον βρόχο.</p>
			<p>Το Παράδειγμα 4-14 μπορεί να λυθεί λίγο διαφορετικά, χρησιμοποιώντας την <span class="courier-code">continue</span>, δίνοντας ακριβώς τα ίδια αποτελέσματα με ένα στοιχείο ελέγχου λιγότερο (το <span class="courier-code">else</span>). Αυτό φαίνεται στη Λίστα Κώδικα 4-21.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-21 | Έλεγχος εγκυρότητας – <span class="courier-code">continue</span></figcaption><img src="media/ListaKodika-4-21_fmt.png" alt=""/></figure>
			<p class="no-indent">Εάν προκύψει κάποιο πρόβλημα κατά τη μετατροπή του στοιχείου που δίνεται από τον χρήστη μέσω της <span class="courier-code">input</span> στη γραμμή 3, θα ανιχνευτεί η εξαίρεση <span class="courier-code">ValueError</span> και θα εκτελεστεί η <span class="courier-code">continue</span>. Αυτό θα έχει ως αποτέλεσμα τη διακοπή της τρέχουσας επανάληψης και την επιστροφή πίσω στη <span class="courier-code">while</span> για να ξεκινήσει μια νέα επανάληψη. Έτσι, οι εντολές των γραμμών 7 έως και 9 δεν θα εκτελεστούν όποτε εκτελείται η <span class="courier-code">continue</span>. Μπορεί όμως να εκτελεστούν σε επόμενη επανάληψη. Το 2ο στοιχείο ελέγχου είναι στη γραμμή 7, με τη χρήση μιας <span class="courier-code">if</span> η οποία μπορεί να οδηγήσει στην έξοδο από τον βρόχο, αν έχει δοθεί θετικός ακέραιος αριθμός. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-17</b>: Το τυχερό παιχνίδι με τα ζάρια παίζεται ως εξής:</p>
			</blockquote>
			<p>Ο παίκτης ρίχνει δυο ζάρια. Υπάρχουν οι εξής περιπτώσεις:</p>
			<p class="arabic-level-2"><span>1.</span>Αν τα ζάρια έχουν άθροισμα 7 ή 11, κερδίζει.</p>
			<p class="arabic-level-2"><span>2.</span>Αν τα ζάρια έχουν άθροισμα 2, 3 ή 12, χάνει.</p>
			<p class="arabic-level-2"><span>3.</span>Αν τα ζάρια έχουν οποιοδήποτε άλλο άθροισμα, τότε ξαναπαίζει. </p>
			<ul><li>Αν φέρει άθροισμα μικρότερο από 7, κερδίζει.</li>
			<li>Αν φέρει άθροισμα ίσο με 7, χάνει.</li>
			<li>Για οποιοδήποτε άλλο αποτέλεσμα συνεχίζει να παίζει μέχρι να κερδίσει ή να χάσει, σύμφωνα με τους δυο τελευταίους κανόνες.</li>
			</ul><p class="no-indent">Να γράψετε πρόγραμμα που θα υλοποιεί το παιχνίδι με τα ζάρια, για έναν παίκτη και έναν γύρο παιχνιδιού (θα μπορούσε να γίνει, δίκην εξάσκησης, και για περισσότερους γύρους και περισσότερους παίκτες).</p>
			<p class="no-indent">Το πρόγραμμα παρουσιάζεται στη Λίστα Κώδικα 4-22.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-22 | Το παιχνίδι με τα ζάρια</figcaption><img src="media/ListaKodika-4-22_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1, 3-4</b>: Εισάγεται η βιβλιοθήκη <span class="courier-code">random</span> και χρησιμοποιείται για την προσομοίωση της ρίψης ζαριών η συνάρτηση <span class="courier-code">randint</span> που δημιουργεί έναν τυχαίο αριθμό από το <span class="courier-code">1</span> έως το <span class="courier-code">6</span>. Το ίδιο γίνεται και στις γραμμές 15 και 16.</p>
			<p class="no-indent"><b>Γραμμές 2-14</b>: Η εντολή <span class="courier-code">input</span> δεν δέχεται καμία τιμή, απλά σταματάει τη ροή του προγράμματος και ζητάει από τον παίκτη να πατήσει το πλήκτρο <img src="media/enter.png" class="enter"/> ώστε να συνεχιστεί το πρόγραμμα.</p>
			<p class="no-indent"><b>Γραμμές 7-10</b>: Ελέγχεται αν ο παίκτης κέρδισε ή αν έχασε. Υπάρχει περίπτωση να συνεχιστεί η διαδικασία με νέα ρίψη των «ζαριών». Αυτό γίνεται μέσα στον βρόχο που ακολουθεί.</p>
			<p class="no-indent"><b>Γραμμές 13-26</b>: Το παιχνίδι συνεχίζεται σύμφωνα με τους κανόνες, μέχρι να κερδίσει ή να χάσει ο παίκτης. Οι γραμμές 2-6 και 14-18 είναι ακριβές οι ίδιες. Σε αυτή την περίπτωση, μπορεί να τοποθετηθούν μέσα σε συνάρτηση ώστε να μην επαναλαμβάνονται πολλές φορές μέσα στον κώδικα. Σχετικά με τις συναρτήσεις θέματα παρουσιάζονται στο Κεφάλαιο 10. Η 2η <span class="courier-code">while</span> είναι ένθετη δομή. Περιγράφεται σε επόμενη ενότητα.</p>
			<p class="no-indent">Δοκιμάζοντας την τύχη μας παίξαμε και εμείς το παιχνίδι, φέρνοντας –εντελώς «τυχαία»!– τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">Πάτα </span><span class="courier-code">&lt;ENTER&gt; για να ρίξεις τα ζάρια</span></p>
			<p><span class="courier-code">Έφερες 5 και 5 Άθροισμα: 10</span></p>
			<p><span class="courier-code">Ξαναπαίζεις</span></p>
			<p><span class="courier-code">Πάτα &lt;ENTER&gt; για να ρίξεις τα ζάρια</span></p>
			<p><span class="courier-code">Έφερες 2 και 3 Άθροισμα: 5</span></p>
			<p><span class="courier-code">Κέρδισες (&lt;7)</span></p>
		</section>
		<section role="section" id="ch6se8">
			<h1><span role="label">4.8</span> Η εντολή <span class="courier-code">else</span></h1>
			<p class="no-indent">Η έξοδος από έναν βρόχο μπορεί να γίνει με δυο τρόπους. Είτε με τη συνθήκη (στη <span class="courier-code">while</span>) ή τον τερματισμό της καταμέτρησης (στη <span class="courier-code">for</span>), είτε μέσω της εντολής <span class="courier-code">break</span>. Στην Python, μια εντολή επανάληψης μπορεί να ανιχνεύσει τον τρόπο με τον οποίο σταμάτησε να εκτελείται και να τρέξει επιπλέον εντολές. Και οι δυο εντολές επανάληψης διαθέτουν το προαιρετικό όρισμα ή εντολή <span class="courier-code">else</span>, το οποίο σηματοδοτεί την έναρξη ενός μπλοκ εντολών, εκτός βρόχου, το οποίο θα εκτελεστεί μια μόνο φορά και μόνο εάν η έξοδος από τον βρόχο έγινε χωρίς τη χρήση κάποιας εντολής <span class="courier-code">break</span>. Αυτό έχει αποτέλεσμα την απλοποίηση του κώδικα, μέσα και έξω από την επανάληψη, ειδικά σε περιπτώσεις που απαιτείται έλεγχος των αποτελεσμάτων του βρόχου μετά την έξοδο από αυτόν.</p>
			<p>Το όρισμα <span class="courier-code">else</span> θα εκτελεστεί μόνο αν η συνθήκη του βρόχου αποτύχει. Κάτι τέτοιο θα σημάνει την έξοδο από τον βρόχο, ενώ το μπλοκ εντολών που υπάρχει στο τμήμα <span class="courier-code">else</span> θα είναι το πρώτο που θα εκτελεστεί μετά τον βρόχο. Αυτό το χαρακτηριστικό της Python, που δεν συναντάται σε πολλές άλλες γλώσσες, έχει ιδιαίτερο ενδιαφέρον και μεγάλη χρησιμότητα, ειδικά σε συνδυασμό με την εντολή <span class="courier-code">break</span>.</p>
			<p>Η εκτέλεση της εντολής <span class="courier-code">continue</span> δεν επηρεάζει και δεν έχει κάποια συνέπεια αναφορικά με την εκτέλεση ή την παράλειψη του τμήματος <span class="courier-code">else</span> μιας εντολής επανάληψης. Αυτό συμβαίνει γιατί η <span class="courier-code">continue</span> οδηγεί σε μια νέα επανάληψη, στον ίδιο βρόχο, και δεν προκαλεί τον τερματισμό της.</p>
			<p>Ακολουθεί παράδειγμα χρήσης της <span class="courier-code">else</span> με έναν βρόχο <span class="courier-code">while</span>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-18</b>: Να γράψετε πρόγραμμα που θα δέχεται μέχρι 10 αριθμούς. Το πρόγραμμα θα σταματάει αμέσως αν δοθεί η τιμή <span class="courier-code">0</span> και θα εμφανίζει αν συνέβη αυτό ή όχι.</p>
			</blockquote>
			<p class="no-indent">Το παράδειγμα υλοποιείται στη Λίστα Κώδικα 4-23 με τη χρήση μιας λογικής μεταβλητής <span class="courier-code">flag</span>, που δηλώνει την ύπαρξη μιας τιμής <span class="courier-code">0</span>, και στη Λίστα Κώδικα 4-24, με χρήση της εντολής <span class="courier-code">else</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-23 | <span class="courier-code">flag</span> – διακοπή εισαγωγής στοιχείων</figcaption><img src="media/ListaKodika-4-23_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις δοθεί μια μηδενική τιμή, η μεταβλητή <span class="courier-code">flag</span> αλλάζει τιμή και τερματίζεται η επανάληψη μέσω της <span class="courier-code">break</span>. Προκειμένου να γίνει ο έλεγχος μετά τη <span class="courier-code">while</span>, σχετικά με το εάν δόθηκε μηδενική τιμή ή όχι, είναι απαραίτητο να οριστεί μια ειδική μεταβλητή για αυτό τον σκοπό. Αυτή η μεταβλητή ονομάζεται συνήθως <i>σημαία </i><i>(flag)</i> και σηματοδοτεί την εμφάνιση ή όχι ενός γεγονότος (στο συγκεκριμένο παράδειγμα την εμφάνιση κάποιας μηδενικής τιμής). </p>
			<p>Ακολουθεί αντίστοιχο πρόγραμμα στη Λίστα Κώδικα 4-24, με την προσθήκη του τμήματος <span class="courier-code">else</span> και ταυτόχρονη αφαίρεση της μεταβλητής <span class="courier-code">flag</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-24 | <span class="courier-code">else</span> – διακοπή εισαγωγής στοιχείων</figcaption><img src="media/ListaKodika-4-24_fmt.png" alt=""/></figure>
			<p class="no-indent">Η χρήση του <span class="courier-code">else</span> απαλλάσσει τον χρήστη από αυτό τον επιπλέον έλεγχο μετά τον βρόχο. Στο παράδειγμα, αν δοθούν μόνο μη μηδενικοί αριθμοί, η <span class="courier-code">break</span> δεν θα εκτελεστεί, ο βρόχος θα τελειώσει λόγω της συνθήκης της <span class="courier-code">while</span> και αμέσως μετά θα εκτελεστεί ο κώδικας που βρίσκεται στο <span class="courier-code">else</span> (στη γραμμή 9). Αντίθετα, αν δοθεί μηδενικός αριθμός, εκτελείται η <span class="courier-code">break</span> και το τμήμα <span class="courier-code">else</span> αγνοείται.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-19</b>: Σε έναν διαγωνισμό ένας εξεταζόμενος δίνει εξετάσεις σε πέντε γνωστικά αντικείμενα. Θεωρείται επιτυχών αν έχει και στα πέντε μαθήματα βαθμό από 5 και πάνω. Διαφορετικά, πρέπει να επαναλάβει την εξέταση.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί το πρόγραμμα με τρεις διαφορετικούς τρόπους στις Λίστες Κώδικα 4-25, 4-26 και 4-27.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-25 | Πέντε βαθμοί με counter</figcaption><img src="media/ListaKodika-4-25_fmt.png" alt=""/></figure>
			<p class="no-indent">Μέσα στην επανάληψη, γίνεται έλεγχος αν ο βαθμός είναι &gt; 5, με κατάλληλη αύξηση του μετρητή. Η τελική απόφαση λαμβάνεται μετά τη <span class="courier-code">for</span>, με τον έλεγχο της τιμής του μετρητή <span class="courier-code">counter</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-26 | Πέντε βαθμοί me flag</figcaption><img src="media/ListaKodika-4-26_fmt.png" alt=""/></figure>
			<p class="no-indent">Δεν χρησιμοποιείται μετρητής αλλά μια λογική μεταβλητή, <span class="courier-code">ep</span>, η οποία, αν βρεθεί βαθμός &lt; 5, αλλάζει τιμή σε <span class="courier-code">False</span>. Σε αυτή την περίπτωση ο βρόχος τερματίζει και ο τελικός έλεγχος γίνεται μετά τη <span class="courier-code">for</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-27 | Πέντε βαθμοί με else</figcaption><img src="media/ListaKodika-4-27_fmt.png" alt=""/></figure>
			<p class="no-indent">Γίνεται χρήση του τμήματος <span class="courier-code">else</span> της <span class="courier-code">for</span>. Έτσι, δεν χρειάζεται ούτε μετρητής αλλά ούτε και κάποια λογική μεταβλητή για τον τελικό έλεγχο του αποτελέσματος. Αν δεν τερματιστεί η <span class="courier-code">for</span> μέσω της <span class="courier-code">break</span>, αν δηλαδή δεν βρεθεί βαθμός &lt; 5, τότε θα εκτελεστεί το τμήμα <span class="courier-code">else</span>. Αν, αντίθετα, βρεθεί βαθμός &lt; 5, τότε εκτελείται η <span class="courier-code">break</span>, αφού πρώτα εμφανιστεί κατάλληλο μήνυμα για την επανάληψη της εξέτασης.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-20</b>: <i>Πρώτος (prime)</i> αριθμός είναι αυτός που διαιρείται ακριβώς μόνο με το 1 και τον εαυτό του. Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό και θα εμφανίζει αν είναι πρώτος ή όχι.</p>
			</blockquote>
			<p class="no-indent">Το πρόβλημα λύνεται με δυο διαφορετικούς τρόπους: με βοηθητική μεταβλητή ή με χρήση του τμήματος <span class="courier-code">else</span> της <span class="courier-code">while</span>. Tα προγράμματα παρουσιάζονται στις Λίστες Κώδικα 4-28 και 29.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-28 | Πρώτος αριθμός με <span class="courier-code">flag</span></figcaption><img src="media/ListaKodika-4-28_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">prime</span> αλλάζει τιμή στη γραμμή 6, λίγο προτού διακοπεί η λειτουργία της <span class="courier-code">while</span> από την <span class="courier-code">break</span> στη γραμμή 7. Η τιμή της μεταβλητής <span class="courier-code">prime</span> χρησιμοποιείται στον τελικό έλεγχο στη γραμμή 9, όπου και επιλέγεται ένα από τα δυο μηνύματα για να εμφανιστεί στην οθόνη.</p>
			<p>Η ίδια διαδικασία συμβαίνει και στη Λίστα Κώδικα 4-29, με μόνη διαφορά ότι απλοποιείται αρκετά, χωρίς να χρειάζεται επιπλέον μεταβλητή που να διακρίνει ποια περίπτωση ισχύει για τη μεταβλητή <span class="courier-code">n</span>. Αν βρεθεί κάποιος αριθμός που να διαιρεί ακριβώς την τιμή του <span class="courier-code">n</span>, θα εμφανιστεί κατάλληλο μήνυμα και η διαδικασία θα τερματιστεί. Αν όμως η <span class="courier-code">while</span> τελειώσει κανονικά, χωρίς τη βοήθεια της <span class="courier-code">break</span>, αυτό σημαίνει ότι το <span class="courier-code">n</span> δεν διαιρείται ακριβώς με κανέναν αριθμό, οπότε θα εμφανιστεί το μήνυμα ότι το <span class="courier-code">n</span> είναι πρώτος. Αυτό γίνεται στο τμήμα <span class="courier-code">else</span>, που εκτελείται όταν δεν διακοπεί ο βρόχος από κάποια εντολή <span class="courier-code">break</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-29 | Πρώτος αριθμός με <span class="courier-code">else</span></figcaption><img src="media/ListaKodika-4-29_fmt.png" alt=""/></figure>
		</section>
		<section role="section" id="ch6se9">
			<h1><span role="label">4.9</span> Εμφωλευμένες επαναληπτικές δομές</h1>
			<p class="no-indent">Όπως και οι εντολές ελέγχου <span class="courier-code">if</span>, που μπορούν να βρεθούν η μια μέσα στην άλλη, ως ένθετα τμήματα, έτσι και κάθε εντολή επανάληψης μπορεί να ενσωματωθεί σε μια άλλη. Πρακτικά, ο μόνος περιορισμός που τίθεται είναι η σωστή οργάνωση της λογικής του κώδικα, ώστε να επιλύεται αποδοτικά το κάθε πρόβλημα. Κάθε δυνατός συνδυασμός μπορεί να δοθεί, χωρίς περιορισμούς και όρια, αρκεί βέβαια να οδηγεί σε πεπερασμένη λύση του προβλήματος. Στην πράξη, τέτοιες δομές είναι απαραίτητες όταν χρειάζεται να επεξεργαστούν πολλές φορές πολλά δεδομένα, όπως ένα κατάστημα το οποίο διαχειρίζεται πολλούς πελάτες και κάθε πελάτης αγοράζει πολλά και άγνωστα σε πλήθος προϊόντα – ή σε μια αθλητική διοργάνωση όπου συμμετέχουν πολλοί αθλητές και ο καθένας έχει πολλές επιδόσεις, σε μια εξεταστική διαδικασία που παίρνουν μέρος πολλοί εξεταζόμενοι και καθένας από αυτούς εξετάζεται σε πολλά μαθήματα κ.λπ.</p>
			<p>Με την εμφώλευση δομών επανάληψης, θα πρέπει μια εντολή να βρίσκεται ολόκληρη μέσα σε μια άλλη, όπως ακριβώς συμβαίνει και με τις ένθετες δομές απόφασης. Ακολουθούν μερικά παραδείγματα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-21</b>: Να γράψετε πρόγραμμα που θα τυπώνει την προπαίδεια για τους αριθμούς από το 1 μέχρι και το 10.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί το πρόγραμμα στη Λίστα Κώδικα 4-30.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-30 | Προπαίδεια</figcaption><img src="media/ListaKodika-4-30_fmt.png" alt=""/></figure>
			<p class="no-indent">Αν τρέξουμε το πρόγραμμα, θα εμφανιστεί ο παρακάτω πίνακας στοιχείων: </p>
			<p><span class="courier-code">&#9;1&#9;2&#9;3&#9;4&#9;5&#9;6&#9;7&#9;8&#9;9&#9;10</span></p>
			<p><span class="courier-code">&#9;2&#9;4&#9;6&#9;8&#9;10&#9;12&#9;14&#9;16&#9;18&#9;20</span></p>
			<p><span class="courier-code">&#9;3&#9;6&#9;9&#9;12&#9;15&#9;18&#9;21&#9;24&#9;27&#9;30</span></p>
			<p><span class="courier-code">&#9;4&#9;8&#9;12&#9;16&#9;20&#9;24&#9;28&#9;32&#9;36&#9;40</span></p>
			<p><span class="courier-code">&#9;5&#9;10&#9;15&#9;20&#9;25&#9;30&#9;35&#9;40&#9;45&#9;50</span></p>
			<p><span class="courier-code">&#9;6&#9;12&#9;18&#9;24&#9;30&#9;36&#9;42&#9;48&#9;54&#9;60</span></p>
			<p><span class="courier-code">&#9;7&#9;14&#9;21&#9;28&#9;35&#9;42&#9;49&#9;56&#9;63&#9;70</span></p>
			<p><span class="courier-code">&#9;8&#9;16&#9;24&#9;32&#9;40&#9;48&#9;56&#9;64&#9;72&#9;80</span></p>
			<p><span class="courier-code">&#9;9&#9;18&#9;27&#9;36&#9;45&#9;54&#9;63&#9;72&#9;81&#9;90</span></p>
			<p><span class="courier-code">&#9;10&#9;20&#9;30&#9;40&#9;50&#9;60&#9;70&#9;80&#9;90&#9;100</span></p>
			<p class="no-indent">Για κάθε αριθμό στο εύρος 1-10 (γραμμή 1) δίνεται το γινόμενό του (γραμμή 3) με κάθε αριθμό από το 1-10 (γραμμή 2). Η 2η <span class="courier-code">print</span>, στη γραμμή 4, απλά αλλάζει γραμμή για τα γινόμενα του επόμενου αριθμού. Για κάθε εξωτερική επανάληψη, δηλαδή για κάθε <span class="courier-code">i</span>, θα γίνουν 10 εσωτερικές επαναλήψεις. Η 1η <span class="courier-code">print</span> επομένως θα εκτελεστεί συνολικά 10 × 10 = 100 φορές, ενώ η 2η, που βρίσκεται στον εξωτερικό βρόχο, θα εκτελεστεί 10 φορές. Κάθε φορά που εκτελείται μια νέα επανάληψη για το <span class="courier-code">i</span>, ο εσωτερικός βρόχος εκτελείται από την αρχή, δέκα φορές ακόμη. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-22</b>: Να γράψετε πρόγραμμα που θα χειρίζεται τις αγορές πελατών ενός καταστήματος. Για κάθε πελάτη θα δέχεται την τιμή και τα τεμάχια κάθε προϊόντος που αγόρασε και θα σταματά μόλις δοθεί ως τιμή το 0. Στο τέλος θα εμφανίζει το ποσό που πρέπει να πληρώσει. Μετά από κάθε πελάτη, θα δέχεται εντολή για συνέχεια της διαδικασίας με άλλο πελάτη ή για τον τερματισμό της. Μόλις τερματιστεί η διαδικασία, θα εμφανίζει το συνολικό ποσό του ταμείου, δηλαδή το ποσό που εισέπραξε από όλους τους πελάτες.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί το αντίστοιχο πρόγραμμα στη Λίστα Κώδικα 4-31.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-31 | Market</figcaption><img src="media/ListaKodika-4-31_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 3</b>: Εκκίνηση του εξωτερικού βρόχου. Η διακοπή του καθορίζεται από την απόκριση του χρήστη στις εντολές <span class="courier-code">input</span> των γραμμών 2 και 13 με βάση την τιμή της μεταβλητής <span class="courier-code">ans</span>. Χρησιμοποιείται η μέθοδος κειμένου <span class="courier-code">upper</span> (περιγράφεται εκτενώς στο Κεφάλαιο 6 με τις συμβολοσειρές) για να συμπεριλάβει πιθανές απαντήσεις με ‘<span class="courier-code">N</span>’ και ‘<span class="courier-code">ν</span>’ από τον χρήστη, χωρίς να κάνει τη συνθήκη πιο πολύπλοκη. Αν δοθεί το ‘<span class="courier-code">N</span>’ από την αρχή, ο βρόχος δεν θα εκτελεστεί καμία φορά και το πρόγραμμα θα τελειώσει.</p>
			<p class="no-indent"><b>Γραμμές 3-13</b>: Είναι ο εξωτερικός βρόχος του προγράμματος όπου γίνονται όλοι οι υπολογισμοί. </p>
			<p class="no-indent"><b>Γραμμές 4-11</b>: Οι γραμμές αυτές αφορούν τις διαδικασίες που συμβαίνουν για τα προϊόντα που αγοράζει ένας πελάτης. Είναι η εσωτερική επανάληψη, όπου ζητείται η τιμή και η ποσότητα από κάθε προϊόν και υπολογίζεται η αξία του (<span class="courier-code">val</span>). Αυτή προστίθεται (στη γραμμή 9) στη συνολική αξία (<span class="courier-code">s2</span>) των αγορών ενός πελάτη. Η διαδικασία σταματά όταν δοθεί τιμή ίση με <span class="courier-code">0</span> (γραμμή 5 ή 10), οπότε εμφανίζεται η συνολική αξία των αγορών του πελάτη.</p>
			<p class="no-indent"><b>Γραμμές 12-13</b>: Ενημερώνεται το συνολικό ποσό του ταμείου (<span class="courier-code">s</span>) και ζητείται απάντηση από τον χρήστη για συνέχεια ή τερματισμό της διαδικασίας. </p>
			<p class="no-indent"><b>Γραμμή 14</b>: Είναι η 1η εντολή έξω από τον βρόχο του προγράμματος και η τελευταία που θα εκτελεστεί, εμφανίζοντας το συνολικό ποσό του ταμείου. Η μεταβλητή <span class="courier-code">s</span> είναι ένας αθροιστής, η ποσότητα του οποίου αυξάνεται με το ποσό κάθε πελάτη στη γραμμή 12.</p>
			<p class="no-indent">Με μια δοκιμαστική εκτέλεση του προγράμματος, θα εμφανιστούν τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">Επόμενος πελάτης (Ν/Ο)</span><span class="courier-code"><b>Ν</b></span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>20</b></span></p>
			<p><span class="courier-code">Τεμάχια:</span><span class="courier-code"><b>3</b></span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>12</b></span></p>
			<p><span class="courier-code">Τεμάχια:</span><span class="courier-code"><b>10</b></span></p>
			<p><span class="courier-code">Δώσε την τιμή:</span><span class="courier-code"><b>0</b></span></p>
			<p><span class="courier-code">Αξία αγορών: 180.0</span></p>
			<p><span class="courier-code">Επόμενος πελάτης (Ν/Ο)</span><span class="courier-code"><b>Ο</b></span></p>
			<p><span class="courier-code">Συνολικά έσοδα 180.0</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-23</b>: Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <i>n</i> και θα εμφανίζει όλους τους αριθμούς από το 2 μέχρι και το <i>n</i> που είναι πρώτοι.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-32 | Πρώτοι αριθμοί</figcaption><img src="media/ListaKodika-4-32_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 2</b>: Ξεκινάει ο εξωτερικός βρόχος για όλους τους αριθμούς <span class="courier-code">i</span> μέχρι και το <span class="courier-code">n</span>. </p>
			<p class="no-indent"><b>Γραμμή 4</b>: Ξεκινάει ο εσωτερικός βρόχος για να βρεθεί αν ένας αριθμός <span class="courier-code">i</span> είναι πρώτος. Η διαδικασία είναι απλή (και όχι η πιο αποτελεσματική). Ξεκινάει με τον αριθμό <span class="courier-code">2</span> και προχωράει σε καθέναν επόμενο αριθμό, ελέγχοντας αν διαιρείται ακριβώς με τον αριθμό <span class="courier-code">i</span>. Αν βρεθεί τέτοιος αριθμός, η διαδικασία σταματά (με την εντολή <span class="courier-code">break</span>). Ο αριθμός <span class="courier-code">i</span> δεν είναι πρώτος. Αν εξαντληθεί όλη η <span class="courier-code">while</span>, αυτό σημαίνει ότι δεν υπάρχει αριθμός <span class="courier-code">j</span>, από το <span class="courier-code">2</span> μέχρι το <span class="courier-code">i-1</span>, που να διαιρεί ακριβώς το <span class="courier-code">i</span>, οπότε το <span class="courier-code">i</span> είναι πρώτος. Τρέχει το τμήμα <span class="courier-code">else</span>, όπου εμφανίζεται ο αριθμός <span class="courier-code">i</span>.</p>
			<p class="no-indent">Ακολουθούν δυο δοκιμαστικές εκτελέσεις του προγράμματος, για τους πρώτους αριθμούς μέχρι το 20 και μέχρι το 50:</p>
			<p><span class="courier-code">Δώσε έναν ακέραιο:</span><span class="courier-code"><b>20</b></span></p>
			<p><span class="courier-code">2 3 5 7 11 13 17 19</span></p>
			<p><span class="courier-code">Δώσε έναν ακέραιο:</span><span class="courier-code"><b>50</b></span></p>
			<p><span class="courier-code">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-24</b>: Κατά την εκκίνηση ενός κινητού τηλεφώνου ζητείται από τον χρήστη να πληκτρολογήσει τον κωδικό pin. Έχει τρεις προσπάθειες για να δώσει το σωστό pin. Αν δεν δοθεί σωστός κωδικός, τότε ζητείται ο κωδικός puk. Σε αυτή την περίπτωση έχει 10 προσπάθειες για να δώσει τον σωστό κωδικό, αλλιώς το τηλέφωνο κλειδώνει. Να γράψετε πρόγραμμα που θα κάνει προσομοίωση αυτής της διαδικασίας.</p>
			</blockquote>
			<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 4-33.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-33 | Pin και puk</figcaption><img src="media/ListaKodika-4-33_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμές 1-2</b>: Δίνονται οι κωδικοί <span class="courier-code">pin</span> και <span class="courier-code">puk</span> που θα χρησιμοποιηθούν στο πρόγραμμα.</p>
			<p class="no-indent"><b>Γραμμή 4</b>: Ξεκινάει ένας εξωτερικός βρόχος ο οποίος περιλαμβάνει τον έλεγχο των κωδικών <span class="courier-code">pin</span> που πληκτρολογεί ο χρήστης. Η μεταβλητή <span class="courier-code">tr</span> εκφράζει το πλήθος των κωδικών που έχει δώσει ο χρήστης.</p>
			<p class="no-indent"><b>Γραμμές 7-10</b>: Γίνεται ο έλεγχος για την ορθή πληκτρολόγηση του <span class="courier-code">pin</span>. Οι γραμμές 8 και 10 σταματούν το πρόγραμμα προτού προχωρήσει στον εσωτερικό βρόχο που σχετίζεται με το <span class="courier-code">puk</span>, επιστρέφοντας πίσω στη <span class="courier-code">while</span>, μέσω της <span class="courier-code">continue</span>, ή βγαίνοντας από τον βρόχο, μέσω της <span class="courier-code">break</span>. </p>
			<p class="no-indent"><b>Γραμμές 13-22</b>: Παρόμοια λειτουργία εκτελεί και ο εσωτερικός βρόχος. Αν σταματήσει, μέσω της <span class="courier-code">break</span> στη γραμμή 17, ακολουθεί 2ο <span class="courier-code">break</span> που σταματάει και τον εξωτερικό βρόχο, οπότε σταματούν οι έλεγχοι και η είσοδος στο λογισμικό του τηλεφώνου συνδέεται με ένα μήνυμα καλωσορίσματος. </p>
			<p class="no-indent"><b>Γραμμές 21-22</b>: Είναι μια λειτουργία που δεν κάνουμε συχνά. Ο 3ος στη σειρά βρόχος είναι ατέρμων και θα οδηγήσει στο «κόλλημα» του προγράμματος. </p>
			<p class="no-indent">Δίνονται δυο πιθανές εκτελέσεις του κώδικα. Η πρώτη: </p>
			<p><span class="courier-code">Δώσε pin (έχεις 3 προσπάθειες):1234</span></p>
			<p><span class="courier-code">Καλώς όρισες</span></p>
			<p class="no-indent">και η δεύτερη:</p>
			<p><span class="courier-code">Δώσε pin (έχεις 3 προσπάθειες):</span><span class="courier-code"><b>1</b></span></p>
			<p><span class="courier-code">Δώσε pin (έχεις 2 προσπάθειες):</span><span class="courier-code"><b>2</b></span></p>
			<p><span class="courier-code">Δώσε pin (έχεις 1 </span><span class="courier-code">προσπάθειες):</span><span class="courier-code"><b>3</b></span></p>
			<p><span class="courier-code">Το pin κλείδωσε.</span></p>
			<p><span class="courier-code">Δώσε puk (έχεις 10 προσπάθειες):</span><span class="courier-code"><b>12</b></span></p>
			<p><span class="courier-code">Δώσε puk (έχεις 9 προσπάθειες):</span><span class="courier-code"><b>123456789</b></span></p>
			<p><span class="courier-code">Καλώς όρισες</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 4-25</b>: Να γράψετε πρόγραμμα που θα ζητάει τον <i>κωδικό (password)</i> προτού προχωρήσει. Στις τρεις αποτυχημένες προσπάθειες, το πρόγραμμα θα κλειδώνει προσωρινά, για 30 δευτερόλεπτα, προτού δεχθεί έναν νέο κωδικό.</p>
			</blockquote>
			<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 4-34.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 4-34 | Μυστικός αριθμός</figcaption><img src="media/ListaKodika-4-34_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 1</b>: Εισάγεται η βιβλιοθήκη <span class="courier-code">time</span> για τη χρονοκαθυστέρηση των 30 δευτερολέπτων.</p>
			<p class="no-indent"><b>Γραμμές 4, 17</b>: Δίνονται οι κωδικοί από τον χρήστη. Η 1η <span class="courier-code">input</span> τρέχει για την 1η προσπάθεια, ενώ η 2η για κάθε επόμενη προσπάθεια μέσα στον βρόχο.</p>
			<p class="no-indent"><b>Γραμμή 5</b>: Ο βρόχος της <span class="courier-code">while</span> θα τρέξει μόνο όσο γίνονται ανεπιτυχείς προσπάθειες από τον χρήστη να δώσει το σωστό συνθηματικό. Αν δοθεί το σωστό, τότε ο βρόχος σταματά.</p>
			<p class="no-indent"><b>Γραμμές 9-15</b>: Μόλις γίνουν τρεις αποτυχημένες προσπάθειες, το πρόγραμμα θα «παγώσει» για 30 δευτερόλεπτα, μπαίνοντας στον βρόχο του <span class="courier-code">for</span> και εκτελώντας την εντολή <span class="courier-code">sleep</span> τριάντα φορές. Προσπαθήστε να καταλάβετε τι γίνεται στη γραμμή 13. </p>
			<p><span class="courier-code">Δώσε το συνθηματικό</span><span class="courier-code">:</span><span class="courier-code"><b>2</b></span></p>
			<p><span class="courier-code">Λάθος συνθηματικό. Προσπάθησε ξανά</span></p>
			<p><span class="courier-code">Έχεις ακόμη 2 προσπάθειες</span></p>
			<p><span class="courier-code">Δώσε το συνθηματικό:</span><span class="courier-code"><b>3</b></span></p>
			<p><span class="courier-code">Λάθος συνθηματικό. Προσπάθησε ξανά</span></p>
			<p><span class="courier-code">Έχεις ακόμη 1 προσπάθειες</span></p>
			<p><span class="courier-code">Δώσε το συνθηματικό:</span><span class="courier-code"><b>1</b></span></p>
			<p><span class="courier-code">Λάθος συνθηματικό. Προσπάθησε ξανά</span></p>
			<p><span class="courier-code">Έχεις ακόμη 0 προσπάθειες</span></p>
			<p><span class="courier-code">Η επόμενη προσπάθειά σου ξεκινάει σε...</span></p>
			<p><span class="courier-code">0 #εμφανίζεται ο χρόνος που απομένει με αντίστροφη μέτρηση</span></p>
			<p><span class="courier-code">Δώσε το συνθηματικό:</span><span class="courier-code"><b>1234</b></span></p>
			<p><span class="courier-code">Καλώς όρισες</span></p>
		</section>
		<section role="section" id="ch6se10" data-featured="chapter-review">
			<h1><span role="label">4.10</span> Περίληψη</h1>
			<p class="no-indent">Βασικό στοιχείο της Python και αντικείμενο αυτού του κεφαλαίου ήταν οι επαναληπτικές δομές <span class="courier-code">for</span> και <span class="courier-code">while</span>. Οι εντολές αυτές, μαζί με τις <span class="courier-code">break</span>, <span class="courier-code">continue</span> και <span class="courier-code">else</span>, συνθέτουν ένα ολοκληρωμένο σύνολο εργαλείων που επιτρέπει την κατασκευή σύνθετων προγραμμάτων για την επίλυση πολύπλοκων προβλημάτων. Μέσα από ολοκληρωμένα παραδείγματα και αντιπροσωπευτικά σενάρια μελετήθηκαν περιπτώσεις χρήσης των εντολών επανάληψης, μαζί με την ενσωμάτωση δομών επιλογής, λειτουργιών ελέγχου σφαλμάτων και διαχείρισης εξαιρέσεων. Αναφέρθηκαν κάποια εισαγωγικά στοιχεία για άλλες δομές, όπως η λίστα, που παρουσιάζονται στη συνέχεια του βιβλίου.</p>
			
		</section>
		<section role="section" id="ch6se11" data-featured="chapter-questions">
			<h1><span role="label">4.11</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Ποιες εντολές επανάληψης έχει η Python;</li>
			<li>Ποια η λειτουργία της συνάρτησης <span class="courier-code">range</span>;</li>
			<li>Ποια είναι η λειτουργία του τελεστή <span class="courier-code">in</span> σε μια δομή <span class="courier-code">for</span>;</li>
			<li>Ποια είναι η λειτουργία του τμήματος <span class="courier-code">else</span> σε μια δομή επανάληψης;</li>
			<li>Πώς λειτουργεί η εντολή <span class="courier-code">while</span>;</li>
			<li>Πως γίνεται η εμφώλευση εντολών επανάληψης; Πρέπει να τηρούνται κάποιοι κανόνες κατά τη χρήση τους;</li>
			<li>Ποια είναι η λειτουργία της εντολής <span class="courier-code">break</span>; Σε τι χρησιμεύει αυτή; Σε ποιες περιπτώσεις χρησιμοποιείται;</li>
			<li>Ποια είναι η λειτουργία της εντολής <span class="courier-code">continue</span>; Πότε τη χρησιμοποιούμε; Σε τι χρησιμεύει; Πώς και σε ποια σημεία στον κώδικα μπορεί να εμφανίζεται;</li></ol>
			
		</section>
		<section role="section" id="ch6se12" data-featured="chapter-assess">
			<h1><span role="label">4.12</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
				<li>Τι θα εμφανίσει καθένα από τα παρακάτω τμήματα προγράμματος;
				
					<table id="table031" class="Table-Style TableOverride-2">
						<tbody>
							<tr>
								<td class="Table-Style Texts Texts CellOverride-9">
									<p><b>α)</b> </p>
									<p><span class="courier-code">i=10</span></p>
									<p><span class="courier-code">k=10</span></p>
									<p><span class="courier-code">while i&lt;k:</span></p>
									<p><span class="courier-code">&#9;i=k//2</span></p>
									<p><span class="courier-code">&#9;k+=1</span></p>
									<p><span class="courier-code">print(i,k)</span></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-9">
									<p><b>β)</b></p>
									<p><span class="courier-code">for i in range(0,20,3):</span></p>
									<p><span class="courier-code">&#9;print(i)</span></p>
								</td>
								<td class="Table-Style Texts Texts CellOverride-9">
									<p><b>γ)</b></p>
									<p><span class="courier-code">for j in range(10):</span></p>
									<p><span class="courier-code">&#9;j+=1</span></p>
									<p><span class="courier-code">&#9;print(j)</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</li>
				<li>Το παρακάτω τμήμα προγράμματος έχει κάποια προβλήματα. Κάντε τις απαραίτητες διορθώσεις, ώστε να εμφανίζονται οι μονοψήφιοι μονοί αριθμοί.
					<p><span class="courier-code">i=1</span></p>
					<p><span class="courier-code">while i!=10:</span></p>
					<p><span class="courier-code">&#9;print(i)</span></p>
					<p><span class="courier-code">i+=2</span></p>
				</li>
				<li>Να γράψετε πρόγραμμα το οποίο θα εμφανίζει όλους τους τριψήφιους περιττούς αριθμούς που δεν είναι πολλαπλάσια του 5.</li>
				<li>Να γράψετε πρόγραμμα που θα δέχεται ακέραιους αριθμούς και θα τους προσθέτει, υπολογίζοντας, στο τέλος, τον μέσο όρο τους. Η διαδικασία θα σταματά όταν δοθεί το 0. Να γίνεται έλεγχος αν οι αριθμοί δεν είναι ακέραιοι, εμφανίζοντας κατάλληλο μήνυμα, και να υπάρχει σχετική πρόβλεψη για την περίπτωση που δεν δοθεί μη μηδενικός ακέραιος.</li>
				<li>Ένα φορτηγό πλοίο δέχεται κοντέινερ συνολικού βάρους 10,000 τόνων. Να γράψετε πρόγραμμα που θα δέχεται διαδοχικά κοντέινερ και θα εμφανίζει πόσα κοντέινερ δέχθηκε τελικά, το συνολικό βάρος, το μέσο βάρος των κοντέινερ και πόσο βάρος έμεινε ανεκμετάλλευτο.</li>
				<li>Μια εταιρεία αμείβει τους εργαζόμενούς της σύμφωνα με την προϋπηρεσία και το επίπεδο μόρφωσης.
					<table id="table032">
						<tbody>
							<tr>
								<td rowspan="2">
									<p><b>ΕΠΙΠΕΔΟ ΜΟΡΦΩΣΗΣ</b></p>
								</td>
								<td colspan="2">
									<p><b>ΠΡΟΫΠΗΡΕΣΙΑ (ΕΤΗ)</b></p>
								</td>
							</tr>
							<tr>
								<td>
									<p>0-10</p>
								</td>
								<td>
									<p>&gt;10</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>ΥΠΟΧΡΕΩΤΙΚΗ</p>
								</td>
								<td>
									<p>570</p>
								</td>
								<td>
									<p>690</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>ΜΕΣΗ</p>
								</td>
								<td>
									<p>680</p>
								</td>
								<td>
									<p>990</p>
								</td>
							</tr>
							<tr>
								<td>
									<p>ΑΝΩΤΑΤΗ</p>
								</td>
								<td>
									<p>790</p>
								</td>
								<td>
									<p>1,300</p>
								</td>
							</tr>
						</tbody>
					</table>
				
				<p class="no-indent">Δίνει χρονοεπίδομα 8% για κάθε συμπληρωμένη τριετία που έχει εργαστεί κάθε υπάλληλος. Το σύνολο των κρατήσεων αντιστοιχεί σε 20%. Για καθέναν από τους 180 υπαλλήλους της εταιρείας να δοθεί το επίπεδο μόρφωσης («ΥΕ», «ΜΕ» και «ΑΕ») και ο χρόνος προϋπηρεσίας, καθώς και να υπολογιστεί ο βασικός μισθός, το χρονοεπίδομα, οι κρατήσεις και ο καθαρός μισθός. Να εμφανιστούν, στο τέλος, το συνολικό κόστος μισθοδοσίας και οι συνολικές κρατήσεις.</p>
				</li>
				<li>Σε διαγωνισμό πρόσληψης προσωπικού συμμετέχουν 120 υποψήφιοι και εξετάζονται σε 8 διαγνωστικά τεστ με άριστα το 100. Να γράψετε πρόγραμμα που θα δέχεται τις βαθμολογίες κάθε υποψηφίου και θα υπολογίζει τον μέσο όρο του. Σε συνέντευξη θα κληθούν οι επιτυχόντες, δηλαδή όσοι ξεπέρασαν το 80% από τη μέγιστη βαθμολογία. Για τους επιτυχόντες θα πρέπει να εμφανίζεται το ονοματεπώνυμο και η μέση βαθμολογία τους. Στο τέλος να εμφανίζεται η μέση βαθμολογία των επιτυχόντων και πόσοι είναι αυτοί. Αν δεν υπάρχουν επιτυχόντες να εμφανίζεται κατάλληλο μήνυμα.</li>
				<li>Στα προκριματικά αγώνων στίβου στο άθλημα του άλματος επί κοντώ, συμμετέχουν 22 αθλητές. Έχουν έξι προσπάθειες να ξεπεράσουν το όριο των 5.3 μέτρων. Αν κάποιος το ξεπεράσει, δεν συνεχίζει με άλλη προσπάθεια, ενώ εμφανίζεται το ονοματεπώνυμό του με τη λέξη «προκρίνεται», η επίδοση πρόκρισης και ο αριθμός προσπαθειών που έκανε μέχρι να το πετύχει. Αν καμία από τις προσπάθειες δεν είναι επιτυχής, τότε εμφανίζεται δίπλα στο ονοματεπώνυμο του αθλητή η φράση «Δεν προκρίνεται». Να εμφανιστεί πόσοι έχουν προκριθεί και πόσοι το πέτυχαν με τις λιγότερες προσπάθειες. </li>
				<li>Να γράψετε πρόγραμμα για την παραλλαγή παιχνιδιού Πέτρα-Ψαλίδι-Χαρτί-Σαύρα-Σποκ<sup class="superscript CharOverride-1"><span id="footnote-050-backlink"><a href="#footnote-050">44</a></span></sup>. Το πρόγραμμα θα πρέπει να ζητάει τον αριθμό γύρων που θα παίξει ο παίκτης. Σε κάθε γύρο, με κατάλληλο μήνυμα, θα ζητάει την επιλογή του παίκτη. Θα παράγει τυχαίες τιμές με τις οποίες θα γίνεται ο έλεγχος για το αν κέρδισε ο παίκτης ή ο υπολογιστής. Στο τέλος θα εμφανίζει πόσα παιχνίδια κέρδισε ο παίκτης. Οι κανόνες του παιχνιδιού είναι:
			<ul>
				<li>Το ψαλίδι κόβει το χαρτί.</li>
				<li>Το χαρτί τυλίγει την πέτρα.</li>
				<li>Η πέτρα συνθλίβει τη σαύρα.</li>
				<li>Η σαύρα δηλητηριάζει τον Σποκ.</li>
				<li>Το ψαλίδι αποκεφαλίζει τη σαύρα.</li>
				<li>Η σαύρα τρώει το χαρτί.</li>
				<li>Ο Σποκ σπάει το ψαλίδι.</li>
				<li>Το χαρτί απορρίπτει τον Σποκ.</li>
				<li>Ο Σποκ εξαϋλώνει την πέτρα.</li>
				<li>Η πέτρα συνθλίβει το ψαλίδι.</li>
				</ul></li>
				<li>
					<p>Το τυχερό παιχνίδι με τα ζάρια ήταν διαδεδομένο από την αρχαιότητα. Στη νεότερη εκδοχή του είναι γνωστό ως «μπαρμπούτι». Οι κανόνες του είναι απλοί. Ο παίκτης ξεκινάει με ένα συγκεκριμένο ποσό φασολιών. Πριν ρίξει τα ζάρια, ο παίκτης θα πρέπει να ποντάρει ένα ποσό φασολιών. Αφού ρίξει τα ζάρια, κερδίζει το ποσό αν φέρει 6 × 6, 5 × 5, 2 × 2, 3 × 3 και 6 × 5. Χάνει αν φέρει 1 × 1, 2 × 2, 4 × 4 και 1 × 2. Αν φέρει οτιδήποτε άλλο, τότε ξαναπαίζει. Το παιχνίδι συνεχίζεται μέχρι να αποφασίσει ο παίκτης να σταματήσει ή αν χάσει όλα τα φασόλια του.</p>
					<p>Να γράψετε πρόγραμμα που θα δέχεται το ποσό φασολιών του παίκτη. Θα ξεκινάει και θα παίζει το παιχνίδι μέχρι να τελειώσουν τα φασόλια του παίκτη ή μέχρι να αποχωρήσει αυτός από το παιχνίδι. Μετά από κάθε παιχνίδι θα εμφανίζει μήνυμα αν ο παίκτης θέλει να συνεχίσει ή όχι. Στο τέλος θα εμφανίζει πόσα φασόλια τού απέμειναν, πόσες νίκες έκανε και πόσα, συνολικά, παιχνίδια έπαιξε.</p>
				</li>
				<li>Ένας επενδυτής μελετάει μια επένδυση που θα απαιτήσει αρχικό κόστος 100,000€ και θα του αποφέρει ανά έτος για 5 έτη 15,000€, αυξημένα κατά 5,000€ κάθε χρόνο. Για να προχωρήσει με τη συγκεκριμένη πρόταση, θα πρέπει να βρει την καθαρή τρέχουσα αξία της, η οποία υπολογίζεται με τον πιο κάτω τύπο:
					<p class="no-indent"><img src="media/pg207.png" />￼</p>
					<p class="no-indent">όπου: </p>
					<p class="no-indent"><i>C<sup>t</sup> </i>: η ταμειακή ροή της περιόδου <i>t</i>. Θετικές τιμές δηλώνουν εισροές (έσοδα), ενώ αρνητικές τιμές αντιστοιχούν σε εκροές (έξοδα).</p>
					<p class="no-indent"><i>r</i> : το επιτόκιο δανεισμού (ή <i>προεξοφλητικό επιτόκιο – discounted rate</i>), έστω <i>r</i> = 5%.</p>
						<p class="no-indent"><i>C</i><sup>0</sup> : το αρχικό κόστος της επένδυσης</p>
						<p class="no-indent"><img src="media/pg207a.png" />￼: είναι το άθροισμα <span class="math-font">∀</span><i>t</i> <span class="math-font">∈ {</span>1, 2, <span class="math-font">…</span>, <i>T </i><span class="math-font">}</span>.</p>
					<p class="no-indent"><i>t</i> : μια συγκεκριμένη χρονική περίοδος από το σύνολο των περιόδων <i>T</i>.</p>
					<p class="no-indent">Η πρόταση θεωρείται ελκυστική αν έχει <i>NPV</i> <span class="math-font">&gt;</span> 0. Αφού γίνει ο υπολογισμός, να εμφανιστεί η καθαρή τρέχουσα αξία και αντίστοιχο μήνυμα σχετικό με το αν η συγκεκριμένη επενδυτική πρόταση θα πρέπει να υλοποιηθεί ή όχι.</p>
					<p class="no-indent"><b>Παραλλαγή</b>: τροποποιήστε τον κώδικά σας, ώστε να μπορεί να εφαρμοστεί για κάθε είδους επένδυση.</p>
					</li>
					<li>Να υπολογιστούν οι παρακάτω αριθμητικές παραστάσεις:
						<p class="no-indent">α)<img src="media/pg207b.png" /> ￼</p>
						<p class="no-indent">β)<img src="media/pg207c.png" />, να επιλέξετε κατάλληλα ένα κριτήριο τερματισμού<sup class="superscript CharOverride-1"><span id="footnote-049-backlink"><a href="#footnote-049">45</a></span></sup></p>
						<p class="no-indent">γ)<img src="media/pg207d.png" />, να επιλέξετε κατάλληλα ένα κριτήριο τερματισμού</p>
					</li>
					<li>Η ακολουθία Fibonacci ορίζεται ως:
						<img src="media/pg207e.png" />
					<p class="no-indent">Να γράψετε πρόγραμμα που θα δέχεται έναν ακέραιο αριθμό <i>n</i> και θα εμφανίζει όλους τους αριθμούς της ακολουθίας Fibonacci μέχρι το <i>n</i>.</p>
					</li>
					<li>Τριγωνικός αριθμός είναι αυτός που μετράει τον αριθμό κουκκίδων (ή άλλων αντικειμένων) που μπορούν να φτιάξουν ένα ισόπλευρο τρίγωνο της μορφής:
					<img src="media/chapter_4_image_2.jpg" alt=""/>
					<p class="no-indent">Ο αριθμός αυτός υπολογίζεται από την παρακάτω αριθμητική σειρά τριγωνικού αριθμού:</p>
						<p class="no-indent"><img src="media/pg208a.png" />￼</p>
					<p class="no-indent">Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <i>n</i> και θα υπολογίζει τον <i>n</i>-στό τριγωνικό αριθμό.</p>
					</li>
					<li>Ο εφευρέτης του παιχνιδιού σκάκι, όταν του είπε ο βασιλιάς ποια θέλει να είναι η ανταμοιβή του για αυτό το καταπληκτικό παιχνίδι, ζήτησε έναν κόκκο ρύζι για κάθε τετράγωνο της σκακιέρας, που θα διπλασιάζεται στο επόμενο<sup class="superscript CharOverride-1"><span id="footnote-048-backlink"><a href="#footnote-048">46</a></span></sup>. Το πλήθος των κόκκων δίνεται από τον παρακάτω τύπο:
						<p class="no-indent"><img src="media/pg208b.png" />￼</p>
					<p class="no-indent">Να γράψετε πρόγραμμα που θα δέχεται τον αριθμό τετραγώνων μιας σκακιέρας και θα εμφανίζει την κατανομή σε αυτά των κόκκων ρυζιού.</p>
					</li>
					<li>Να υπολογιστεί προσεγγιστικά η τιμή του <i>π</i> με τις παρακάτω αριθμητικές σειρές<sup class="superscript CharOverride-1"><span id="footnote-047-backlink"><a href="#footnote-047">47</a></span></sup>:
						<p class="no-indent">α)<img src="media/pg208c.png" /> </p>
						<p class="no-indent">β) <img src="media/pg208d.png" /></p>
						<p class="no-indent">γ) <img src="media/pg208e.png" /></p>
						<p class="no-indent">δ)<img src="media/pg208f.png" /></p>
					<p class="no-indent">Να γράψετε πρόγραμμα το οποίο θα υπολογίζει το <i>π</i> με ακρίβεια ίδια με αυτή που έχει η τιμή του <i>π</i> από τη συνάρτηση <span class="courier-code">math</span> ή με 4 δεκαδικά. Το πρόγραμμα θα εμφανίζει στο τέλος σε πόσες επαναλήψεις έγινε ο υπολογισμός.</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα δέχεται από τον χρήστη <i>n</i> θετικούς αριθμούς, υπολογίζοντας τον αριθμητικό μέσο και την τυπική απόκλιση βάσει των τύπων:
						<p class="no-indent"><img src="media/pg209a.png" />￼</p>
						<p class="no-indent"><img src="media/pg209b.png" />￼</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα υπολογίζει τον αρμονικό μέσο για σύνολο <i>n</i> θετικών αριθμών οι οποίοι δίνονται από τον χρήστη. Ο αρμονικός μέσος υπολογίζεται από τον τύπο:
						<p class="no-indent"><img src="media/pg209c.png" />￼</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα δέχεται έναν ακέραιο αριθμό <i>n</i> <span class="math-font">(</span>1 <span class="math-font">≤</span> <i>n</i> <span class="math-font">≤</span> 30<span class="math-font">) </span>από τον χρήστη και θα εμφανίζει στην οθόνη όλους τους ακεραίους στο διάστημα [1, 3,000] οι οποίοι είναι πολλαπλάσιοι του <i>n</i>, καθώς και το πλήθος τους.
					</li>
					<li>Να γράψετε πρόγραμμα που θα υπολογίζει την τιμή του <i>e</i> σύμφωνα με τη σειρά:
						<p class="no-indent"><img src="media/pg209d.png" />￼</p>
					<p class="no-indent">Να δοκιμάσετε το πρόγραμμά σας για τις τιμές <i>n </i>= 10, 15, 20.</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα υπολογίζει την τιμή του <i>s</i> σύμφωνα με τη σειρά:
						<p class="no-indent"><img src="media/pg209e.png" />￼</p>
					<p class="no-indent">Να δοκιμάσετε το πρόγραμμά σας για τις τιμές <i>n </i>= 10, 15, 20.</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα υπολογίζει την τιμή του <i>s</i> σύμφωνα με τη σειρά:
						<p class="no-indent"><img src="media/pg209f.png" />￼</p>
					<p class="no-indent">Να δοκιμάσετε το πρόγραμμά σας για τις τιμές <i>n </i>= 10, 15, 20.</p>
					</li>
					<li>Να γράψετε πρόγραμμα που θα εμφανίζει τους λογάριθμους, με βάση το 10, των τιμών [1, 100], με βήμα αύξησης 0.5. Τα αποτελέσματα να εμφανίζονται στην οθόνη με την εξής διάταξη:
						<p class="no-indent"><img src="media/pg210.png" />￼</p>
					</li>
					<li>Ο υπολογισμός του ετήσιου φόρου 15 μισθωτών υπαλλήλων γίνεται με βάση το ετήσιο ακαθάριστο εισόδημά τους, ως εξής:
						<p class="no-indent">Φόρος 10% για εισόδημα μέχρι και 12,000€</p>
						<p class="no-indent">Φόρος 24% για τα επόμενα 18,000€</p>
						<p class="no-indent">Φόρος 32% για τα επόμενα 25,000€</p>
						<p class="no-indent">Φόρος 45% για το υπόλοιπο εισόδημα</p>
						<p class="no-indent">Να γράψετε πρόγραμμα που θα: </p>
						<ul class="unstyled"><li class="roman-level-1"><span>i.</span>Διαβάζει από το πληκτρολόγιο τις ετήσιες απολαβές κάθε υπαλλήλου. Να γίνεται έλεγχος ώστε να δίνονται θετικές τιμές.</li>
						<li class="roman-level-1"><span>ii.</span>Υπολογίζει και εκτυπώνει στην οθόνη τον ετήσιο φόρο που αναλογεί σε κάθε υπάλληλο, καθώς και τον συνολικό φόρο.</li>
						<li class="roman-level-1"><span>iii.</span>Εκτυπώνει το μικρότερο ετήσιο εισόδημα και τον αντίστοιχο φόρο.</li>
						<li class="roman-level-1"><span>iv.</span>Εκτυπώνει το μεγαλύτερο ετήσιο εισόδημα και τον αντίστοιχο φόρο.</li>
						</ul>
						</li>
						<li>Για καθένα από τα παρακάτω τμήματα κώδικα, γράψτε τι θα εμφανιστεί στην οθόνη:
							<p class="no-indent"><b>(α)</b></p>
							<p class="no-indent"><span class="courier-code">num=15</span></p>
							<p class="no-indent"><span class="courier-code">while num&gt;5:</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;print(num)</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;num-=1</span></p>
							<p class="no-indent"><b>(β)</b></p>
							<p class="no-indent"><span class="courier-code">d=3</span></p>
							<p class="no-indent"><span class="courier-code">for i in range(0,20,2):</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;print(i/d)</span></p>
							<p class="no-indent"><b>(γ)</b></p>
							<p class="no-indent"><span class="courier-code">k=15</span></p>
							<p class="no-indent"><span class="courier-code">while True:</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;if k&lt;8:</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;&#9;break</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;print(k)</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;k-=1</span></p>
							<p class="no-indent"><b>(δ)</b></p>
							<p class="no-indent"><span class="courier-code">count=0</span></p>
							<p class="no-indent"><span class="courier-code">for letter in &apos;Informatics!!!&apos;:</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;print(f&apos;Το γράμμα #{count} είναι {letter}&apos;)</span></p>
							<p class="no-indent"><span class="courier-code">&#9;&#9;count+=1</span></p>
							</li>
							<li>Να γράψετε πρόγραμμα που θα δέχεται ως όρισμα έναν ακέραιο αριθμό <i>Ν</i>, όπου 0 <span class="math-font">≤</span> <i>Ν</i> <span class="math-font">≤</span> 10<sup class="superscript CharOverride-1">2</sup>. Στη συνέχεια να υπολογίζει τον ελάχιστο θετικό ακέραιο αριθμό <i>P</i>, του οποίου το γινόμενο των ψηφίων ισούται με το <i>Ν</i>. Πχ. αν <i>Ν </i>= 10, τότε <i>P </i>= 25. Το αποτέλεσμα να τυπώνεται στην οθόνη.</li>
							<li>Να γράψετε πρόγραμμα το οποίο να παίζει το παιχνίδι «Αγελάδες και ταύροι» με τον χρήστη. Το παιχνίδι παίζεται ως εξής:
							<ul><li>Το πρόγραμμα δημιουργεί «τυχαία» έναν 4ψήφιο αριθμό.</li>
							<li>Στη συνέχεια ο χρήστης πληκτρολογεί έναν 4ψήφιο αριθμό. Για κάθε ψηφίο που ο χρήστης μάντεψε σωστά στη σωστή του θέση, κερδίζει μια αγελάδα. Για κάθε ψηφίο που ο χρήστης μάντεψε σωστά αλλά σε λάθος θέση, κερδίζει έναν ταύρο. Κάθε φορά που ο χρήστης πληκτρολογεί έναν αριθμό, το πρόγραμμα του επιστρέφει στην οθόνη πόσες αγελάδες και πόσους ταύρους έχει.</li>
							<li>Το παιχνίδι τελειώνει όταν εμφανιστεί στην οθόνη το μήνυμα:</li>
							</ul>
							<p class="no-indent"><span class="courier-code">4 cows, Ø bulls </span></p>
							<p class="no-indent">Στο τέλος, το πρόγραμμα θα πρέπει να επιστρέφει το πλήθος των προβλέψεων που έκανε ο χρήστης μέχρι να βρει τον αριθμό που έβαλε το πρόγραμμα.</p>
							<p>Έστω ότι το πρόγραμμα δημιούργησε τον αριθμό 7825. Μια πιθανή εκτέλεση είναι:</p>
							<p class="no-indent"><span class="courier-code">Καλώς ήρθατε στο παιχνίδι Cows and Bulls.</span></p>
							<p class="no-indent"><span class="courier-code">Παρακαλώ πληκτρολογήστε έναν 4-ψήφιο αριθμό:</span></p>
							<p class="no-indent"><span class="courier-code">&gt;&gt;&gt; 4805</span></p>
							<p class="no-indent"><span class="courier-code">2 cows, 0 bulls</span></p>
							<p class="no-indent"><span class="courier-code">&gt;&gt;&gt; 3675</span></p>
							<p class="no-indent"><span class="courier-code">1 cows, 1 bulls</span></p>
							<p class="no-indent"><span class="courier-code">&gt;&gt;&gt; 8875</span></p>
							<p class="no-indent"><span class="courier-code">2 cows, 1 bulls</span></p>
							<p class="no-indent"><span class="courier-code">…</span></p>
							</li>
							<li>Να γράψετε πρόγραμμα που θα δέχεται ως είσοδο ένα διάστημα ετών, π.χ. [2000-2019], και θα τυπώνει όλα τα δίσεκτα έτη που περιλαμβάνονται σε αυτό. Ένα έτος είναι δίσεκτο αν διαιρείται ακριβώς με το 4. Αν όμως διαιρείται και με το 100, δεν είναι δίσεκτο, εκτός αν διαιρείται ακριβώς με το 400.</li>
			<li>Ένας ακέραιος αριθμός λέγεται «τέλειος» όταν το άθροισμα των θετικών διαιρετών του, εκτός του ίδιου του αριθμού, είναι ίσο με τον αριθμό. Π.χ. ο αριθμός 6 είναι ο μικρότερος τέλειος αριθμός (1 + 2 + 3 = 6). Να γράψετε πρόγραμμα που θα ελέγχει αν κάποιος ακέραιος αριθμός <i>x</i>, που θα δίνεται από το πληκτρολόγιο, είναι τέλειος ή όχι. Ένας αλγόριθμος για τον έλεγχο είναι ο παρακάτω:
			<p class="no-indent"><b>Βήμα 1</b>: Βρες όλους τους διαιρέτες του <i>x</i> εκτός από τον εαυτό του.</p>
			<p class="no-indent"><b>Βήμα 2</b>: Υπολόγισε το άθροισμα των διαιρετών του <i>x</i>.</p>
			<p class="no-indent"><b>Βήμα 3</b>: Έλεγξε αν το άθροισμα των διαιρετών ισούται με τον αριθμό <i>x</i>. Αν όχι, τότε δεν είναι.</p>
			</li>
			<li>Να γράψετε κώδικα ο οποίος θα δέχεται ως όρισμα έναν ακέραιο αριθμό <i>k</i> και, χρησιμοποιώντας τον αλγόριθμο για τον έλεγχο αν ένας αριθμός <i>x</i> είναι τέλειος ή όχι, θα υπολογίζει (και θα τυπώνει) όλους τους τέλειους αριθμούς στο διάστημα [1, <i>k</i>]. Αν δεν υπάρχει στο διάστημα [1, <i>k</i>] κανένας τέλειος αριθμός, να εμφανίζει κατάλληλο μήνυμα στην οθόνη.</li>
			<li>Σε μια μικρή αίθουσα κινηματογράφου υπάρχουν συνολικά 80 θέσεις. Για να γίνει κράτηση θέσεων, οι θεατές επικοινωνούν με την έκδοση εισιτηρίων και ενημερώνονται για το αν υπάρχουν κενές θέσεις στην αίθουσα. Να γράψετε πρόγραμμα το οποίο να δέχεται ως είσοδο τον αριθμό των θέσεων που επιθυμεί να κλείσει ένας πελάτης, εμφανίζοντας, εφόσον υπάρχουν, τον αριθμό των θέσεων που παραμένουν κενές μετά την κράτηση. Σε περίπτωση που ο αριθμός των θέσεων που θέλει ένας πελάτης είναι μεγαλύτερος από τις διαθέσιμες, τότε να εμφανίζεται ο μέγιστος αριθμός θέσεων στις οποίες μπορεί να κάνει κράτηση, και το πρόγραμμα να ρωτά τον πελάτη αν θέλει να προχωρήσει σε κράτηση. Η διαδικασία να επαναλαμβάνεται για πολλούς πελάτες, μέχρι να μην υπάρχει κενή θέση.</li>
			<li>Ο υπολογισμός του παραγοντικού ενός ακέραιου αριθμού μπορεί να πραγματοποιηθεί και με τον προσεγγιστικό τύπο του Stirling [James Stirling<sup class="superscript CharOverride-1"><span id="footnote-046-backlink"><a href="#footnote-046">48</a></span></sup> (1692-1770), Σκωτσέζος μαθηματικός.]
			<p class="no-indent"><img src="media/pg212.png" />￼</p>
			<p class="no-indent">όπου <i>π </i>= 3.14 και <i>e </i>= 2.71 (ακρίβεια 2 δεκαδικών ψηφίων). Να γράψετε κώδικα στον οποίο να υπολογίζεται το παραγοντικό των αριθμών <i>n </i>= 10, 15, 20, 25, 30 με τον προσεγγιστικό τύπο του Stirling και με τον κλασικό τύπο υπολογισμού του παραγοντικού (<i>n</i>! <span class="math-font">=</span> <i>n</i> <span class="math-font">×</span> <span class="math-font">(</span><i>n</i> <span class="math-font">−</span> 1<span class="math-font">)</span> <span class="math-font">×</span> <span class="math-font">(</span><i>n</i> <span class="math-font">−</span> 2<span class="math-font">)</span> <span class="math-font">× …</span> <span class="math-font">×</span> <span class="math-font">(</span>2 <span class="math-font">×</span> 1<span class="math-font">)</span>. Τι παρατηρείτε;</p>
			</li>
			<li>Να γράψετε πρόγραμμα που να διαβάζει τους βαθμούς 20 μαθητών και τους αντίστοιχους βαθμούς τους (σε κλίμακα 1-20) στο μάθημα της πληροφορικής. Στη συνέχεια να υπολογίζει και να εμφανίζει στην οθόνη:
			<p class="no-indent">(α) Το πλήθος και το ποσοστό των μαθητών που έχουν βαθμό ≥ 17.</p>
			<p class="no-indent">(β) Τον μέσο όρο των βαθμών όλων των μαθητών.</p>
			<p class="no-indent">(γ) Το πλήθος και το ποσοστό των μαθητών που έχουν βαθμό &lt; 10.</p>
			</li>
			</ol>
		</section>
	</section>
	<section role="chapter" id="ch7">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 5</span> Λίστες</h1>
		<section role="section" id="ch7se1">
			<h1><span role="label">5.1</span> Εισαγωγή</h1>
			<img src="media/chapter_5_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Σ’ αυτό το κεφάλαιο περιγράφεται ίσως η πιο βασική δομή δεδομένων της Python, η λίστα. Δίνονται</i><i> οι τρόποι χρήσης της μέσα από παραδείγματα και μικρά σενάρια, ενώ αναλύονται όλες οι βασικές μέθοδοι</i><i> και οι λειτουργίες τους. Σε συνδυασμό με όσα αναφέρθηκαν στα προηγούμενα κεφάλαια, όπως στις δομές απόφασης και επανάληψης, είναι πλέον</i><i> δυνατόν να δημιουργηθούν πιο σύνθετα προγράμματα και να επιλυθούν αντίστοιχα πιο δύσκολα προβλήματα. Εισάγονται </i><i>μερικές νέες τεχνικές για τη διαχείριση λιστών, απαραίτητες όμως και για άλλες βασικές λειτουργίες που συναντάμε σε άλλες δομές. Μετ</i><i>ά τη μελέτη αυτού του κεφαλαίου, ο αναγνώστης θα είναι σε θέση να διαχειρίζεται αποδοτικά μεγάλου όγκου </i><i>δεδομένα, υλοποιώντας πιο σύνθετα προγράμματα για τη διαχείρισή τους.</i></p>
		</section>
		<section role="section" id="ch7se2">
			<h1><span role="label">5.2</span> Λίστα αντί πίνακα</h1>
			<p class="no-indent">Μια από τις βασικές λειτουργίες ενός προγράμματος είναι ο χειρισμός των δεδομένων και η ανάκτηση, η επεξεργασία και η αποθήκευσή τους. Σε προηγούμενα κεφάλαια έγινε παρουσίαση τρόπων ανάκτησης και αποθήκευσης δεδομένων σε χώρους μνήμης που είναι γνωστοί ως μεταβλητές. Όσο όμως η ποσότητα των δεδομένων μεγαλώνει, τόσο η διαχείρισή τους γίνεται ολοένα και πιο δύσκολη. Και αυτό έχει να κάνει όχι τόσο με τον τρόπο που τα δεδομένα θα πρέπει να αποθηκεύονται και να συντηρούνται, αλλά με την επεξεργασία τους, ώστε να δίνουν, αποδοτικά, τα επιθυμητά αποτελέσματα. Η ανάγκη αυτή για πιο αποδοτική χρήση μεγάλων ποσοτήτων δεδομένων δημιούργησε, σε όλες τις γλώσσες προγραμματισμού, μια πιο σύνθετη δομή που ονομάζεται <i>πίνακας (array)</i>. Ένας πίνακας, σε μια από τις παραδοσιακές γλώσσες προγραμματισμού, όπως η C, δεν είναι τίποτα άλλο παρά συνεχόμενες, στις περισσότερες περιπτώσεις, θέσεις μνήμης όπου αποθηκεύονται δεδομένα ίδιου τύπου. Αυτά είναι διαθέσιμα μέσω του ονόματος του πίνακα, με τη βοήθεια ενός δείκτη (ή περισσότερων) που αναφέρεται σε μια συγκεκριμένη θέση του, σε ένα συγκεκριμένο στοιχείο.</p>
			<p>Οι πίνακες υλοποιούνται με διάφορες τεχνικές και είναι είτε στατικές δομές (που το μέγεθός τους δεν αλλάζει κατά τη διάρκεια εκτέλεσης, αλλά προκαθορίζεται κατά τη συγγραφή του προγράμματος), είτε δυναμικές, με χρήση κατάλληλων συναρτήσεων τύπου <span class="courier-code">malloc</span>, <span class="courier-code">calloc</span>, όπως γίνεται στη C, ή <span class="courier-code">allocate</span>, όπως συμβαίνει στη Fortran 90. Και ενώ αυτές, οι πιο σύνθετες δομές, προσθέτουν μεγάλη ευελιξία και πολλές επιπλέον δυνατότητες, έχουν ωστόσο δυο βασικά χαρακτηριστικά που τις περιορίζουν. Σε τυπικές γλώσσες όπως η C, θα πρέπει να δηλωθούν κατά τη συγγραφή των προγραμμάτων τόσο το μέγεθός τους (εάν είναι στατικές δομές) όσο και το είδος των στοιχείων τους (αριθμοί, κείμενο κ.λπ.). Ακόμα κι αν είναι δυναμικοί οι πίνακες και χρειαστεί να αλλάξει το μέγεθός τους, αυτό πάντα έχει ένα (άλλοτε μικρό και άλλοτε πολύ μεγαλύτερο) κόστος σε υπολογιστικό χρόνο, το οποίο αφορά τη δέσμευση ή αποδέσμευση <i>κομματιών (chunks)</i> μνήμης κατά τη διάρκεια εκτέλεσης.</p>
			<p>Τα πράγματα, ωστόσο, στην Python είναι αρκετά διαφορετικά. Δεν υπάρχει εγγενής δομή πίνακα, με τη σημασία που ένας πίνακας έχει σε άλλες γλώσσες. Παρ’ όλα αυτά, υπάρχει μια βιβλιοθήκη κώδικα, <span class="courier-code">array</span>, που πλησιάζει σε φιλοσοφία και λογική αυτήν του πίνακα και παρουσιάζεται σε επόμενη ενότητα. Για την πραγματοποίηση μαθηματικών πράξεων με πίνακες (διανύσματα, μήτρες), υπάρχουν επιπλέον βιβλιοθήκες, όπως οι <span class="courier-code">NumPy</span> και <span class="courier-code">SciPy</span>, που προσθέτουν χαρακτηριστικά στην Python τα οποία την κάνουν ελκυστική για εργασίες που μέχρι τώρα γίνονταν, σχεδόν αποκλειστικά, σε εξειδικευμένα περιβάλλοντα μαθηματικών υπολογισμών, όπως το MATLAB (ή το αντίστοιχο opensource Octave) ή το Mathematica. Αυτός είναι άλλωστε και ένας από τους λόγους που η Python έχει «κερδίσει» κοινό από άλλους επιστημονικούς χώρους που δεν σχετίζονται άμεσα με αυτόν της επιστήμης των υπολογιστών. Σ’ αυτό το βιβλίο δεν θα γίνει παρουσίαση των εν λόγω βιβλιοθηκών, γιατί από μόνα τους αυτά τα πακέτα αποτελούν το καθένα και ένα ξεχωριστό «οικοσύστημα» με ιδιαίτερα χαρακτηριστικά, συνθήκες και μοναδικές λειτουργίες.</p>
			<p>Η βασική δομή της Python, που μοιάζει με αυτήν του πίνακα αλλά είναι πιο γενική και απελευθερωμένη από τους περιορισμούς του (στο μέγεθος και στον τύπο δεδομένων του), είναι η δομή της λίστας. Η λίστα στην Python δεν είναι τίποτα άλλο παρά μια ακολουθία στοιχείων (ή, πιο γενικά, αντικειμένων). Τα στοιχεία κάθε λίστας αποθηκεύονται σε θέσεις μνήμης από την ίδια τη γλώσσα, εσωτερικά, χωρίς να απαιτείται κάποια ιδιαίτερη προγραμματιστική τεχνική. Το μέγεθός της μπορεί να αυξηθεί και να μειωθεί, άμεσα, κατά τη διάρκεια εκτέλεσης του κώδικα, ενώ νέες λίστες μπορούν να δημιουργηθούν «από το μηδέν» και να εμφανιστούν σε οποιοδήποτε σημείο μέσα στον πηγαίο κώδικα. Έχοντας αυτές τις δυνατότητες, δεν υπάρχει λειτουργία που να μην μπορεί να υλοποιηθεί σε μια λίστα. Τα πάντα επιτρέπονται: εισαγωγή και διαγραφή στοιχείων, αντιγραφή στοιχείων και τμημάτων (<i>slices</i>) της λίστας ή ολόκληρης της λίστας σε άλλες δομές (όπως πλειάδες, λίστες, σύνολα κ.λπ.), αναζητήσεις, συγχωνεύσεις (από άλλες δομές όπως αρχεία, συμβολοσειρές κ.λπ.), συνενώσεις, ταξινομήσεις και διαμερίσεις. Αυτές οι δυνατότητες καθιστούν τη λίστα ένα πανίσχυρο εργαλείο αναπαράστασης σύνθετων δομών όπως της <i>στοίβας (stack)</i>, της <i>ουράς (queue)</i>, ενός <i>πολυδιάστατου πίνακα (multidimensional array</i><i>)</i>, της <i>συνδεδεμένης λίστας (linked list)</i> και πολλών άλλων. Η πολυπρόσωπη φυσιογνωμία της λίστας, η οποία μπορεί να περιέχει αντικείμενα, γενικά, και όχι μόνο δεδομένα ίδιου τύπου, είναι η δύναμή της. Έτσι, μια λίστα μπορεί να περιέχει μαζί με αριθμούς, ή κείμενο, και άλλες δομές, όπως σύνολα, λεξικά κ.λπ. και άλλες λίστες – ή ακόμα και τον εαυτό της!</p>
			<p>Η ελεύθερη φύση της όμως δεν σταματά εκεί. Ως ένα εγγενώς πολυμεταβλητό στοιχείο, μια λίστα μπορεί να μεταβάλλεται μέσω πολλαπλών στιγμιοτύπων της που ενδέχεται να υπάρχουν μέσα στον κώδικα και να λειτουργούν σε διάφορες χρονικές στιγμές και μέσα από διαφορετικές λειτουργίες. Όλα τα παραπάνω χαρακτηριστικά περιγράφονται αναλυτικά στις επόμενες ενότητες. Συνοψίζοντας, μια λίστα έχει τα ακόλουθα χαρακτηριστικά:</p>
			<ol><li>Είναι μια <i>συλλογή (collection)</i> ή μια <i>ακολουθία (sequence)</i> <i>διατεταγμένων (ordered)</i> <i>αντικειμένων (objects</i><i>)</i>.</li>
			<li>Είναι <i>δυναμική (dynamic)</i>, το μέγεθός της μεταβάλλεται κατά τη διάρκεια εκτέλεσης ενός προγράμματος.</li>
			<li>Περιέχει αντικείμενα, δηλαδή οποιαδήποτε στοιχεία, οποιουδήποτε μεγέθους και τύπου.</li>
			<li>Διαθέτει μια σειρά από <i>ενσωματωμένες λειτουργίες-</i><i>μεθόδους (built-in methods)</i>.</li>
			<li>Είναι <i>μεταβαλλόμενο (mutable)</i> αντικείμενο. Μπορεί όμως να περιέχει και <i>μη μεταβαλλόμενα (immutable)</i> στοιχεία.</li>
			<li>Έχει πολλαπλές υλοποιήσεις μέσω βιβλιοθηκών (όπως η <span class="courier-code">stack</span>).</li></ol>
		</section>
		<section role="section" id="ch7se3">
			<h1><span role="label">5.3</span> Δημιουργία νέας λίστας</h1>
			<p class="no-indent">Για την αναπαράσταση μιας λίστας χρησιμοποιούνται οι χαρακτήρες ‘<span class="courier-code">[</span>‘ και ‘<span class="courier-code">]</span>’. Έτσι, κάθε στοιχείο που βρίσκεται μέσα σε αυτούς τους χαρακτήρες, και ξεχωρίζει με ένα ‘<span class="courier-code">,</span>’ από τα υπόλοιπα, είναι στοιχείο μιας λίστας, π.χ. <span class="courier-code">[1,2,&apos;</span><span class="courier-code">α&apos;,&apos;β&apos;]</span>.</p>
			<p>Υπάρχουν πολλοί τρόποι για να δημιουργηθεί μια νέα λίστα. Το κυριότερο χαρακτηριστικό αυτής της διαδικασίας είναι ότι μπορεί να γίνει σε οποιοδήποτε σημείο του πηγαίου κώδικα και όχι απαραίτητα στην αρχή του, με έναν από τους τρόπους που περιγράφονται στη συνέχεια.</p>
			<p>Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list1=[]</span></p>
			<p class="no-indent">δημιουργεί μια νέα λίστα με όνομα <span class="courier-code">list1</span> που είναι κενή (δεν περιέχει τίποτα). Το ίδιο αποτέλεσμα θα είχε και η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list1=list()</span></p>
			<p class="no-indent">με τη διαφορά ότι χρησιμοποιεί τη συνάρτηση <span class="courier-code">list</span> η οποία έχει περισσότερες δυνατότητες και λειτουργίες, που περιγράφονται στη συνέχεια. Στην ουσία, η προηγούμενη εντολή είναι ο <i>δημιουργός-κατασκευαστής (constructor)</i> ενός νέου <i>αντικειμένου τύπου</i><i> λίστας (list object)</i>, που είναι αρχικά κενό. Ο <i>τύπος (type)</i> του αντικειμένου φαίνεται γράφοντας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; type(list1)</span></p>
			<p><span class="courier-code">&lt;class &apos;list&apos;&gt;</span></p>
			<p class="no-indent">ενώ το περιεχόμενό της εμφανίζεται με την αναφορά του ονόματος της λίστας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list1</span></p>
			<p><span class="courier-code">[]</span></p>
			<p class="no-indent">δηλαδή η κενή λίστα. Ποια χρησιμότητα έχει μια κενή λίστα; Συνήθως καμία, είναι όμως απαραίτητο να γίνεται αυτό στην αρχή, ως πράξη <i>αρχικοποίησης (initialization)</i>, ώστε να δεσμευτεί ο απαραίτητος χώρος για αυτήν στον <i>χώρο ονομάτων</i><i> (namespace)</i> του διερμηνευτή, προτού ξεκινήσει κάποια διαδικασία τοποθέτησης στοιχείων στο εσωτερικό της (όπως, για παράδειγμα, από μια λίστα φοιτητών να φτιάξουμε μια λίστα με όσους «κόπηκαν» στο μάθημα «Εισαγωγή στην Python» – που στο τέλος, μάλλον, αυτή η λίστα θα παραμείνει κενή ;-).</p>
			<p>Μια λίστα μπορεί να δημιουργηθεί απευθείας, άμεσα δηλαδή, τοποθετώντας (αν είναι από την αρχή γνωστά) τα στοιχεία της, με μια εντολή όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list2=[1,2,3,4]</span></p>
			<p class="no-indent">με την οποία δημιουργείται μια νέα λίστα, η <span class="courier-code">list2</span>, που περιέχει τους αριθμούς <span class="courier-code">1,</span> <span class="courier-code">2,</span> <span class="courier-code">3</span> και <span class="courier-code">4</span>. Τόσο απλά! Για το ίδιο αποτέλεσμα, για παράδειγμα στην Java, θα έπρεπε να γραφτεί:</p>
			<p><span class="courier-code">int[] myArray={1,2,3,4}</span></p>
			<p class="no-indent">δίνοντας συγκεκριμένες τιμές στον πίνακα <span class="courier-code">myArray</span>, ενώ για τη δημιουργία ενός ακέραιου πίνακα τεσσάρων θέσεων απαιτούνται, απλά, οι παρακάτω εντολές:</p>
			<p><span class="courier-code">int[] my Array;</span></p>
			<p><span class="courier-code">myArray = new int[4];</span></p>
			<p class="no-indent">αφού, όπως αναφέρεται στην τεκμηρίωση της Python, «ο πίνακας είναι αντικείμενο <i>container</i> που κρατάει έναν σταθερό αριθμό τιμών μοναδικού τύπου, ενώ το μήκος του (length) προκαθορίζεται (και δεν αλλάζει) κατά τη δήλωσή του τη στιγμή της δημιουργίας του».</p>
			<p>Η λίστα όμως μπορεί να περιέχει κάθε είδους αντικείμενο, όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list3=[1,&apos;a&apos;</span><span class="courier-code">,2,&apos;ab&apos;,3,&apos;bc&apos;]</span></p>
			<p class="no-indent">Η <span class="courier-code">list3</span> περιέχει ως στοιχεία της και γράμματα (κείμενο) και αριθμούς. Ακόμη, μπορεί να περιέχει και αντικείμενα όπως τα ακόλουθα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list4=[1,[1,2,3],2,(1,2,3),3,None,{1,3,5}]</span></p>
			<p class="no-indent">Η λίστα <span class="courier-code">list4</span> περιέχει εκτός από αριθμούς, άλλη λίστα, πλειάδα, τιμή <span class="courier-code">None</span> και ένα σύνολο, ενώ θα μπορούσε να περιέχει οτιδήποτε άλλο. Η λίστα με λίστες είναι ένα είδος πολυδιάστατης δομής και μπορεί να έχει την ακόλουθη μορφή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list5=[[1,2,3],[4,5,6]]</span></p>
			<p class="no-indent">Σε αυτή την περίπτωση η λίστα <span class="courier-code">list5</span> είναι μια λίστα που περιέχει δυο άλλες και μοιάζει με δισδιάστατο πίνακα μεγέθους 2 × 3, με δυο γραμμές δηλαδή και 3 στήλες. Η δημιουργία της θα μπορούσε να γίνει λίγο διαφορετικά, ώστε να φαίνεται καλύτερα η δομή της:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list5=[[1,2,3],</span></p>
			<p><span class="courier-code">&#9;&#9; [4,5,6]]</span></p>
			<p class="no-indent">Μια από τις πιο συνηθισμένες περιπτώσεις αρχικοποίησης μιας λίστας με συγκεκριμένη τιμή είναι όταν χρησιμοποιείται η λίστα ως πολλαπλός μετρητής. Για παράδειγμα, αν θέλουμε να καταγράψουμε πλήθη τιμών σε μια λίστα, τότε θα πρέπει αυτή η λίστα να ξεκινήσει τις τιμές της από το μηδέν. Έστω, π.χ., ότι πρέπει να δημιουργηθεί λίστα με 5 στοιχεία που θα αποθηκεύουν μια σειρά από μετρήσεις το καθένα. Η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; counter=[0,0,0,0,0]</span></p>
			<p class="no-indent">δημιουργεί τη λίστα <span class="courier-code">counter</span> και γεμίζει κάθε θέση της με το μηδέν. Το ίδιο αποτέλεσμα θα είχε και η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; counter=[0]*5</span></p>
			<p class="no-indent">Το μηδέν τίθεται ως στοιχείο μιας λίστας, το οποίο θα εμφανιστεί στη νέα λίστα 5 φορές. Εδώ φαίνεται η <i>υπερφόρτωση (</i><i>overloading)</i> του τελεστή ‘<span class="courier-code">*</span>’. Όταν χρησιμοποιείται με λίστες, έχει εντελώς διαφορετική λειτουργία. Στη συγκεκριμένη περίπτωση αντιγράφει μια λίστα πέντε φορές και το αποτέλεσμα το εκχωρεί στη λίστα <span class="courier-code">list</span><span class="courier-code">5</span>.</p>
			<p>Έτσι, γράφοντας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; counter</span></p>
			<p><span class="courier-code">[0, 0, 0, 0, 0]</span></p>
			<p class="no-indent">εμφανίζεται η λίστα <span class="courier-code">counter</span> που καθένα από τα 5 στοιχεία της είναι το <span class="courier-code">0</span>.</p>
			<p>Εάν δεν είναι απαραίτητο να υπάρχει στη νέα λίστα συγκεκριμένη τιμή, αλλά γενικά κάποιες κενές θέσεις, αυτό μπορεί να γίνει με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list5=[None]*5</span></p>
			<p class="no-indent">οπότε η λίστα <span class="courier-code">list</span><span class="courier-code">5</span> θα περιέχει 5 κενές θέσεις:</p>
			<p><span class="courier-code">&gt;&gt;&gt; list5</span></p>
			<p><span class="courier-code">[None, None, None, None, None]</span></p>
			<p class="no-indent">τις οποίες στη συνέχεια μπορεί κάποιος να χρησιμοποιήσει και να γεμίσει με συγκεκριμένες τιμές.</p>
		</section>
		<section role="section" id="ch7se4">
			<h1><span role="label">5.4</span> Προσπέλαση λίστας</h1>
			<p class="no-indent">Από τη στιγμή που θα δημιουργηθεί μια λίστα, κάθε στοιχείο της είναι άμεσα διαθέσιμο μέσω της θέσης που έχει αυτό. Η αρίθμηση των θέσεων των στοιχείων μιας λίστας ξεκινάει (όπως και στις γλώσσες C και Java) από το 0. Έτσι, αν μια λίστα περιέχει <i>n</i> στοιχεία, το 1ο στοιχείο βρίσκεται στη θέση 0, ενώ το τελευταίο στη θέση <i>n </i>– 1, όπως φαίνεται και από το σχήμα στην Εικόνα 5-1.</p>
			<figure class="image" id="img43" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 5-1 | Προσπέλαση λίστας με δεικτοδότηση</figcaption><img src="media/chapter_5_image_1.jpg" alt=""/></figure>
			<p class="no-indent">Ο δείκτης αυτός μπαίνει ανάμεσα στις αγκύλες ‘<span class="courier-code">[</span>‘ και ‘<span class="courier-code">]</span>’ αμέσως μετά το όνομα της λίστας. Γράφοντας, για παράδειγμα, <span class="courier-code">list1[5]</span> αναφερόμαστε στο 6ο στοιχείο (στοιχείο της θέσης 5) της λίστας <span class="courier-code">list1</span>.</p>
			<p>Για την πρόσβαση επομένως σε ένα συγκεκριμένο στοιχείο μιας λίστας, είναι απαραίτητη η χρήση <i>δείκτη (pointer)</i>, ο οποίος θα περιέχει έναν αριθμό που αναφέρεται σε συγκεκριμένη θέση στη λίστα. Ο δείκτης αυτός πρέπει να έχει ακέραια τιμή και, σε μια λίστα <i>n</i> στοιχείων, να παίρνει τιμές στο διάστημα (0, <i>n </i>– 1) ή (0, <i>n</i>]. Αν δεν ισχύει ο 1ος περιορισμός, εμφανίζεται μήνυμα σφάλματος τύπου <span class="courier-code">TypeError</span>, ενώ, αν δοθεί δείκτης εκτός ορίων λίστας, προκαλείται σφάλμα τύπου <span class="courier-code">IndexError</span>. Για παράδειγμα, έστω μια λίστα <span class="courier-code">k</span> με 5 στοιχεία:</p>
			<p><span class="courier-code">&gt;&gt;&gt; k=[-10,-5,0,-5,-10]</span></p>
			<p class="no-indent">Γράφοντας: </p>
			<p><span class="courier-code">&gt;&gt;&gt; k[1]</span></p>
			<p><span class="courier-code">-5</span></p>
			<p class="no-indent">εμφανίζεται το 2ο στοιχείο (το στοιχείο που βρίσκεται στη θέση 1) της λίστας <span class="courier-code">k</span>, που είναι το <span class="courier-code">-5</span>. Το τελευταίο στοιχείο, το <span class="courier-code">-10</span>, που βρίσκεται στη θέση 4, μπορεί να χρησιμοποιηθεί θέτοντας ως δείκτη λίστας την τιμή <span class="courier-code">4</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; k[4]</span></p>
			<p><span class="courier-code">-10</span></p>
			<p class="no-indent">Αντίθετα, οι επόμενες εντολές θα εμφανίσουν μηνύματα σφάλματος:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a[1.2]</span></p>
			<p><span class="courier-code">TypeError: list indices must be integers or slices, not float</span></p>
			<p class="no-indent">καθώς δεν επιτρέπεται να χρησιμοποιηθεί πραγματικός αριθμός ως δείκτης, ενώ η επόμενη εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a[8]</span></p>
			<p><span class="courier-code">IndexError: list index out of range</span></p>
			<p class="no-indent">θα αποτύχει, αφού ο δείκτης <span class="courier-code">8</span> έχει ξεπεράσει τα όρια της λίστας (δεν υπάρχει 8η θέση στη λίστα <span class="courier-code">k</span>).</p>
			<p>Το ίδιο μπορεί να γίνει δίνοντας αρνητικές τιμές στον δείκτη. Σε αυτή την περίπτωση η καταμέτρηση ξεκινάει από το –1, που αναφέρεται στο τελευταίο στοιχείο της λίστας, –2 για το προτελευταίο κ.λπ.: </p>
			<p><span class="courier-code">&gt;&gt;&gt; k[-1]</span></p>
			<p><span class="courier-code">-10</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; k[-2]</span></p>
			<p><span class="courier-code">-5</span></p>
			<p class="no-indent">Για την εμφάνιση των στοιχείων μιας λίστας, μπορεί απλά να δοθεί το όνομα της λίστας στην κονσόλα της γλώσσας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; k</span></p>
			<p><span class="courier-code">[-10, -5, 0, -5, -10]</span></p>
			<p class="no-indent">ή μέσα σε κάποιο σενάριο μέσω της εντολής <span class="courier-code">print</span>, όπως στη Λίστα Κώδικα 5-1 που ακολουθεί.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-1 | Εμφάνιση λίστας</figcaption><img src="media/ListaKodika-5-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση αυτού του σεναρίου θα εμφανίσει στην οθόνη:</p>
			<p><span class="courier-code">[-10, -5, 0, -5, -10]</span></p>
			<p><span class="courier-code">Η λίστα </span><span class="courier-code">k είναι: [-10, -5, 0, -5, -10]</span></p>
			<p><span class="courier-code">...και περιέχει τα στοιχεία: -10 -5 0 -5 -10</span></p>
			<p class="no-indent">Για την εμφάνιση πολλών μεμονωμένων στοιχείων, μπορεί να γίνει χρήση της επανάληψης <span class="courier-code">for</span>. Ένας ενδεικτικός τρόπος φαίνεται στη Λίστα Κώδικα 5-2.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-2 | Προσπέλαση λίστας</figcaption><img src="media/ListaKodika-5-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση αυτού του σεναρίου θα εμφανίσει τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">-10</span></p>
			<p><span class="courier-code">-5</span></p>
			<p><span class="courier-code">0</span></p>
			<p><span class="courier-code">-5</span></p>
			<p><span class="courier-code">-10</span></p>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">item</span> της εντολής <span class="courier-code">for</span> παίρνει διαδοχικά (σε κάθε επανάληψη) την τιμή ενός στοιχείου της λίστας <span class="courier-code">k</span> ως εξής: κατά την 1η επανάληψη η <span class="courier-code">item</span> παίρνει την τιμή του 1ου στοιχείου της λίστας, δηλαδή την τιμή –10, στη 2η επανάληψη θα πάρει την τιμή του 2ου στοιχείου κ.ο.κ. Επειδή η λίστα είναι ένα αντικείμενο επαναληπτικό, μπορεί να χρησιμοποιηθεί ως στοιχείο που θα τροφοδοτεί με τιμές μια εντολή επανάληψης όπως η <span class="courier-code">for</span>. Η πρόσβαση στα στοιχεία μιας λίστας μπορεί να γίνει και μέσω κάποιου δείκτη, όπως γίνεται και στους πίνακες που διαχειρίζονται άλλες γλώσσες. Με γνωστό το μέγεθος της λίστας <span class="courier-code">s</span>, έστω 3, η παρακάτω Λίστα Κώδικα (5-3): </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-3 | Προσπέλαση λίστας με δεικτοδότηση</figcaption><img src="media/ListaKodika-5-3_fmt.png" alt=""/></figure>
			<p class="no-indent">θα εμφανίσει: </p>
			<p><span class="courier-code">α</span></p>
			<p><span class="courier-code">β</span></p>
			<p><span class="courier-code">γ</span></p>
			<p class="no-indent">όπου το <span class="courier-code">i</span> είναι δείκτης της λίστας, με τιμές από το 0 μέχρι και το 2.</p>
			<p>Το μέγεθος μιας λίστας, ή <i>το μήκος της (length)</i>, δίνεται από τη συνάρτηση <span class="courier-code">len</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; clubs=[&apos;Πανθρακικός&apos;</span><span class="courier-code">,&apos;Παναιτωλικός&apos;,&apos;Πανσερραϊκός&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; len(clubs)</span></p>
			<p><span class="courier-code">3</span></p>
			<p class="no-indent">που δηλώνει ότι η λίστα <span class="courier-code">clubs</span> έχει τρία στοιχεία. Η προηγούμενη δομή <span class="courier-code">for</span> θα μπορούσε, πιο γενικά, να δοθεί με τον επόμενο τρόπο (Λίστα Κώδικα 5-4), χωρίς να δηλωθεί ρητά το μέγεθος της λίστας:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-4 | Προσπέλαση με τη xρήση της <span class="courier-code">len</span></figcaption><img src="media/ListaKodika-5-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Σε αυτή την περίπτωση ο δείκτης <i>i</i> παίρνει (μέσω της συνάρτησης <span class="courier-code">range</span>) τιμές από το 0 μέχρι και το 2 (το <span class="courier-code">len(clubs)</span> επιστρέφει την τιμή <span class="courier-code">3</span>, αλλά η <span class="courier-code">range</span> δημιουργεί τιμές μέχρι και το 2, δηλαδή μια λιγότερη).</p>
			<p>Με αρνητικές τιμές του δείκτη μπορεί να γίνει αντίστροφη (από το τέλος προς την αρχή) σάρωση της λίστας (Λίστα Κώδικα 5-5).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-5 | Αντίστροφη προσπέλαση</figcaption><img src="media/ListaKodika-5-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Η <span class="courier-code">range</span> σε αυτή την περίπτωση θα παράγει τιμές από το <span class="courier-code">-1</span> μέχρι και το <span class="courier-code">-3</span>, εμφανίζοντας στην οθόνη τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">Πανσερραϊκός Παναιτωλικός Πανθρακικός</span></p>
			<p class="no-indent">Το ίδιο αποτέλεσμα θα είχαν και οι επόμενες εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; clubs[::-1]</span></p>
			<p><span class="courier-code">[&apos;Πανσερραϊκός&apos;, &apos;Παναιτωλικός&apos;, &apos;Πανθρακικός&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(clubs[::-1])</span></p>
			<p><span class="courier-code">[&apos;Πανσερραϊκός&apos;</span><span class="courier-code">, &apos;Παναιτωλικός&apos;, &apos;Πανθρακικός&apos;]</span></p>
			<p class="no-indent">Η τεχνική αυτή είναι γνωστή ως <i>«κομμάτιασμα» </i>ή<i> κατάτμηση (slicing)</i>, ακολουθεί τους κανόνες της συνάρτησης <span class="courier-code">range</span> και αποτελεί ειδική περίπτωση <i>δεικτοδότησης (indexing)</i> με περισσότερους από έναν δείκτες. Η γενική μορφή της είναι: </p>
			<p><span class="courier-code">λίστα[δείκτης 1:δείκτης 2:δείκτης 3]</span></p>
			<p class="no-indent">όπου <span class="courier-code">δείκτης 1</span> δηλώνει ποιο θα είναι το 1ο στοιχείο του τμήματος της λίστας που θα εμφανιστεί, <span class="courier-code">δείκτης 2</span> είναι το τελευταίο στοιχείο και δείκτης 3 είναι το βήμα μετακίνησης (ή αύξησης του δείκτη) από το ένα στοιχείο στο αμέσως επόμενό του. Στη Λίστα Κώδικα 5-6 δίνονται μερικά παραδείγματα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-6 | Παραδείγματα κατάτμησης</figcaption><img src="media/ListaKodika-5-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Προσοχή χρειάζεται όταν ο <span class="courier-code">δείκτης 3</span> είναι αρνητικός. Σε αυτή την περίπτωση η σάρωση γίνεται ανάποδα, από το τέλος προς την αρχή, και, αν ισχύει <span class="courier-code">δείκτης 1 &lt; δείκτης 2</span>, το αποτέλεσμα που θα επιστραφεί θα είναι η κενή λίστα (γραμμή 16). Αντίστοιχα αν ο δείκτης 3 είναι θετικός (ή δεν δίνεται καθόλου, οπότε θεωρείται ίσος με 1) και ισχύει <span class="courier-code">δείκτης 1 &gt; δείκτης 2</span>, τότε το αποτέλεσμα είναι επίσης μια άδεια λίστα (γραμμή 14).</p>
			<p>Αλλαγή του στοιχείου μιας λίστας μπορεί να γίνει άμεσα, με χρήση ενός δείκτη και με μια εντολή εκχώρησης. Έτσι, αν k = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], τότε:</p>
			<p><span class="courier-code">&gt;&gt;&gt; k[1]=10</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; k[5]=55</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; k</span></p>
			<p><span class="courier-code">[0, 10, 2, 3, 4, 55, 6, 7, 8, 9]</span></p>
			<p class="no-indent">όπου αρκεί να δοθεί ο δείκτης θέσης ώστε να αλλάξει το περιεχόμενο αυτής της θέσης (αρκεί ο δείκτης να μην ξεπερνάει τα όρια της λίστας):</p>
			<p><span class="courier-code">&gt;&gt;&gt; k[12]=0</span></p>
			<p><span class="courier-code">IndexError: list assignment index out of range</span></p>
			<p class="no-indent">Αν η λίστα αποτελείται από περισσότερες λίστες, χρειάζεται διπλή δεικτοδότηση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; g=[[1,2,3],[4,5,6]]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; g[1][2]</span></p>
			<p><span class="courier-code">6</span></p>
			<p class="no-indent">Ο δείκτης <span class="courier-code">1</span> δηλώνει το στοιχείο της θέσης 1, που είναι μια ολόκληρη λίστα (2ο στοιχείο της λίστας <span class="courier-code">g</span>). Ο δείκτης <span class="courier-code">2</span> «δείχνει» στο στοιχείο της θέσης 2 στο αποτέλεσμα του 1ου δείκτη που είναι το στοιχείο 6.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-1</b>: Δίνεται η λίστα <span class="courier-code">numbers</span> που περιέχει αριθμούς. Να αλλάξετε το πρόσημο σε όσους αριθμούς χρειάζεται, ώστε η λίστα να περιέχει μόνο θετικούς αριθμούς.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-7 περιλαμβάνει τις κατάλληλες εντολές.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-7 | Επεξεργασία λίστας – αλλαγή προσήμου (1ος τρόπος)</figcaption><img src="media/ListaKodika-5-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 2 δημιουργούνται δείκτες για τη σάρωση των στοιχείων της λίστας. Η αλλαγή των αρνητικών αριθμών γίνεται με την ενσωματωμένη συνάρτηση <span class="courier-code">abs</span>. Μετά την εκτέλεση του προγράμματος θα εμφανιστεί στην οθόνη:</p>
			<p><span class="courier-code">[2, 4, 1, 3, 4, 2, 0, 12]</span></p>
			<p class="no-indent">δηλαδή το νέο περιεχόμενο της λίστας, που περιέχει πλέον μόνο θετικούς αριθμούς.</p>
			<p>Το Παράδειγμα 5-1 θα μπορούσε να λυθεί και αλλιώς (Λίστα Κώδικα 5-8).</p>
			p
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-8 | Επεξεργασία λίστας – αλλαγή προσήμου (2ος τρόπος)</figcaption><img src="media/ListaKodika-5-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Η σάρωση της λίστας γίνεται με τον ίδιο τρόπο. Αλλάζει ο τρόπος ενημέρωσης της λίστας. Δεν χρησιμοποιείται η συνάρτηση <span class="courier-code">abs</span> αλλά μια εντολή <span class="courier-code">if</span> μιας γραμμής. Το τμήμα <span class="courier-code">else</span> είναι που αλλάζει το πρόσημο των αρνητικών στοιχείων της λίστας.</p>
		</section>
		<section role="section" id="ch7se5">
			<h1><span role="label">5.5</span> Αντιγραφή λίστας</h1>
			<p class="no-indent">Η μέθοδος της κατάτμησης μιας λίστας και η απόσπαση ορισμένων στοιχείων της χρησιμοποιείται συνήθως κατά την αντιγραφή στοιχείων από μια λίστα σε άλλη ή για τη δημιουργία νέας λίστας από τα στοιχεία μιας άλλης. Αυτή η διαδικασία αντιγραφής στοιχείων γίνεται με πολλούς τρόπους και σχετικά εύκολα, χωρίς να χρειάζεται τις περισσότερες φορές η βοήθεια κάποιας επαναληπτικής δομής.</p>
			<p>Μια λίστα μπορεί να αντιγραφεί σε άλλη και να δημιουργηθεί αντίγραφό της μέσω μιας εντολής εκχώρησης. Αυτό φαίνεται στη Λίστα Κώδικα 5-9.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-9 | Αντιγραφή λίστας</figcaption><img src="media/ListaKodika-5-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αντίγραφο που δημιουργείται στη γραμμή 2 χρειάζεται προσοχή γιατί δεν δημιουργεί νέα λίστα, αλλά μια ακόμη αναφορά στην ίδια θέση μνήμης που «δείχνει» η μεταβλητή <span class="courier-code">a</span>. Αυτό φαίνεται και από το <span class="courier-code">id</span> των δυο μεταβλητών στη γραμμή 12. </p>
			<p>Τα <span class="courier-code">a</span> και <span class="courier-code">b</span> δεν είναι τίποτα άλλο παρά απλές αναφορές στα στοιχεία που βρίσκονται αποθηκευμένα κάπου στη μνήμη του υπολογιστή, και όχι δυο διαφορετικές λίστες.</p>
			<p>Αν χρειάζεται να υπάρχουν δυο διαφορετικά αντικείμενα τύπου λίστας που θα λειτουργούν ανεξάρτητα το ένα από το άλλο, θα πρέπει να οριστεί ρητά αυτό με έναν από τους τρόπους που φαίνονται στη Λίστα Κώδικα 5-10.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-10 | Δημιουργία λίστας</figcaption><img src="media/ListaKodika-5-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Ενώ το αντικείμενο <span class="courier-code">b</span> αρχικά είναι ίδιο με το <span class="courier-code">a</span> (γραμμή 1), έχει δηλαδή την ίδια αναφορά με το <span class="courier-code">a</span> στη λίστα, στη γραμμή 4 παίρνει νέα μορφή (όχι απαραίτητα και νέο περιεχόμενο) και αποτελεί ξεχωριστό αντικείμενο. Το ίδιο συμβαίνει και για το <span class="courier-code">c</span> που δημιουργείται μέσω της συνάρτησης <span class="courier-code">list</span> στη γραμμή 5. Οι αλλαγές που γίνονται και στις τρεις λίστες στη γραμμή 6 δεν επηρεάζουν η μια την άλλη. Αυτό βέβαια έχει ως αποτέλεσμα τα ίδια δεδομένα να υπάρχουν πολλές φορές και να καταλαμβάνουν περισσότερο χώρο στη μνήμη του συστήματος.</p>
			<p><b>ΣΗΜΕΙΩΣΗ</b>: η γραμμή 6 περιλαμβάνει τρεις ξεχωριστές εντολές που ξεχωρίζουν η μια από την άλλη με το ‘;’. </p>
			<p>Η λειτουργία των εντολών των γραμμών 1, 4 και 5 φαίνεται στην Εικόνα 5-2.</p>
			<figure class="lista-kodika">
				<figcaption>ΕΙΚόΝΑ 5-2 | Αντιγραφή λίστας</figcaption><img src="media/chapter_5_image_2.jpg" alt=""/></figure>
			<p class="no-indent">Η αντιγραφή μπορεί επίσης να περιλαμβάνει συγκεκριμένα και όχι όλα τα στοιχεία μιας λίστας. Ακολουθεί ένα αντίστοιχο παράδειγμα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-2</b>: Να γίνει εξαγωγή και αποθήκευση σε νέα λίστα μόνο των στοιχείων που βρίσκονται σε περιττό αριθμό θέσης. </p>
			</blockquote>
			<p class="no-indent">Αυτό μπορεί να γίνει με το πρόγραμμα της Λίστας Κώδικα 5-11.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-11 | Δημιουργία λίστας από άλλη λίστα με κριτηρια</figcaption><img src="media/ListaKodika-5-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εντολή στη γραμμή 2, δημιουργείται νέα λίστα 5 θέσεων με αρχικές τιμές την τιμή <span class="courier-code">None</span>. Η ενημέρωση της λίστας <span class="courier-code">b</span> γίνεται μέσα στην επανάληψη και μόνο για τα στοιχεία σε περιττό αριθμό θέσης. Η εκτέλεση του προγράμματος θα δώσει το αποτέλεσμα:</p>
			<p><span class="courier-code">[12, 33, 5, -23, 21]</span></p>
			<p class="no-indent">Το πρόγραμμα μπορεί να γίνει πιο απλό αν χρησιμοποιηθεί η <span class="courier-code">range</span> λίγο διαφορετικά:</p>
			<p><span class="courier-code">for i in range(1,len(a),2</span><span class="courier-code">)</span>:</p>
			<p class="no-indent">χωρίς να χρειάζεται να γίνει έλεγχος με την εντολή <span class="courier-code">if</span>.</p>
			<p>Υπάρχει όμως πιο άμεσος και πιο εύκολος τρόπος για να γίνει κάτι τέτοιο στην Python, και για αυτό τον σκοπό χρησιμοποιούνται τεχνικές δεικτοδότησης:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=a[1::2]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[12, 33, 5, -23, 21]</span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">list</span> μπορεί να χρησιμοποιηθεί και για τη μετατροπή ενός αντικειμένου σε λίστα. Η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=list(&apos;python&apos;)</span></p>
			<p class="no-indent">μετατρέπει τη συμβολοσειρά (βλ. Κεφάλαιο 6) σε μια λίστα χαρακτήρων, ενώ η συνάρτηση <span class="courier-code">sorted</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=sorted({3,1,5,3,7,2,3})</span></p>
			<p class="no-indent">δέχεται ένα σύνολο (βλ. Κεφάλαιο 8), ταξινομεί τα στοιχεία του και τα επιστρέφει με τη μορφή λίστας στη μεταβλητή <span class="courier-code">b</span>. Μετά την εκτέλεση των παραπάνω εντολών, το περιεχόμενο των <span class="courier-code">a</span> και <span class="courier-code">b</span> θα είναι:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">[&apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[1, 2, 3, 5, 7]</span></p>
		</section>
		<section role="section" id="ch7se6">
			<h1><span role="label">5.6</span> Deep copy</h1>
			<p class="no-indent">Η αντιγραφή μιας λίστας σε άλλη έχει κάποιες ιδιαιτερότητες. Για τη δημιουργία αντιγράφου μιας λίστας χρησιμοποιείται η συνάρτηση <span class="courier-code">list</span>. Έστω η λίστα <span class="courier-code">a</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3]</span></p>
			<p class="no-indent">H παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=list(a)</span></p>
			<p class="no-indent">δημιουργεί ένα ακριβές νέο αντίγραφο του <span class="courier-code">a</span> στο <span class="courier-code">b</span>. Αυτό φαίνεται και από το <span class="courier-code">id</span> που έχουν τα δυο (διαφορετικά) αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; id(a),id(b)</span></p>
			<p><span class="courier-code">(2078903470920, 2078903468296)</span></p>
			<p class="no-indent">Έτσι, αλλαγές που θα συμβούν σε μια από τις δυο λίστες δεν θα μεταφερθούν και στην άλλη. </p>
			<p><span class="courier-code">&gt;&gt;&gt; a[0]=4</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b</span></p>
			<p><span class="courier-code">([4, 2, 3], [1, 2, 3])</span></p>
			<p class="no-indent">Μετά την αλλαγή στη λίστα <span class="courier-code">a</span>, η λίστα <span class="courier-code">b</span> δεν άλλαξε. </p>
			<p class="no-indent">Ωστόσο, αυτό δεν ισχύει πάντα, ισχύει μόνο όταν τα μέλη της λίστας είναι αμετάβλητα αντικείμενα, όπως οι αριθμοί στο συγκεκριμένο παράδειγμα. Αν όμως τα στοιχεία της λίστας που αντιγράφεται είναι μεταβλητά αντικείμενα, όπως άλλες λίστες, τότε αυτό δεν ισχύει. Ως παράδειγμα δίνεται η Λίστα Κώδικα 5-12.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-12 | Αντιγραφή λίστας</figcaption><img src="media/ListaKodika-5-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Η 1η μεταβολή (γραμμή 3) δεν αλλάζει την αρχική λίστα, γιατί το στοιχείο <span class="courier-code">b[0]</span> είναι αριθμός (αμετάβλητο αντικείμενο), ενώ η 2η αλλαγή (γραμμή 4), που συμβαίνει στην εσωτερική λίστα, πραγματοποιείται και στην αρχική. Αυτό γίνεται γιατί με τη <span class="courier-code">list</span> δημιουργείται αντίγραφο αναφοράς στα στοιχεία της λίστας <span class="courier-code">a</span>. Αν όμως αυτή η αναφορά γίνεται σε λίστα, κάθε αλλαγή σε αυτήν «μεταφέρεται» σε κάθε μεταβλητή που τη χρησιμοποιεί. Αυτού του είδους τα αντίγραφα συχνά αποκαλούνται «ρηχά». Αν απαιτείται η πλήρης αντιγραφή κάθε στοιχείου μιας λίστας, τότε θα πρέπει να γίνει <i>«βαθιά» αντιγραφή (deep copy)</i>. Αυτό γίνεται με τη χρήση της βιβλιοθήκης <span class="courier-code">copy</span> και τη συνάρτηση <span class="courier-code">deepcopy</span>.</p>
			<p><span class="courier-code">&gt;&gt;&gt; import copy</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,[1,2]]</span></p>
			<p class="no-indent">Αφού γίνει η εισαγωγή της βιβλιοθήκης <span class="courier-code">copy</span> και δημιουργηθεί η λίστα <span class="courier-code">a</span>, η παρακάτω εντολή δημιουργεί ένα αντίγραφο του <span class="courier-code">a</span> στο <span class="courier-code">b</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=copy.deepcopy(a)</span></p>
			<p class="no-indent">και κάθε αλλαγή στο ένα: </p>
			<p><span class="courier-code">&gt;&gt;&gt; b[2][0]=20</span></p>
			<p class="no-indent">δεν επηρεάζει το άλλο: </p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">[1, 2, [1, 2]]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[1, 2, [20, 2]]</span></p>
		</section>
		<section role="section" id="ch7se7">
			<h1><span role="label">5.7</span> Εισαγωγή στοιχείων σε λίστα</h1>
			<p class="no-indent">Κάθε αντικείμενο τύπου λίστας έχει μεθόδους που χειρίζονται τη δομή και το περιεχόμενό της. Οι μέθοδοι που επιτρέπουν την εισαγωγή στοιχείων σε μια λίστα είναι οι <span class="courier-code">append</span>, <span class="courier-code">insert</span> και <span class="courier-code">extend</span> και περιγράφονται αναλυτικά στη συνέχεια.</p>
			<section role="subsection" id="ch7se7ss1">
				<h1><span role="label">5.7.1</span> Η μέθοδος <span class="courier-code">append</span></h1>
				<p class="no-indent">Η μέθοδος που επιτρέπει την εισαγωγή νέων στοιχείων σε μια λίστα, αυξάνοντας ταυτόχρονα το μέγεθός της, είναι η <span class="courier-code">append</span>. Η γενική μορφή της μεθόδου είναι: </p>
				<p><span class="courier-code">λίστα.append(αντικείμενο</span><span class="courier-code">)</span></p>
				<p class="no-indent">Με τη μέθοδο αυτή επιτρέπεται η εισαγωγή ενός νέου στοιχείου σε μια υπάρχουσα λίστα, τοποθετώντας το στοιχείο αυτό στην τελευταία θέση της, στο τέλος της λίστας. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; list1=[1,3,5]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1.append(7)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1.append(0)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1</span></p>
				<p><span class="courier-code">[1, 3, 5, 7, 0]</span></p>
				<p class="no-indent">Στη λίστα <span class="courier-code">list1</span>, που περιέχει στην αρχή τα στοιχεία <span class="courier-code">1</span>, <span class="courier-code">3</span> και <span class="courier-code">5</span>, εισάγεται το στοιχείο <span class="courier-code">7</span>. Έτσι, το μέγεθος της λίστας μεγαλώνει δυναμικά, προσαρτώντας στο τέλος της το νέο στοιχείο, σε μια νέα θέση που δημιουργείται για αυτό τον σκοπό. Η δεύτερη <span class="courier-code">append</span> θα αυξήσει πάλι το μέγεθος της λίστας κατά μια θέση, προσθέτοντας ένα ακόμη στοιχείο στο τέλος της και αποθηκεύοντας σε αυτή τη θέση τη νέα τιμή, το <span class="courier-code">0</span>.</p>
				<p>Με την <span class="courier-code">append</span> μπορεί να εισαχθεί οποιοδήποτε αντικείμενο μέσα σε μια λίστα, πάντα σε νέα θέση στο τέλος της:</p>
				<p><span class="courier-code">&gt;&gt;&gt; list1.append([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1</span></p>
				<p><span class="courier-code">[1, 3, 5, 7, 0, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]]</span></p>
				<p class="no-indent">Η πρόσβαση στα στοιχεία αυτής της λίστας γίνεται με τη χρήση δεικτών όπως:</p>
				<p><span class="courier-code">&gt;&gt;&gt; list1[1]</span></p>
				<p><span class="courier-code">3</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1[0]</span></p>
				<p><span class="courier-code">1</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1[5]</span></p>
				<p><span class="courier-code">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; list1[5][1]</span></p>
				<p><span class="courier-code">&apos;b&apos;</span></p>
				<p class="no-indent">Στην τελευταία περίπτωση ο 1ος δείκτης (το <span class="courier-code">5</span>) αναφέρεται στο στοιχείο της θέσης 5, που είναι άλλη (ένθετη) λίστα. Δίνοντας επομένως και 2ο δείκτη (το <span class="courier-code">1</span>), επιστρέφεται το στοιχείο (‘<span class="courier-code">b</span>’) της 1ης θέσης (2ο στοιχείο) του 5ου αντικειμένου της λίστας <span class="courier-code">list1</span>. </p>
				<p>Η <span class="courier-code">append</span>, όπως και οι περισσότερες μέθοδοι, χρησιμοποιούνται ως <i>εντολές χωρίς εκχώρηση (in-place)</i>. Ένα από τα πιο συχνά λάθη που κάνει όποιος ασχολείται πρώτη φορά με τη διαχείριση λιστών είναι να «εξαφανίζει» με… μαγικό τρόπο μια λίστα, γράφοντας:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=a.append(3)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
				<p><span class="courier-code">&lt;class &apos;NoneType&apos;&gt;</span></p>
				<p class="no-indent">Οι in-place εντολές, όπως της μεθόδου <span class="courier-code">append</span>, επιστρέφουν την τιμή <span class="courier-code">None</span>, δηλαδή τίποτα. Γι’ αυτό και η λίστα <span class="courier-code">a</span> στην προηγούμενη <span class="courier-code">append</span> αδειάζει και χάνει το περιεχόμενό της (γίνεται αντικείμενο τύπου <span class="courier-code">none</span>).</p>
				<p>Όταν δεν είναι γνωστό το περιεχόμενο που θα έχει μια λίστα καθώς εκτελείται το πρόγραμμα, τότε η δημιουργία της λίστας μπορεί να γίνει με τη βοήθεια μιας δομής επανάληψης.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-3</b>: Από ένα σύνολο βαθμών θα πρέπει να δημιουργηθεί νέα λίστα, που θα περιέχει όσους είναι κάτω από 5 (Λίστα Κώδικα 5-13). </p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-13 | Η λειτουργία <span class="courier-code">append</span></figcaption><img src="media/ListaKodika-5-13_fmt.png" alt=""/></figure>
				<p class="no-indent">Το αποτέλεσμα που θα εμφανίσει το πρόγραμμα θα είναι μια νέα λίστα (<span class="courier-code">k</span>), η οποία θα περιέχει βαθμούς μικρότερους του <span class="courier-code">5</span>:</p>
				<p><span class="courier-code">[2, 4, 1, 1, 0]</span></p>
				<p class="no-indent">Ένας πιο άμεσος τρόπος για να δημιουργηθεί μια τέτοια νέα λίστα είναι με τη <i>σύνθεση λιστών (list comprehension)</i>, που περιγράφεται σε επόμενη ενότητα και αποτελεί έναν αρκετά πιο αποδοτικό μηχανισμό της Python.</p>
			</section>
			<section role="subsection" id="ch7se7ss2">
				<h1><span role="label">5.7.2</span> Η μέθοδος <span class="courier-code">insert</span></h1>
				<p class="no-indent">Μια λίστα μπορεί να αποκτήσει νέες τιμές και με τη μέθοδο <span class="courier-code">insert</span>. Αυτή μπορεί να χρησιμοποιηθεί σε εκείνες τις περιπτώσεις όπου η εισαγωγή νέου στοιχείου πρέπει να γίνει σε συγκεκριμένη θέση μέσα στη λίστα, και όχι αναγκαστικά στο τέλος της, όπως συμβαίνει με την <span class="courier-code">append</span>. Η γενική μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">λίστα.insert(δείκτης, αντικείμενο)</span></p>
				<p class="no-indent">όπου <span class="courier-code">λίστα</span> είναι η λίστα στην οποία θα προστεθεί το νέο στοιχείο (<span class="courier-code">αντικείμενο</span>) και <span class="courier-code">δείκτης</span> είναι η θέση όπου θα τοποθετηθεί το στοιχείο αυτό αυξάνοντας το μέγεθος της λίστας κατά 1 και μεταφέροντας τα στοιχεία που υπάρχουν ήδη μετά από αυτό το σημείο μια θέση πιο δεξιά. Το αντικείμενο που θα προστεθεί στη λίστα μπορεί να είναι οποιοδήποτε αντικείμενο της Python.</p>
				<p>Ακολουθούν μερικά παραδείγματα.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-14 | Η λειτουργία <span class="courier-code">insert</span></figcaption><img src="media/ListaKodika-5-14_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εισαγωγή του στοιχείου ‘<span class="courier-code">α</span>’ στη γραμμή 2 γίνεται στη 2η θέση της λίστας, μετακινώντας όλα τα στοιχεία από τη θέση 2 και μετά μια θέση πιο δεξιά. Το ίδιο συμβαίνει και με την εισαγωγή μιας λίστας στη θέση 2 στη γραμμή 5. Για την εισαγωγή νέου στοιχείου μέσα στην εσωτερική λίστα χρησιμοποιείται η αναφορά σε αυτή τη θέση στη γραμμή 8. Το στοιχείο <span class="courier-code">g[2]</span> αναφέρεται στην εσωτερική λίστα, οπότε η <span class="courier-code">insert</span> που ακολουθεί θα λειτουργήσει στη λίστα <span class="courier-code">[0,0]</span>, όπου και θα γίνει η εισαγωγή του αριθμού <span class="courier-code">10</span>. Η νέα μορφή της εσωτερικής λίστας (<span class="courier-code">[0,10,0]</span>) φαίνεται στη γραμμή 10. Η γραμμή 11 δείχνει την περίπτωση όπου ο δείκτης θέσης σε μια <span class="courier-code">insert</span> είναι μεγαλύτερος από το μέγεθος της λίστας. Τότε, η εισαγωγή γίνεται στο τέλος της λίστας. Η γραμμή 14 κάνει χρήση της <span class="courier-code">insert</span> με αρνητική δεικτοδότηση. Το στοιχείο <span class="courier-code">4</span> θα τοποθετηθεί στην προτελευταία θέση της λίστας, ωθώντας τα άλλα 2 στοιχεία μια θέση πιο δεξιά.</p>
				<p>Η ευκολία με την οποία εισάγουμε νέα στοιχεία σε μια λίστα έρχεται όμως με κάποιο κόστος. Η μετακίνηση στοιχείων κοστίζει σε χρόνο CPU, όταν γίνεται συχνά και όταν το μέγεθος της λίστας είναι αρκετά μεγάλο. Για παράδειγμα, είναι προτιμότερο σε μια ταξινομημένη λίστα να εισάγονται στοιχεία σε συγκεκριμένες θέσεις, ώστε να συνεχίζει να είναι ταξινομημένη, ή να εισάγονται στο τέλος της και να γίνεται εκ νέου ταξινόμηση; Η απάντηση δεν είναι και τόσο ξεκάθαρη και εξαρτάται από το πόσα στοιχεία εισάγονται, με ποια συχνότητα, πόσο μεγάλη είναι η λίστα ή, ακόμα, και από το πού ακριβώς εισάγονται αυτά (στην αρχή ή στο τέλος της λίστας).</p>
			</section>
			<section role="subsection" id="ch7se7ss3">
				<h1><span role="label">5.7.3</span> Η μέθοδος <span class="courier-code">extend</span></h1>
				<p class="no-indent">Η μέθοδος <span class="courier-code">extend</span> επιτρέπει την προσάρτηση των στοιχείων ενός επαναληπτικού αντικειμένου στο τέλος μιας λίστας. Η γενική μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">λίστα</span><span class="courier-code">.extend(αντικείμενο)</span></p>
				<p class="no-indent">Η <span class="courier-code">extend</span> επεκτείνει μια λίστα βάζοντας τα στοιχεία ενός αντικειμένου, όπως η λίστα, η πλειάδα και η συμβολοσειρά, ένα προς ένα, στις τελευταίες θέσεις.</p>
				<p>Στις παρακάτω εντολές φαίνεται αυτή η λειτουργία:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a,b=[&apos;α&apos;,&apos;β&apos;,&apos;γ&apos;],[&apos;δ&apos;,&apos;</span><span class="courier-code">ε&apos;,&apos;ζ&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.extend(b)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[&apos;α&apos;, &apos;β&apos;, &apos;γ&apos;, &apos;δ&apos;, &apos;ε&apos;, &apos;ζ&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b.extend(&apos;</span><span class="courier-code">ηθι&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
				<p><span class="courier-code">[&apos;δ&apos;, &apos;ε&apos;, &apos;ζ&apos;, &apos;η&apos;, &apos;θ&apos;, &apos;ι&apos;]</span></p>
				<p class="no-indent">Στην περίπτωση του <span class="courier-code">a</span>, τα στοιχεία του <span class="courier-code">b</span> προστίθενται, ένα προς ένα, στο τέλος της λίστας. Η επόμενη εντολή που κάνει χρήση της <span class="courier-code">extend</span> επεκτείνει τη λίστα <span class="courier-code">b</span> δίνοντάς της καθέναν από τους χαρακτήρες της συμβολοσειράς ‘<span class="courier-code">ηθι</span>’. Η <span class="courier-code">extend</span> δέχεται και άλλες δομές, όπως σύνολα και λεξικά:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s={3,2,5}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d=[1,2,3]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d.extend(s)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
				<p><span class="courier-code">[1, 2, 3, 2, 3, 5]</span></p>
				<p class="no-indent">Τα στοιχεία του συνόλου <span class="courier-code">s</span> θα τοποθετηθούν στο τέλος της λίστας <span class="courier-code">d</span>, με άγνωστη όμως σειρά. Αυτή η συμπεριφορά των συνόλων περιγράφεται αναλυτικά στο Κεφάλαιο 8. Η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; d.extend({1:&apos;a&apos;,2:&apos;b&apos;})</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
				<p><span class="courier-code">[1, 2, 3, 2, 3, 5, 1, 2]</span></p>
				<p class="no-indent">θα προσθέσει τα κλειδιά (<span class="courier-code">1,2</span>) του λεξικού <span class="courier-code">{1:&apos;a&apos;,2:&apos;b&apos;}</span> στο τέλος της λίστας <span class="courier-code">d</span>. Τα χαρακτηριστικά των λεξικών περιγράφονται στο Κεφάλαιο 9.</p>
			</section>
		</section>
		<section role="section" id="ch7se8">
			<h1><span role="label">5.8</span> Υπερφόρτωση τελεστών</h1>
			<p class="no-indent">Ένας ακόμα τρόπος να γίνει εισαγωγή νέων στοιχείων σε μια λίστα είναι με τη χρήση του τελεστή της πρόσθεσης ‘<span class="courier-code">+</span>’. Δίνονται παραδείγματα στη Λίστα Κώδικα 5-15.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-15 | Υπερφόρτωση τελεστών</figcaption><img src="media/ListaKodika-5-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Στις περιπτώσεις αυτές γίνεται υπερφόρτωση του αριθμητικού τελεστή ‘<span class="courier-code">+</span>’, ώστε να ενώσει δυο λίστες μεταξύ τους, βάζοντας τη 2η λίστα (<span class="courier-code">[4]</span>) στο τέλος της 1ης. Έχει σημασία το στοιχείο <span class="courier-code">4</span> να τοποθετηθεί μέσα σε αγκύλες, ώστε και οι δυο τελεστέοι (δεξιά και αριστερά από το ‘<span class="courier-code">+</span>’) να είναι αντικείμενα ίδιου τύπου, και πιο συγκεκριμένα τύπου λίστας. </p>
			<p class="no-indent"><b>Γραμμή 2</b>: Γίνεται συνένωση της λίστας <span class="courier-code">h</span> με το στοιχείο 4.</p>
			<p class="no-indent"><b>Γραμμή 5</b>: Με παρόμοιο τρόπο λειτουργεί και ο σύνθετος τελεστής.</p>
			<p class="no-indent"><b>Γραμμή 8</b>: Τα στοιχεία της λίστας <span class="courier-code">[2,2]</span> εισάγονται στη λίστα <span class="courier-code">h</span>.</p>
			<p class="no-indent"><b>Γραμμή 11</b>: Αν επιχειρηθεί χρήση του τελεστή ‘<span class="courier-code">+</span>’ με αντικείμενα διαφορετικού τύπου, θα εμφανιστεί μήνυμα σφάλματος.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-4</b>: Ένα πρακτορείο ταξιδιών διαθέτει δυο λίστες με ονόματα πελατών. Να γράψετε τμήμα προγράμματος που θα συνενώνει τις δυο αυτές λίστες και θα εμφανίζει την τελική λίστα με τα ονόματα στην οθόνη.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-16 περιέχει τις απαραίτητες εντολές.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-16 | Συνένωση λιστών</figcaption><img src="media/ListaKodika-5-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα που θα εμφανίσει το πρόγραμμα θα είναι τα στοιχεία της νέας λίστας <span class="courier-code">group</span>: </p>
			<p><span class="courier-code">Άννα Γιάννης Νίκη Εύα Ειρήνη Γιώργος</span></p>
			<p class="no-indent">Ένας ακόμη αριθμητικός τελεστής, που αποκτά άλλη λειτουργία ανάμεσα σε δυο λίστες, είναι και το ‘<span class="courier-code">*</span>’. Η χρήση του ‘<span class="courier-code">*</span>’ με λίστες έχει ως αποτέλεσμα την επαναληπτική συνένωση μιας λίστας. Οι παρακάτω εντολές δημιουργούν μια λίστα (<span class="courier-code">list2</span>) από την επανάληψη μιας άλλης (<span class="courier-code">list1</span>):</p>
			<p><span class="courier-code">&gt;&gt;&gt; list1=[&apos;α&apos;,&apos;β&apos;,&apos;γ&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; list2=list1*2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; list2</span></p>
			<p><span class="courier-code">[&apos;α&apos;, &apos;β&apos;, &apos;γ&apos;, &apos;α&apos;, &apos;β&apos;, &apos;</span><span class="courier-code">γ&apos;]</span></p>
			<p class="no-indent">Η συνένωση δυο ή περισσότερων λιστών έχει μερικές ιδιομορφίες, που θα πρέπει να λαμβάνονται υπόψη κάθε φορά. Για παράδειγμα, έστω τρεις λίστες <span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=[4,5,6]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c=[7,8,9]</span></p>
			<p class="no-indent">Για την ένωσή τους θα χρησιμοποιηθούν διαφορετικοί τρόποι στις επόμενες εντολές. Ένα από τα πιο συχνά λάθη στις συνενώσεις λιστών είναι και η σύγχυση που υπάρχει στη χρήση και το αποτέλεσμα των παρακάτω εντολών. Αξίζει να παρατηρήσουμε τις διαφορές στη λειτουργία τους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d=a+b</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">[1, 2, 3, 4, 5, 6]</span></p>
			<p class="no-indent">Η ένωση των <span class="courier-code">a</span> και <span class="courier-code">b</span> θα δοθεί ως περιεχόμενο στη νέα λίστα <span class="courier-code">d</span>. Τα στοιχεία θα τοποθετηθούν με τη σειρά που βρίσκονται στη λίστα τους. Αντίθετα η επόμενη εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; a.append(b)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">[1, 2, 3, [4, 5, 6]]</span></p>
			<p class="no-indent">θα τοποθετήσει τη λίστα <span class="courier-code">b</span> ως ένα ενιαίο αντικείμενο στην τελευταία θέση της λίστας <span class="courier-code">a</span>. Η <span class="courier-code">extend</span> λειτουργεί με παρόμοιο τρόπο με το ‘<span class="courier-code">+</span>’, αλλά μπορεί να χειριστεί και άλλου είδους αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b.extend(c)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[4, 5, 6, 7, 8, 9]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; p=[&apos;python&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; p+s</span></p>
			<p><span class="courier-code">TypeError: can only concatenate list (not &quot;str&quot;) to list</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; p.extend(s)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; p</span></p>
			<p><span class="courier-code">[&apos;python&apos;, &apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;]</span></p>
			<p class="no-indent">Όλες οι μέθοδοι που παρουσιάστηκαν αποτελούν αυτόνομες εντολές, ή <i>εντολές χωρίς εκχώρηση (in-place commands)</i>. Αν δοκιμάσει κανείς να εκχωρήσει το αποτέλεσμα τέτοιων εντολών σε κάποια μεταβλητή, θα διαπιστώσει ότι αυτό είναι μια κενή τιμή (<span class="courier-code">None</span>):</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=a.append(0)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">[1, 2, 3, 0]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(b)</span></p>
			<p><span class="courier-code">&lt;class &apos;NoneType&apos;&gt;</span></p>
		</section>
		<section role="section" id="ch7se9">
			<h1><span role="label">5.9</span> Διαγραφή λίστας</h1>
			<p class="no-indent">Στην Python υπάρχει μια μεγάλη ποικιλία ενεργειών που επιτρέπουν τη διαγραφή είτε μεμονωμένων στοιχείων μιας λίστας είτε ολόκληρης της λίστας. Τέτοιες εργασίες μπορούν να γίνουν με χρήση των συναρτήσεων και μεθόδων <span class="courier-code">del</span>, <span class="courier-code">clear</span>, <span class="courier-code">remove</span> και <span class="courier-code">pop</span>.</p>
			<section role="subsection" id="ch7se9ss1">
				<h1><span role="label">5.9.1</span> Χρήση της συνάρτησης <span class="courier-code">del</span></h1>
				<p class="no-indent">Η ενσωματωμένη συνάρτηση <span class="courier-code">del</span> μπορεί να χρησιμοποιηθεί με αρκετούς τρόπους. Στη συνέχεια, περιγράφονται ορισμένες χαρακτηριστικές περιπτώσεις.</p>
				<section role="subsubsection" id="ch7se9ss1sss1">
					<h1>5.9.1.1 Διαγραφή λίστας</h1>
					<p class="no-indent">Η συνάρτηση <span class="courier-code">del</span>, όπως παρουσιάστηκε στο Κεφάλαιο 2, επιτρέπει τη διαγραφή μιας μεταβλητής από τον <i>χώρο ονομάτων του διερμηνευτή (namespace)</i>. Έτσι, η λίστα <span class="courier-code">a=[1,3,5]</span> με την παρακάτω εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; del a</span></p>
					<p class="no-indent">διαγράφει εντελώς το αντικείμενο <span class="courier-code">a</span>. Οποιαδήποτε αναφορά, στη συνέχεια, στη λίστα <span class="courier-code">a</span>:</p>
					<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
					<p><span class="courier-code">NameError: name &apos;a&apos; is not defined</span></p>
					<p class="no-indent">θα προκαλέσει την εμφάνιση σφάλματος, αφού πλέον το αντικείμενο <span class="courier-code">a</span> δεν είναι διαθέσιμο.</p>
				</section>
				<section role="subsubsection" id="ch7se9ss1sss2">
					<h1>5.9.1.2 Άδειασμα λίστας</h1>
					<p class="no-indent">Ένας διαφορετικός τρόπος χρήσης της συνάρτησης <span class="courier-code">del</span> είναι για να αδειάσει το περιεχόμενο μιας λίστας:</p>
					<p><span class="courier-code">&gt;&gt;&gt; del a[:]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
					<p><span class="courier-code">[]</span></p>
					<p class="no-indent">όπου ο χαρακτήρας ‘<span class="courier-code">:</span>’ εκφράζει όλα τα στοιχεία ή όλες τις θέσεις της λίστας. Με αυτό τον τρόπο δεν διαγράφεται το αντικείμενο <span class="courier-code">a</span>, αλλά μόνο τα περιεχόμενά του. Η λίστα <span class="courier-code">a</span> συνεχίζει να υπάρχει στη μνήμη, μόνο που πλέον είναι κενή. Αυτός ο τρόπος είναι παρόμοιος με τη λειτουργία της μεθόδου <span class="courier-code">clear</span> που περιγράφεται λίγο πιο κάτω.</p>
				</section>
				<section role="subsubsection" id="ch7se9ss1sss3">
					<h1>5.9.1.3 Διαγραφή μεμονωμένων στοιχείων</h1>
					<p class="no-indent">Με την <span class="courier-code">del</span>, αν το όνομα της λίστας συνοδεύεται με κάποιον δείκτη ή <i>τμήματα (slices) </i>λίστας, τότε μπορεί να διαγραφεί μέρος της λίστας. Έτσι, για την προηγούμενη λίστα (<span class="courier-code">a=[1,2,3,4]</span>), για τη διαγραφή του 2ου στοιχείου (στη θέση 1 δηλαδή), μπορεί να δοθεί η παρακάτω εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; del a[1]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
					<p><span class="courier-code">[1, 3, 4]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; del a[1:2]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
					<p><span class="courier-code">[1, 4]</span></p>
					<p class="no-indent">Επίσης, με την επόμενη εντολή στην αρχική λίστα <span class="courier-code">a</span>:</p>
					<p><span class="courier-code">&gt;&gt;&gt; a[2:4]=[]</span></p>
					<p class="no-indent">διαγράφεται το κομμάτι της λίστας από τη θέση 2 μέχρι και τη θέση 3.</p>
				</section>
			</section>
			<section role="subsection" id="ch7se9ss2">
				<h1><span role="label">5.9.2</span> Η μέθοδος <span class="courier-code">remove</span></h1>
				<p class="no-indent">Με τη μέθοδο <span class="courier-code">remove</span> είναι δυνατή η διαγραφή συγκεκριμένου στοιχείου μιας λίστας με βάση την τιμή του. Η γενική μορφή σύνταξης της μεθόδου είναι:</p>
				<p><span class="courier-code">λίστα.remove(τιμή</span><span class="courier-code">)</span></p>
				<p class="no-indent">Το στοιχείο <span class="courier-code">τιμή</span> είναι αυτό που θα αφαιρεθεί από τη λίστα. Αν υπάρχει τέτοια τιμή μέσα στη λίστα πολλές φορές, τότε θα αφαιρεθεί η 1η τιμή στη σειρά. Αν η τιμή αυτή δεν υπάρχει, τότε προκαλείται σφάλμα και η εκτέλεση διακόπτεται. </p>
				<p>Κάθε φορά που αφαιρείται ένα στοιχείο από μια λίστα, τα στοιχεία που υπάρχουν δεξιά (ή μετά) από το στοιχείο αυτό μεταφέρονται μια θέση πιο αριστερά. Δίνεται η παρακάτω λίστα: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,3,5]</span></p>
				<p class="no-indent">Η επόμενη εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.remove(3)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[1,5]</span></p>
				<p class="no-indent">αφαιρεί την τιμή <span class="courier-code">3</span> από τη λίστα. Aν επιχειρηθεί όμως η αφαίρεση τιμής που δεν υπάρχει στη λίστα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.remove(2)</span></p>
				<p><span class="courier-code">ValueError: list.remove(x): x not in list</span></p>
				<p class="no-indent">εμφανίζεται σχετικό μήνυμα σφάλματος.</p>
			</section>
			<section role="subsection" id="ch7se9ss3">
				<h1><span role="label">5.9.3</span> Η μέθοδος <span class="courier-code">pop</span></h1>
				<p class="no-indent">Η εξαγωγή στοιχείου από λίστα γίνεται και με τη μέθοδο <span class="courier-code">pop</span>. Η σύνταξή της είναι:</p>
				<p><span class="courier-code">λίστα.pop(δείκτης)</span></p>
				<p class="no-indent">όπου δείκτης είναι η θέση του στοιχείου που θα εξαχθεί από τη λίστα και μπορεί να παραλειφθεί. Διακρίνονται οι επόμενες περιπτώσεις.</p>
				<section role="subsubsection" id="ch7se9ss3sss1">
					<h1>5.9.3.1 Εξαγωγή του τελευταίου στοιχείου</h1>
					<p class="no-indent">Για μια λίστα:</p>
					<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3,4]</span></p>
					<p class="no-indent">γράφοντας: </p>
					<p><span class="courier-code">&gt;&gt;&gt; a.pop()</span></p>
					<p><span class="courier-code">4</span></p>
					<p class="no-indent">εξάγεται και επιστρέφεται στην οθόνη ως αποτέλεσμα το τελευταίο στοιχείο της λίστας <span class="courier-code">a</span>.</p>
					<p>Η βασική διαφορά με άλλες μεθόδους διαγραφής είναι ότι με την <span class="courier-code">pop</span> εξάγεται ένα στοιχείο τη φορά, το οποίο ταυτόχρονα μπορεί να δοθεί, με εκχώρηση, σε μια άλλη μεταβλητή. Για παράδειγμα, η παρακάτω εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; b=a.pop()</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
					<p><span class="courier-code">3</span></p>
					<p class="no-indent">εξάγει το τελευταίο στοιχείο της λίστας <span class="courier-code">a</span> (το <span class="courier-code">3</span>) και το καταχωρεί στη μεταβλητή <span class="courier-code">b</span>.</p>
				</section>
				<section role="subsubsection" id="ch7se9ss3sss2">
					<h1>5.9.3.2 Εξαγωγή συγκεκριμένου στοιχείου</h1>
					<p class="no-indent">Στη μέθοδο <span class="courier-code">pop</span> μπορεί να δοθεί ως όρισμα η θέση του στοιχείου που θα εξαχθεί από τη λίστα. Για μια λίστα:</p>
					<p><span class="courier-code">&gt;&gt;&gt; a=[2,4,6]</span></p>
					<p class="no-indent">η εντολή:</p>
					<p><span class="courier-code">&gt;&gt;&gt; b=a.pop(1)</span></p>
					<p class="no-indent">αφαιρεί το στοιχείο που βρίσκεται στη θέση 1 (το <span class="courier-code">4</span>), συμπτύσσοντας τη λίστα και μειώνοντας το μέγεθός της κατά ένα στοιχείο, ενώ ταυτόχρονα το στοιχείο αυτό δίνεται στη μεταβλητή <span class="courier-code">b</span>.</p>
				</section>
			</section>
			<section role="subsection" id="ch7se9ss4">
				<h1><span role="label">5.9.4</span> Η μέθοδος <span class="courier-code">clear</span></h1>
				<p class="no-indent">Από την έκδοση 3.3 και μετά, η Python διαθέτει μια ακόμη μέθοδο για τις λίστες, τη μέθοδο <span class="courier-code">clear</span>, που επιτρέπει το άδειασμα μιας λίστας. Δεν παίρνει καμία παράμετρο και η χρήση της είναι απλή. Η γενική μορφή της είναι:</p>
				<p><span class="courier-code">λίστα</span><span class="courier-code">.clear()</span></p>
				<p class="no-indent">Κάνει αυτό που λέει και το όνομά της, «καθαρίζει» τα στοιχεία μιας λίστας, διαγράφει δηλαδή το περιεχόμενό της. Εκτελώντας τον παρακάτω κώδικα για μια λίστα <span class="courier-code">a=[1,2,3]</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.clear()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[]</span></p>
				<p class="no-indent">πολύ απλά, αδειάζει τη λίστα, διαγράφοντας όλα τα στοιχεία της και το μόνο που απομένει είναι μια κενή λίστα, η οποία μπορεί να χρησιμοποιηθεί ξανά για την ίδια ή και για κάποια άλλη εργασία. Παρόμοια λειτουργία εκτελεί και καθεμιά από τις παρακάτω εκφράσεις με τη βοήθεια δεικτών:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a[:]=[]</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; del a[:]</span></p>
				<p class="no-indent">ή: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a*=0</span></p>
				<p class="no-indent">ή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[]</span></p>
				<p class="no-indent">Σε όλες τις περιπτώσεις, εκτός από την τελευταία, το αντικείμενο της λίστας παραμένει το ίδιο, δεν αλλάζει το <span class="courier-code">id</span> του. Στην τελευταία εντολή ωστόσο, το <span class="courier-code">a</span> θα αναφέρεται σε μια νέα κενή λίστα.</p>
			</section>
		</section>
		<section role="section" id="ch7se10">
			<h1><span role="label">5.10</span> Αναδιάταξη λίστας</h1>
			<p class="no-indent">Μια λίστα μπορεί να τροποποιηθεί, όχι μόνο σε επίπεδο μεμονωμένου στοιχείου ή ομάδας στοιχείων, αλλά και ολόκληρη. Αυτό μπορεί να γίνει με δυο μεθόδους, τις <span class="courier-code">reverse</span> και <span class="courier-code">sort</span>.</p>
			<section role="subsection" id="ch7se10ss1">
				<h1><span role="label">5.10.1</span> Αντιστροφή λίστας</h1>
				<p class="no-indent">Για την πλήρη αντιστροφή της διάταξης των στοιχείων μιας λίστας, μπορεί να γίνει χρήση της μεθόδου <span class="courier-code">reverse</span>. Οι παρακάτω εντολές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,3,7,2,5]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.reverse()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[5, 2, 7, 3, 1]</span></p>
				<p class="no-indent">αντιστρέφουν τη διάταξη των στοιχείων της λίστας <span class="courier-code">a</span>, τοποθετώντας το τελευταίο στοιχείο 1ο, το προτελευταίο 2ο κ.ο.κ. Και εδώ, η λειτουργία της <span class="courier-code">reverse</span> γίνεται άμεσα και ενεργεί στην ίδια τη λίστα, αλλάζοντάς την. Αν απαιτείται η δημιουργία νέας λίστας, με τα στοιχεία όμως στην ανάποδη σειρά, μπορεί να χρησιμοποιηθεί και η παρακάτω εντολή δεικτοδότησης:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,3,7,2,5]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=a[::-1]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
				<p><span class="courier-code">[5, 2, 7, 3, 1]</span></p>
				<p class="no-indent">Όπως φαίνεται και από τις πιο πάνω εντολές, γίνεται η αντιστροφή των στοιχείων, χωρίς όμως να αλλάξει η αρχική λίστα, και δημιουργείται μια νέα λίστα με την ανάποδη διάταξη.</p>
			</section>
			<section role="subsection" id="ch7se10ss2">
				<h1><span role="label">5.10.2</span> Ταξινόμηση λίστας</h1>
				<p class="no-indent">Κάθε αντικείμενο τύπου λίστας έχει μια ενσωματωμένη μέθοδο για την ταξινόμησή του. Η μέθοδος ονομάζεται <span class="courier-code">sort</span> και η γενική μορφή σύνταξης είναι:</p>
				<p><span class="courier-code">λίστα.sort(key, reverse)</span></p>
				<p class="no-indent">Οι παράμετροι <span class="courier-code">key</span> και <span class="courier-code">reverse</span> είναι <i>προαιρετικές (optional)</i> και μπορούν να παραλειφθούν. Η <span class="courier-code">sort</span> ταξινομεί<sup class="superscript CharOverride-1"><span id="footnote-045-backlink"><a href="#footnote-045">49</a></span></sup> τη λίστα με την οποία χρησιμοποιείται (<i>in-place</i> εντολή) σε αύξουσα διάταξη των στοιχείων της και δεν επιστρέφει τίποτα (επιστρέφει την τιμή <span class="courier-code">None</span>). Για τη δημιουργία νέας ταξινομημένης λίστας και τη διατήρηση της αρχικής, μπορεί να χρησιμοποιηθεί αντί της μεθόδου <span class="courier-code">sort</span> η συνάρτηση <span class="courier-code">sorted</span>, που δέχεται ένα επαναληπτικό αντικείμενο (το οποίο μπορεί να μην είναι λίστα, αλλά κάτι άλλο, όπως πλειάδα ή συμβολοσειρά) και επιστρέφει μια ταξινομημένη λίστα.</p>
				<p>Η παράμετρος <span class="courier-code">reverse</span> δέχεται μια λογική τιμή (<span class="courier-code">True</span> ή <span class="courier-code">False</span>) και επιτρέπει την ταξινόμηση με φθίνουσα διάταξη των στοιχείων της. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,3,7,2,5]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.sort()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[1, 2, 3, 5, 7]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.sort(reverse=True)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[7, 5, 3, 2, 1]</span></p>
				<p class="no-indent">όπου αρχικά η λίστα <span class="courier-code">a</span> αναδιατάσσεται κατά αύξουσα και στη συνέχεια κατά φθίνουσα σειρά των στοιχείων της.</p>
				<p>Η ταξινόμηση γίνεται με βάση το περιεχόμενο που έχει κάθε φορά μια λίστα. Έτσι, αν μια λίστα περιέχει αριθμούς, αυτοί θα ταξινομηθούν με βάση τις τιμές τους. Αν η λίστα περιέχει κείμενο, τότε η διάταξή τους θα γίνει λεξικογραφικά, έχοντας δηλαδή ως δεδομένο ότι ‘<span class="courier-code">α</span>’<span class="courier-code">&lt;</span>’<span class="courier-code">β</span>’<sup class="superscript CharOverride-1"><span id="footnote-044-backlink"><a href="#footnote-044">50</a></span></sup>. Στο παρακάτω παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[&apos;ace&apos;,&apos;act&apos;,&apos;ac&apos;,&apos;bbc&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.sort()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[&apos;ac&apos;, &apos;ace&apos;, &apos;act&apos;, &apos;bbc&apos;]</span></p>
				<p class="no-indent">Η <span class="courier-code">sort</span> θα αλλάξει το περιεχόμενο της λίστας <span class="courier-code">a</span> βάζοντας τα στοιχεία της σε αύξουσα διάταξη.</p>
				<p>Η ταξινόμηση δεν μπορεί να γίνει μόνο στην περίπτωση που τα στοιχεία της λίστας είναι διαφορετικού τύπου. Η επόμενη εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,&apos;5&apos;,2]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.sort()</span></p>
				<p><span class="courier-code">TypeError: unorderable types: str() &lt; int()</span></p>
				<p class="no-indent">θα αποτύχει, γιατί τα στοιχεία της λίστας είναι διαφορετικού τύπου.</p>
				<p>Η ταξινόμηση στην Python μπορεί να γίνει και με περισσότερα ή πιο σύνθετα κριτήρια, και όχι μόνο με βάση τις τιμές των στοιχείων της λίστας. Αυτό μπορεί να γίνει με τη χρήση της παραμέτρου <span class="courier-code">key</span>. Με την παράμετρο <span class="courier-code">key</span> μπορεί να αλλάξει το κριτήριο της ταξινόμησης και να δοθεί κάτι εντελώς διαφορετικό από τις τιμές που έχουν τα στοιχεία της λίστας. Δίπλα στη λέξη <span class="courier-code">key</span> μπορεί να δοθεί μια συνάρτηση, είτε ενσωματωμένη είτε οριζόμενη από τον χρήστη. Στο επόμενο παράδειγμα χρησιμοποιείται ως κριτήριο ταξινόμησης το αποτέλεσμα που δίνει μια ενσωματωμένη συνάρτηση.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-5</b>: Δίνεται μια λίστα με αριθμούς. Να τους ταξινομήσετε με βάση την απόλυτη τιμή τους.</p>
				</blockquote>
				<p class="no-indent">Στο όρισμα <span class="courier-code">key</span> θα δοθεί η τιμή της συνάρτησης <span class="courier-code">abs</span>. Η Λίστα Κώδικα 5-17 περιέχει τις απαραίτητες εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-17 | Ταξινόμηση λίστας</figcaption><img src="media/ListaKodika-5-17_fmt.png" alt=""/></figure>
				<p class="no-indent">Τρέχοντας το πρόγραμμα, θα εμφανιστούν τα στοιχεία της λίστας <span class="courier-code">a</span> ταξινομημένα σε αύξουσα διάταξη: </p>
				<p><span class="courier-code">[0, 1, 2, -2, 3, 4, -7, 7]</span></p>
				<p class="no-indent">Από το αποτέλεσμα φαίνεται και ο τρόπος που λειτούργησε η <span class="courier-code">sort</span>. Η σειρά των στοιχείων καθορίζεται μετά την εφαρμογή της συνάρτησης σε κάθε στοιχείο της λίστας.</p>
				<p>Αρκετά ενδιαφέρουσα είναι και η περίπτωση ταξινόμησης λίστας που περιέχει άλλες λίστες. Το Παράδειγμα 5-6 χρησιμοποιεί τη συνάρτηση <span class="courier-code">len</span> που επιστρέφει το μέγεθος μιας λίστας.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-6</b>: Δίνεται μια λίστα που περιέχει λίστες με τις παραγγελίες ενός καταστήματος. Να ταξινομήσετε το περιεχόμενο της λίστας με βάση το πλήθος των παραγγελιών.</p>
				</blockquote>
				<p class="no-indent">Η απάντηση φαίνεται στη Λίστα Κώδικα 5-18.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-18 | Ταξινόμηση λίστας με τη χρήση συνάρτησης <span class="courier-code">len</span></figcaption><img src="media/ListaKodika-5-18_fmt.png" alt=""/></figure>
				<p class="no-indent">Η συνάρτηση <span class="courier-code">len</span> επιστρέφει έναν αριθμό, που δηλώνει το πλήθος των στοιχείων της κάθε λίστας. Έτσι, για τη λίστα <span class="courier-code">orders</span> θα δημιουργήσει τις τιμές <span class="courier-code">2,</span> <span class="courier-code">4,</span> <span class="courier-code">3</span> και <span class="courier-code">2</span> που αντιπροσωπεύουν το πλήθος των στοιχείων κάθε υπολίστας. Με βάση αυτό τον αριθμό θα γίνει η ταξινόμηση της λίστας <span class="courier-code">orders</span>. </p>
				<p>Έτσι, το πρόγραμμα θα εμφανίσει τις παραγγελίες σύμφωνα με το πλήθος προϊόντων που περιλαμβάνει η καθεμιά: </p>
				<p><span class="courier-code">[[&apos;Φίλτρα&apos;, &apos;Ποτήρια&apos;, &apos;Κουταλάκια&apos;, &apos;Αναδευτήρες&apos;], [&apos;Καφές&apos;, &apos;Ζάχαρη&apos;, &apos;</span><span class="courier-code">Γάλα&apos;], [&apos;Καφές&apos;, &apos;Καλαμάκια&apos;], [&apos;Καπάκια&apos;, &apos;Τσάι&apos;]]</span></p>
				<p class="no-indent">Οι λίστες των παραγγελιών 1 και 4 θα μπουν με αυτή τη σειρά, γιατί αυτή τη σειρά είχαν αρχικά, ενώ έχουν και το ίδιο κριτήριο (<span class="courier-code">len</span>=<span class="courier-code">2</span>).</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-7</b>: Δίνεται μια λίστα που περιέχει ένθετες λίστες. Να ταξινομήσετε το περιεχόμενό της, με βάση το άθροισμα των ένθετων λιστών.</p>
				</blockquote>
				<p class="no-indent">Για την ταξινόμηση θα χρησιμοποιηθεί η ενσωματωμένη συνάρτηση <span class="courier-code">sum</span> και θα δοθεί ως τιμή στο όρισμα <span class="courier-code">key</span>. Αυτό θα καθορίσει το κριτήριο ταξινόμησης κάθε στοιχείου της λίστας. Η συνάρτηση θα εφαρμοστεί σε κάθε στοιχείο της λίστας πριν ξεκινήσουν να γίνονται οι συγκρίσεις<sup class="superscript CharOverride-1"><span id="footnote-043-backlink"><a href="#footnote-043">51</a></span></sup> για την ταξινόμηση των στοιχείων. Η Λίστα Κώδικα 5-19 περιέχει τις απαραίτητες εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-19 | Ταξινόμηση λίστας με τη χρήση συνάρτησης <span class="courier-code">sum</span></figcaption><img src="media/ListaKodika-5-19_fmt.png" alt=""/></figure>
				<p class="no-indent">Το πρόγραμμα θα εμφανίσει τα στοιχεία της λίστας <span class="courier-code">b</span> ταξινομημένα σύμφωνα με το άθροισμα κάθε ένθετης υπολίστας: </p>
				<p><span class="courier-code">[[-5, -6], [-3, 2], [1, 3], [2, 3]]</span></p>
				<p class="no-indent">Η παράμετρος <span class="courier-code">key</span> δίνει τη δυνατότητα να τεθούν κριτήρια που μπορεί να ορίσει ο χρήστης, δημιουργώντας δικές του συναρτήσεις ταξινόμησης. Στο επόμενο παράδειγμα γίνεται χρήση συνάρτησης που δημιουργείται για τον ορισμό του κριτηρίου ταξινόμησης.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-8</b>: Οι τιμές και τα ονόματα κάποιων προϊόντων μιας εταιρείας δίνονται με τη μορφή λίστας. Να εμφανίσετε τα προϊόντα ταξινομημένα σύμφωνα με την τιμή πώλησης.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 5-20 περιλαμβάνει τον ορισμό μιας συνάρτησης (<span class="courier-code">prices</span>), που χρησιμοποιείται για την επιλογή του 2ου στοιχείου (στη θέση 1) κάθε υπολίστας, ως κριτηρίου για την ταξινόμησή τους. Η λειτουργία των συναρτήσεων περιγράφεται στο Κεφάλαιο 10.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-20 | Ταξινόμηση λίστας με τη χρήση συνάρτησης</figcaption><img src="media/ListaKodika-5-20_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
				<p><span class="courier-code">[[&apos;Προϊόν 2&apos;, 8], [&apos;Προϊόν 3&apos;, 5], [&apos;Προϊόν 1&apos;, 2]]</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-9</b>: Δίνεται μια λίστα από ένθετες λίστες που περιέχουν τα ονόματα φοιτητών και την αντίστοιχη βαθμολογία τους σε κάποιο μάθημα. Η μορφή κάθε υπολίστας είναι [<span class="courier-code">όνομα, βαθμός</span>]. Να εμφανίσετε τα ονόματα με βάση τη βαθμολογία τους, ξεκινώντας με αυτόν που έγραψε καλύτερα.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 5-21 περιέχει τις απαραίτητες εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-21 | Ταξινόμηση λίστας με τη χρήση συνάρτησης <span class="courier-code">lambda</span></figcaption><img src="media/ListaKodika-5-21_fmt.png" alt=""/></figure>
				<p class="no-indent">Το όρισμα που τέθηκε στην παράμετρο <span class="courier-code">key</span> είναι μια <i>ανώνυμη συνάρτηση</i> (<i>lambda</i>, περιγράφεται στο Κεφάλαιο 10) η οποία ορίζει ως κριτήριο ταξινόμησης το 2ο στοιχείο (θέση 1) κάθε υπολίστας. Το όρισμα <span class="courier-code">reverse=True</span> ορίζει ως φθίνουσα τη σειρά τοποθέτησης των στοιχείων.</p>
				<p>Μετά την εκτέλεση του προγράμματος θα εμφανιστούν τα παρακάτω αποτελέσματα: </p>
				<p><span class="courier-code">[[&apos;Λία&apos;, 9], [&apos;Πέτρος&apos;, 8], [&apos;Έφη&apos;, 7], [&apos;Σήφης&apos;, 6], [&apos;Σάββας&apos;, 4]]</span></p>
			</section>
		</section>
		<section role="section" id="ch7se11">
			<h1><span role="label">5.11</span> Η συνάρτηση <span class="courier-code">sorted</span></h1>
			<p class="no-indent">Στις περιπτώσεις όπου απαιτείται η ταξινόμηση μιας λίστας χωρίς να αλλάξει η ίδια η λίστα ή όταν ζητείται να γίνει ταξινόμηση μιας δομής άλλου τύπου (όπως π.χ. μιας πλειάδας), μπορεί να γίνει χρήση της συνάρτησης <span class="courier-code">sorted</span>. Η <span class="courier-code">sorted</span> δέχεται τις ίδιες παραμέτρους που έχει η μέθοδος <span class="courier-code">sort</span>, μαζί με ένα επαναληπτικό αντικείμενο (όπως λίστα, πλειάδα, κείμενο κ.λπ.), και επιστρέφει μια ταξινομημένη λίστα.</p>
			<p>Ακολουθούν μερικά παραδείγματα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-10</b>: Δίνεται μια λίστα με τις πωλήσεις που σημείωσαν 5 πωλητές μιας εταιρείας και μια ακόμη λίστα με τα ονόματά τους. Να εμφανίσετε τα ονόματα των πωλητών σύμφωνα με τις πωλήσεις που έκαναν, ξεκινώντας από αυτόν με τις περισσότερες πωλήσεις.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-22 περιέχει τις εντολές για την επίλυση του προβλήματος.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-22 | H συνάρτηση <span class="courier-code">sorted</span> σε λιστες</figcaption><img src="media/ListaKodika-5-22_fmt.png" alt=""/></figure>
			<p class="no-indent">Τρέχοντας το πρόγραμμα, θα εμφανιστούν τα στοιχεία της λίστας <span class="courier-code">snames</span> ταξινομημένα σε φθίνουσα διάταξη, σύμφωνα με τα στοιχεία της λίστας <span class="courier-code">sales</span>:</p>
			<p><span class="courier-code">[&apos;Έφη&apos;, &apos;Εύα&apos;, &apos;Γιάννης&apos;, &apos;Άννα&apos;</span><span class="courier-code">, &apos;Γιώργος&apos;] </span></p>
			<p class="no-indent">Στη γραμμή 3 γίνεται μια σύνθεση λίστας που περιγράφεται στη συνέχεια. Η <span class="courier-code">sorted</span> θα λειτουργήσει στο αποτέλεσμα της συνάρτησης <span class="courier-code">zip</span>, η οποία δημιουργεί μια πλειάδα ζευγών τιμών (βλ. Κεφάλαιο 7) από τα αντίστοιχα στοιχεία των <span class="courier-code">sales</span> και <span class="courier-code">names</span>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-11</b>: Δίνεται μια λίστα με αριθμούς. Να εμφανίσετε μήνυμα αν η λίστα είναι ταξινομημένη ή όχι.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-23 περιέχει τις απαραίτητες εντολές.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-23 | Έλεγχος ταξινόμησης</figcaption><img src="media/ListaKodika-5-23_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα που θα εμφανίσει το πρόγραμμα θα είναι:</p>
			<p><span class="courier-code">Η λίστα δεν είναι ταξινομημένη</span></p>
		</section>
		<section role="section" id="ch7se12">
			<h1><span role="label">5.12</span> Συγκρίσεις, αναζήτηση &amp; εντοπισμός</h1>
			<section role="subsection" id="ch7se12ss1">
				<h1><span role="label">5.12.1</span> Κάνοντας συγκρίσεις</h1>
				<p class="no-indent">Δυο λίστες μπορούν να συγκριθούν μεταξύ τους με τη χρήση σχεσιακών τελεστών (&gt;, &lt; κ.λπ.). Η σύγκριση γίνεται στοιχείο προς στοιχείο. Τα στοιχεία προς σύγκριση θα πρέπει να είναι ίδιου τύπου, ενώ τα στοιχεία κάθε λίστας μπορεί να είναι διαφορετικού τύπου. Στην τεκμηρίωση<sup class="superscript CharOverride-1"><span id="footnote-042-backlink"><a href="#footnote-042">52</a></span></sup> της Python αναφέρει χαρακτηριστικά ότι αντικείμενα ακολουθίας μπορούν να συγκριθούν με άλλα αντικείμενα του ίδιου τύπου ακολουθίας. Αυτή η σύγκριση γίνεται με <i>λεξικογραφικό (lexicographical)</i> τρόπο. </p>
				<p class="no-indent">Έστω για παράδειγμα οι παρακάτω λίστες:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,3,&apos;a&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=[0,3,&apos;b&apos;]</span></p>
				<p class="no-indent">Μόλις γίνει σύγκριση μεταξύ τους: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;b</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">επιστρέφουν την τιμή <span class="courier-code">True</span> γιατί ισχύει <span class="courier-code">1&gt;0</span>, οπότε ο έλεγχος σταματά εκεί. Αν όμως είναι: </p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[0,3,&apos;a&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=[0,3,&apos;b&apos;]</span></p>
				<p class="no-indent">τότε η σύγκρισή τους:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;b</span></p>
				<p><span class="courier-code">False</span></p>
				<p class="no-indent">επιστρέφει <span class="courier-code">False</span> γιατί τα δυο πρώτα στοιχεία είναι ίδια μεταξύ τους, ενώ στο τρίτο ισχύει ‘<span class="courier-code">a</span>’<span class="courier-code">&lt;</span>’<span class="courier-code">b</span>’. Προσοχή όμως πρέπει να δοθεί στην περίπτωση όπου χρειάζεται να γίνει έλεγχος δυο στοιχείων και αυτά έχουν διαφορετικό τύπο. Το επόμενο παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,2]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=[0,&apos;c&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;b</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">τρέχει χωρίς πρόβλημα, γιατί ισχύει <span class="courier-code">1&gt;0</span> και η διαδικασία ελέγχου σταματά εκεί. Στην παρακάτω όμως περίπτωση θα εμφανιστεί σφάλμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,2]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=[1,&apos;c&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a&gt;b</span></p>
				<p><span class="courier-code">TypeError: &apos;&gt;&apos; not supported between instances of &apos;int&apos; and &apos;str&apos;</span></p>
				<p class="no-indent">γιατί ο έλεγχος θα περάσει το 1ο στοιχείο (αφού τα πρώτα στοιχεία είναι ίδια) και θα φτάσει στο 2ο. Εκεί η σύγκριση θα αποτύχει, γιατί τα στοιχεία αυτά είναι διαφορετικού τύπου και δεν μπορεί να γίνει η σύγκριση <span class="courier-code">2&gt;&apos;c&apos;</span>.</p>
			</section>
			<section role="subsection" id="ch7se12ss2">
				<h1><span role="label">5.12.2</span> Ο τελεστής <span class="courier-code">in</span></h1>
				<p class="no-indent">Για τον έλεγχο ύπαρξης μιας τιμής μέσα σε μια λίστα, η Python διαθέτει τον τελεστή <span class="courier-code">in</span>. Έτσι, ο έλεγχος για το αν το στοιχείο <span class="courier-code">k</span> υπάρχει μέσα σε μια λίστα <span class="courier-code">a</span> γίνεται εύκολα με την εντολή: </p>
				<p><span class="courier-code">&gt;&gt;&gt; k in a</span></p>
				<p class="no-indent">Δίνονται μερικά παραδείγματα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; k=5</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[3,5,7]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; k in a</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">Το <span class="courier-code">k</span> (που είναι <span class="courier-code">5</span>) είναι μέλος της λίστας <span class="courier-code">a</span>, οπότε η τιμή που επιστρέφει ο τελεστής <span class="courier-code">in</span> είναι <span class="courier-code">True</span>, ενώ στην επόμενη περίπτωση: </p>
				<p><span class="courier-code">&gt;&gt;&gt; 1 in a</span></p>
				<p><span class="courier-code">False</span></p>
				<p class="no-indent">επιστρέφει το αποτέλεσμα <span class="courier-code">False</span> αφού το <span class="courier-code">1</span> δεν βρέθηκε μέσα στο <span class="courier-code">a</span>.</p>
				<p>Η χρήση της <span class="courier-code">in</span> μέσα σε άλλες εντολές ελέγχου, όπως η <span class="courier-code">if</span>, είναι επίσης απλή και φαίνεται στο επόμενο παράδειγμα.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-12</b>: Να γράψετε πρόγραμμα που θα διαβάζει ένα γράμμα και θα εμφανίζει αν είναι φωνήεν ή σύμφωνο.</p>
				</blockquote>
				<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 5-24.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-24 | Χρήση της <span class="courier-code">in</span></figcaption><img src="media/ListaKodika-5-24_fmt.png" alt=""/></figure>
				<p class="no-indent">Με την <span class="courier-code">in</span> μπορεί επίσης να γίνει έλεγχος αν δεν υπάρχει μια τιμή σε μια λίστα, με τη χρήση του τελεστή <span class="courier-code">not</span>, ο οποίος μπαίνει μπροστά από το <span class="courier-code">in</span>. </p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-13</b>: Να γράψετε πρόγραμμα που θα διαβάζει έναν κωδικό και θα εμφανίζει μήνυμα αν επιτρέπεται η πρόσβαση ή όχι.</p>
				</blockquote>
				<p class="no-indent">Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 5-25.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-25 | Χρήση του <span class="courier-code">not</span> <span class="courier-code">in</span></figcaption><img src="media/ListaKodika-5-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Το πρόγραμμα ζητάει έναν κωδικό. Ελέγχει αν είναι αποδεκτός ή όχι και εμφανίζει κατάλληλο μήνυμα. Ακολουθεί μια δοκιμαστική εκτέλεσή του: </p>
				<p><span class="courier-code">Δώσε το συνθηματικό: </span><span class="courier-code"><b>password</b></span></p>
				<p><span class="courier-code">Λάθος</span><span class="courier-code">...Ξαναδοκίμασε</span></p>
				<p><span class="courier-code">Δώσε το συνθηματικό:</span><span class="courier-code"><b>123</b></span></p>
				<p><span class="courier-code">Μπορείς να προχωρήσεις</span></p>
				<p><span class="courier-code">Καλώς όρισες</span></p>
				<p class="no-indent">Ο τελεστής <span class="courier-code">in</span> δεν περιορίζει τη χρήση του μόνο σε λίστες. Με τον ίδιο τρόπο μπορεί να χρησιμοποιηθεί και με άλλες δομές, όπως η συμβολοσειρά ή η πλειάδα. Κάθε περίπτωση περιγράφεται στα αντίστοιχα κεφάλαια.</p>
			</section>
			<section role="subsection" id="ch7se12ss3">
				<h1><span role="label">5.12.3</span> Καταμέτρηση τιμών με την <span class="courier-code">count</span></h1>
				<p class="no-indent">Εκτός από τον τελεστή <span class="courier-code">in</span>, για τον εντοπισμό μιας τιμής μέσα σε μια λίστα, χρησιμοποιείται και η μέθοδος <span class="courier-code">count</span>. Επιστρέφει όμως έναν αριθμό που δηλώνει πόσες φορές υπάρχει αυτή η τιμή μέσα στη λίστα. Αν η <span class="courier-code">count</span> επιστρέψει <span class="courier-code">0</span>, αυτό σημαίνει, προφανώς, ότι η τιμή δεν υπάρχει. Η γενική μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">μεταβλητή=λίστα.count(αντικείμενο)</span></p>
				<p class="no-indent">Με την εκτέλεση της μεθόδου, η <span class="courier-code">μεταβλητή</span> θα αποκτήσει την τιμή που επιστρέφει η <span class="courier-code">count</span>, δηλαδή πόσες φορές εμφανίζεται το <span class="courier-code">αντικείμενο</span> μέσα στη <span class="courier-code">λίστα</span>. </p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-14</b>: Δίνεται λίστα με τους βαθμούς των γραπτών των φοιτητών σε ένα μάθημα. Να γράψετε πρόγραμμα που θα εμφανίζει πόσα γραπτά μηδενίστηκαν.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί το πρόγραμμα στη Λίστα Κώδικα 5-26.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-26 | Χρήση της <span class="courier-code">count</span> – έλεγχος μηδενικών γραπτών</figcaption><img src="media/ListaKodika-5-26_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
				<p><span class="courier-code">Πλήθος βαθμών με τιμή μηδέν: 2</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-15</b>: Για τους βαθμούς του Παραδείγματος 5-14 να γράψετε πρόγραμμα που θα εμφανίζει αν υπήρχαν βαθμοί άριστα.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-27 | Χρήση της <span class="courier-code">count</span> – έλεγχος άριστων γραπτών</figcaption><img src="media/ListaKodika-5-27_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
				<p><span class="courier-code">Υπήρχαν 2 βαθμοί με 10</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-16</b>: Για τη λίστα βαθμών του Παραδείγματος 5-14, να εμφανίσετε τη συχνότητα εμφάνισης κάθε βαθμού.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί το πρόγραμμα στη Λίστα Κώδικα 5-28.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-28 | Χρήση της <span class="courier-code">count</span> – συχνότητα βαθμών</figcaption><img src="media/ListaKodika-5-28_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
				<p><span class="courier-code">Πλήθος βαθμών με 0 : 2</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 1 : 0</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 2 : 0</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 3 : 1</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 4 : 1</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 5 : 0</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 6 : 1</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 7 : 1</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 8 : 0</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 9 : 1</span></p>
				<p><span class="courier-code">Πλήθος βαθμών με 10 : 2</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-17</b>: Να γράψετε πρόγραμμα που θα διαβάζει μια φράση και έναν χαρακτήρα. Το πρόγραμμα θα εμφανίζει πόσες φορές εμφανίζεται αυτός ο χαρακτήρας μέσα στη φράση.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-29 | Χρήση της <span class="courier-code">count</span> – καταμέτρηση χαρακτήρων</figcaption><img src="media/ListaKodika-5-29_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
				<p><span class="courier-code">Δώσε μια φράση:</span><span class="courier-code"><b>Hello World</b></span></p>
				<p><span class="courier-code">Δώσε έναν χαρακτήρα:</span><span class="courier-code"><b>l</b></span></p>
				<p><span class="courier-code">Ο χαρακτήρας </span><span class="courier-code">l εμφανίζεται 3 φορές</span></p>
				<p class="no-indent">Η <span class="courier-code">print</span> στη γραμμή 5 χρησιμοποιεί <i>μορφοποιημένο κείμενο (formatted string)</i> το οποίο περιγράφεται στο Κεφάλαιο 6.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-18</b>: Δίνεται λίστα με τους κωδικούς των τμημάτων όπου εργάζονται οι υπάλληλοι μιας επιχείρησης. Ζητείται να βρεθεί πόσοι είναι οι υπάλληλοι από κάθε τμήμα.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί το πρόγραμμα στη Λίστα Κώδικα 5-30.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-30 | Χρήση της <span class="courier-code">count</span> με <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-5-30_fmt.png" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">set(codes)</span> δημιουργεί ένα σύνολο μοναδικών στοιχείων (βλ. Κεφάλαιο 8). Θα εμφανιστούν στην οθόνη: </p>
				<p><span class="courier-code">Τμήμα: Γ Άτομα: 3</span></p>
				<p><span class="courier-code">Τμήμα: Β Άτομα: 5</span></p>
				<p><span class="courier-code">Τμήμα: Α Άτομα: 2</span></p>
			</section>
			<section role="subsection" id="ch7se12ss4">
				<h1><span role="label">5.12.4</span> Εντοπισμός στοιχείου με την <span class="courier-code">index</span></h1>
				<p class="no-indent">Πολύ συχνά, εκτός από τον εντοπισμό ενός στοιχείου σε μια λίστα, είναι απαραίτητο να βρεθεί και η θέση του μέσα σ’ αυτήν. Αυτό γίνεται με τη μέθοδο <span class="courier-code">index</span>. Η μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">μεταβλητή=λίστα.index(αντικείμενο, αρχή, τέλος)</span></p>
				<p class="no-indent">Η <span class="courier-code">index</span> δέχεται ως ορίσματα ένα αντικείμενο, την τιμή του οποίου θα αναζητήσει μέσα στη <span class="courier-code">λίστα</span> και τους αριθμούς <span class="courier-code">αρχή</span> και <span class="courier-code">τέλος</span> που ορίζουν την περιοχή ή το τμήμα της λίστας στο οποίο θα γίνει αναζήτηση. Η μεταβλητή που υπάρχει στην εντολή εκχώρησης θα λάβει ως τιμή το αποτέλεσμα της μεθόδου <span class="courier-code">index</span>, δηλαδή τη θέση του αντικειμένου μέσα στη λίστα. </p>
				<p>Ιδιαίτερη προσοχή χρειάζεται όταν μπορεί το αντικείμενο του οποίου αναζητείται η θέση να μην υπάρχει μέσα στη λίστα. Σε αυτή την περίπτωση η <span class="courier-code">index</span> επιστρέφει σφάλμα. Όταν το αντικείμενο αναζήτησης υπάρχει περισσότερες από μια φορές, η <span class="courier-code">index</span> θα επιστρέψει τη θέση του πρώτου στοιχείου που θα βρεθεί από την αρχή της λίστας και η αναζήτηση θα σταματήσει εκεί. Είναι άγνωστο επομένως αν υπάρχει περισσότερες φορές. Γι’ αυτό όμως υπάρχει η μέθοδος <span class="courier-code">count</span>. </p>
				<p>Η <span class="courier-code">index</span> περιλαμβάνει δυο ακόμη ορίσματα, τα οποία είναι όμως προαιρετικά και καθορίζουν ένα τμήμα της λίστας (και όχι ολόκληρη τη λίστα) όπου θα αναζητηθεί μια τιμή. Το όρισμα <span class="courier-code">αρχή</span> καθορίζει το σημείο έναρξης, ενώ το όρισμα <span class="courier-code">τέλος</span> το σημείο τερματισμού της αναζήτησης.</p>
				<p>Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 5-31.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-31 | Χρήση της <span class="courier-code">index</span></figcaption><img src="media/ListaKodika-5-31_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 2 γίνεται αναζήτηση και εντοπισμός της τιμής <span class="courier-code">7</span>. Το αποτέλεσμα της μεθόδου δηλώνει ότι η τιμή <span class="courier-code">7</span> βρίσκεται στη θέση 3. Το αποτέλεσμα της <span class="courier-code">index</span> στη γραμμή 4 μπορεί να εκχωρηθεί σε μεταβλητή (<span class="courier-code">pos</span>). Το μήνυμα σφάλματος στη γραμμή 10 εμφανίστηκε επειδή η τιμή αναζήτησης (<span class="courier-code">0</span>) στη γραμμή 9 δεν βρέθηκε στη λίστα.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-19</b>: Δίνεται η λίστα <span class="courier-code">num</span> που περιέχει αριθμούς. Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα δημιουργεί λίστα με τις θέσεις του στοιχείου μέσα στη λίστα.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 5-32 | Αναζήτηση σε λίστα</figcaption><img src="media/ListaKodika-5-32_fmt.png" alt=""/></figure>
				<p class="no-indent">Η Λίστα Κώδικα 5-32 περιέχει μια επανάληψη <span class="courier-code">for</span> που σαρώνει τη λίστα για να εντοπίσει την τιμή αναζήτησης <span class="courier-code">key</span>. Η συνάρτηση <span class="courier-code">enumerate</span> παράγει έναν αύξοντα αριθμό (<span class="courier-code">i</span>) μαζί με κάθε στοιχείο (<span class="courier-code">item</span>) της λίστας. Αυτός ο αριθμός καταχωρείται στη νέα λίστα (<span class="courier-code">pos</span>) με τα αποτελέσματα του προγράμματος.</p>
				<p>Μετά την εκτέλεση του προγράμματος, θα εμφανιστεί στην οθόνη: </p>
				<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>4</b></span></p>
				<p><span class="courier-code">[7, 9]</span></p>
			</section>
		</section>
		<section role="section" id="ch7se13">
			<h1><span role="label">5.13</span> Ενσωματωμένες συναρτήσεις</h1>
			<p class="no-indent">Μια σειρά από έτοιμες συναρτήσεις στην Python δίνουν τη δυνατότητα να υπολογίζονται, εύκολα και γρήγορα, συχνά απαραίτητες λειτουργίες, όπως το άθροισμα και η εύρεση του μεγαλύτερου και του μικρότερου στοιχείου. Αυτές οι συναρτήσεις δέχονται ένα επαναληπτικό αντικείμενο (λίστα, συμβολοσειρά, πλειάδα, σύνολο) και επιστρέφουν μια τιμή. Στη συνέχεια αυτής της ενότητας περιγράφεται η λειτουργία τέτοιων συναρτήσεων και πώς αυτές χρησιμοποιούνται με λίστες.</p>
			<section role="subsection" id="ch7se13ss1">
				<h1><span role="label">5.13.1</span> Μέγεθος λίστας</h1>
				<p class="no-indent">Ένα αντικείμενο τύπου λίστας στην Python δεν ενσωματώνει κάποια μέθοδο για τον υπολογισμό του μεγέθους του. Αυτή την πληροφορία μπορεί όμως να τη δώσει η συνάρτηση <span class="courier-code">len</span>. Η <span class="courier-code">len</span> δέχεται ένα αντικείμενο και επιστρέφει το μέγεθός του, ή το πλήθος των στοιχείων που αυτό περιέχει. Οι παρακάτω γραμμές κώδικα περιέχουν μερικά παραδείγματα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=[[1,2,3],[4,5,6]]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; len(a)</span></p>
				<p><span class="courier-code">3</span></p>
				<p class="no-indent">Το πλήθος των στοιχείων της λίστας <span class="courier-code">a</span> είναι <span class="courier-code">3</span>: </p>
				<p><span class="courier-code">&gt;&gt;&gt; len(b)</span></p>
				<p><span class="courier-code">2</span></p>
				<p class="no-indent">Η λίστα <span class="courier-code">b</span> περιέχει 2 στοιχεία, τα οποία είναι ένθετες λίστες. Αυτό το νούμερο, φυσικά, δεν περιλαμβάνει το περιεχόμενο των δυο αυτών εσωτερικών λιστών. Για να γίνει κάτι τέτοιο, θα πρέπει να προσδιοριστεί ακριβώς με κάποια δεικτοδότηση, όπως:</p>
				<p><span class="courier-code">&gt;&gt;&gt; len(b[0])</span></p>
				<p><span class="courier-code">3</span></p>
			</section>
			<section role="subsection" id="ch7se13ss2">
				<h1><span role="label">5.13.2</span> Εύρεση αθροίσματος</h1>
				<p class="no-indent">Μια από τις πιο συχνές λειτουργίες σε μια λίστα είναι ο υπολογισμός του αθροίσματος των στοιχείων της. Αυτό, σε μια άλλη γλώσσα προγραμματισμού όπως η C, θα απαιτούσε τη σάρωση όλων των στοιχείων και τη χρήση μιας μεταβλητής αθροιστή, που θα αποθήκευε τις διαδοχικές αθροίσεις όπως η Λίστα Κώδικα 5-33.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-33 | Άθροισμα λίστας</figcaption><img src="media/ListaKodika-5-33_fmt.png" alt=""/></figure>
				<p class="no-indent">Σε κάθε επανάληψη η βοηθητική μεταβλητή <span class="courier-code">item</span> παίρνει μια μια τις τιμές από τη λίστα <span class="courier-code">k</span> και τις προσθέτει στη μεταβλητή <span class="courier-code">s</span>, που λειτουργεί ως αθροιστής. Στο τέλος το πρόγραμμα θα τυπώσει το αποτέλεσμα:</p>
				<p><span class="courier-code">Το άθροισμα είναι: 5050</span></p>
				<p class="no-indent">Ευτυχώς, η Python έχει έτοιμες συναρτήσεις, όπως η συνάρτηση <span class="courier-code">sum</span>, που μπορεί να χρησιμοποιηθούν σε επαναληπτικές δομές όπως η λίστα. Η <span class="courier-code">sum</span> υπολογίζει το άθροισμα των στοιχείων που βρίσκονται μέσα σε επαναληπτικά αντικείμενα (σύνολα, πλειάδες, λίστες κ.λπ.). Η χρήση της φαίνεται στα παρακάτω παραδείγματα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,2,3,4]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; sum(a)</span></p>
				<p><span class="courier-code">10</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s=sum(a)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; mean=s/len(a)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; mean</span></p>
				<p><span class="courier-code">2.5</span></p>
			</section>
			<section role="subsection" id="ch7se13ss3">
				<h1><span role="label">5.13.3</span> Εύρεση μέγιστου &amp; ελάχιστου</h1>
				<p class="no-indent">Μια από τις ενσωματωμένες στην Python συναρτήσεις που χρησιμοποιούνται πιο συχνά, σχεδόν σε κάθε πρόγραμμα που πρέπει να διαχειριστεί αριθμητικά δεδομένα τα οποία βρίσκονται σε επαναληπτικά αντικείμενα, είναι η <span class="courier-code">max</span> ή/και η <span class="courier-code">min</span>. Οι <span class="courier-code">max</span> και <span class="courier-code">min</span> είναι συναρτήσεις που υπολογίζουν το μέγιστο και το ελάχιστο αντίστοιχα. Αυτές οι λειτουργίες μπορεί να έχουν διαφορετική μορφή, ανάλογα με τα ορίσματα-παραμέτρους που δέχονται οι συναρτήσεις κάθε φορά.</p>
				<section role="subsubsection" id="ch7se13ss3sss1">
					<h1>5.13.3.1 Υπολογισμός μέγιστου/ελάχιστου στοιχείου</h1>
					<p class="no-indent">Η πρώτη λειτουργία αφορά τον υπολογισμό του μέγιστου (ή ελάχιστου, η διαδικασία είναι η ίδια και δεν θα αναφέρεται ξεχωριστά) στοιχείου μιας δοσμένης λίστας. Τέτοιοι υπολογισμοί μπορούν να γίνουν με χρήση μιας δομής <span class="courier-code">for</span>, μιας λογικής συνθήκης <span class="courier-code">if</span> και μιας βοηθητικής μεταβλητής, όπως στη Λίστα Κώδικα 5-34.</p>
					
					<figure class="lista-kodika">
						<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-34 | Εύρεση μέγιστου/ελάχιστου</figcaption><img src="media/ListaKodika-5-34_fmt.png" alt=""/></figure>
					<p class="no-indent">Μετά την εκτέλεση του προγράμματος θα εμφανιστούν στην οθόνη το μεγαλύτερο και το μικρότερο στοιχείο της λίστας:</p>
					<p><span class="courier-code">Ο μέγιστος είναι: 22</span></p>
					<p><span class="courier-code">Ο ελάχιστος είναι: 2</span></p>
					<p class="no-indent">Όπως και σε άλλες περιπτώσεις, έτσι και για τον υπολογισμό του μεγαλύτερου και του μικρότερου στοιχείου, μιας λίστας τιμών, η Python διαθέτει έτοιμο κώδικα, με τη μορφή των συναρτήσεων <span class="courier-code">min</span> και <span class="courier-code">max</span>. Η γενική μορφή τους είναι:</p>
					<p><span class="courier-code">μεταβλητή=max(</span><span class="courier-code">λίστα)</span></p>
					<p><span class="courier-code">μεταβλητή=min(λίστα)</span></p>
					<p class="no-indent">Όπως φαίνεται και από τη γενική μορφή τους, οι συναρτήσεις αυτές δέχονται ένα επαναληπτικό αντικείμενο (που μπορεί να μην είναι μόνο λίστα), εντοπίζουν ποιο είναι το μεγαλύτερο ή το μικρότερο στοιχείο και το αποδίδουν σε μια μεταβλητή. Η αναζήτηση για το μεγαλύτερο (ή το μικρότερο, στην περίπτωση του <span class="courier-code">min</span>) γίνεται όπως γίνεται και η σύγκριση μεταξύ δυο λιστών, σύμφωνα δηλαδή με τη λεξικογραφική σειρά τους. Έτσι, αν τα στοιχεία είναι αριθμοί, η σύγκριση μεταξύ τους και ο υπολογισμός του μεγαλύτερου γίνεται με βάση την τιμή τους. Αν όμως τα στοιχεία της λίστας είναι κείμενο, τότε συγκρίνεται κάθε στοιχείο σύμφωνα με τον κωδικό Unicode που αυτό έχει (ισχύει πάντα ότι ‘<span class="courier-code">α</span>’<span class="courier-code">&lt;</span>’<span class="courier-code">β</span>’). Ένας λόγος που μπορεί να οδηγήσει στην αποτυχία εκτέλεσης της <span class="courier-code">max</span>, ή της <span class="courier-code">min</span>, είναι όταν χρησιμοποιηθεί σε λίστες που περιέχουν ανόμοια στοιχεία, δηλαδή κείμενο μαζί με αριθμούς, γιατί η σύγκρισή τους γίνεται με διαφορετικό τρόπο. Η σύγκριση ανάμεσα σε αντικείμενα διαφορετικού τύπου, όπως ανάμεσα σε αριθμούς ή συμβολοσειρές, θα προκαλέσει την εμφάνιση σφάλματος και τη διακοπή εκτέλεσης του προγράμματος. Ακολουθούν μερικά παραδείγματα:</p>
					<p><span class="courier-code">&gt;&gt;&gt; a=[1,6,2]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; max(a)</span></p>
					<p><span class="courier-code">6</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; a=[3.14,3,3.1415]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; max(a)</span></p>
					<p><span class="courier-code">3.1415</span></p>
					<p class="no-indent">Η <span class="courier-code">max</span> εντόπισε το μεγαλύτερο στοιχείο της λίστας <span class="courier-code">a</span> και στις δυο περιπτώσεις. Η δεύτερη μορφή της λίστας <span class="courier-code">a</span> περιέχει αριθμούς διαφορετικού τύπου, ωστόσο αυτό δεν αποτελεί πρόβλημα, η <span class="courier-code">max</span> θα δουλέψει κανονικά. Η επόμενη εντολή όμως θα έχει πρόβλημα:</p>
					<p><span class="courier-code">&gt;&gt;&gt; b=[1,&apos;1&apos;]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; max(b)</span></p>
					<p><span class="courier-code">TypeError: &apos;&gt;&apos; not supported between instances of &apos;str&apos; and &apos;int&apos;</span></p>
					<p class="no-indent">γιατί επιχειρείται σύγκριση ανάμεσα σε αντικείμενα διαφορετικού τύπου (αριθμού και συμβολοσειράς). Το ίδιο ισχύει και στην παρακάτω περίπτωση εμφωλευμένων δομών:</p>
					<p><span class="courier-code">&gt;&gt;&gt; c=[1,3,[1,4]]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; max(c)</span></p>
					<p><span class="courier-code">TypeError: &apos;&gt;&apos; not supported between instances of &apos;list&apos; and &apos;int&apos;</span></p>
					<p class="no-indent">Συγκρίσεις ανάμεσα σε συμβολοσειρές γίνονται κανονικά, με βάση τη χαρακτήρα προς χαρακτήρα σύγκρισή τους:</p>
					<p><span class="courier-code">&gt;&gt;&gt; d=[&apos;Python&apos;,&apos;py&apos;]</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; max(d)</span></p>
					<p><span class="courier-code">&apos;py&apos;</span></p>
					<p class="no-indent">Το τελευταίο αποτέλεσμα οφείλεται στη σύγκριση των χαρακτήρων ‘<span class="courier-code">P</span>’ και ‘<span class="courier-code">p</span>’, γιατί ισχύει:</p>
					<p><span class="courier-code">&gt;&gt;&gt; ord(&apos;P&apos;)</span></p>
					<p><span class="courier-code">80</span></p>
					<p><span class="courier-code">και</span></p>
					<p><span class="courier-code">&gt;&gt;&gt; ord(&apos;p&apos;)</span></p>
					<p><span class="courier-code">112</span></p>
					<p class="no-indent">όπου η συνάρτηση <span class="courier-code">ord</span> επιστρέφει τον κωδικό Unicode κάθε χαρακτήρα (περισσότερα στοιχεία για τις συμβολοσειρές δίνονται στο Κεφάλαιο 6).</p>
					<blockquote>
						<p class="blockquote-no-indent"><b>Παράδειγμα 5-20</b>: Δίνεται λίστα με αριθμούς. Να εμφανίσετε τον δεύτερο μεγαλύτερο από αυτούς τους αριθμούς.</p>
					</blockquote>
					<p class="no-indent">Ακολουθεί το αντίστοιχο πρόγραμμα στη Λίστα Κώδικα 5-35.</p>
					
					<figure class="lista-kodika">
						<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-35 | Εύρεση 2ου μεγαλύτερου στοιχείου</figcaption><img src="media/ListaKodika-5-35_fmt.png" alt=""/></figure>
					<p class="no-indent">Το πρόγραμμα εντοπίζει το μεγαλύτερο στοιχείο και τη θέση του (γραμμή 2) και το ανταλλάσσει με το πρώτο στοιχείο της λίστας (γραμμή 3). Η εύρεση του 2ου μεγαλύτερου γίνεται ψάχνοντας για το μεγαλύτερο μετά την 1η θέση (όπου βρίσκεται το μεγαλύτερο). Αυτό γίνεται με δεύτερη χρήση της συνάρτησης <span class="courier-code">max</span>, στη γραμμή 4.</p>
					<p>Η εκτέλεση του προγράμματος θα εμφανίσει: </p>
					<p><span class="courier-code">Μεγαλύτερος είναι ο 8</span></p>
					<p><span class="courier-code">και 2ος μεγαλύτερος ο 7</span></p>
					<blockquote>
						<p class="blockquote-no-indent"><b>Παράδειγμα 5-21</b>: Δίνεται λίστα με αριθμούς. Να εμφανίσετε αν όλα τα στοιχεία της λίστας είναι ίδια ή διαφορετικά μεταξύ τους.</p>
					</blockquote>
					<p class="no-indent">Η απάντηση δίνεται στο πρόγραμμα της Λίστας Κώδικα 5-36, όπου δοκιμάζονται δυο διαφορετικές περιπτώσεις στοιχείων.</p>
					
					<figure class="lista-kodika">
						<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-36 | Χρήση συναρτήσεων <span class="courier-code">min/max</span></figcaption><img src="media/ListaKodika-5-36_fmt.png" alt=""/></figure>
					<p class="no-indent">Το αποτέλεσμα υπολογίζεται στη γραμμή 3 και 6. Ο έλεγχος: </p>
					<p><span class="courier-code">max(a)==min(a)</span></p>
					<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">True</span> αν το μεγαλύτερο και το μικρότερο στοιχείο είναι τα ίδια, οπότε όλα τα στοιχεία είναι ίδια. Αν το αποτέλεσμα είναι <span class="courier-code">False</span>, τότε υπάρχει έστω και ένα στοιχείο διαφορετικό μέσα στη λίστα. Αυτό το αποτέλεσμα (<span class="courier-code">True</span> ή <span class="courier-code">False</span>) δίνεται ως δείκτης στη λίστα <span class="courier-code">ap</span>, με τη λογική ότι η τιμή <span class="courier-code">True</span> μετατρέπεται αυτόματα σε <span class="courier-code">1</span>, ενώ η τιμή <span class="courier-code">False</span> μετατρέπεται σε <span class="courier-code">0</span>. Έτσι, θα επιστραφεί, στο μορφοποιημένο κείμενο της <span class="courier-code">print</span>, το 1ο ή το 2ο στοιχείο της λίστας <span class="courier-code">ap</span>.</p>
					<p>Μετά την εκτέλεση του προγράμματος θα εμφανιστούν στην οθόνη τα αποτελέσματα και για τις δυο λίστες:</p>
					<p><span class="courier-code">Τα στοιχεία είναι ίδια μεταξύ τους</span></p>
					<p><span class="courier-code">Τα στοιχεία είναι διαφορετικά μεταξύ τους</span></p>
				</section>
				<section role="subsubsection" id="ch7se13ss3sss2">
					<h1>5.13.3.2 Υπολογισμός μέγιστου/ελάχιστου στοιχείου βάσει κριτηρίων</h1>
					<p class="no-indent">Οι συναρτήσεις <span class="courier-code">max</span> και <span class="courier-code">min</span> διαθέτουν ακόμα έναν μηχανισμό για την εύρεση του μεγαλύτερου και του μικρότερου στοιχείου μιας λίστας, με βάση όμως όχι την τιμή των στοιχείων της λίστας, αλλά την τιμή μιας συνάρτησης που θα ενεργήσει πάνω στα στοιχεία. Η λογική που ακολουθείται είναι παρόμοια με αυτή που χρησιμοποιείται και σε άλλες συναρτήσεις, όπως η <span class="courier-code">sorted</span>. Στο Παράδειγμα 5-22 περιγράφεται αυτή η λειτουργία. </p>
					<blockquote>
						<p class="blockquote-no-indent"><b>Παράδειγμα 5-22</b>: Δίνεται λίστα με αριθμούς. Να εμφανίσετε τον μεγαλύτερο και τον μικρότερο κατά απόλυτη τιμή αριθμό.</p>
					</blockquote>
					<p class="no-indent">Η απάντηση φαίνεται στο πρόγραμμα της Λίστας Κώδικα 5-37.</p>
					
					<figure class="lista-kodika">
						<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-37 | Χρήση του ορίσματος <span class="courier-code">key</span></figcaption><img src="media/ListaKodika-5-37_fmt.png" alt=""/></figure>
					<p class="no-indent">Το αποτέλεσμα υπολογίζεται ξανά μέσα στην <span class="courier-code">print</span>, στη γραμμή 2 και 3 από τις συναρτήσεις:</p>
					<p><span class="courier-code">max(a,key=abs)</span></p>
					<p class="no-indent">και:</p>
					<p><span class="courier-code">min(a,key=abs)</span></p>
					<p class="no-indent">Η <span class="courier-code">max</span> και η <span class="courier-code">min</span> δέχονται στο όρισμα <span class="courier-code">key</span> την ενσωματωμένη συνάρτηση <span class="courier-code">abs</span>, η οποία εφαρμόζεται σε κάθε στοιχείο της λίστας <span class="courier-code">a</span>. Κάθε στοιχείο πλέον συγκρίνεται όχι με την πραγματική τιμή του, αλλά με βάση την απόλυτη τιμή του. Το αποτέλεσμα που επιστρέφεται είναι οι αριθμοί <span class="courier-code">-8</span> (για το <span class="courier-code">max</span>) και <span class="courier-code">1</span> (για το <span class="courier-code">min</span>). Στην παράμετρο <span class="courier-code">key</span> μπορεί να χρησιμοποιηθεί οποιαδήποτε συνάρτηση οριζόμενη από τον χρήστη, όπως επίσης και ανώνυμες συναρτήσεις, και όχι μόνο ενσωματωμένες, όπως η <span class="courier-code">abs</span>. Περισσότερα στοιχεία για τις συναρτήσεις δίνονται στο Κεφάλαιο 10.</p>
				</section>
			</section>
		</section>
		<section role="section" id="ch7se14">
			<h1><span role="label">5.14</span> Λογικές συναρτήσεις</h1>
			<section role="subsection" id="ch7se14ss1">
				<h1><span role="label">5.14.1</span> Η συνάρτηση <span class="courier-code">all</span></h1>
				<p class="no-indent">Με τη συνάρτηση <span class="courier-code">all</span> ελέγχεται αν όλα τα στοιχεία σε ένα επαναληπτικό αντικείμενο είναι μη μηδενικά, ή κενά, και επιστρέφεται <span class="courier-code">True</span>. Αν έστω και ένα στοιχείο είναι μηδέν, κενό ή <span class="courier-code">None</span>, επιστρέφεται <span class="courier-code">False</span>. Χρησιμοποιείται όταν πρέπει να ελεγχθούν όλα τα στοιχεία μιας λίστας και να διαπιστωθεί αν δεν υπάρχουν μηδενικά στοιχεία. Χωρίς την <span class="courier-code">all</span>, θα έπρεπε να γίνει σάρωση όλης της λίστας και, με τη χρήση <i>μετρητή</i><i> (counter)</i> ή <i>σημαίας (flag)</i><sup class="superscript CharOverride-1"><span id="footnote-041-backlink"><a href="#footnote-041">53</a></span></sup>, να ελεγχθεί η κατάσταση της λίστας.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-23</b>: Δίνεται μια λίστα με βαθμούς. Να ελέγξετε αν υπάρχουν βαθμοί με μηδέν.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 5-38 παρουσιάζει πώς θα λυνόταν το Παράδειγμα 5-23 χωρίς τη χρήση της συνάρτησης <span class="courier-code">all</span>. Παρόμοιος τρόπος επίλυσης χρησιμοποιείται σε γλώσσες όπως η C.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-38 | Αναζήτηση χαρακτηριστικών σε μια λίστα</figcaption><img src="media/ListaKodika-5-38_fmt.png" alt=""/></figure>
				<p class="no-indent">Για τους συγκεκριμένους βαθμούς της λίστας <span class="courier-code">grades</span> θα εμφανιστεί το μήνυμα:</p>
				<p><span class="courier-code">Υπήρχαν βαθμοί με μηδέν</span></p>
				<p class="no-indent">Το πρόγραμμα χρησιμοποιεί μια μεταβλητή <span class="courier-code">flag</span> που έχει την τιμή <span class="courier-code">True</span> αν δεν υπάρχει μηδενικός βαθμός, και <span class="courier-code">False</span> σε αντίθετη περίπτωση. Σαρώνεται η λίστα με τους βαθμούς και αναζητείται αν είναι μηδέν έστω και ένας βαθμός. Σε αυτή την περίπτωση η λογική μεταβλητή <span class="courier-code">flag</span> παίρνει την τιμή <span class="courier-code">False</span>, η σάρωση της λίστας σταματά και εμφανίζεται κατάλληλο μήνυμα.</p>
				<p>Τα πράγματα όμως απλοποιούνται κατά πολύ με τη χρήση της συνάρτησης <span class="courier-code">all</span>. Η Λίστα Κώδικα 5-39 δείχνει πώς γίνεται αυτό.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-39 | Χρήση της συνάρτησης <span class="courier-code">all</span></figcaption><img src="media/ListaKodika-5-39_fmt.png" alt=""/></figure>
				<p class="no-indent">Ενσωματώνοντας στην <span class="courier-code">if</span> τον έλεγχο που πραγματοποιεί η <span class="courier-code">all</span>, ο κώδικας γίνεται πιο απλός. Αν η <span class="courier-code">all</span> δεν βρει μηδενικά στοιχεία, τυπώνεται το 1ο μήνυμα, αλλιώς τυπώνεται το 2ο.</p>
			</section>
			<section role="subsection" id="ch7se14ss2">
				<h1><span role="label">5.14.2</span> Η συνάρτηση <span class="courier-code">any</span></h1>
				<p class="no-indent">Παρόμοια με τη συνάρτηση <span class="courier-code">all</span> είναι και η συνάρτηση <span class="courier-code">any</span>. Σε αυτή την περίπτωση αναζητείται αν υπάρχει τουλάχιστον μια μη μηδενική ή κενή τιμή μέσα σε επαναληπτικό αντικείμενο. Η λειτουργία φαίνεται στο Παράδειγμα 5-24.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 5-24</b>: Δίνεται μια λίστα με τα υπόλοιπα λογαριασμών των πελατών μιας εταιρείας. Να ελέγξετε αν υπάρχουν μη μηδενικά υπόλοιπα.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 5-40 ελέγχει, με τη βοήθεια της συνάρτησης <span class="courier-code">any</span>, την ύπαρξη μη μηδενικών αριθμών μέσα στη λίστα <span class="courier-code">accounts</span>. Αν βρεθεί έστω και μια τέτοια τιμή, ο έλεγχος επιστρέφει <span class="courier-code">True</span>. Διαφορετικά, επιστρέφει <span class="courier-code">False</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-40 | Χρήση της συνάρτησης <span class="courier-code">any</span></figcaption><img src="media/ListaKodika-5-40_fmt.png" alt=""/></figure>
				<p class="no-indent">Για τη συγκεκριμένη λίστα το πρόγραμμα θα εμφανίσει: </p>
				<p><span class="courier-code">Υπάρχουν μη μηδενικά υπόλοιπα</span></p>
			</section>
		</section>
		<section role="section" id="ch7se15">
			<h1><span role="label">5.15</span> Η λειτουργία unpacking</h1>
			<p class="no-indent">Ένα από τα πιο ενδιαφέροντα στοιχεία της Python είναι η ενσωματωμένη λειτουργία σύνθεσης και διαμοιρασμού αντικειμένων που διαθέτει. Το λεγόμενο <i>πακετάρισμα-ξεπακετάρισμα (packing-unpacking)</i> επιτρέπει τη δημιουργία ενός αντικειμένου από κάποια άλλα, και το ανάποδο. Έτσι, είναι δυνατόν να δημιουργηθεί ένα αντικείμενο από σειρά άλλων αντικειμένων (packing) και ένα αντικείμενο να δημιουργήσει ένα ή περισσότερα άλλα (και άλλου είδους) αντικείμενα. Οι λειτουργίες αυτές μειώνουν δραματικά τον αριθμό των γραμμών κώδικα που απαιτούνται για βασικές λειτουργίες δημιουργίας αντικειμένων και βελτιώνουν πολύ τον απαιτούμενο χρόνο ανάπτυξης ενός προγράμματος.</p>
			<p>Η λειτουργία packing χρησιμοποιείται στις πλειάδες, περιγράφεται στο Κεφάλαιο 7 και συνοψίζεται στην παρακάτω γραμμή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=1,2,3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">(1, 2, 3)</span></p>
			<p class="no-indent">όπου το αντικείμενο <span class="courier-code">a</span> είναι μια πλειάδα που δημιουργείται από τις τιμές των τριών αριθμών.</p>
			<p>Κάτι, περίπου, αντίστοιχο που μπορεί να γίνει σε μια λίστα είναι το επόμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y,z=&apos;Το π είναι:&apos;,3.14,&apos;...κ.λπ.&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[x,y,z]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">[&apos;Το π είναι:&apos;, 3.14, &apos;...κ.λπ.&apos;]</span></p>
			<p class="no-indent">Έτσι, η λίστα <span class="courier-code">a</span> συντίθεται από τρία άλλα αντικείμενα που τοποθετούνται όλα μαζί, και με τη σειρά που έχει οριστεί, σε άλλο κέλυφος-αντικείμενο. </p>
			<p>Το ξεπακετάρισμα είναι η διαδικασία όπου ένα αντικείμενο, π.χ. μια λίστα, διασπάται και μοιράζει το περιεχόμενό του σε σειρά από άλλα αντικείμενα. Δίνεται παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y,z=[1,2,3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y</span></p>
			<p><span class="courier-code">2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; z</span></p>
			<p><span class="courier-code">3</span></p>
			<p class="no-indent">Στην πρώτη γραμμή, κάθε στοιχείο της λίστας αποδίδεται σε καθεμιά από τις μεταβλητές <span class="courier-code">x</span>, <span class="courier-code">y</span> και <span class="courier-code">z</span>. Στο επόμενο παράδειγμα φαίνεται ότι τα στοιχεία της λίστας μπορεί να είναι οποιουδήποτε τύπου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b=[&apos;Μια λίστα είναι η:&apos;,[1,2,3]]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">&apos;Μια λίστα είναι η:&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[1, 2, 3]</span></p>
			<p class="no-indent">Για να πετύχει το ξεπακετάρισμα, θα πρέπει ο αριθμός των μεταβλητών που θα δεχθούν τιμές να είναι ακριβώς ο ίδιος με το πλήθος των στοιχείων (της λίστας) που θα μοιραστούν. Σε διαφορετική περίπτωση θα προκύψει σφάλμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y,z=[1,2]</span></p>
			<p><span class="courier-code">ValueError: not enough values to unpack (expected 3, got 2)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y=[1,2,3]</span></p>
			<p><span class="courier-code">ValueError: too many values to unpack (expected 2)</span></p>
			<p class="no-indent">Η λύση σε αυτό το πρόβλημα έρχεται με τη μορφή των <i>μεταβλητών με αστερίσκο (starred variables)</i>. Στο επόμενο παράδειγμα φαίνεται πώς λειτουργεί η διαδικασία unpacking από άγνωστο πλήθος στοιχείων:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y</span><span class="courier-code">,*z=[1,2,3,4,5,6]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y</span></p>
			<p><span class="courier-code">2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; z</span></p>
			<p><span class="courier-code">[3, 4, 5, 6]</span></p>
			<p class="no-indent">Πρώτα δίνεται μια τιμή στις δυο πρώτες μεταβλητές, ενώ η μεταβλητή με αστερίσκο παίρνει τις υπόλοιπες τιμές με τη μορφή λίστας.</p>
			<p>Παρακάτω καταχωρούνται η πρώτη και η τελευταία τιμή μιας λίστας σε δυο μεταβλητές (<span class="courier-code">x</span> και <span class="courier-code">z</span>), ενώ το υπόλοιπο κομμάτι της σε μια τρίτη μεταβλητή (<span class="courier-code">y</span>):</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,*y,z=[1,2,3,4,5,6]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y</span></p>
			<p><span class="courier-code">[2, 3, 4, 5]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; z</span></p>
			<p><span class="courier-code">6</span></p>
		</section>
		<section role="section" id="ch7se16">
			<h1><span role="label">5.16</span> Σύνθεση λίστας</h1>
			<p class="no-indent">Η δημιουργία νέας λίστας μπορεί να γίνει εύκολα, και σε μόλις μία γραμμή κώδικα, με τον μηχανισμό <i>σύνθεσης λίστας (list comprehension)</i>. Η σύνθεση αυτή γίνεται με τον ίδιο, περίπου, τρόπο και για άλλα επαναληπτικά αντικείμενα της Python και περιγράφεται στα Κεφάλαια 7, 8 και 9. Περιλαμβάνει μια ή περισσότερες εντολές <span class="courier-code">for</span> και, εάν είναι απαραίτητο, εντολές <span class="courier-code">if</span>, συνδυασμένα, όλα μαζί, στην ίδια γραμμή. Σκοπός αυτής της σύνθεσης είναι η δημιουργία μιας λίστας από άλλη ή, γενικότερα, από άλλη επαναληπτική δομή. </p>
			<p>Η γενική μορφή της σύνθεσης είναι:</p>
			<p><span class="courier-code">[έκφραση for μεταβλητή in ακολουθία]</span></p>
			<p class="no-indent">όπου <span class="courier-code">έκφραση</span> μπορεί να είναι μια οποιαδήποτε έγκυρη αριθμητική ή λογική έκφραση της Python.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-25</b>: Δίνεται μια λίστα με αριθμούς. Με βάση αυτή τη λίστα να δημιουργήσετε καινούργια που θα αποτελείται από τα τετράγωνα των αριθμών.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-41 περιέχει την εντολή σύνθεσης της νέας λίστας.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-41 | Σύνθεση λίστας</figcaption><img src="media/ListaKodika-5-41_fmt.png" alt=""/></figure>
			<p class="no-indent">Εκτελώντας το πρόγραμμα θα εμφανιστεί το περιεχόμενο της νέας λίστας:</p>
			<p><span class="courier-code">[144, 4, 9, 16, 25]</span></p>
			<p class="no-indent">Η σύνθεση πραγματοποιείται σε μια εντολή εκχώρησης. Αριστερά από το ‘<span class="courier-code">=</span>’ βρίσκεται η ονομασία της νέας λίστας και δεξιά μια έκφραση που περικλείεται σε αγκύλες ‘<span class="courier-code">[</span>‘ και ‘<span class="courier-code">]</span>’. Αν αντί για αγκύλες χρησιμοποιηθούν άγκιστρα, τότε, αντί για λίστα, δημιουργείται νέο σύνολο ή λεξικό. </p>
			<p>Η έκφραση περιλαμβάνει μια εντολή <span class="courier-code">for</span>, η οποία θα σαρώσει τη λίστα <span class="courier-code">a</span> και θα αποδώσει επαναληπτικά κάθε στοιχείο της στην προσωρινή<sup class="superscript CharOverride-1"><span id="footnote-040-backlink"><a href="#footnote-040">54</a></span></sup> μεταβλητή <span class="courier-code">x</span>. Η νέα λίστα <span class="courier-code">b</span> θα περιλαμβάνει όλα τα στοιχεία της <span class="courier-code">a</span> με εκθέτη το <span class="courier-code">2</span>. Η λογική που ακολουθείται σε αυτού του είδους τις εντολές είναι πολύ κοντά στον μαθηματικό ορισμό τέτοιων συνόλων στοιχείων, παρά στην παραδοσιακή χρήση μιας εντολής <span class="courier-code">for</span>. Για την προηγούμενη λίστα στοιχείων, θα μπορούσε στα μαθηματικά να δοθεί ο ορισμός:</p>
			<p class="no-indent"><i>b</i> <span class="math-font">=</span> <span class="math-font">{</span><i>x</i>2 <span class="math-font">:</span> <i>x</i> <span class="math-font">∈</span> <i>a</i><span class="math-font">}</span></p>
			<p class="no-indent">Ο αντίστοιχος κώδικας για τη δημιουργία της λίστας <span class="courier-code">b</span> χωρίς τη χρήση σύνθεσης φαίνεται στη Λίστα Κώδικα 5-42.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-42 | Δημιουργία λίστας χωρίς σύνθεση</figcaption><img src="media/ListaKodika-5-42_fmt.png" alt=""/></figure>
			<p class="no-indent">Φυσικά, εκτός από την πραγματοποίηση πράξεων, στην έκφραση μπορεί να ενσωματωθεί και οποιαδήποτε συνάρτηση. Η παρακάτω εντολή κάνει χρήση της ενσωματωμένης συνάρτησης <span class="courier-code">abs</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; [abs(num) for num in a]</span></p>
			<p><span class="courier-code">[12, 2, 3, 4, 5]</span></p>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">num</span> αποκτά τιμές από τη λίστα, υπολογίζεται η απόλυτη τιμή της και καταχωρείται στη νέα λίστα, η οποία εμφανίζεται στην κονσόλα.</p>
			<p>Η σύνθεση λίστας μπορεί να γίνει χρησιμοποιώντας και άλλου είδους αντικείμενα, όπως συμβολοσειρές. Δίνεται ένα παράδειγμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-43 | Σύνθεση λίστας από άλλα αντικείμενα</figcaption><img src="media/ListaKodika-5-43_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην περίπτωση αυτή, ένα σύνολο χαρακτήρων μετατρέπονται σε ακέραιους αριθμούς και καταχωρούνται σε μια λίστα. Η <span class="courier-code">for</span> αποδίδει στη μεταβλητή <span class="courier-code">char</span>, ένα ένα, τους χαρακτήρες της συμβολοσειράς <span class="courier-code">afm</span>. Η συνάρτηση <span class="courier-code">int</span> μετατρέπει κάθε χαρακτήρα σε ακέραιο και η σύνθεση τον καταχωρεί στη νέα λίστα. Το αποτέλεσμα είναι να εμφανιστεί στην οθόνη η λίστα <span class="courier-code">digits</span> που περιέχει όλα τα ψηφία του <span class="courier-code">afm</span>:</p>
			<p><span class="courier-code">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></p>
			<p class="no-indent">Η σύνθεση μιας λίστας μπορεί να γίνει χρησιμοποιώντας κάποια κριτήρια, ώστε να ελέγχεται κάθε φορά αν ένα στοιχείο θα πρέπει να τοποθετηθεί στη λίστα ή όχι. Αυτό περιλαμβάνει την προσθήκη δομών ελέγχου, όπως της εντολής <span class="courier-code">if</span>. Στην παρακάτω σύνθεση, αντιγράφονται από τη λίστα <span class="courier-code">a</span> μόνο οι θετικοί αριθμοί της στη λίστα <span class="courier-code">b</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[12,-2,3,4,-5]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b= [x for x in a if x&gt;0]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[12, 3, 4]</span></p>
			<p class="no-indent">Αντίστοιχα, μπορεί να προστεθεί και το τμήμα <span class="courier-code">else</span> μιας εντολής <span class="courier-code">if</span>. Στις παρακάτω εντολές, από τη λίστα <span class="courier-code">a</span>, υπολογίζονται οι αντίστροφοι αριθμοί και τοποθετούνται σε μια νέα λίστα <span class="courier-code">b</span>. Στην περίπτωση που κάποιος αριθμός είναι 0, δεν θα γίνει η πράξη, αλλά θα τοποθετείται το 0:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[-2,10,0,4,1,0]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=[1/x if x!=0 else 0 for x in a]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[-0.5, 0.1, 0, 0.25, 1.0, 0]</span></p>
			<p class="no-indent">Εδώ ο έλεγχος μπαίνει «μπροστά» στην έκφραση, αφού χρησιμοποιείται η εντολή <span class="courier-code">if</span> μιας γραμμής. </p>
			<p>Οι έλεγχοι μπορεί να είναι πολλαπλοί και να συνδυάζουν πολλές περιπτώσεις. Στις παρακάτω γραμμές, δίνεται λίστα με αριθμούς, οι οποίοι καταχωρούνται σε μια νέα λίστα μόνο αν είναι ακέραιοι και άρτιοι. Αυτή η διπλή συνθήκη θα δοθεί με δυο διαδοχικές εντολές <span class="courier-code">if</span>. Μόνο τα στοιχεία που ικανοποιούν και τους δυο περιορισμούς θα τοποθετηθούν στη νέα λίστα. Αν επομένως η αρχική λίστα <span class="courier-code">a</span> είναι η:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[3.14,5,2,6,-2.5,-4,-1]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=[x for x in a if isinstance(x,int) if x%2==0]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">[2, 6, -4]</span></p>
			<p class="no-indent">η συνάρτηση <span class="courier-code">isinstance</span> ελέγχει αν κάποιο αντικείμενο είναι στιγμιότυπο μιας κλάσης αντικειμένων. Στη συγκεκριμένη περίπτωση ελέγχει αν ένας αριθμός της λίστας είναι ακέραιος. Τα αντικείμενα παρουσιάζονται στο Κεφάλαιο 11.</p>
			<p>Η ίδια εργασία μπορεί να γίνει χωρίς τη λειτουργία της σύνθεσης. Η Λίστα Κώδικα 5-44 περιέχει το πρόγραμμα που αντιστοιχεί στην προηγούμενη σύνθεση.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-44 | Δημιουργία λίστας με ένθετα <span class="courier-code">if</span></figcaption><img src="media/ListaKodika-5-44_fmt.png" alt=""/></figure>
			<p class="no-indent">Μια σύνθεση λίστας μπορεί να περιέχει περισσότερες από μια εντολές <span class="courier-code">for</span>. Σε αυτή την περίπτωση, η μια θα είναι εμφωλευμένη στην άλλη. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-26</b>: Δίνεται μια λίστα που περιέχει άλλες λίστες με αριθμούς. Να δημιουργήσετε καινούργια λίστα που θα περιέχει τα στοιχεία της πρώτης χωρίς όμως ένθετες λίστες.</p>
			</blockquote>
			<p class="no-indent">Η σύνθεση της νέας λίστας φαίνεται στη Λίστα Κώδικα 5-45.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-45 | Σύνθεση με ένθετες <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-5-45_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει το αποτέλεσμα της σύνθεσης:</p>
			<p><span class="courier-code">[1, &apos;a&apos;, 2, &apos;b&apos;, 3, &apos;c&apos;, &apos;*&apos;]</span></p>
			<p class="no-indent">Για κάθε τιμή του <span class="courier-code">k</span> που αφορά κάθε εσωτερική λίστα, η μεταβλητή <span class="courier-code">item</span> θα πάρει, μέσω της 2ης <span class="courier-code">for</span>, τα στοιχεία των ένθετων λιστών και θα συνθέσει με αυτά τη νέα λίστα <span class="courier-code">b</span>.</p>
			<p>Για την κατασκευή εμφωλευμένων δομών, είναι απαραίτητο η έκφραση της σύνθεσης να δοθεί μέσα σε αγκύλες. Το επόμενο παράδειγμα παρουσιάζει αυτή την περίπτωση.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-27</b>: Να δημιουργηθεί νέα λίστα που θα περιέχει τα 10 πολλαπλάσια των αριθμών από το 1 μέχρι και το 3 σε μια ένθετη λίστα το καθένα. </p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 5-46 περιέχει την απαραίτητη σύνθεση.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-46 | Δημιουργία ένθετων λιστών με σύνθεση</figcaption><img src="media/ListaKodika-5-46_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα της σύνθεσης θα είναι:</p>
			<p><span class="courier-code">[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], </span></p>
			<p><span class="courier-code">[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], </span></p>
			<p><span class="courier-code">[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]]</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 5-28</b>: Δίνεται μια λίστα που περιέχει άλλες τρεις λίστες με αριθμούς. Να δημιουργήσετε καινούργια λίστα ως αναστροφή της πρώτης (δηλαδή οι γραμμές να γίνουν στήλες).</p>
			</blockquote>
			<p class="no-indent">Η σύνθεση φαίνεται στη Λίστα Κώδικα 5-47.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 5-47 | Αναστροφή λίστας</figcaption><img src="media/ListaKodika-5-47_fmt.png" alt=""/></figure>
			<p class="no-indent">Το περιεχόμενο της λίστας <span class="courier-code">b</span> θα είναι:</p>
			<p><span class="courier-code">[[1, 3, 5], [2, 4, 6]]</span></p>
		</section>
		<section role="section" id="ch7se17">
			<h1><span role="label">5.17</span> Πίνακες</h1>
			<p class="no-indent">Αν και ο <i>πίνακας (array)</i> δεν αποτελεί μια από τις ενσωματωμένες βασικές δομές της γλώσσας, ωστόσο υπάρχει διαθέσιμη μια ενσωματωμένη βιβλιοθήκη που κάνει δυνατή τη χρήση πίνακα σε ένα πρόγραμμα γραμμένο σε Python. Η βιβλιοθήκη ονομάζεται <span class="courier-code">array</span> και για τη χρήση της αρκεί να γίνει η εισαγωγή της μέσω της εντολής <span class="courier-code">import</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import array</span></p>
			<p class="no-indent">Η διαφορά ενός αντικειμένου τύπου <span class="courier-code">array</span> από ένα αντικείμενο τύπου λίστας, που είναι και ο μόνος λόγος που θα μπορούσε να δικαιολογήσει τη χρήση του, είναι ότι σε έναν πίνακα θα πρέπει να δηλωθεί το είδος δεδομένων που αυτός θα περιέχει. Αυτό γίνεται κατά τη δημιουργία του:</p>
			<p><span class="courier-code">όνομα πίνακα=array.array(τύπος δεδομένων, δεδομένα)</span></p>
			<p class="no-indent">όπου τύπος δεδομένων είναι ένας χαρακτήρας ο οποίος δηλώνει τι είδους δεδομένα θα περιέχει ο νέος πίνακας. Μερικές από τις τιμές που μπορεί να δοθούν είναι:</p>
			<p><span class="courier-code">i</span>: για ακέραιο</p>
			<p><span class="courier-code">f</span>: για αριθμό κινητής υποδιαστολής </p>
			<p><span class="courier-code">d</span>: για πραγματικό αριθμό διπλής ακρίβειας</p>
			<p class="no-indent">Με την παρακάτω εντολή φαίνονται όλοι οι κωδικοί που μπορεί να πάρει ένας πίνακας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; array.typecodes</span></p>
			<p><span class="courier-code">&apos;bBuhHiIlLqQfd&apos;</span></p>
			<p class="no-indent">Περισσότερες λεπτομέρειες για τους κωδικούς δίνονται στην τεκμηρίωση της Python<sup class="superscript CharOverride-1"><span id="footnote-039-backlink"><a href="#footnote-039">55</a></span></sup>.</p>
			<p>Τα δεδομένα του πίνακα θα πρέπει να δοθούν με τη μορφή λίστας. Ακολουθεί ένα παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=array.array(&apos;i&apos;,[1,3,5,7,9])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">array(&apos;i&apos;, [1, 3, 5, 7, 9])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
			<p><span class="courier-code">&lt;class &apos;array.array&apos;&gt;</span></p>
			<p class="no-indent">Οι προηγούμενες εντολές θα δημιουργήσουν έναν πίνακα με όνομα <span class="courier-code">a</span> που θα περιέχει μόνο ακέραιους αριθμούς. Μετά τη δημιουργία ενός πίνακα, η χρήση του είναι παρόμοια με αυτήν της λίστας. Μπορεί να γίνει δεικτοδότηση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a[0]</span></p>
			<p><span class="courier-code">1</span></p>
			<p class="no-indent">τμηματική επεξεργασία του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a[1:3]</span></p>
			<p><span class="courier-code">array(&apos;i&apos;, [3, 5])</span></p>
			<p class="no-indent">ή να προστεθούν στοιχεία σε αυτόν, με την προϋπόθεση όμως ότι το νέο στοιχείο θα είναι ίδιου τύπου με του πίνακα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a.append(11)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">array(&apos;i&apos;, [1, 3, 5, 7, 9, 11])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a.append(11.2)</span></p>
			<p><span class="courier-code">TypeError: integer argument expected, got float</span></p>
			<p class="no-indent">Δεν μπορεί επομένως να τοποθετηθεί μέσα στον πίνακα στοιχείο με διαφορετικό τύπο από αυτόν που έχει δηλωθεί στην αρχή. Αν γίνει κάτι τέτοιο, προκαλείται διακοπή της εκτέλεσης και εμφανίζεται μήνυμα σφάλματος.</p>
		</section>
		<section role="section" id="ch7se18" data-featured="chapter-review">
			<h1><span role="label">5.18</span> Περίληψη</h1>
			<p class="no-indent">Σε αυτό το κεφάλαιο έγινε η παρουσίαση της πιο ευέλικτης δομής της Python, της λίστας. Μετά τη μελέτη αυτής της ενότητας, ο αναγνώστης θα είναι σε θέση να αναγνωρίζει, να δημιουργεί και να χρησιμοποιεί τη δομή της λίστας με τον πλέον αποδοτικό τρόπο. Παρουσιάστηκαν οι τρόποι δημιουργίας ή αντιγραφής μιας λίστας σε άλλη, οι μέθοδοι χειρισμού και οι συναρτήσεις που διαθέτει η Python για την τροποποίηση ή χρήση μιας λίστας, καθώς και εναλλακτικές τεχνικές επεξεργασίας, όπως η σύνθεση λίστας. Κάποιες από τις τεχνικές που χρησιμοποιούνται στις λίστες (όπως η δεικτοδότηση, η τμηματική επεξεργασία, ο μηχανισμός unpacking κ.ά.) χρησιμοποιούνται επίσης, με παρόμοιο τρόπο, και σε άλλες δομές (όπως οι συμβολοσειρές, τα σύνολα κ.ά.). Έτσι, είναι σημαντικό να γίνουν πλήρως κατανοητές όλες αυτές οι λειτουργίες και ο τρόπος που δουλεύουν οι συγκεκριμένοι μηχανισμοί της Python.</p>
			
		</section>
		<section role="section" id="ch7se19" data-featured="chapter-questions">
			<h1><span role="label">5.19</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Τι είναι μια λίστα; Τι περιεχόμενο μπορεί να έχει; Πώς δημιουργείται μια νέα λίστα;</li>
			<li>Η λίστα μπορεί να περιέχει άλλες λίστες;</li>
			<li>Μια λίστα μπορεί να περιέχει διαφορετικού τύπου αντικείμενα;</li>
			<li>Με ποιους τρόπους μπορεί να γίνει προσπέλαση των στοιχείων μιας λίστας;</li>
			<li>Τι είναι η διαδικασία της σύνθεσης;</li>
			<li>Πώς λειτουργεί ο μηχανισμός unpacking;</li></ol>
			
		</section>
		<section role="section" id="ch7se20" data-featured="chapter-assess">
			<h1><span role="label">5.20</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Να γράψετε πρόγραμμα που θα βρίσκει το άθροισμα και το γινόμενο των στοιχείων μιας λίστας που βρίσκονται στις περιττές και στις άρτιες θέσεις αντίστοιχα.</li>
			<li>Να δημιουργήσετε μέσω σύνθεσης μια νέα λίστα με τα τετράγωνα των περιττών αριθμών μιας λίστας.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται λίστα και αριθμό και θα καταχωρεί, σε νέα λίστα, τις θέσεις όπου βρίσκεται αυτός ο αριθμός.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται λίστα με βαθμολογίες από το 0 μέχρι και το 10 και θα επιστρέφει νέα λίστα με τη συχνότητα εμφάνισης όσων βαθμών υπάρχουν στη λίστα.</li>
			<li>Να γράψετε πρόγραμμα που, από δοσμένη λίστα με αριθμούς, θα δημιουργεί νέα που θα περιέχει μόνο τους μη μηδενικούς.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται 10 βαθμούς από τον χρήστη και θα τους αποθηκεύει σε λίστα, εάν είναι έγκυροι. Επίσης, θα πρέπει να εμφανίζει τον μέσο όρο της βαθμολογίας, τον μεγαλύτερο και τον μικρότερο βαθμό, καθώς και το ποσοστό επιτυχίας που σημειώθηκε. Στο τέλος, να εμφανιστούν οι βαθμοί κατά φθίνουσα διάταξη.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τον τύπο προϊόντος (τύπος 1, 2 και 3) και τις πωλήσεις για καθένα από τα 10 προϊόντα μιας επιχείρησης, εμφανίζοντας:
			<ul><li>Πόσα προϊόντα κάθε τύπου διαθέτει.</li>
			<li>Το σύνολο των πωλήσεων ανά τύπο προϊόντος.</li>
			<li>Το λιγότερο επικερδές προϊόν.</li>
			<li>Τις πωλήσεις ανά τύπο προϊόντος σε φθίνουσα διάταξη.</li>
			<li>Τον τύπο προϊόντος με τις περισσότερες μηδενικές πωλήσεις.</li>
			</ul>
			</li>
			<li>Ένας επενδυτής καταγράφει τις τιμές κλεισίματος για 5 μετοχές για 20 διαδοχικές ημέρες, καθώς και την τιμή αγοράς τους. Να γράψετε πρόγραμμα που:
			<ul><li>Να καταχωρεί την τιμή κάθε μετοχής ανά ημέρα και την τιμή αγοράς σε κατάλληλες λίστες.</li>
			<li>Να εμφανίζει τα κέρδη κατά την τελευταία ημέρα.</li>
			<li>Να εμφανίζει ποιες μετοχές είχαν συνεχή ανοδική πορεία.</li>
			<li>Να εμφανίζει σε ποιες ημέρες η τιμή παρουσίασε «καρφιά», δηλαδή η τιμή ήταν μεγαλύτερη από την τιμή της προηγούμενης και της επόμενης ημέρας.</li>
			<li>Να εμφανίζει τη μέση τιμή κάθε μετοχής.</li>
			<li>Να εμφανίζει την τυπική απόκλιση κάθε μετοχής <img src="media/pg264.png"/>￼. </li>
			<li>Να εμφανίζει την ή τις μετοχές με το μικρότερο «άνοιγμα» τιμής (διαφορά μέγιστης και ελάχιστης τιμής).</li>
			<li>Να εμφανίζει την ή τις μετοχές με τον μικρότερο κίνδυνο, χρησιμοποιώντας τον συντελεστή μεταβλητότητας ￼. </li>
			</ul>
			</li>
			<li>Να γράψετε πρόγραμμα που θα διαβάζει από το πληκτρολόγιο αριθμούς και θα τους αποθηκεύει σε μια λίστα. Αν δοθεί αρνητικός αριθμός, θα σταματάει η εισαγωγή. Στη συνέχεια θα υπολογίζει και θα τυπώνει:
			<ul><li>Το πλήθος των αριθμών που δόθηκαν.</li>
			<li>Τον μέσο όρο των αριθμών που δόθηκαν.</li>
			<li>Το πόσοι αριθμοί της λίστας είναι μεγαλύτεροι του μέσου όρου και πόσοι μικρότεροι ή ίσοι.</li>
			</ul>
			</li>
			<li>Να γράψετε κώδικα στον οποίο θα εισάγεται από το πληκτρολόγιο μια μήτρα Α διαστάσεων 5 × 5 σε μορφή λίστας και στη συνέχεια θα υπολογίζεται το άθροισμα των στοιχείων του. Η διάσχιση της μήτρας να γίνεται κατά γραμμή.</li>
			<li>Να γράψετε πρόγραμμα το οποίο θα δημιουργεί μια λίστα που θα περιλαμβάνει όλους τους τριψήφιους αριθμούς. Στη συνέχεια, θα δημιουργεί μια 2η λίστα που θα περιλαμβάνει τους αριθμούς της 1ης, από τον μεγαλύτερο προς τον μικρότερο. Ως κριτήριο ταξινόμησης να θεωρηθεί το άθροισμα των ψηφίων κάθε αριθμού.</li>
			<li>Να γράψετε πρόγραμμα το οποίο θα διαβάζει τα ονόματα 10 αεροπορικών εταιρειών που πετάνε από το αεροδρόμιο «Μακεδονία», καθώς και τις αντίστοιχες εισπράξεις τους για το τρίμηνο Ιούνιος-Ιούλιος-Αύγουστος. Να υπολογίζει και να τυπώνει τα ονόματα των αεροπορικών εταιρειών που έχουν εισπράξεις μεγαλύτερες από τον μέσο όρο.</li>
			<li>Μια εταιρεία catering απασχολεί 15 άτομα. Να γράψετε πρόγραμμα το οποίο
			<p class="no-indent">(α) Διαβάζει τα ονοματεπώνυμα των υπαλλήλων και τα αποθηκεύει σε μια λίστα.</p>
			<p class="no-indent">(β) Διαβάζει τον μηνιαίο μισθό κάθε υπαλλήλου (500 ≤ μισθός ≤ 2,000) και τους τοποθετεί σε μια λίστα.</p>
			<p class="no-indent">(γ) Υπολογίζει και τυπώνει τον μέσο μηνιαίο μισθό.</p>
			<p class="no-indent">(δ) Υπολογίζει και τυπώνει τα ονόματα και το πλήθος των υπαλλήλων που αμείβονται με μηνιαίο μισθό μεγαλύτερο του μέσου όρου.</p>
			</li>
			<li>Στις τελευταίες δημοτικές εκλογές για τον δήμο «Θήτα», συμμετείχαν τέσσερις υποψήφιοι δήμαρχοι. Τα έγκυρα ψηφοδέλτια ήταν 10,000. Τα αποτελέσματα των εκλογών καταγράφονται στον παρακάτω πίνακα.
			
				<table id="table033">
					<tbody>
						<tr>
							<td>
								<p><b>ΟΝΟΜΑ ΣΥΝΔΥΑΣΜΟΥ</b></p>
							</td>
							<td>
								<p><b>ΨΗΦΟΙ</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Για έναν καλύτερο δήμο</p>
							</td>
							<td>
								<p>3,582</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Μπορούμε και καλύτερα</p>
							</td>
							<td>
								<p>2,727</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Για μια νέα πόλη</p>
							</td>
							<td>
								<p>683</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Νέα Εποχή – Νέα Πόλη</p>
							</td>
							<td>
								<p>3,008</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Να γράψετε κώδικα ο οποίος θα αποθηκεύει τον πίνακα σε μια λίστα με τα ονόματα και σε μια δεύτερη με τις αντίστοιχες ψήφους. Οι ψήφοι κάθε συνδυασμού πρέπει να εισάγονται από το πληκτρολόγιο (0 ≤ ψήφοι συνδυασμού ≤ 10,000). Επίσης, να πραγματοποιείται έλεγχος αν το άθροισμα των ψήφων όλων των συνδυασμών είναι &gt;10,000. Αν είναι, να ζητάει την εισαγωγή εκ νέου των ψήφων για κάθε συνδυασμό. Στη συνέχεια, να υπολογίζει και να τυπώνει το ποσοστό που έλαβε κάθε συνδυασμός, εμφανίζοντας την τελική κατάταξή τους σε φθίνουσα σειρά με βάση τις ψήφους.</p>
			</li>
		</ol>
		</section>
	</section>
	<section role="chapter" id="ch8">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 6</span> Συμβολοσειρές</h1>
		<section role="section" id="ch8se1">
			<h1><span role="label">6.1</span> Εισαγωγή</h1>
			<img src="media/chapter_6_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Σ’ αυτό το κεφάλαιο παρουσιάζεται ένας από τους βασικούς τύπους δεδομένων της Python, η συμβολοσειρά. Μαζί με τον τρόπο χειρισμού κειμένου μέσα σε ένα πρόγραμμα, περιγράφονται όλα τα χαρακτηριστικά, οι μέθοδοι και οι ιδιότητες που είναι διαθέσιμες σε δεδομένα αυτού του είδους. Γίνεται ανάλυση των τελεστών που είναι διαθέσιμοι στην Python για την επεξεργασία δεδομένων κειμένου</i><i>, ενώ περιγράφονται, μέσα από κατάλληλα παραδείγματα και μικρές εφαρμογές, η χρήση και οι μορφές δομών κειμένου. Τέλος, δίνεται στον αναγνώστη η δυνατότητα να συνδυάσει δεδομένα διαφορετικού είδους, όπως λίστες που περιέχουν κείμενο. Βασικός σκοπός του κεφαλαίου είναι να γίνει κατανοητός ο τρόπος χρήσης δεδομένων κειμένου, οι βασικές λειτουργίες και </i><i>τα εργαλεία που παρέχει η Python, τα προβλήματα που μπορεί να εμφανιστούν και ο τρόπος αντιμετώπισής τους.</i></p>
		</section>
		<section role="section" id="ch8se2">
			<h1><span role="label">6.2</span> Η δομή κειμένου</h1>
			<p class="no-indent">Σχεδόν σε κάθε πρόγραμμα, χρειάζεται να γίνει επεξεργασία κειμένου. Από μια απλή εμφάνιση στην οθόνη των πληροφοριών ή των αποτελεσμάτων ενός προγράμματος, μέχρι την επεξεργασία φυσικής γλώσσας (NLP, natural language processing) για κάποιο σύστημα μηχανικής μάθησης (machine learning), τη σάρωση μιας ιστοσελίδας από ένα web bot, την ανάλυση ενός κειμένου για την εύρεση στοιχείων λογοκλοπής (plagiarism) και τον χειρισμό αναζητήσεων σε ένα ηλεκτρονικό κατάστημα. Η χρήση κειμένου μέσα σε κώδικα είναι σχεδόν δεδομένη. Για αυτό τον λόγο, στην Python, όπως και σε όλες τις γλώσσες προγραμματισμού, υπάρχει ξεχωριστή δομή που χειρίζεται δεδομένα με τη μορφή κειμένου. </p>
			<p>Το όνομα αυτής της δομής είναι <span class="courier-code">str</span> και προέρχεται από τη λέξη <span class="courier-code">string</span> που σε ελεύθερη μετάφραση έχει την έννοια της συμβολοσειράς (μιας σειράς δηλαδή από χαρακτήρες ή σύμβολα) ή του αλφαριθμητικού (αφού μπορεί να περιέχει τόσο χαρακτήρες ενός αλφαβήτου όσο και αριθμούς ή άλλα σύμβολα). Και επειδή στην Python όλα είναι αντικείμενα, έτσι και η δομή <span class="courier-code">str</span> είναι μια κλάση αντικειμένων τύπου κειμένου. Στη συνέχεια του κεφαλαίου περιγράφονται τα χαρακτηριστικά, οι ιδιότητες και οι μέθοδοι που διαθέτει ένα αντικείμενο κειμένου, καθώς και οι πράξεις-ενέργειες που μπορεί να γίνουν με αυτά.</p>
			<p>Το αντικείμενο <span class="courier-code">str</span> είναι διατεταγμένη και <i>αμετάβλητη (immutable)</i> ακολουθία χαρακτήρων. Τέτοια ακολουθία είναι επίσης ένα επαναληπτικό αντικείμενο, που σημαίνει ότι μπορεί να δοθεί ως στοιχείο ελέγχου σε μια δομή επανάληψης όπως η <span class="courier-code">for</span>. Υπάρχουν δύο διαφορετικοί χαρακτήρες που χρησιμοποιούνται για την ενσωμάτωση κειμένου σε ένα αντικείμενο <span class="courier-code">str</span>, τα μονά <span class="courier-code">&apos;</span> <span class="courier-code">&apos;</span> και τα διπλά <span class="courier-code">&quot;</span> <span class="courier-code">&quot;</span> <i>εισαγωγικά (quotes)</i> και αρκετοί συνδυασμοί αυτών, που περιγράφονται στη συνέχεια.</p>
			<p>Οι περισσότερες περιπτώσεις, που αφορούν απλά τον χειρισμό κειμένου σε ένα πρόγραμμα, περιλαμβάνουν κείμενο που μπορεί να περιέχει χαρακτήρες του αγγλικού ή κάποιου άλλου αλφαβήτου ή και κάποιους ειδικούς χαρακτήρες, όπως για παράδειγμα σύμβολα που αφορούν νομισματικές μονάδες (€, £ κ.λπ.), μονάδες μέτρησης (°, ² κ.λπ.) ή μαθηματικά σύμβολα (∞, ∩, ϵ, ⅜⅜ κ.λπ.). Όλοι αυτοί οι χαρακτήρες υπάρχουν σε έναν πίνακα χαρακτήρων γνωστό ως Unicode. Για την εμφάνιση τέτοιων χαρακτήρων μέσα στον πηγαίο κώδικα σε ένα πρόγραμμα, ή στην οθόνη της κονσόλας της γλώσσας, δεν είναι απαραίτητη κάποια ιδιαίτερη προετοιμασία. Η ίδια η Python μπορεί να χειριστεί, χωρίς προβλήματα, κάθε χαρακτήρα Unicode. </p>
			<p>Για τις περιπτώσεις όμως που είναι απαραίτητη η αποθήκευση σε ένα αρχείο, ή η αποστολή και παραλαβή του από κάποια συσκευή ή <i>θύρα (socket)</i> του υπολογιστή ή σε ένα δίκτυο υπολογιστών, ο χειρισμός κειμένου μπορεί να γίνει πιο πολύπλοκος. Σε τέτοιες περιπτώσεις, είναι απαραίτητη η μετατροπή του κειμένου σε αντίστοιχες σειρές από bytes που αποτελούν την εσωτερική αναπαράσταση κάθε χαρακτήρα στον πίνακα Unicode.</p>
			<p>Η Python διαθέτει ένα ακόμα αντικείμενο για τον χειρισμό δεδομένων κειμένου (σε πιο χαμηλό επίπεδο) σε επίπεδο αναπαράστασης byte, το αντικείμενο τύπου <span class="courier-code">bytes</span>, καθώς και μια παραλλαγή αυτού, τον τύπο <span class="courier-code">bytearray</span>. Και τα δύο αυτά αντικείμενα περιγράφονται στη συνέχεια.</p>
			<p>Για τον χειρισμό κειμένου είναι διαθέσιμοι τελεστές, συναρτήσεις και μέθοδοι, ειδικές δηλαδή συναρτήσεις ενσωματωμένες σε αντικείμενα όπως το <span class="courier-code">str</span>, που κληρονομούνται και <i>καλούνται </i><i>(invoked)</i> με το όνομά τους. Τέλος, για την εμφάνιση και μορφοποίηση κειμένου, στο Κεφάλαιο 2 έγινε παρουσίαση δύο διαφορετικών τρόπων. Σ’ αυτό το κεφάλαιο περιγράφεται μια ακόμη, νέα λειτουργία που απλοποιεί αρκετά τη διαδικασία μορφοποίησης.</p>
		</section>
		<section role="section" id="ch8se3">
			<h1><span role="label">6.3</span> Συστήματα κωδικοποίησης χαρακτήρων</h1>
			<p class="no-indent">Ο πρώτος συστηματικός τρόπος κωδικοποίησης των χαρακτήρων που χρησιμοποιούνται σε ψηφιακή αναπαράσταση, όπως ένα κείμενο σε κάποιο έγγραφο, έγινε τη δεκαετία του 1960, με τον πίνακα ASCII<sup class="superscript CharOverride-1"><span id="footnote-038-backlink"><a href="#footnote-038">56</a></span></sup>. Αυτός χρησιμοποιούσε έναν κωδικό αριθμό από το 0 μέχρι το 127 για κάθε γράμμα του αγγλικού αλφαβήτου, για τα ψηφία και για κάποιους μη εκτυπώσιμους χαρακτήρες (αλλαγή γραμμής, έναν τόνο στο απλό μεγάφωνο ενός υπολογιστή κ.λπ.). Το σύστημα ASCII στην αρχική του μορφή χρησιμοποιούσε πληροφορίες ενός byte μεγέθους 7 bit (2<sup class="superscript CharOverride-1">7</sup> = 128) ώστε να κρατάει κωδικούς από το 0 έως το 127. Λίγο αργότερα δημιουργήθηκε ο εκτεταμένος (extended)<sup class="superscript CharOverride-1"><span id="footnote-037-backlink"><a href="#footnote-037">57</a></span></sup> πίνακας ASCII που χρησιμοποιούσε πληροφορίες ενός byte των 8 bit (2<sup class="superscript CharOverride-1">8</sup> = 256). Έτσι, μπορούσε να χωρέσει ο πίνακας σύμβολα και χαρακτήρες και από άλλη μία γλώσσα, π.χ. αγγλικά και ελληνικά. </p>
			<p>Με την ταχύτατη όμως ανάπτυξη των δικτύων επικοινωνίας και του ίντερνετ, έγινε μεγαλύτερη η ανάγκη να μπορεί κάποιος να μεταφέρει και να διαβάζει κείμενα που έχουν γραφτεί σε άλλη κωδικοποίηση. Το πρόβλημα φαίνεται πως λύθηκε με το σύστημα Unicode<sup class="superscript CharOverride-1"><span id="footnote-036-backlink"><a href="#footnote-036">58</a></span></sup> το οποίο χρησιμοποιεί 20 περίπου bit από πληροφορίες και ενσωματώνει 1,114,111 χαρακτήρες από όλες σχεδόν τις γλώσσες που υπάρχουν στον πλανήτη. Κάθε χαρακτήρας αντιστοιχεί σε έναν κωδικό αριθμό που, συνήθως για λόγους ευκολίας, δίνεται στη δεκαεξαδική ή στην οκταδική μορφή του. Το σύστημα Unicode, με τον μεγάλο όγκο πληροφοριών που περιλαμβάνει, δημιούργησε την ανάγκη αποτελεσματικής αναπαράστασης κάθε κωδικού οποιουδήποτε χαρακτήρα. Έτσι, δημιουργήθηκαν τα συστήματα κωδικοποίησης όπως latin1, cp437, cp737 (ή DOS Greek), Windows-1253, UTF-8 και άλλα, γνωστά επίσης και ως <i>κωδικοσελίδες </i><i>(code pages) </i>που δεν είναι τίποτα άλλο παρά οι κωδικοί του πίνακα Unicode εκφρασμένοι με τη μορφή byte. </p>
			<p>Τέτοιες κωδικοποιήσεις χρησιμοποιούνται και στη συνάρτηση <span class="courier-code">bytes</span> στην Python, που δέχεται μία συμβολοσειρά Unicode ή ASCII και τη μετατρέπει στη δεκαεξαδική μορφή του αντίστοιχου κώδικα Unicode εκφρασμένη σε μία ακολουθία από bytes. Για να γίνει πιο εύκολα κατανοητή η λειτουργία της συνάρτησης <span class="courier-code">bytes</span>, γίνεται περιγραφή της κωδικοποίησης UTF-8. </p>
			<p>Η κωδικοποίηση UTF-8 είναι η πλέον διαδεδομένη σήμερα και χρησιμοποιείται τόσο σε κειμενογράφους και κάθε είδους προγράμματα που περιέχουν κείμενο, όσο και σε ιστοσελίδες. Είναι μία από τις πολλές κωδικοποιήσεις χαρακτήρων Unicode που υπάρχουν και προτιμάται αντί άλλων, γιατί είναι η πλέον αποτελεσματική, καθώς ο χαρακτήρας που είναι να κωδικοποιηθεί μετατρέπεται σε μία αλυσίδα από bytes, με δυναμικό τρόπο, καταλαμβάνοντας ένα, δύο, τρία ή τέσσερα bytes, ανάλογα με το μέγεθος του κωδικού του στον πίνακα Unicode. Έτσι, ένα κείμενο στο αγγλικό αλφάβητο θα καταλαμβάνει ένα byte ανά χαρακτήρα (αφού αυτοί οι χαρακτήρες έχουν ίδιους κωδικούς με του πίνακα ASCII, καθώς και μέγεθος ενός byte). Αντίθετα, άλλες κωδικοποιήσεις αποθηκεύουν διαφορετικά τους χαρακτήρες. Για παράδειγμα, το UTF-16 χρησιμοποιεί δύο ή τέσσερα byte από πληροφορίες για τον κωδικό Unicode ενός συγκεκριμένου χαρακτήρα. </p>
		</section>
		<section role="section" id="ch8se4">
			<h1><span role="label">6.4</span> Η λειτουργία κωδικοποίησης UTF-8</h1>
			<p class="no-indent">Στις επόμενες γραμμές, αναλύεται ο τρόπος κωδικοποίησης σύμφωνα με το πρότυπο UTF-8. Για να γίνει εύκολα κατανοητός αυτός ο τρόπος κωδικοποίησης, παρουσιάζεται ένα παράδειγμα με τον χαρακτήρα ‘<span class="courier-code">ε</span>’. Η παρακάτω εντολή μετατρέπει το string ‘<span class="courier-code">ε</span>’ σε μορφή bytes:</p>
			<p><span class="courier-code">&gt;&gt;&gt; bytes(&apos;ε&apos;,&apos;utf-8&apos;)</span></p>
			<p><span class="courier-code">b&apos;\xce\xb5&apos;</span></p>
			<p class="no-indent">όπου τα <span class="courier-code">&apos;\xce&apos;</span> και <span class="courier-code">&apos;\xb5&apos;</span> είναι οι κωδικοί που διατηρεί το UTF-8 για τον χαρακτήρα ‘<span class="courier-code">ε</span>’, σε δεκαεξαδική μορφή (<span class="courier-code">\x</span>), ενώ το ‘<span class="courier-code">b</span>’ που τοποθετείται στην αρχή δηλώνει ότι η μορφή της συμβολοσειράς είναι τύπου bytes. Η λειτουργία της συνάρτησης <span class="courier-code">bytes</span> παρουσιάζεται αναλυτικά στην επόμενη ενότητα. Η παρακάτω εντολή κάνει χρήση της συνάρτησης <span class="courier-code">ord</span>, που επιστρέφει τον κωδικό Unicode ενός χαρακτήρα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">ord(&apos;ε&apos;)</span></p>
			<p><span class="courier-code">949</span></p>
			<p class="no-indent">Έτσι, εμφανίζεται ο Unicode δεκαδικός αριθμός του χαρακτήρα ‘<span class="courier-code">ε</span>’. Ο αντίστοιχος δεκαεξαδικός αριθμός βρίσκεται με την επόμενη εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">hex(949)</span></p>
			<p><span class="courier-code">&apos;0x</span><span class="courier-code">3b5&apos;</span></p>
			<p class="no-indent">Δίνοντας αυτό τον κωδικό στη συνάρτηση <span class="courier-code">chr</span> (που δέχεται έναν κωδικό Unicode και εμφανίζει τον αντίστοιχο χαρακτήρα) επιβεβαιώνεται ότι ο κωδικός αντιστοιχεί στον χαρακτήρα ‘<span class="courier-code">ε</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">chr(949), chr(0x3b5)</span></p>
			<p><span class="courier-code">(&apos;ε&apos;, &apos;ε&apos;)</span></p>
			<p class="no-indent">Η ερμηνεία της ακολουθίας κωδικών αριθμών (<span class="courier-code">\xce\xb5</span>)<span class="courier-code"> </span>που επιστρέφει η συνάρτηση <span class="courier-code">bytes</span> για αυτό τον χαρακτήρα, στην κωδικοποίηση UTF-8, είναι η ακόλουθη:</p>
			<ol>
			<li>Ο <i>κωδικός Unicode (code</i><i> point)</i> του χαρακτήρα <span class="courier-code">&apos;ε&apos;</span> είναι <span class="courier-code">949</span> ή <span class="courier-code">0x3b5</span> σε δεκαδική και δεκαεξαδική μορφή αντίστοιχα.</li>
			<li>Η αντίστοιχη δυαδική μορφή του είναι:
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">bin</span><span class="courier-code">(949)</span></p>
			<p><span class="courier-code">&apos;0b1110110101&apos;</span></p>
			</li>
			<li>Τα 10 αυτά δυαδικά ψηφία αντιστοιχούν σε 2 bytes.</li>
			<li>Γίνεται ομαδοποίηση ανά 6 ψηφία:
			<p><span class="courier-code">1110 110101</span></p></li>
			<li>Στην αρχή κάθε ομάδας (εκτός της 1ης) προστίθεται το ‘<span class="courier-code">10</span>’, που επισημαίνει ότι αποτελούν στοιχεία μιας ακολουθίας από bytes:
			<p><span class="courier-code">1110 </span><span class="courier-code"><b>10</b></span><span class="courier-code">110101</span></p>
			</li>
			<li>Στο πρώτο byte μπαίνουν στην αρχή τόσα <span class="courier-code">1</span> όσα είναι και τα bytes του χαρακτήρα, ενώ τα υπόλοιπα γεμίζουν με <span class="courier-code">0</span>:
			<p><span class="courier-code"><b>1100</b></span><span class="courier-code">1110 </span><span class="courier-code"><b>10</b></span><span class="courier-code">110101</span></p>
			<p class="no-indent">Η δεκαεξαδική μορφή αυτών των δυαδικών αριθμών είναι:</p>
			<p><span class="courier-code">&gt;&gt;&gt; hex(0b11001110), hex(0b10110101)</span></p>
			<p><span class="courier-code">(&apos;0xce&apos;</span><span class="courier-code">, &apos;0xb5&apos;)</span></p>
			<p class="no-indent">ό,τι δηλαδή επιστρέφει η συνάρτηση <span class="courier-code">bytes</span> με κωδικοποίηση UTF-8. Η παραπάνω διαδικασία είναι στην ουσία ο αλγόριθμος δυναμικής συμπίεσης που χρησιμοποιεί το σύστημα UTF-8 για την κωδικοποίηση χαρακτήρων Unicode ώστε να καταλαμβάνει τον λιγότερο δυνατό χώρο μνήμης<sup class="superscript CharOverride-1"><span id="footnote-035-backlink"><a href="#footnote-035">59</a></span></sup>.</p>
			</li></ol>
		</section>
		<section role="section" id="ch8se5">
			<h1><span role="label">6.5</span> Δημιουργία αντικειμένων String</h1>
			<p class="no-indent">Για να δημιουργηθεί ένα νέο αντικείμενο κειμένου, αρκεί το κείμενο να περιληφθεί μέσα σε: </p>
			<ol><li>μονά εισαγωγικά (π.χ. ‘όνομα’, ‘Τμήμα Α’, ‘Εγνατίας 127’, ‘ΑΩ2345’, ‘231093482’)</li>
			<li>διπλά εισαγωγικά (π.χ. “είπε ΟΧΙ”, “Τμήμα Β”), ή</li>
			<li>τριπλά μονά ή τριπλά διπλά εισαγωγικά (π.χ. ’’’…κείμενο…’’’ ή ”””…κείμενο…”””)</li></ol>
			<p class="no-indent">Το κείμενο αυτό μπορεί να αποθηκευτεί είτε ως μεμονωμένο αντικείμενο σε κάποια μεταβλητή είτε να ενσωματωθεί σε κάποιο άλλο αντικείμενο ως μέλος αυτού (π.χ. σε μια λίστα, ένα σύνολο κ.λπ.). Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 6-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 6-1 | Δημιουργία string</figcaption><img src="media/ListaKodika-6-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Η Python διαθέτει διαφορετικούς τρόπους δημιουργίας κειμένου για να μπορούν να συνδυάζονται μέσα στο κείμενο οι χαρακτήρες “<span class="courier-code">&apos;</span>” και “<span class="courier-code">&quot;</span>” (γραμμές 4 και 11)<span class="courier-code">. </span>Αν χρησιμοποιηθεί ο ίδιος χαρακτήρας και για τη δημιουργία της συμβολοσειράς αλλά και μέσα σ’ αυτήν, είναι λάθος (γραμμή 14). Σ’ αυτή την περίπτωση, εκτός από τη χρήση διαφορετικών χαρακτήρων μέσα και «γύρω» από κείμενο, μπορεί να γίνει χρήση χαρακτήρων διαφυγής (γραμμή 6), που παρουσιάστηκαν στο Κεφάλαιο 2 (Πίνακας 2-12):</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Απάντησε αμέσως η Ζωή: </span><span class="courier-code">\&quot;εγώ\&quot;.&quot;)</span></p>
			<p><span class="courier-code">Απάντησε αμέσως η Ζωή: &quot;εγώ&quot;.</span></p>
			<p class="no-indent">Τα τριπλά (μονά ή διπλά) εισαγωγικά δημιουργούν κείμενο πολλαπλών γραμμών και μπορούν να χρησιμοποιηθούν και ως σχόλια ή ως <i>τεκμηρίωση (documentation, docstring</i><i>)</i> σε ένα πρόγραμμα (Λίστα Κώδικα 6-2), όπως παρουσιάστηκε ήδη στο Κεφάλαιο 2.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-2 | Δημιουργία docstring σε σενάριο</figcaption><img src="media/ListaKodika-6-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Έτσι, αυτά τα σχόλια μπορούν να εμφανιστούν, αν κάποιος θελήσει να δει μια περιγραφή του κώδικα, με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&#9;&gt;&gt;&gt;__</span><span class="courier-code">doc__</span></p>
			<p><span class="courier-code">&#9;&apos;Δοκιμαστικό πρόγραμμα&#160;\n Γίνεται παρουσίαση … &apos;</span></p>
			<p class="no-indent">Αυτό είναι ιδιαίτερα βολικό στη συγγραφή σχολίων για την τεκμηρίωση τμημάτων πηγαίου κώδικα, όπως για παράδειγμα μιας συνάρτησης (που περιγράφεται στο Κεφάλαιο 10). Η επόμενη συνάρτηση (Λίστα Κώδικα 6-3) περιέχει, με τη μορφή σχολίων, μια περιγραφή της λειτουργίας της.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-3 | Δημιουργία docstring σε συνάρτηση</figcaption><img src="media/ListaKodika-6-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του πιο πάνω προγράμματος, αν δοθεί στην κονσόλα η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> help(tpt)</span></p>
			<p class="no-indent">θα εμφανιστούν τα σχόλιά της:</p>
			<p><span class="courier-code">Help on function tpt in module __main__:</span></p>
			<p><span class="courier-code">tpt()</span></p>
			<p><span class="courier-code"> Δοκιμαστικό πρόγραμμα </span></p>
			<p><span class="courier-code"> Γίνεται παρουσίαση της βιβλιοθήκης μαθηματικών </span></p>
			<p><span class="courier-code"> που είναι διαθέσιμη στην Python</span></p>
			<p><span class="courier-code"> Συγγραφείς: Σαμαράς Ν. Τσιπλίδης Κ. </span></p>
			<p><span class="courier-code"> Ημ/νία: σήμερα…</span></p>
			<p class="no-indent">Όσον αφορά τη διαχείριση κειμένου μέσα στο περιβάλλον του διερμηνευτή αλλά και σε ολοκληρωμένα IDE, αυτή γίνεται άμεσα. Εξ ορισμού η Python δέχεται πηγαίο κώδικα γραμμένο σε κωδικοποίηση UTF-8. Παρ’ όλα αυτά, είναι δυνατόν να γραφτεί πηγαίος κώδικας και σε άλλη μορφή, αρκεί να δηλωθεί αυτό μέσα στον πηγαίο κώδικα. Η δήλωση της κωδικοποίησης γίνεται με την παρακάτω εντολή: </p>
			<p><span class="courier-code"># -*- coding: κωδικοποίηση -*-</span></p>
			<p class="no-indent">όπου στη θέση της <span class="courier-code">κωδικοποίησης</span> μπορεί να δοθεί μια οποιαδήποτε κωδικοσελίδα. Η παραπάνω εντολή θα πρέπει να δοθεί στην 1η ή στη 2η γραμμή κώδικα. Οι επόμενες εντολές επιλέγουν για κωδικοποίηση διαφορετική κωδικοσελίδα:</p>
			<p><span class="courier-code"># -*- </span><span class="courier-code">coding: utf-8 -*-</span> ή</p>
			<p><span class="courier-code"># -*- coding: cp737 -*-</span></p>
		</section>
		<section role="section" id="ch8se6">
			<h1><span role="label">6.6</span> Είδη κειμένου που υποστηρίζει η Python</h1>
			<p class="no-indent">Η Python διαθέτει αρκετούς τρόπους για να αναπαριστά κείμενο, ανάλογα με το περιεχόμενό του ή τη μορφή που είναι επιθυμητό να έχει. Ακολουθεί περιγραφή των μορφών κειμένου που μπορεί να δημιουργήσει κανείς μέσα σε πηγαίο κώδικα, χρησιμοποιώντας κάθε φορά κάποιο πρόθεμα μπροστά από τα εισαγωγικά του κειμένου.</p>
			<p class="no-indent"><span class="courier-code"><b>&apos;κείμενο&apos;</b></span>: χωρίς καμία επισήμανση, είναι το κείμενο σε μορφή Unicode που αναγνωρίζει και διαχειρίζεται η Python σε αντικείμενα τύπου <span class="courier-code">str</span>. Αρκεί να δοθεί το κείμενο μέσα σε εισαγωγικά.</p>
			<p class="no-indent"><span class="courier-code"><b>u&apos;κείμενο&apos;</b></span>: ή Unicode string. Δηλώνει ότι το κείμενο θα αποθηκευτεί ως ένα σύνολο Unicode χαρακτήρων. Υπάρχει περισσότερο για λόγους συμβατότητας με κώδικα γραμμένο σε εκδόσεις Python 2.x, όπου το κείμενο με πρόθεμα ‘<span class="courier-code">u</span>’ δήλωνε κείμενο τύπου Unicode.</p>
			<p class="no-indent"><span class="courier-code"><b>r&apos;κείμενο&apos;</b></span>: ή raw string. Αφορά κείμενο απαλλαγμένο από χαρακτήρες διαφυγής, όπως οι ‘\n’, ‘\t’ κ.λπ. Χρησιμοποιείται σε περιπτώσεις όπως η αναπαράσταση της διαδρομής ενός αρχείου σε κάποιο φάκελο σε περιβάλλον Windows, π.χ.: r‘c:\code\Python\’. Ετσι, ο χαρακτήρας ‘\’ παύει να λειτουργεί ως χαρακτήρας διαφυγής. Αν δινόταν ως απλό κείμενο, θα έπρεπε να γραφτεί ως εξής: ‘c:\\code\\Python\\’. Ισχύει:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> len(r&apos;\n&apos;), len(&apos;\n&apos;)</span></p>
			<p><span class="courier-code">(2, 1)</span></p>
			<p class="no-indent">όπου ο χαρακτήρας ‘\’ στην πρώτη περίπτωση είναι απλά ένα ακόμα σύμβολο μέσα στο string, ενώ στη δεύτερη περίπτωση είναι ο χαρακτήρας διαφυγής για την αλλαγή γραμμής.</p>
			<p class="no-indent"><span class="courier-code"><b>b&apos;κείμενο&apos;</b></span>: ή byte string. Είναι κείμενο σε bytes, από συγκεκριμένη κωδικοποίηση, που έχει προκύψει από χρήση της συνάρτησης <span class="courier-code">bytes</span>. Περιέχει χαρακτήρες ASCII ή δεκαεξαδικούς κωδικούς χαρακτήρων του πίνακα Unicode. Παραδείγματα τέτοιου κειμένου δίνονται σε επόμενη παράγραφο.</p>
			<p class="no-indent"><span class="courier-code"><b>f&apos;κείμενο {έκφραση}&apos;</b></span>: ή format string. Πρόκειται για κείμενο με δυνατότητα ενσωμάτωσης εκφράσεων. Αυτές οι εκφράσεις μπορεί να περιλαμβάνουν πράξεις, μεταβλητές ή γενικότερα ένα ή περισσότερα αντικείμενα. Ο τύπος του κειμένου παραμένει <span class="courier-code">str</span>, ωστόσο δεν είναι σταθερές και προκαθορισμένες οι τιμές που περιέχει. Η συμβολοσειρά <span class="courier-code">fstring</span> δημιουργείται δυναμικά, καθώς εκτελείται το πρόγραμμα, και η τελική μορφή της εξαρτάται αποκλειστικά από τα δεδομένα που θα διαχειρίζεται ο κώδικας. Έτσι, το τελικό αποτέλεσμα βασίζεται στην αποτίμηση των ένθετων εκφράσεων. </p>
			<p>Είναι ένα νέο στοιχείο της Python, που εμφανίστηκε πρώτη φορά στην έκδοση 3.6. Κάνει τη μορφοποίηση κειμένου πιο απλή και τη δημιουργία σύνθετων κειμένων εύκολη διαδικασία, σε σχέση με τη μέθοδο <span class="courier-code">format</span> ή τη χρήση του %. Η έκφραση μπορεί να περιέχει πράξεις, μεταβλητές κ.ά., τα οποία θα πρέπει να δίνονται μέσα σε χαρακτήρες ‘<span class="courier-code">{ }</span>’. Το επόμενο παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,c=960,6.28,[1,5,9,2,6,5]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> f&apos;To {chr(a)} είναι:{b/2}...{&quot;&quot;.join(map(str,c))}...&apos;</span></p>
			<p><span class="courier-code">&apos;To π είναι:3.14...159265...&apos;</span></p>
			<p class="no-indent">περιλαμβάνει αρκετά και διαφορετικά στοιχεία, όπως συνάρτηση (<span class="courier-code">chr</span>), πράξεις με μεταβλητές (<span class="courier-code">b/2</span>) και μέθοδο κειμένου (<span class="courier-code">join</span>). Στο επόμενο παράδειγμα: </p>
			<p><span class="courier-code">&gt;&gt;&gt; a=float(input(&apos;Πλευρά α?&apos;)) #</span><span class="courier-code">έστω ότι δίνεται το 12 στο a</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; f&apos;Το εμβαδό τετραγώνου με πλευρά {a} είναι {a**2}&apos;</span></p>
			<p><span class="courier-code">&apos;Το εμβαδό τετραγώνου με πλευρά 12.0 είναι 144.0&apos;</span></p>
			<p class="no-indent">αφού δεχθεί μια τιμή το <span class="courier-code">a</span>, το κείμενο ενσωματώνει τα δεδομένα, τον υπολογισμό και το αποτέλεσμα με εντυπωσιακή απλότητα. Ακολουθεί ένα ακόμα παράδειγμα:</p>
			<p><span class="courier-code">tade, toson=&apos;Μάκης&apos;, 23</span></p>
			<p><span class="courier-code">print(f&apos;Το όνομά μου είναι {tade} και είμαι {toso</span><span class="courier-code">n} χρονών!&apos;)</span></p>
			<p><span class="courier-code">Το όνομά μου είναι Μάκης και είμαι 23 χρονών!</span></p>
			<p class="no-indent">Όπως φαίνεται και από την τελευταία <span class="courier-code">print</span>, η δημιουργία κειμένου με ενσωμάτωση μεταβλητών πλέον γίνεται πάρα πολύ εύκολα και με τρόπο που προσεγγίζει τη φυσική μας γλώσσα.</p>
			<img src="media/icon-9_fmt.png" alt=""/>
			<p class="no-indent">Αξίζει να αναφερθεί η διαφορά μεταξύ των εκδόσεων 3.x και 2.x σχετικά με τα είδη κειμένου και τον τρόπο που τα διαχειρίζονται. </p>
			<p class="no-indent">Στην έκδοση 2.x ισχύει:</p>
			<p><i>αντικείμενα </i><span class="courier-code">str</span> <span class="math-font">≈</span><i> αντικείμενα </i><span class="courier-code">bytes</span><i> και</i></p>
			<p><i>αντικείμενα </i><span class="courier-code">str</span> <span class="math-font">≉ </span><i>αντικείμενα </i><span class="courier-code">Unicode</span></p>
			<p class="no-indent">Στην έκδοση 3.x ισχύει:</p>
			<p><i>αντικείμενα </i><span class="courier-code">str</span> <span class="math-font">≉ </span><i>αντικείμενα </i><span class="courier-code">bytes</span><i> και</i></p>
			<p><i>αντικείμενα </i><span class="courier-code">str</span> <span class="math-font">≈ </span><i>αντικείμενα </i><span class="courier-code">Unicode</span></p>
			<p class="no-indent">Στην επόμενη ενότητα, ακολουθεί περιγραφή των συναρτήσεων <span class="courier-code">str</span> και <span class="courier-code">bytes</span> και, πιο μετά, των μεθόδων τους <span class="courier-code">encode</span> και <span class="courier-code">decode,</span> που μετατρέπουν κείμενο από τη μία μορφή στην άλλη. </p>
			<section role="subsection" id="ch8se6ss1">
				<h1><span role="label">6.6.1</span> Κείμενο τύπου <span class="courier-code">str</span></h1>
				<p class="no-indent">Μια συμβολοσειρά τύπου <span class="courier-code">str</span> μπορεί να δημιουργηθεί είτε με την απευθείας χρήση εισαγωγικών είτε μέσω της συνάρτησης <span class="courier-code">str</span>. Μια χρήση της παρουσιάστηκε στο Κεφάλαιο 2, κατά τη μετατροπή ενός αριθμού σε κείμενο:</p>
				<p><span class="courier-code">&gt;&gt;&gt; str(1.5)</span></p>
				<p><span class="courier-code">&apos;1.5&apos;</span></p>
				<p class="no-indent">Η πλήρης μορφή της <span class="courier-code">str</span> είναι:</p>
				<p><span class="courier-code">str(</span><span class="courier-code">κείμενο, encoding=κωδικοποίηση, errors=σφάλματα)</span></p>
				<p class="no-indent">ή πιο απλά:</p>
				<p><span class="courier-code">str(κείμενο, κωδικοποίηση, σφάλματα)</span></p>
				<p class="no-indent">Σε αυτή την περίπτωση το <span class="courier-code">κείμενο</span> είναι είτε σε απλή μορφή κειμένου μέσα σε διπλά εισαγωγικά είτε σε ειδική μορφή τύπου <span class="courier-code">bytes</span>, οπότε και μπορεί να δοθεί συγκεκριμένη <span class="courier-code">κωδικοποίηση</span> των χαρακτήρων του (για τη μετατροπή από μια μορφή κωδικοποίησης σε άλλη) και μια επιλογή για τον χειρισμό λαθών (<span class="courier-code">σφάλματα</span>) που μπορεί να προκύψουν κατά τη μετατροπή. </p>
				<p>Για παράδειγμα, οι εντολές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; str(&apos;Γεια Python&apos;)</span></p>
				<p><span class="courier-code">&apos;Γεια Python&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s</span><span class="courier-code">=bytes(&apos;Γεια Python&apos;, &apos;utf8&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s</span></p>
				<p><span class="courier-code">b&apos;\xce\x93\xce\xb5\xce\xb9\xce\xb1 Python&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; str(s,&apos;utf8&apos;)</span></p>
				<p><span class="courier-code">&apos;Γεια </span><span class="courier-code">Python&apos;&#9;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s=bytes(&apos;Γεια&apos;, &apos;utf8&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; str(s,&apos;cp737&apos;)</span></p>
				<p><span class="courier-code">&apos;╬Υ╬╡╬╣╬υ&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; str(s,&apos;utf</span><span class="courier-code">16&apos;)</span></p>
				<p><span class="courier-code">&apos;</span>鏎뗎많곎<span class="courier-code">&apos;&#9;</span></p>
				<p class="no-indent">αφού μετατρέψουν το κείμενο <span class="courier-code">&apos;Γεια Python&apos;</span> σε bytes, στη συνέχεια, με τη χρήση της <span class="courier-code">str</span>, μετατρέπεται ξανά σε string. Yπόψη ότι το λεκτικό <span class="courier-code">&apos;Python&apos;</span> δεν μετατρέπεται σε bytes, γιατί αποτελείται από αγγλικούς χαρακτήρες οι οποίοι διαθέτουν κωδικό στον πίνακα ASCII. Οι τελευταίες τρεις εντολές αλλάζουν την κωδικοποίηση του κειμένου και, όπως αναμενόταν, το κείμενο που παράγεται είναι εντελώς διαφορετικό από το αρχικό. Η παρακάτω εντολή όμως θα αποτύχει:</p>
				<p><span class="courier-code">&gt;&gt;&gt; str(s,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">UnicodeDecodeError: &apos;ascii&apos; codec can&apos;t decode byte 0xce in position 0: ordinal not in range(128)</span></p>
				<p class="no-indent">γιατί οι χαρακτήρες με τα ελληνικά δεν υπάρχουν στον πίνακα ASCII (πρώτες 128 θέσεις στον πίνακα Unicode). Για αυτό τον λόγο μπορεί να χρησιμοποιηθεί και το τελευταίο όρισμα (<span class="courier-code">σφάλματα</span>) στην <span class="courier-code">str</span> ως εξής:</p>
				<p><span class="courier-code">&gt;&gt;&gt; str(s,&apos;ascii&apos;,&apos;ignore&apos;)</span></p>
				<p><span class="courier-code">&apos;Python&apos;</span></p>
				<p class="no-indent">Έτσι, με την επιλογή <span class="courier-code">&apos;ignore&apos;</span>, δεν προκύπτει κάποιο σφάλμα, οι μη αποδεκτοί από τον πίνακα ASCII χαρακτήρες αγνοούνται και τα ελληνικά πλέον δεν περιλαμβάνονται στο κείμενο.</p>
				<p>Ο «διακόπτης» για τη διαχείριση σφαλμάτων μετατροπής μπορεί να έχει τις παρακάτω μορφές.</p>
				<figure role="table" id="tb23">
					<figcaption><span role="label">Πίνακας 6-1</span> | Παράμετροι σφαλμάτων – encode</figcaption>
					<table id="table034">
						<tbody>
							<tr>
								<td>
									<p><span class="courier-code">strict</span></p>
								</td>
								<td>
									<p>Είναι η αρχικά επιλεγμένη ρύθμιση. Κάθε αδυναμία μετατροπής προκαλεί σφάλμα τύπου <span class="courier-code">UnicodeDecodeError</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">ignore</span></p>
								</td>
								<td>
									<p>Αγνοούνται οι άγνωστοι χαρακτήρες</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">replace</span></p>
								</td>
								<td>
									<p>Αντικαθιστά άγνωστους χαρακτήρες με το <span class="courier-code">&apos;?&apos;</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">xmlcharrefreplace</span></p>
								</td>
								<td>
									<p>Οι άγνωστοι χαρακτήρες αντικαθίστανται από αναφορές χαρακτήρων <span class="courier-code">XML</span></p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">backslashreplace</span></p>
								</td>
								<td>
									<p>Εισάγει κατάλληλους χαρακτήρες διαφυγής. Προστίθεται μια αναφορά της μορφής <span class="courier-code">\uNNNN</span>&#160;για κάθε χαρακτήρα που δεν μπορεί να αλλάξει</p>
								</td>
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">namereplace</span></p>
								</td>
								<td>
									<p>Εισάγει τον χαρακτήρα διαφυγής <span class="courier-code">\Ν{περιγραφή}</span> που περιέχει την ονομασία του χαρακτήρα στον πίνακα Unicode</p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Οι ίδιες επιλογές είναι διαθέσιμες στις συναρτήσεις <span class="courier-code">bytes</span> και <span class="courier-code">bytearray</span>, καθώς και στις μεθόδους <span class="courier-code">str</span>.<span class="courier-code">encode</span> και <span class="courier-code">bytes</span>.<span class="courier-code">decode</span> (βλ. παρακάτω).</p>
			</section>
			<section role="subsection" id="ch8se6ss2">
				<h1><span role="label">6.6.2</span> Κείμενο τύπου <span class="courier-code">bytes</span> και <span class="courier-code">bytearray</span></h1>
				<p class="no-indent">Εκτός από τον τύπο <span class="courier-code">str</span>, η Python υποστηρίζει δύο ακόμη δομές κειμένου, αυτές των <span class="courier-code">bytes</span> και <span class="courier-code">bytearray</span>. Πρόκειται για κείμενο οι χαρακτήρες του οποίου αναπαρίστανται ως μια ακολουθία από bytes, με τιμές από 0 μέχρι 255, όπως περίπου το κείμενο αποθηκεύεται εσωτερικά στη μνήμη του υπολογιστή. Χρησιμοποιούνται όταν χρειάζεται να γίνει αποθήκευση ή ανάκτηση κειμένου από αρχεία ή ψηφιακές συσκευές και <i>θύρες (sockets)</i> ή μεταφορά του μέσα από δίκτυα. Η διαφορά τους είναι ότι ένα αντικείμενο τύπου <span class="courier-code">bytes</span> είναι αμετάβλητο, ενώ ένα αντικείμενο τύπου <span class="courier-code">bytearray</span> μπορεί να μεταβάλλεται.</p>
				<p>Για τη δημιουργία αντικειμένων τύπου <span class="courier-code">bytes</span> και <span class="courier-code">bytearray</span> χρησιμοποιούνται οι ομώνυμες συναρτήσεις:</p>
				<p><span class="courier-code">bytes(τιμή</span><span class="courier-code">, encoding=κωδικοποίηση, errors=σφάλματα)</span></p>
				<p class="no-indent">και </p>
				<p><span class="courier-code">bytearray(τιμή, encoding=κωδικοποίηση, errors</span><span class="courier-code">=σφάλματα)</span></p>
				<p class="no-indent">Τα ορίσματα είναι ακριβώς τα ίδια με αυτά που δέχεται η συνάρτηση <span class="courier-code">str</span>, ωστόσο η <span class="courier-code">τιμή</span> μπορεί να έχει διάφορες μορφές. Οι τιμές που παίρνει είναι οι ακόλουθες:</p>
				<p class="no-indent"><span class="courier-code"><b>Κείμενο:</b></span> Είναι το κείμενο τύπου <span class="courier-code">str</span> που θα μετατραπεί τελικά σε <span class="courier-code">bytes</span>. Αυτή η τιμή θα πρέπει να συνοδεύεται και με το δεύτερο όρισμα με μια κατάλληλη κωδικοποίηση. Εσωτερικά χρησιμοποιείται η μέθοδος <span class="courier-code">encode</span> του <span class="courier-code">str</span> αντικειμένου ώστε να γίνει η μετατροπή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(&apos;Python&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">b&apos;Python&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; bytearray(&apos;Python&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">b&apos;Python&apos;</span></p>
				<p class="no-indent">Με μια ματιά, δεν φαίνεται να υπάρχει καμία διαφορά στο αποτέλεσμα των δύο παραπάνω εντολών. Ωστόσο, το ένα αποτέλεσμα είναι τύπος <span class="courier-code">bytes</span> και το άλλο είναι <span class="courier-code">bytearray</span>. Η διαφορά βρίσκεται στο γεγονός ότι το πρώτο δεν μπορεί να αλλάξει, ενώ το δεύτερο μπορεί: </p>
				<p><span class="courier-code">&gt;&gt;&gt; s1=bytearray(&apos;Python&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s1[0]=122</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s1</span></p>
				<p><span class="courier-code">bytearray(b&apos;zython&apos;)</span></p>
				<p class="no-indent">Με τη δεύτερη εντολή αλλάζει ο πρώτος χαρακτήρας του κειμένου (στη θέση 0). Το ‘<span class="courier-code">P</span>’ αντικαθίσταται από τον χαρακτήρα ASCII με κωδικό 122 (‘<span class="courier-code">z</span>’). Αντίθετα, η επόμενη προσπάθεια μεταβολής του <span class="courier-code">s2</span>, που είναι αντικείμενο <span class="courier-code">bytes</span>, θα αποτύχει:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s2=bytes(&apos;Python&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s2[0]=ord(&apos;P&apos;)#κωδικός ASCII: 80</span></p>
				<p><span class="courier-code">TypeError: &apos;bytes&apos; object does not support item assignment</span></p>
				<p class="no-indent"><span class="courier-code"><b>Αριθμός</b></span>: Δημιουργείται αντικείμενο τύπου <span class="courier-code">bytes</span> ή <span class="courier-code">bytearray</span> με τόσα μηδενικά byte όσα δηλώνει ο αριθμός που δόθηκε. Θα πρέπει, φυσικά, να είναι ακέραιος αριθμός:</p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(5), bytearray(5)</span></p>
				<p><span class="courier-code">(b&apos;\x00\x00\x00\x00\x</span><span class="courier-code">00&apos;, bytearray(b&apos;\x00\x00\x00\x00\x00&apos;))</span></p>
				<p class="no-indent"><span class="courier-code"><b>Αντικείμενο</b></span>: Μπορεί να δοθεί ως όρισμα κάποιο αντικείμενο που θα μπορεί να αποδώσει ακέραιες τιμές από το 0 εώς το 255 ή κείμενο ASCII. Αυτές θα είναι και οι τιμές του αντικειμένου <span class="courier-code">bytes</span> που θα δημιουργηθεί:</p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(map(ord,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]))&#9;</span><span class="courier60">#Η map επιστρέφει τον κωδικό Unicode</span></p>
				<p><span class="courier-code">b&apos;abc&apos;&#9;</span><span class="courier60">#κάθε χαρακτήρα</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(map(int,[&apos;1&apos;,&apos;12&apos;,&apos;3&apos;]))&#9;</span><span class="courier60">#Η map επιστρέφει κάθε χαρακτήρα</span></p>
				<p><span class="courier-code">b&apos;\x01\x0c\x03&apos;&#9;</span><span class="courier60">#ως ακέραιο αριθμό</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(int(i) for i in [&apos;1&apos;,&apos;12&apos;,&apos;3&apos;])&#9;</span><span class="courier60">#Εδώ δέχεται ένα αντικείμενο</span></p>
				<p><span class="courier-code">b&apos;\</span><span class="courier-code">x01\x0c\x03&apos;&#9;</span><span class="courier60">#τύπου λίστας</span></p>
				<p class="no-indent"><span class="courier-code"><b>Ακολουθία</b></span>: Αν δοθεί ως όρισμα μια ακολουθία ακέραιων αριθμών από το 0 έως το 255, όπως μια λίστα ή ένα σύνολο, τότε δημιουργείται αντικείμενο τύπου <span class="courier-code">bytes</span> (ή <span class="courier-code">bytearray</span>) με αυτές τις τιμές της ακολουθίας. Αν η ακολουθία είναι σύνολο, η σειρά τοποθέτησης των αριθμών θα είναι άγνωστη (βλ. Kεφάλαιο 8 – Σύνολα): </p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes([128,15,255])</span></p>
				<p><span class="courier-code">b&apos;\x80\x0f\xff&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> bytes({128,15,255})</span></p>
				<p><span class="courier-code">b&apos;\x80\xff\x0f&apos;</span></p>
				<p class="no-indent"><span class="courier-code"><b>Τίποτα</b></span>: Αν δεν δοθεί καμία τιμή, τότε δημιουργείται ένα αντικείμενο τύπου <span class="courier-code">bytes</span> (ή <span class="courier-code">bytearray</span>) με μέγεθος 0, χωρίς περιεχόμενο:</p>
				<p><span class="courier-code">&gt;&gt;&gt; bytes(), bytearray()</span></p>
				<p><span class="courier-code">(b&apos;&apos;, bytearray(b&apos;&apos;))</span></p>
				<p class="no-indent">Ένα αντικείμενο τύπου <span class="courier-code">bytearray</span> μπορεί να αλλάξει. Έτσι, ένα στοιχείο του μπορεί να πάρει τιμή με μια εντολή εκχώρησης με κατάλληλη δεικτοδότηση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s=bytearray(&apos;hi&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s</span></p>
				<p><span class="courier-code">bytearray(b&apos;hi&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; s[0]=ord(&apos;H&apos;)</span></p>
				<p class="no-indent">Η <span class="courier-code">ord</span> επιστρέφει τον κωδικό Unicode του χαρακτήρα ‘<span class="courier-code">H</span>’. Έτσι, αλλάζει ο χαρακτήρας στη θέση 0, ενώ το κείμενο γίνεται:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s</span></p>
				<p><span class="courier-code">bytearray(b&apos;Hi&apos;)</span></p>
				<p class="no-indent">Κάτι τέτοιο όμως δεν μπορεί να γίνει με κείμενο τύπου <span class="courier-code">bytes</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; s2=bytes(&apos;Python&apos;,&apos;ascii&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">s2[0]=ord(&apos;H&apos;)</span></p>
				<p><span class="courier-code">...</span> <span class="courier-code">TypeError: &apos;bytes&apos; object does not support item assignment</span></p>
				<p class="no-indent">και εμφανίζεται κατάλληλο μήνυμα σφάλματος.</p>
			</section>
		</section>
		<section role="section" id="ch8se7">
			<h1><span role="label">6.7</span> Μέθοδοι κωδικοποίησης</h1>
			<p class="no-indent">Υπάρχει μια σειρά μεθόδων που μπορούν να αλλάξουν το είδος των δεδομένων μιας συμβολοσειράς, είτε στο πώς αυτή θα εμφανίζεται στην οθόνη είτε και στο τι απεικόνιση των δεδομένων θα περιέχει.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.format()</b></span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">format</span> χρησιμοποιείται για τη μορφοποίηση κειμένου και την ενσωμάτωση σε αυτό άλλων στοιχείων, οποιουδήποτε τύπου, όπως αριθμών ή άλλου κειμένου. Παρουσιάστηκε ήδη στο Κεφάλαιο 2, ενώ σε προηγούμενη παράγραφο έγινε περιγραφή του νεότερου τρόπου μορφοποίησης κειμένου μέσω των <span class="courier-code">fstring</span>. </p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.encode(κωδικοσελίδα [,σφάλμα]) επιστρέφει byte</b></span></p>
			<p class="no-indent">Η <span class="courier-code">encode</span> μετατρέπει το κείμενο με το οποίο συνοδεύεται στη δεκαεξαδική αναπαράσταση κάθε χαρακτήρα, σε μια κωδικοσελίδα, σε επίπεδο byte. Το κείμενο που δημιουργεί είναι τύπου <span class="courier-code">bytes</span>. Δέχεται ως όρισμα μια από τις υποστηριζόμενες από την Python κωδικοποιήσεις<sup class="superscript CharOverride-1"><span id="footnote-034-backlink"><a href="#footnote-034">60</a></span></sup>. Αν δεν δοθεί καμία, χρησιμοποιεί την κωδικοποίηση UTF-8. Η εξ ορισμού μορφή της, αν δεν δοθεί κανένα όρισμα δηλαδή, είναι:</p>
			<p><span class="courier-code">κείμενο</span><span class="courier-code">.encode(encoding=&apos;utf-8&apos;,errors=&apos;strict&apos;)</span> ή</p>
			<p><span class="courier-code">κείμενο.encode( &apos;utf-8&apos;</span><span class="courier-code">,&apos;strict&apos;)</span> ή απλά</p>
			<p><span class="courier-code">κείμενο.encode() </span></p>
			<p class="no-indent">Αν κάποιος χαρακτήρας του κειμένου αντιστοιχεί σε μια από τις πρώτες 127 θέσεις του πίνακα Unicode, και κατά συνέπεια του πίνακα ASCII, και είναι εκτυπώσιμος, τότε εμφανίζεται στο αποτέλεσμα της μεθόδου <span class="courier-code">encode</span>. Διαφορετικά, εμφανίζεται ο δεκαεξαδικός κωδικός του χαρακτήρα σε μια σειρά από bytes, η μορφή και το πλήθος των οποίων εξαρτάται από τη μορφή κωδικοποίησης:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;abc&apos;.encode()</span></p>
			<p><span class="courier-code">b&apos;abc&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;abc~αβγ&apos;.encode()</span></p>
			<p><span class="courier-code">b&apos;abc~\xce\xb1\xce\xb2\xce\xb3&apos;</span></p>
			<p class="no-indent">Το ίδιο κείμενο, αλλά σε διαφορετική κωδικοποίηση, δίνεται στις επόμενες εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;abc~αβγ&apos;</span><span class="courier-code">.encode(&apos;cp737&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~\x98\x99\x9a&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;abc~αβγ&apos;.encode(&apos;cp1253&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~\xe1\xe2\xe</span><span class="courier-code">3&apos;</span></p>
			<p class="no-indent">όπου το γράμμα ‘<span class="courier-code">α</span>’ αντιστοιχεί στον κωδικό <span class="courier-code">\x98 </span>και<span class="courier-code"> \xe1 </span>στις κωδικοσελίδες<span class="courier-code"> cp737 </span>(ή Greek DOS) και <span class="courier-code">cp1253 </span>(ή Windows 1253) αντίστοιχα. </p>
			<p>Στην περίπτωση που ένας χαρακτήρας δεν υπάρχει στη δοσμένη κωδικοποίηση, προκαλείται σφάλμα χρόνου εκτέλεσης και διακόπτεται η εκτέλεση του προγράμματος: </p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;</span><span class="courier-code">abc~αβγ&apos;.encode(&apos;ascii&apos;)</span></p>
			<p><span class="courier-code">...UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in &#9;position 4-6: ordinal not in range(128)</span></p>
			<p class="no-indent">Σε αυτή την περίπτωση, μπορεί να χρησιμοποιηθεί και το δεύτερο όρισμα της <span class="courier-code">encode</span> που είναι υπεύθυνο για τη διαχείριση σφαλμάτων. Οι τιμές που μπορεί να πάρει το όρισμα φαίνονται στον Πίνακα 6-1.</p>
			<p>Έτσι, η τελευταία εντολή μπορεί να δοθεί ως εξής:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;abc~αβγ&apos;.encode(&apos;ascii&apos;,&apos;ignore&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~&apos;</span></p>
			<p class="no-indent">και, άρα, δεν εμφανίζονται οι χαρακτήρες που δεν υπάρχουν στην επιλεγμένη κωδικοποίηση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;abc~αβγ&apos;.encode(&apos;ascii&apos;,&apos;replace&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~???&apos;</span></p>
			<p class="no-indent">Με αυτό τον τρόπο, οι χαρακτήρες που δεν αναγνωρίζονται από την κωδικοποίηση ‘ASCII’ αντικαθίστανται από ένα ‘<span class="courier-code">?</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;abc~αβγ&apos;.encode(&apos;ascii&apos;,&apos;backslashreplace&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~\\u03b1\\u03b2\\u03b3&apos;</span></p>
			<p class="no-indent">όπου το ‘<span class="courier-code">\\</span>’ έχει τοποθετηθεί για να εισαχθεί το ‘<span class="courier-code">\</span>’ ως χαρακτήρας μέσα στο κείμενο. Έτσι, μπορεί να δοθεί ο κωδικός διαφυγής ‘<span class="courier-code">\u</span>‘ και ο αντίστοιχος δεκαεξαδικός αριθμός (‘<span class="courier-code">\u03b1&apos;</span>) του στοιχείου ‘<span class="courier-code">α</span>’ στον πίνακα Unicode: </p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;abc~αβ&apos;.encode(&apos;ascii&apos;,&apos;namereplace&apos;)</span></p>
			<p><span class="courier-code">b&apos;abc~\\N{GREEK SMALL LETTER ALPHA}\\N{GREEK SMALL LETTER BETA}&apos;</span></p>
			<p class="no-indent">Ο κωδικός ‘\<span class="courier-code">Ν</span><span class="courier-code">{…}</span>’ εμφανίζει την περιγραφή του χαρακτήρα ‘<span class="courier-code">α</span>’ στον πίνακα Unicode.</p>
			<p>Η αντίστροφη εργασία γίνεται με τη μέθοδο <span class="courier-code">decode</span> ενός αντικειμένου <span class="courier-code">byte string</span>:</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο bytes.decode(κωδικοσελίδα [,σφάλμα</b></span><span class="courier-code"><b>]) επιστρέφει str</b></span></p>
			<p class="no-indent">Χρησιμοποιεί ίδιο τρόπο σύνταξης και παίρνει ίδιες παραμέτρους με την <span class="courier-code">encode</span>. Το αποτέλεσμα όμως είναι ένα αντικείμενο <span class="courier-code">str</span>. Οι παρακάτω εντολές μετατρέπουν αρχικά ένα κείμενο <span class="courier-code">str</span> σε <span class="courier-code">byte string</span> και αμέσως ξανά σε κανονικό κείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;δοκ.txt&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.encode(&apos;utf8&apos;)</span></p>
			<p><span class="courier-code">b&apos;\xce\xb4\xce\xbf\xce\xba.txt&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t=s.encode(&apos;utf8&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t.decode(&apos;utf8&apos;)</span></p>
			<p><span class="courier-code">&apos;δοκ.txt&apos;</span></p>
			<p class="no-indent">όπου το <span class="courier-code">s</span> είναι αντικείμενο <span class="courier-code">str</span> ενώ το <span class="courier-code">t</span> είναι αντικείμενο <span class="courier-code">bytes</span>.</p>
		</section>
		<section role="section" id="ch8se8">
			<h1><span role="label">6.8</span> Ενσωματωμένες συναρτήσεις</h1>
			<p class="no-indent">Είναι συναρτήσεις έτοιμες για χρήση, διαθέσιμες, συνήθως, για περισσότερα από ένα αντικείμενα. Στις παρακάτω γραμμές περιγράφεται η χρήση τους με αντικείμενα τύπου <span class="courier-code">str</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>repr(αντικείμενο)</b></span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">repr</span> δέχεται ένα αντικείμενο και επιστρέφει την εκτυπώσιμη αναπαράστασή του. Έτσι, το αποτέλεσμα είναι τύπου <span class="courier-code">str</span>. Το τι ακριβώς θα περιέχει αυτή η απεικόνιση εξαρτάται από την κατασκευή και υλοποίηση του αντικειμένου και μπορεί να διαμορφωθεί κατάλληλα. Αυτό γίνεται με τον ορισμό, εσωτερικά –στην ίδια την κλάση του αντικειμένου και στα στιγμιότυπά της–, της μεθόδου __<span class="courier-code">repr</span>__. Περισσότερες όμως λεπτομέρειες για τα αντικείμενα στο Κεφάλαιο 11. Ακολουθούν μερικές περιπτώσεις χρήσης της <span class="courier-code">repr</span> με διαφορετικά αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,c=12,&apos;hi&apos;,[&apos;π&apos;,3.14]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; repr(a), repr(b), repr(c)</span></p>
			<p><span class="courier-code">(&apos;12&apos;, &quot;&apos;hi&apos;&quot;, &quot;[&apos;π&apos;, 3.14]&quot;)</span></p>
			<p class="no-indent"><span class="courier-code"><b>chr(αριθμός)</b></span></p>
			<p class="no-indent"> Η συνάρτηση <span class="courier-code">chr</span>() δέχεται έναν ακέραιο αριθμό από το 0 μέχρι το 1,114,111 που αναπαριστά ένα συγκεκριμένο <i>κωδικό σημείο (code</i><i> point)</i> στον πίνακα Unicode και επιστρέφει τον χαρακτήρα που αντιστοιχεί στον κωδικό. Ο αριθμός μπορεί να δοθεί ως δεκαδικός αλλά και με άλλη μορφή αναπαράστασης (π.χ. δεκαεξαδικός):</p>
			<p><span class="courier-code">&gt;&gt;&gt; chr(945),</span><span class="courier-code"> chr(0x2153)</span></p>
			<p><span class="courier-code">(&apos;α&apos;,&apos;⅓&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; chr(0x2173), chr(0x2163)</span></p>
			<p><span class="courier-code">(&apos;</span>ⅳ<span class="courier-code">&apos;, &apos;</span>Ⅳ<span class="courier-code">&apos;</span><span class="courier-code">)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; chr(0x1fa5), chr(0x20ac)</span></p>
			<p><span class="courier-code">(&apos;ᾥ&apos;, &apos;€&apos;)</span></p>
			<p class="no-indent">Η συνάρτηση επιστρέφει πάντα έναν μόνο χαρακτήρα, δηλαδή ένα αντικείμενο τύπου <span class="courier-code">str</span> με μέγεθος (<span class="courier-code">len</span>) 1.</p>
			<p class="no-indent"><span class="courier-code"><b>ascii(αντικείμενο)</b></span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">ascii</span> δέχεται αντικείμενο που περιέχει κείμενο και επιστρέφει το κείμενο με μια τροποποίηση. Παραμένουν στο κείμενο όσοι χαρακτήρες αντιστοιχούν σε κωδικούς ASCII, ενώ οι υπόλοιποι χαρακτήρες αντικαθίστανται, από τον Unicode κωδικό τους σε δεκαεξαδική μορφή, με έναν από τους χαρακτήρες διαφυγής <span class="courier-code">&apos;</span><span class="courier-code">\x&apos;</span>, <span class="courier-code">&apos;\u&apos;</span> και <span class="courier-code">&apos;\U&apos;</span>. Το αποτέλεσμα της συνάρτησης είναι ένα αντικείμενο τύπου <span class="courier-code">str</span> και αποτελεί την εκτυπώσιμη μορφή του αντικειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; ascii(&apos;P</span><span class="courier-code">ython&apos;)</span></p>
			<p><span class="courier-code">&quot;&apos;Python&apos;&quot;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; ascii(&apos;code:α&apos;)</span></p>
			<p><span class="courier-code">&quot;&apos;code:\\u03b1&apos;&quot;</span></p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p><b>ΣΗΜΕΙΩΣΗ: </b>Ένα χαρακτηριστικό της Python, που συχνά μπερδεύει όσους ασχολούνται πρώτη φορά με τη γλώσσα, είναι ότι διαθέτει διάφορους τρόπους αναπαράστασης της κωδικοποίησης χαρακτήρων. Σε ορισμένα σύμβολα χρησιμοποιείται το <span class="courier-code">&apos;\x&apos;</span> και σε ορισμένα άλλα το <span class="courier-code">&apos;\u&apos;</span> ή το <span class="courier-code">&apos;\U&apos;</span>. Αυτό έχει να κάνει με τον τρόπο που η Python επιλέγει τη μορφή αναπαράστασης του κωδικού κάθε χαρακτήρα. Προκειμένου να είναι πιο αποδοτική η αποθήκευση αυτής της πληροφορίας, η γλώσσα επιλέγει κάθε φορά τον πιο κατάλληλο τρόπο για να ελαχιστοποιήσει το μέγεθος των αποθηκευμένων δεδομένων. Έτσι, για τον χαρακτήρα <span class="courier-code">&apos;©&apos;</span> (κωδικός 169) επιλέγεται η μορφή <span class="courier-code">&apos;</span><span class="courier-code">\xa9&apos;</span>, αφού χρειάζεται μόνο ένα byte πληροφορίας για τον κωδικό, ενώ για το <span class="courier-code">&apos;α&apos;</span> (κωδικός 945) επιλέγεται η μορφή <span class="courier-code">&apos;\u03b1&apos;</span> ώστε να χωρέσει σε 2 bytes τον Unicode κωδικό του.</p>
			</aside>
			<p class="no-indent"><span class="courier-code"><b>ord(χαρακτήρας)</b></span></p>
			<p class="no-indent">Εκτελεί την αντίστροφη διαδικασία σε σχέση με την <span class="courier-code">chr</span>. Δέχεται έναν χαρακτήρα κειμένου και επιστρέφει έναν ακέραιο θετικό αριθμό που αντιπροσωπεύει τον κωδικό του χαρακτήρα στον πίνακα Unicode:</p>
			<p><span class="courier-code">&gt;&gt;&gt; ord(&apos;α&apos;)</span></p>
			<p><span class="courier-code">945</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; [ord(char) for char in s]</span></p>
			<p><span class="courier-code">[112, 121, 116, 104, 111, 110]</span></p>
			<p class="no-indent">Η τελευταία λίστα είναι οι κωδικοί των γραμμάτων της λέξης ‘python’. Αυτή η σύνθεση λίστας σαρώνει το string, χαρακτήρα προς χαρακτήρα, και αποθηκεύει στη λίστα τον κατάλληλο κωδικό.</p>
			<p class="no-indent"><span class="courier-code"><b>reversed(κείμενο)</b></span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">reversed</span> δέχεται ένα αντικείμενο ακολουθίας, όπως <span class="courier-code">str</span>, και επιστρέφει ένα αντικείμενο τύπου <span class="courier-code">reversed</span>, αντιστρέφοντας τα στοιχεία της ακολουθίας. Η παρακάτω εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;&apos;.join(reversed(&apos;python&apos;))</span></p>
			<p><span class="courier-code">&apos;nohtyp&apos;</span></p>
			<p class="no-indent">επιστρέφει το λεκτικό <span class="courier-code">&apos;python&apos;</span> με αντίστροφη σειρά. Το ίδιο βέβαια θα μπορούσε να γίνει και μέσω της διαδικασίας του τεμαχισμού:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;python&apos;[::-1]</span></p>
			<p><span class="courier-code">&apos;nohtyp&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>any(κείμενο)</b></span> και <span class="courier-code"><b>all(κείμενο)</b></span></p>
			<p class="no-indent">Οι συναρτήσεις <span class="courier-code">any</span> και <span class="courier-code">all</span> μπορούν να δεχθούν κείμενο, όπως και άλλα αντικείμενα ακολουθίας. Η μόνη περίπτωση όπου αποδίδεται τιμή <span class="courier-code">False</span> είναι όταν δοθεί ως όρισμα στην <span class="courier-code">any</span> το κενό κείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; any(&apos;&apos;), all(&apos;&apos;)</span></p>
			<p><span class="courier-code">(False, True)</span></p>
			<p class="no-indent">Όλες οι υπόλοιπες (και όχι ιδιαίτερα χρήσιμες) περιπτώσεις αποδίδουν λογικό αποτέλεσμα <span class="courier-code">True</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>min(κείμενο)</b></span> και <span class="courier-code"><b>max(κείμενο)</b></span></p>
			<p class="no-indent">Οι <span class="courier-code">min</span> και <span class="courier-code">max</span> μπορούν να χρησιμοποιηθούν στις περιπτώσεις όπου αναζητείται ο μικρότερος ή ο μεγαλύτερος χαρακτήρας μέσα σε κείμενο. Αυτή η αναζήτηση γίνεται βάσει του κωδικού Unicode κάθε χαρακτήρα του κειμένου. Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">min(s), max(s)</span></p>
			<p><span class="courier-code">(&apos;h&apos;, &apos;y&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; [(char,ord(char)) for char in s]</span></p>
			<p><span class="courier-code">[(&apos;p&apos;, 112), (&apos;y&apos;, 121), (&apos;t&apos;, 116), (&apos;h&apos;, 104), (&apos;o&apos;, 111), (&apos;n&apos;, 110)]</span></p>
			<p class="no-indent"><b>ΣΗΜΕΙΩΣΗ</b>: η συνάρτηση <span class="courier-code">sum</span> δεν δέχεται αντικείμενα <span class="courier-code">str</span>. Για τη συνένωση αλφαριθμητικών η τεκμηρίωση της γλώσσας προτείνει τη χρήση της μεθόδου <span class="courier-code">join</span>.<sup class="superscript CharOverride-1"><span id="footnote-033-backlink"><a href="#footnote-033">61</a></span></sup></p>
			<p class="no-indent"><span class="courier-code"><b>sorted(κείμενο)</b></span></p>
			<p class="no-indent">Η <span class="courier-code">sorted</span> λειτουργεί με αντικείμενα <span class="courier-code">str</span>, όπως και με λίστες. Δέχεται ένα αντικείμενο κειμένου και επιστρέφει μια λίστα με κάθε χαρακτήρα του κειμένου ταξινομημένο σύμφωνα με τη σειρά του στον πίνακα Unicode. Χρησιμοποιείται μαζί με την <span class="courier-code">join</span>, ώστε να επιστρέψει και πάλι κείμενο και όχι λίστα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;No 1: python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; sorted(s)</span></p>
			<p><span class="courier-code">[&apos; &apos;, &apos; &apos;, &apos;1&apos;, &apos;:&apos;, &apos;N&apos;, &apos;h&apos;, &apos;n&apos;, &apos;o&apos;, &apos;o&apos;, &apos;p&apos;, &apos;t&apos;, &apos;y&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;&apos;.join(sorted(s))</span></p>
			<p><span class="courier-code">&apos; 1:Nhnoopty&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>map</b></span><span class="courier-code"><b>(συνάρτηση, κείμενο)</b></span></p>
			<p class="no-indent">Η <span class="courier-code">map</span> λειτουργεί με τον ίδιο τρόπο για όλα τα αντικείμενα ακολουθίας. Δέχεται μια συνάρτηση και τη χρησιμοποιεί επαναληπτικά, σε κάθε στοιχείο της ακολουθίας. Τα αποτελέσματα καταχωρούνται και επιστρέφονται σε νέο αντικείμενο <span class="courier-code">map</span>. Για να εμφανιστούν τα περιεχόμενά του, συνήθως, μετατρέπεται σε άλλη δομή (όπως η λίστα):</p>
			<p><span class="courier-code">&gt;&gt;&gt; list(map(int,&apos;123&apos;))</span></p>
			<p><span class="courier-code">[1, 2, 3]</span></p>
			<p class="no-indent">Το ίδιο θα μπορούσε να γίνει και με σύνθεση λίστας:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> [int(char) for char in &apos;123&apos;]</span></p>
			<p><span class="courier-code">[1, 2, 3]</span></p>
		</section>
		<section role="section" id="ch8se9">
			<h1><span role="label">6.9</span> Χρήση τελεστών σε κείμενο</h1>
			<p class="no-indent">Τα αντικείμενα τύπου <span class="courier-code">str</span> είναι ακολουθίες χαρακτήρων. Έτσι, μπορεί να χρησιμοποιηθούν ως δομικά στοιχεία μιας εντολής <span class="courier-code">for</span>, η οποία θα μπορεί να προσπελάσει τα στοιχεία του κειμένου, χαρακτήρα προς χαρακτήρα, χωρίς να χρειαστεί κάποιου είδους δεικτοδότηση. </p>
			<p>Το επόμενο τμήμα προγράμματος (Λίστα Κώδικα 6-4) σαρώνει το κείμενο, ενώ σε κάθε επανάληψη η μεταβλητή <span class="courier-code">char</span> αποκτά ως τιμή καθέναν από τους χαρακτήρες του κειμένου.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-4 | Προσπέλαση string με <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-6-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Το παραπάνω κομμάτι κώδικα θα εμφανίσει στην οθόνη το κείμενο:</p>
			<p><span class="courier-code">p!y!t!h!o!n!</span></p>
			<p class="no-indent">Χρήση του τελεστή <span class="courier-code">in</span> μπορεί να γίνει και μέσα σε δομές ελέγχου, για να ελεγχθεί αν ένας χαρακτήρας ή τμήμα κειμένου βρίσκεται μέσα σε άλλο χαρακτήρα ή τμήμα. Αν αυτό ισχύει, τότε επιστρέφεται ως αποτέλεσμα η τιμή <span class="courier-code">True</span>. Διαφορετικά, το αποτέλεσμα θα είναι <span class="courier-code">False</span>. Προσοχή χρειάζεται στην περίπτωση πεζών-κεφαλαίων, αφού θεωρούνται διαφορετικοί χαρακτήρες (Λίστα Κώδικα 6-5).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 6-5 | Προσπέλαση string με <span class="courier-code">in</span></figcaption><img src="media/ListaKodika-6-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Άλλοι τελεστές που χρησιμοποιούνται σε κείμενο είναι οι συγκριτικοί ή σχεσιακοί (<span class="courier-code">&gt;</span>, <span class="courier-code">&lt;</span>, <span class="courier-code">&lt;=</span>, <span class="courier-code">&gt;=</span>, <span class="courier-code">==</span>, <span class="courier-code">!=</span>) και οι αριθμητικοί τελεστές ‘<span class="courier-code">+</span>’ και ‘<span class="courier-code">*</span>’ που όταν χρησιμοποιούνται με κείμενο, και όχι με αριθμούς, αλλάζει ο ρόλος τους πραγματοποιώντας συνένωση και επανάληψη κειμένου αντίστοιχα. Ακολουθούν παραδείγματα στη Λίστα Κώδικα 6-6.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 6-6 | Τελεστές σε κείμενο</figcaption><img src="media/ListaKodika-6-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Ιδιαίτερη προσοχή χρειάζεται όταν γίνονται συγκρίσεις χαρακτήρων, γιατί η Python χρησιμοποιεί την κωδικοποίηση σε <span class="courier-code">bytes</span> με την οποία αναπαριστά εσωτερικά, στη μνήμη του υπολογιστή, κάθε χαρακτήρα σύμφωνα με την κωδικοποίηση Unicode. Το ίδιο ισχύει και στην ταξινόμηση είτε κειμένου, είτε κάποιας άλλης δομής που περιέχει κείμενο (π.χ. λίστα με <span class="courier-code">strings</span>). Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> sorted([&apos;Καϊλόπουλος&apos;,&apos;Καισόπουλος&apos;,&apos;Καΐτος&apos;])</span></p>
			<p><span class="courier-code">[&apos;Καΐτος&apos;, &apos;Καισόπουλος&apos;, &apos;Καϊλόπουλος&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">ord(&apos;ΐ&apos;),ord(&apos;ϊ&apos;),ord(&apos;ι&apos;)</span></p>
			<p><span class="courier-code">(912, 970, 953)</span></p>
			<p class="no-indent">όπου ο κωδικός των χαρακτήρων <span class="courier-code">&apos;ΐ&apos;</span>, <span class="courier-code">&apos;</span><span class="courier-code">ϊ&apos;</span> και <span class="courier-code">&apos;ι&apos;</span> επηρεάζει τη σειρά κατάταξης κάθε ονόματος. Οι Unicode κωδικοί που εμφανίζονται με τη συνάρτηση <span class="courier-code">ord</span> δείχνουν τη σειρά με την οποία κατατάσσονται τελικά τα ονόματα. Η σύγκριση γίνεται ανά χαρακτήρα. Αφού τα πρώτα δύο γράμματα είναι ίδια (‘<span class="courier-code">Κα</span>’), η σειρά κατάταξης επηρεάζεται από τον τρίτο χαρακτήρα και τον αντίστοιχο Unicode κωδικό τους. Αυτό διορθώνεται με κατάλληλη τροποποίηση τέτοιων χαρακτήρων, όπως φαίνεται στη συνέχεια του κεφαλαίου.</p>
		</section>
		<section role="section" id="ch8se10">
			<h1><span role="label">6.10</span> Δεικτοδότηση</h1>
			<p class="no-indent">Η προσπέλαση των χαρακτήρων ενός κειμένου γίνεται, όπως και στη λίστα, με τη χρήση ενός ακέραιου δείκτη μέσα σε αγκύλες. Η αρίθμηση ξεκινά από το 0, και δηλώνει τον 1ο χαρακτήρα του κειμένου, ενώ είναι δυνατή η χρήση δείκτη με αρνητικές τιμές, για να δηλώσει την πρόσβαση στο κείμενο από το τέλος προς την αρχή. Ορισμένα παραδείγματα παρουσιάζονται στη Λίστα Κώδικα 6-7.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 6-7 | Δεικτοδότηση string</figcaption><img src="media/ListaKodika-6-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Ο τεμαχισμός ισχύει και στην περίπτωση του κειμένου, όπως ακριβώς ισχύει και στις λίστες ή τις πλειάδες. Χρησιμοποιούνται τρεις δείκτες: αρχή, τέλος και βήμα. Ορισμένα παραδείγματα παρουσιάζονται στη Λίστα Κώδικα 6-8.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 6-8 | Τεμαχισμός string</figcaption><img src="media/ListaKodika-6-8_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 2</b>: Εμφανίζονται οι χαρακτήρες από την αρχή μέχρι και τον χαρακτήρα στη θέση 7.</p>
			<p class="no-indent"><b>Γραμμή 4</b>: Επιλέγονται οι χαρακτήρες από τη θέση 4 έως και τη θέση 7.</p>
			<p class="no-indent"><b>Γραμμή 6</b>: Δημιουργείται κείμενο που περιέχει κάθε χαρακτήρα από την αρχή μέχρι τη θέση 7 ανά δύο.</p>
			<p class="no-indent"><b>Γραμμή 8</b>: Επιστρέφει κείμενο που περιέχει χαρακτήρες από τη θέση 10 έως το τέλος ανά δύο.</p>
			<p class="no-indent"><b>Γραμμή 12</b>: Αντιστρέφεται το κείμενο.</p>
			<p class="no-indent"><b>Γραμμή 14</b>: Απλός τρόπος ελέγχου παλίνδρομου κειμένου.</p>
			<p class="no-indent"><b>Γραμμή 16</b>: Επιλέγεται το κομμάτι εκείνο από τη θέση 5 πριν το τέλος μέχρι το τέλος.</p>
			<p class="no-indent"><b>Γραμμή 18</b>: Όταν ο 3ος δείκτης (βήμα) είναι αρνητικός, η σάρωση του κειμένου γίνεται από δεξιά προς τα αριστερά (ανάποδα). Η συγκεκριμένη εντολή δεν επιστρέφει τίποτα (επιστρέφει δηλαδή το κενό), γιατί ο δείκτης έναρξης (1) είναι ήδη μικρότερος από τον δείκτη τέλους (5).</p>
			<p class="no-indent"><b>Γραμμή 24</b>: Επιλέγονται οι αριθμοί που βρίσκονται στις άρτιες θέσεις, γίνονται ακέραιοι (η <span class="courier-code">map</span> εφαρμόζει τη συνάρτηση <span class="courier-code">int</span> σε κάθε στοιχείο του <span class="courier-code">digits</span> και τους μετατρέπει σε ακέραιους αριθμούς) και καταχωρούνται σε μια λίστα που εμφανίζεται στην οθόνη.</p>
			<p class="no-indent"><b>Γραμμή 26</b>: Τα αντικείμενα τύπου <span class="courier-code">str</span> είναι αμετάβλητα. Έτσι, οποιαδήποτε προσπάθεια αλλαγής του περιεχομένου τους αποτυγχάνει, εμφανίζοντας κατάλληλο μήνυμα. Αν πρέπει να αλλάξει το περιεχόμενο μιας μεταβλητής που περιέχει κείμενο, τότε θα πρέπει αυτή η μεταβλητή να πάρει νέα τιμή μέσω μιας νέας εντολής εκχώρησης (γραμμή 28), χωρίς να κοστίσει πολύ κάτι τέτοιο σε μνήμη ή χρόνο εκτέλεσης.</p>
		</section>
		<section role="section" id="ch8se11">
			<h1><span role="label">6.11</span> Μέθοδοι χειρισμού <span class="courier-code">String</span></h1>
			<p class="no-indent">Κάθε αντικείμενο τύπου <span class="courier-code">str</span> ενσωματώνει σειρά από βοηθητικές λειτουργίες που ονομάζονται μέθοδοι. Ο τρόπος χρήσης αυτών των μεθόδων γενικά είναι:</p>
			<p><span class="courier-code">κείμενο.</span><span class="courier-code">μέθοδος(ορίσματα)</span></p>
			<p class="no-indent">Ο Πίνακας 6-2 περιλαμβάνει τις μεθόδους που είναι διαθέσιμες για κάθε αντικείμενο τύπου <span class="courier-code">str</span>.</p>
			<figure role="table" id="tb24">
				<figcaption><span role="label">Πίνακας 6-2</span> | Μέθοδοι κειμένου</figcaption>
				<table id="table035">
					<tbody>
						<tr>
							<td>
								<p><span class="courier-code">capitalize</span></p>
							</td>
							<td>
								<p><span class="courier-code">format</span></p>
							</td>
							<td>
								<p><span class="courier-code">isidentifier</span></p>
							</td>
							<td>
								<p><span class="courier-code">ljust</span></p>
							</td>
							<td>
								<p><span class="courier-code">rjust</span></p>
							</td>
							<td>
								<p><span class="courier-code">swapcase</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">casefold</span></p>
							</td>
							<td>
								<p><span class="courier-code">format_map</span></p>
							</td>
							<td>
								<p><span class="courier-code">islower</span></p>
							</td>
							<td>
								<p><span class="courier-code">lower</span></p>
							</td>
							<td>
								<p><span class="courier-code">rpartition</span></p>
							</td>
							<td>
								<p><span class="courier-code">title</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">center</span></p>
							</td>
							<td>
								<p><span class="courier-code">index</span></p>
							</td>
							<td>
								<p><span class="courier-code">isnumeric</span></p>
							</td>
							<td>
								<p><span class="courier-code">lstrip</span></p>
							</td>
							<td>
								<p><span class="courier-code">rsplit</span></p>
							</td>
							<td>
								<p><span class="courier-code">translate</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">count</span></p>
							</td>
							<td>
								<p><span class="courier-code">isalnum</span></p>
							</td>
							<td>
								<p><span class="courier-code">isprintable</span></p>
							</td>
							<td>
								<p><span class="courier-code">maketrans</span></p>
							</td>
							<td>
								<p><span class="courier-code">rstrip</span></p>
							</td>
							<td>
								<p><span class="courier-code">upper</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">encode</span></p>
							</td>
							<td>
								<p><span class="courier-code">isalpha</span></p>
							</td>
							<td>
								<p><span class="courier-code">isspace</span></p>
							</td>
							<td>
								<p><span class="courier-code">partition</span></p>
							</td>
							<td>
								<p><span class="courier-code">split</span></p>
							</td>
							<td>
								<p><span class="courier-code">zfill</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">endswith</span></p>
							</td>
							<td>
								<p><span class="courier-code">isascii</span></p>
							</td>
							<td>
								<p><span class="courier-code">istitle</span></p>
							</td>
							<td>
								<p><span class="courier-code">replace</span></p>
							</td>
							<td>
								<p><span class="courier-code">splitlines</span></p>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">expandtabs</span></p>
							</td>
							<td>
								<p><span class="courier-code">isdecimal</span></p>
							</td>
							<td>
								<p><span class="courier-code">isupper</span></p>
							</td>
							<td>
								<p><span class="courier-code">rfind</span></p>
							</td>
							<td>
								<p><span class="courier-code">startswith</span></p>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">find</span></p>
							</td>
							<td>
								<p><span class="courier-code">isdigit</span></p>
							</td>
							<td>
								<p><span class="courier-code">join</span></p>
							</td>
							<td>
								<p><span class="courier-code">rindex</span></p>
							</td>
							<td>
								<p><span class="courier-code">strip</span></p>
							</td>
							<td>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Στη συνέχεια περιγράφονται οι μέθοδοι κειμένου ανά κατηγορία.</p>
		</section>
		<section role="section" id="ch8se12">
			<h1><span role="label">6.12</span> Μέθοδοι γραμμάτων</h1>
			<p class="no-indent">Αυτές οι μέθοδοι εφαρμόζονται σε κείμενο Unicode που περιέχει γράμματα. Αν υπάρχουν άλλοι χαρακτήρες (αριθμοί ή σύμβολα), αυτοί δεν επηρεάζονται από την εφαρμογή των μεθόδων.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.capitalize()</b></span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">capitalize</span> μετατρέπει σε κεφαλαίο το 1ο γράμμα του κειμένου και τα υπόλοιπα γράμματα παραμένουν ή μετατρέπονται σε πεζά.</p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&quot;δοκιμαστικό κείμενο&quot;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.capitalize()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s</span></p>
			<p><span class="courier-code">&apos;Δοκιμαστικό κείμενο&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;</span><span class="courier-code">άλγεβρα, Άννα, ΒΑΘΜΟΣ 8&apos;.capitalize()</span></p>
			<p><span class="courier-code">&apos;Άλγεβρα, άννα, βαθμος 8&apos;</span></p>
			<p class="no-indent">Όπως βλέπουμε, όλες οι μέθοδοι εφαρμόζονται είτε κατευθείαν σε κείμενο είτε σε μεταβλητή τύπου κειμένου. Στην 1η εντολή, ο πρώτος χαρακτήρας μετατρέπεται σε κεφαλαίο. Στη 2η εντολή, συμβαίνει το ίδιο και ταυτόχρονα μετατρέπονται σε πεζά όλα τα υπόλοιπα γράμματα. Σε κάθε περίπτωση, διατηρείται ο τόνος όπου υπάρχει, ενώ το ‘<span class="courier-code">Σ</span>’ μετατρέπεται σε ‘<span class="courier-code">ς</span>’.</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;&quot;εδώ&quot;… φώναξε&apos;.capitalize()</span></p>
			<p><span class="courier-code">&apos;&quot;εδώ&quot;</span><span class="courier-code">… φώναξε&apos;</span></p>
			<p class="no-indent">Το παραπάνω κείμενο δεν αλλάζει, γιατί ο 1ος χαρακτήρας είναι το ‘<span class="courier-code">&quot;</span>’ και όχι το ‘<span class="courier-code">ε</span>’.</p>
			<p><span class="courier-code">&gt;&gt;&gt; txt=&apos;</span><span class="courier-code">ο τίτλος μου&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">id(txt)</span></p>
			<p><span class="courier-code">2227107378760</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; txt=txt.capitalize()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">id(txt)</span></p>
			<p><span class="courier-code">2227108706488</span></p>
			<p class="no-indent">Όλες οι μέθοδοι που τροποποιούν κείμενο δεν αλλάζουν το αρχικό αλλά δημιουργούν καινούργιο. Αυτό είναι επόμενο, γιατί τα αντικείμενα τύπου <span class="courier-code">str</span> είναι αμετάβλητα και δεν αλλάζουν. Το αρχικό κείμενο αλλάζει μόνο με νέα εκχώρηση. Στην πιο πάνω εντολή, η μέθοδος ενεργεί στο αντικείμενο <span class="courier-code">txt</span>, μετατρέπει το περιεχόμενό του και το επιστρέφει στην ίδια μεταβλητή ως νέο αντικείμενο με νέα τιμή. Αυτό φαίνεται και από το νέο <span class="courier-code">id</span> που αποκτά η μεταβλητή <span class="courier-code">txt</span>.</p>
			<p><span class="courier-code">&gt;&gt;&gt; txt </span></p>
			<p><span class="courier-code">&apos;O τίτλος μου&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(txt)</span></p>
			<p><span class="courier-code">O τίτλος μου</span></p>
			<p class="no-indent">Με την 1η εντολή εμφανίζεται στην κονσόλα το περιεχόμενο της μεταβλητής μαζί με τα εισαγωγικά, ενώ μέσω της <span class="courier-code">print</span> εμφανίζεται μόνο το περιεχόμενό της.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.upper() και κείμενο.lower() </b></span></p>
			<p class="no-indent">Δύο ακόμη μέθοδοι οι οποίες αλλάζουν τη μορφή κειμένου που περιέχει γράμματα είναι οι <span class="courier-code">upper</span> και <span class="courier-code">lower</span>. Όπως υποδηλώνει και το όνομά τους, η <span class="courier-code">upper</span> μετατρέπει πεζά γράμματα σε κεφαλαία και η <span class="courier-code">lower</span> το ανάποδο. Οι παρακάτω εντολές χρησιμοποιούν τη <span class="courier-code">lower</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s</span><span class="courier-code">=&apos;ΣΟΣ&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.lower()</span></p>
			<p><span class="courier-code">&apos;σος&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;ΊΣΟΣ ΠΡΟΣ ΙΣΟΝ&apos;.lower()</span></p>
			<p><span class="courier-code">&apos;ίσος προς ίσον&apos;</span></p>
			<p class="no-indent">Οι εντολές μετατρέπουν όλα τα γράμματα σε πεζά, κρατώντας τον τόνο όπου υπάρχει και μετατρέποντας, κατάλληλα, το ‘<span class="courier-code">Σ</span>’ σε ‘<span class="courier-code">σ</span>’ ή ‘<span class="courier-code">ς</span>’. Η επόμενη εντολή χρησιμοποιεί την <span class="courier-code">upper</span>: </p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;προσοχή!!!&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.upper()</span></p>
			<p><span class="courier-code">&apos;ΠΡΟΣΟΧΉ!!!&apos;</span></p>
			<p class="no-indent">Η <span class="courier-code">upper</span> μετατρέπει κάθε χαρακτήρα στον αντίστοιχο κεφαλαίο του. Οι τόνοι παραμένουν κατά τη μετατροπή. Αυτό όμως πολλές φορές δεν είναι επιθυμητό. Η παράλειψη των τόνων μπορεί να γίνει γράφοντας λίγο περισσότερο πηγαίο κώδικα. Υπάρχουν αρκετοί τρόποι για να γίνει κάτι τέτοιο. Παρατίθενται δύο: Ο ένας απαιτεί τη χρήση της βιβλιοθήκης <span class="courier-code">unicodedata </span>(Λίστα Κώδικα 6-9), ενώ ο δεύτερος προϋποθέτει καλή οργάνωση των δεδομένων. </p>
			<img src="media/icon-10_fmt.png" alt=""/>
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-9 | Χρήση της unicodedata<sup class="superscript CharOverride-1"><span id="footnote-032-backlink"><a href="#footnote-032">62</a></span></sup></figcaption><img src="media/ListaKodika-6-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πακέτο <span class="courier-code">unicodedata</span> περιλαμβάνει μια σειρά από συναρτήσεις για την κανονικοποίηση κειμένου με διάφορους τρόπους (<span class="courier-code">NFD</span>, <span class="courier-code">NFC</span>, <span class="courier-code">NFKD</span>) και επιλογές μορφοποίησης (<span class="courier-code">&apos;</span><span class="courier-code">Mn&apos;)</span><sup class="superscript CharOverride-1"><span id="footnote-031-backlink"><a href="#footnote-031">63</a></span></sup><span class="courier-code">.</span> </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-10 | Αντικατάσταση τόνων</figcaption><img src="media/ListaKodika-6-10_fmt.png" alt=""/>
				<footer>
					<p class="figure-notes">* Ο χαρακτήρας ‘<span class="courier-code">_</span>’ χρησιμοποιείται στις περιπτώσεις όπου η χρήση μεταβλητής δεν είναι απαραίτητη ή, πολύ απλά, όταν το αποτέλεσμα δεν πρόκειται να χρησιμοποιηθεί πουθενά.</p>
				</footer>
			</figure>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.swapcase()</b></span></p>
			<p class="no-indent">Για την αλλαγή των πεζών σε κεφαλαία και το ανάποδο, χρησιμοποιείται η <span class="courier-code">swapcase</span>. Η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &quot;Δ</span><span class="courier-code">οκιμαστικό Kείμενο #1&quot;. swapcase()</span></p>
			<p><span class="courier-code">&apos;δΟΚΙΜΑΣΤΙΚΌ κΕΊΜΕΝΟ #1&apos;</span></p>
			<p class="no-indent">εναλλάσσει πεζά και κεφαλαία γράμματα του κειμένου, αγνοώντας τα υπόλοιπα σύμβολα (‘<span class="courier-code">#1</span>’).</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.title()</b></span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">title</span> μετατρέπει το 1ο γράμμα κάθε λέξης του κειμένου σε κεφαλαίο και τα υπόλοιπα σε πεζά. Οι λέξεις μέσα στο κείμενο εντοπίζονται μετά από διαδοχικά κενά: </p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;</span><span class="courier-code">μαθαίνω PYTHON&apos;.title()</span></p>
			<p><span class="courier-code">&apos;Μαθαίνω Python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;pi (π)= 3.14&apos;.title()</span></p>
			<p><span class="courier-code">&apos;Pi (Π)= 3.14&apos;</span></p>
		</section>
		<section role="section" id="ch8se13">
			<h1><span role="label">6.13</span> Μέθοδοι στοίχισης</h1>
			<p class="no-indent">Η στοίχιση κειμένου στην Python γίνεται με τέσσερις μεθόδους. Οι <span class="courier-code">center</span>, <span class="courier-code">rjust</span> και <span class="courier-code">ljust</span> στοιχίζουν το κείμενο στο κέντρο, δεξιά και αριστερά αντίστοιχα. Η <span class="courier-code">zfill</span> στοιχίζει το κείμενο δεξιά και τα υπόλοιπα, προς τα αριστερά, κενά τα γεμίζει με τον χαρακτήρα ‘0’. Όλες οι μέθοδοι δέχονται ως όρισμα έναν ακέραιο αριθμό ο οποίος δηλώνει το πλήθος των χαρακτήρων που θα περιέχει το νέο, στοιχισμένο, κείμενο.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.στοίχιση(αριθμός)</b></span></p>
			<p class="no-indent">Το πλήθος των χαρακτήρων του κειμένου συμπεριλαμβάνεται στον αριθμό που ορίζει το τελικό μέγεθος του κειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Κείμενο&apos;.center(20)</span></p>
			<p><span class="courier-code">&apos;      Κείμενο      &apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Κείμενο&apos;.rjust(20)</span></p>
			<p><span class="courier-code">&apos;            Κείμενο&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Κείμενο&apos;.ljust(20)</span></p>
			<p><span class="courier-code">&apos;Κείμενο            &apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; str(6).zfill(10)</span></p>
			<p><span class="courier-code">&apos;0000000006&apos;</span></p>
			<p class="no-indent">Η τελευταία εντολή ξεκινάει με τη μετατροπή ενός αριθμού σε string το οποίο τελικά θα αποτελέσει και αντικείμενο εφαρμογής της <span class="courier-code">zfill</span>. Η κλήση διαδοχικών μεθόδων ή/και συναρτήσεων γίνεται από αριστερά προς τα δεξιά: πρώτα εφαρμόζεται η <span class="courier-code">str</span> σε έναν ακέραιο (το 6), ώστε να μετατραπεί αυτός σε string, και μετά εφαρμόζεται σε αυτό η μέθοδος <span class="courier-code">zfill</span>.</p>
		</section>
		<section role="section" id="ch8se14">
			<h1><span role="label">6.14</span> Μέθοδοι ελέγχου</h1>
			<p class="no-indent">Υπάρχουν μέθοδοι που ελέγχουν αν το περιεχόμενο ενός string είναι συγκεκριμένου είδους. Έτσι, δεν χρειάζεται να γίνονται πολύπλοκοι λογικοί έλεγχοι χαρακτήρα προς χαρακτήρα, με επαναληπτικές διαδικασίες για το τι είδους δεδομένα υπάρχουν σε μια συμβολοσειρά. Η Python δίνει σε κάθε αντικείμενο τύπου <span class="courier-code">str</span> μια σειρά από μεθόδους που μπορούν να ελέγξουν αν το αντικείμενο περιέχει γράμματα, αριθμούς, εκτυπώσιμους χαρακτήρες και αρκετά άλλα. Η τιμή που επιστρέφει μια τέτοια μέθοδος είναι λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Πιο αναλυτικά:</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isalnum()</b></span></p>
			<p class="no-indent">Ελέγχει αν το κείμενο αποτελείται μόνο από γράμματα ή/και νούμερα (<i>αλφαριθμητικό, alphanumeric</i>). Σε αυτή την περίπτωση επιστρέφει τη λογική τιμή <span class="courier-code">True</span>. Αν υπάρχει έστω και ένας διαφορετικός χαρακτήρας (π.χ. ένα κενό ή κάποιο άλλο σύμβολο), τότε επιστρέφει την τιμή <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;datafile02&apos;.isalnum()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;data file-02&apos;.isalnum()</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;user03&apos;.isalnum()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;new user&apos;.isalnum()</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isalpha()</b></span></p>
			<p class="no-indent">Αυτή η μέθοδος επιστρέφει <span class="courier-code">True</span> αν όλοι οι χαρακτήρες του κειμένου είναι γράμματα από κάποιο αλφάβητο. Αν υπάρχει έστω και ένας χαρακτήρας άλλου τύπου (σημεία στίξης, κενά, αριθμοί ή άλλα σύμβολα), επιστρέφει την τιμή <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; name=&apos;Άννα&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> name.isalpha()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; username=&apos;user03&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; username.isalpha()</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isprintable()</b></span></p>
			<p class="no-indent">Γίνεται έλεγχος αν όλοι οι χαρακτήρες μέσα στο κείμενο είναι εκτυπώσιμοι. Αν υπάρχει κάποιος μη εκτυπώσιμος χαρακτήρας, όπως χαρακτήρας διαφυγής, τότε η μέθοδος επιστρέφει <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; txt=&apos;line 1\nline 2&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; txt.isprintable()</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;code#A2_&apos;. Isprintable()</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isspace()</b></span></p>
			<p class="no-indent">Ελέγχεται εάν το κείμενο περιέχει μόνο κενά, οπότε επιστρέφεται η τιμή <span class="courier-code">True</span>. Αν υπάρχει ένας οποιοσδήποτε άλλος χαρακτήρας μέσα στο κείμενο, επιστρέφεται η τιμή <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos; &apos;.isspace(), &apos;&apos;.isspace()</span></p>
			<p><span class="courier-code">(True, False)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos; &quot; &quot; &apos;.isspace()</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;\u0020&apos;.isspace()</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Το <span class="courier-code">&apos;\u0020&apos;</span> είναι ο Unicode δεκαεξαδικός αριθμός για τον κενό χαρακτήρα.</p>
			<p>Για τον αντίστροφο έλεγχο, για το αν υπάρχει δηλαδή έστω και ένα κενό μέσα σε κείμενο, απαιτείται λογικός έλεγχος με την <span class="courier-code">if</span> (Λίστα Κώδικα 6-11).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-11 | Έλεγχος για κενά</figcaption><img src="media/ListaKodika-6-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Η 1η <span class="courier-code">if</span> θα εκτελεστεί αν το <span class="courier-code">s</span> περιέχει μόνο κενούς χαρακτήρες, ενώ η 2η αν υπάρχει έστω και ένα μόνο κενό μέσα στο <span class="courier-code">s</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.title()</b></span></p>
			<p class="no-indent">Ένα κείμενο θεωρείται τίτλος αν το 1ο γράμμα κάθε λέξης είναι κεφαλαίο. Αν αυτό ισχύει, η μέθοδος <span class="courier-code">istitle</span> επιστρέφει <span class="courier-code">True</span>. Σε κάθε άλλη περίπτωση επιστρέφει <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;Το Νο 1&apos;.istitle()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;#Βιβλίο 128&apos;.istitle()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;Ο 1ος </span><span class="courier-code">Τίτλος&apos;.istitle()</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.islower()</b></span> και<span class="courier-code"> </span><span class="courier-code"><b>κείμενο.isupper()</b></span></p>
			<p class="no-indent">Οι δύο αυτές μέθοδοι ελέγχουν αν στο κείμενό τους υπάρχουν μόνο πεζά (<span class="courier-code">islower</span>) ή μόνο κεφαλαία (<span class="courier-code">isupper</span>) γράμματα, οπότε επιστρέφουν την τιμή <span class="courier-code">True</span>. Αν κάτι τέτοιο δεν ισχύει, επιστρέφουν <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;ΕΠΩΝΥΜΙΑ ΕΤΑΙΡΕΙΑΣ&apos;.isupper()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;user_a&apos;.islower()</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;#123!&apos;.isupper(), &apos;#123!&apos;.islower()</span></p>
			<p><span class="courier-code">(False, False)</span></p>
			<p class="no-indent">Η τελευταία εντολή αποτυγχάνει και στην περίπτωση του <span class="courier-code">islower</span> και στην περίπτωση του <span class="courier-code">isupper</span>, γιατί το κείμενο δεν περιέχει κανένα γράμμα.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isidentifier()</b></span></p>
			<p class="no-indent">Γίνεται έλεγχος αν το περιεχόμενο του κειμένου είναι έγκυρη ονομασία για κάποιο αναγνωριστικό της γλώσσας ή όχι. Επιστρέφει την τιμή <span class="courier-code">True</span> αν το κείμενο ακολουθεί τους κανόνες ονοματοδοσίας της Python (βλ. Κεφάλαιο 2), ή <span class="courier-code">False</span> σε κάθε άλλη περίπτωση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;1x&apos;.isidentifier()</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;x1&apos;.isidentifier(), &apos;χ1&apos;.isidentifier</span><span class="courier-code">()</span></p>
			<p><span class="courier-code">(True, True)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;_x1&apos;.isidentifier(), &apos;x1$&apos;.isidentifier()</span></p>
			<p><span class="courier-code">(True, False)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;sum&apos;.isidentifier()</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.isdigit()</b></span>, <span class="courier-code"><b>κείμενο.isdecimal()</b></span> και<span class="courier-code"> </span><span class="courier-code"><b>κείμενο.isnumeric()</b></span></p>
			<p class="no-indent">Και οι τρεις μέθοδοι ελέγχουν αν το περιεχόμενο ενός κειμένου αφορά αριθμητικά δεδομένα ή όχι. Καθεμία από αυτές περιλαμβάνει συγκεκριμένους χαρακτήρες Unicode που μπορεί να θεωρηθούν ως αριθμοί. Τα σύνολα των συμβόλων που αναγνωρίζει κάθε μέθοδος συνδέονται μεταξύ τους με την παρακάτω σχέση:</p>
			<p><span class="math-font">{</span><span class="courier-code">isdecimal</span><span class="math-font">}⊂{</span><span class="courier-code">isdigit</span><span class="math-font">}⊂ {</span><span class="courier-code">isnumeric</span><span class="math-font">}</span></p>
			<img src="media/icon-10_fmt.png" alt=""/>
			<p class="no-indent">Στον Πίνακα 6-3<sup class="superscript CharOverride-1"><span id="footnote-030-backlink"><a href="#footnote-030">64</a></span></sup> δίνονται μερικές περιπτώσεις συμβόλων που αναγνωρίζονται ως αριθμοί από καθεμιά από τις μεθόδους αυτές.</p>
			<figure role="table" id="tb25">
				<figcaption><span role="label">Πίνακας 6-3</span> | <span class="courier-code">isdecimal</span> vs <span class="courier-code">isdigit</span> vs <span class="courier-code">isnumeric</span></figcaption>
				<table id="table036">
					<tbody>
						<tr>
							
								<th class="indd_tables-header ParaOverride-1"><span class="courier-code"><b>s.isdecimal()</b></span></th>
							
							
								<th class="indd_tables-header ParaOverride-1"><span class="courier-code"><b>s.isdigit()</b></span></th>
							
							
								<th class="indd_tables-header ParaOverride-1"><span class="courier-code"><b>s.i</b></span><span class="courier-code"><b>snumeric()</b></span></th>
							
							
								<th class="indd_tables-header ParaOverride-1"><span class="courier-code"><b>Τιμές του s</b></span></th>
							
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-10 _idGenCellOverride-2">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10 _idGenCellOverride-2">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10 _idGenCellOverride-2">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10 _idGenCellOverride-2">
								<p><span class="courier-code">&quot;0123&quot;, &quot;&#x1d7d8;&#x1d7d9;&#x1d7da;&#x1d7db;&quot;, </span><span class="courier-code">&quot;༠༡༢༣&quot;*</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">&quot;⁰¹²³&quot;, &quot;⓵⓶⓷&quot;, </span><span class="courier-code">&quot;₀₁₂₃&quot;</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">True</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">&quot;½⅓¼&quot;, &quot;ⅣⅤ&quot;,</span></p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">False</span></p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-10">
								<p><span class="courier-code">&quot;π&quot;, &quot;3.14&quot;</span></p>
							</td>
						</tr>
					</tbody>
				</table>
				<footer>
					<p class="table-notes">* Unicode TIBETAN DIGIT.</p>
				</footer>
			</figure>
		</section>
		<section role="section" id="ch8se15">
			<h1><span role="label">6.15</span> Μέθοδοι αναζήτησης</h1>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.find(κείμενο2[,αρχή, τέλος])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">find</span> αναζητά το <span class="courier-code">κείμενο2</span> μέσα στο κείμενό της και επιστρέφει τη θέση όπου βρίσκεται. Αν το <span class="courier-code">κείμενο2</span> δεν υπάρχει, επιστρέφει την τιμή <span class="courier-code">-1</span>. Αν το <span class="courier-code">κείμενο2</span> υπάρχει πολλές φορές μέσα στο <span class="courier-code">κείμενο</span>, επιστρέφεται η θέση όπου εντοπίστηκε την 1η φορά. Στην αναζήτηση γίνεται διάκριση μεταξύ πεζών και κεφαλαίων. Η μέθοδος <span class="courier-code">find</span> μπορεί να δεχθεί δύο ακόμη ορίσματα που προσδιορίζουν την περιοχή αναζήτησης μέσα στο κείμενο. Το 1ο όρισμα καθορίζει την αρχή και το 2ο το τέλος του τμήματος του κειμένου όπου θα γίνει η αναζήτηση. Τα ορίσματα αυτά δεν είναι υποχρεωτικά και αν δεν δοθούν τότε, εξ ορισμού, η αναζήτηση γίνεται σε όλο το κείμενο. Ακολουθούν μερικά παραδείγματα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; code=&apos;</span><span class="courier-code">κωδικός α&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">code.find(&apos;α&apos;)</span></p>
			<p><span class="courier-code">8</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">code.find(&apos;β&apos;)</span></p>
			<p><span class="courier-code">-1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">s=&apos;#σωλήνες#φ120#5€#μέτρο&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">s[s.find(&apos;#&apos;,s.find(&apos;#&apos;)+1)+1:]&#9;</span><span class="courier60">#τεμαχισμός με αναζήτηση</span></p>
			<p><span class="courier-code">&apos;φ</span><span class="courier-code">120#5€#μέτρο&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.rfind (κείμενο2[,αρχή, τέλος])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">rfind</span> λειτουργεί όπως η <span class="courier-code">find</span>, με μόνη διαφορά ότι ξεκινά και κάνει την αναζήτηση κειμένου μέσα σε κείμενο από το τέλος (δεξιά) προς την αρχή (αριστερά): </p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;10.100.01&apos;.rfind(&apos;.&apos;)</span></p>
			<p><span class="courier-code">6</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;10.100.01&apos;.rfind(&apos;2&apos;)</span></p>
			<p><span class="courier-code">-1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;10.100.01&apos;.rfind(&apos;.&apos;,1,4)</span></p>
			<p><span class="courier-code">2&#9;</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.index(κείμενο2[,αρχή, τέλος])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">index</span> είναι παρόμοια με τη <span class="courier-code">find</span>. Λειτουργεί με τον ίδιο τρόπο. Το μόνο διαφορετικό που έχει η <span class="courier-code">index</span> είναι ότι, αν αποτύχει η αναζήτηση, προκαλείται σφάλμα χρόνου εκτέλεσης (σε αντίθεση με τη <span class="courier-code">find</span>, που στην ίδια περίπτωση επιστρέφει –1):</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">usr=&apos;student:anna&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">usr.index(&apos;:&apos;)</span></p>
			<p><span class="courier-code">7</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; usr[usr.index(&apos;:&apos;)+1:]</span></p>
			<p><span class="courier-code">&apos;anna&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">usr.index(&apos;annie&apos;)</span></p>
			<p><span class="courier-code">...</span> <span class="courier-code">ValueError: substring not found</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.rindex(κείμενο2[,αρχή, τέλος])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">rindex</span> λειτουργεί όπως και η <span class="courier-code">rfind</span>, αναζητά δηλαδή κείμενο από δεξιά. Αν η αναζήτηση αποτύχει, προκαλεί την εμφάνιση σφάλματος:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;Γραμμή 1\nΓραμμή 2\nΓραμμή 3&apos;.rindex(&apos;\n&apos;)</span></p>
			<p><span class="courier-code">17&#9;#το τελευταίο &apos;\n&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.endswith(κατάληξη [ή πλειάδα καταλήξεων</b></span><span class="courier-code"><b>[,αρχή,τέλος]])</b></span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">endswith</span> ελέγχει αν στο τέλος του κειμένου υπάρχει μια συγκεκριμένη κατάληξη. Προαιρετικά, με τα ορίσματα αρχή και τέλος, μπορεί να δοθεί συγκεκριμένο τμήμα του κειμένου όπου θα γίνει ο έλεγχος, όπως θα δινόταν με τεμαχισμό: κείμενο[αρχή:τέλος]. </p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">cars=[&apos;Sierra CL&apos;, &apos;Polo GT&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">cars[0].endswith(&apos;CL&apos;)</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">cars[1].endswith(&apos;GTi&apos;</span><span class="courier-code">)</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">url=&quot;www.mysite.eu&quot;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;Ελληνικό&apos; if url.endswith(&apos;gr&apos;) else &apos;Ξένο&apos;</span></p>
			<p><span class="courier-code">&apos;Ξένο&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;Ελληνικό&apos; if (url[:-2]+&apos;gr&apos;).endswith(&apos;gr&apos;) else &apos;Ξένο&apos;</span></p>
			<p><span class="courier-code">&apos;Ελληνικό&apos;</span></p>
			<p class="no-indent">Εναλλακτικά, μπορεί να δοθούν περισσότερες από μια καταλήξεις με τη μορφή πλειάδας από string (η πλειάδα περιγράφεται στο Κεφάλαιο 7), ώστε να ελεγχθεί αν το κείμενο έχει μια από αυτές τις καταλήξεις.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-1</b>: Αφού δοθεί το όνομα ενός αρχείου, να ελεγχθεί αν αυτό είναι αρχείο κειμένου ή όχι.</p>
			</blockquote>
			<p class="no-indent">Ένας δόκιμος τρόπος ελέγχου αν το αρχείο είναι αρχείο κειμένου παρουσιάζεται στη Λίστα Κώδικα 6-12.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-12 | Έλεγχος τύπου αρχείων</figcaption><img src="media/ListaKodika-6-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι παραπάνω εντολές θα τυπώσουν: </p>
			<p><span class="courier-code">Αρχείο κειμένου</span></p>
			<p class="no-indent">αφού η κατάληξη του αρχείου είναι μια από τις καταλήξεις που υπάρχουν στην πλειάδα <span class="courier-code">filetypes</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.startswith(πρόθεση[,αρχή,τέλος])</b></span></p>
			<p class="no-indent">Η συγκεκριμένη μέθοδος ελέγχει αν το κείμενο ξεκινά με τη δοσμένη πρόθεση, οπότε επιστρέφει <span class="courier-code">True</span>. Διαφορετικά επιστρέφει <span class="courier-code">False</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">path1, path2 = &apos;c:\Python&apos;, &apos;t:\code&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">path1.startswith(&apos;c:&apos;),path2.startswith(&apos;c:&apos;)</span></p>
			<p><span class="courier-code">(True, False)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">url=&apos;ftp.myserver.gr&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">url.startswith(&apos;http&apos;)</span></p>
			<p><span class="courier-code">False</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-2</b>: Να δοθεί ένας <i>υπερσύνδεσμος (link)</i> και να ελεγχθεί αν αφορά ασφαλή τοποθεσία.</p>
			</blockquote>
			<p class="no-indent">Ο κώδικας ο οποίος ελέγχει αν ένας υπερσύνδεσμος περιλαμβάνει ασφαλή τοποθεσία παρουσιάζεται στη Λίστα Κώδικα 6-13.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-13 | Έλεγχος ασφαλούς τοποθεσίας</figcaption><img src="media/ListaKodika-6-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εντολή 5 θα εμφανίσει το αποτέλεσμα: </p>
			<p><span class="courier-code">Τοποθεσία μη ασφαλής</span></p>
			<p class="no-indent">αφού η διεύθυνση δεν ξεκινάει με το πρόθεμα <span class="courier-code">&apos;https&apos;</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.count(κείμενο</b></span><span class="courier-code"><b>2)</b></span></p>
			<p class="no-indent">Με αυτή τη μέθοδο γίνεται καταμέτρηση του πλήθους εμφανίσεων του <span class="courier-code">κειμένου2</span> μέσα στο <span class="courier-code">κείμενο</span>. Αν δεν υπάρχει καμία φορά, επιστρέφεται ως αποτέλεσμα το 0.</p>
			<p>Στο string <span class="courier-code">routes</span> υπάρχουν τα δρομολόγια λεωφορείων. Οι παρακάτω εντολές εμφανίζουν το πλήθος των δρομολογίων για την Αθήνα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">routes=&apos;Αθήνα Πάτρα - Άρτα Αθήνα&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">routes.count(&apos;Αθήνα&apos;)</span></p>
			<p><span class="courier-code">2</span></p>
			<p class="no-indent">Το string <span class="courier-code">numbers</span> περιέχει άγνωστο πλήθος αριθμών. Η εντολή <span class="courier-code">print</span> τυπώνει το πλήθος τους, αφού η <span class="courier-code">count</span> μετρήσει πόσα <span class="courier-code">&apos;,&apos;</span> υπάρχουν (Γιατί χρειάζεται στο τέλος ‘<span class="courier-code">+1</span>’;):</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">numbers=&apos;1, 3, 8, 23.5&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">print(&apos;Πλήθος αριθμών:&apos;,numbers.count(&apos;,&apos;)+1)</span></p>
			<p><span class="courier-code">Πλήθος αριθμών: 4</span></p>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">modules</span> περιέχει είδη μνήμης RAM που υπάρχουν σε ένα ηλεκτρονικό κατάστημα. Η παρακάτω εντολή τυπώνει πόσες φορές υπάρχει το υλικό ‘DDR2’ με τη βοήθεια της <span class="courier-code">count</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">modules=&apos;DDR2 667, DDR2 800, DDR3 1333, DDR2 800 SODIMM&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">print(&apos;Πλήθος DDR2:&apos;,modules.count(&apos;DDR2&apos;))</span></p>
			<p><span class="courier-code">Πλήθος </span><span class="courier-code">DDR2: 3</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-3</b>: Να δοθεί ο κωδικός ενός λογαριασμού και να εμφανιστεί το είδος του.</p>
			</blockquote>
			<p class="no-indent">Η λύση στο πρόβλημα φαίνεται στη Λίστα Κώδικα 6-14.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-14 | Έλεγχος λογαριασμών</figcaption><img src="media/ListaKodika-6-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην οθόνη θα εμφανιστεί: </p>
			<p><span class="courier-code">τριτοβάθμιος λογαριασμός</span></p>
		</section>
		<section role="section" id="ch8se16">
			<h1><span role="label">6.16</span> Μέθοδοι μετατροπής</h1>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.expandtabs([πλήθος χαρακτήρων]</b></span><span class="courier-code"><b>)</b></span></p>
			<p class="icon-11-youtube"><span>[icon-11-youtube]</span><span class="courier-code"><b><img src="media/icon-11-youtube_fmt.png" alt=""/></b></span></p>
			<p><img src="media/icon-8_fmt.png" alt=""/><span class="courier-code"><b><img src="media/chapter-6-image-2_fmt.png" alt=""/></b></span></p>
			<p class="no-indent">Με την <span class="courier-code">expandtabs</span> ένα αντικείμενο str αντικαθιστά οποιονδήποτε χαρακτήρα διαφυγής τύπου tab (<span class="courier-code">\t</span>) με ένα πλήθος κενών. Αν δεν δοθεί πλήθος χαρακτήρων, κάθε tab αντικαθίσταται από 8 κενά διαστήματα. Η συγκεκριμένη μέθοδος έρχεται να λύσει το πρόβλημα<sup class="superscript CharOverride-1"><span id="footnote-029-backlink"><a href="#footnote-029">65</a></span></sup> επιλογής χρήσης του tab ή του κενού διαστήματος για τη δημιουργία εσοχών στον κώδικα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">s=&apos;α/α\t</span><span class="courier-code">Επίθετο\t\tΌνομα\t\tΤηλέφωνο&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">print(s)</span></p>
			<p><span class="courier-code">α/α     Επίθετο     Όνομα     Τηλέφωνο</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">print(s.expandtabs(4))</span></p>
			<p><span class="courier-code">α/α Επίθετο     Όνομα     Τηλέφωνο</span></p>
			<p class="no-indent">Μετά την εφαρμογή της <span class="courier-code">expandtabs</span>, τα κενά που αφήνει κάθε tab μειώνονται σε 4. Έτσι, η στοίχιση δεν γίνεται σε διαστήματα πολλαπλάσια του 8, αλλά του 4.</p>
			<p>Χρησιμοποιείται στις περιπτώσεις όπου χρειάζεται ένα κομμάτι κώδικα, που περιέχει εσοχές με τη μορφή tabs, να αλλάξει και να περιλάβει κενά (κάτι που η Python, μέσω του PEP8<sup class="superscript CharOverride-1"><span id="footnote-028-backlink"><a href="#footnote-028">66</a></span></sup>, προτείνει ως καλή πρακτική).</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.strip([χαρακτήρες])</b></span></p>
			<p class="no-indent">Μέσω της <span class="courier-code">strip</span> γίνεται απαλοιφή των κενών που υπάρχουν στην αρχή και στο τέλος του κειμένου. Αν δοθεί ως συμβολοσειρά το προαιρετικό όρισμα χαρακτήρες, τότε αυτοί οι χαρακτήρες αφαιρούνται από την αρχή και το τέλος του κειμένου. Η αφαίρεση των επιθυμητών χαρακτήρων σταματά στον 1ο χαρακτήρα του κειμένου που είναι διαφορετικός από τους χαρακτήρες του ορίσματος. Αυτό γίνεται και στην αρχή και στο τέλος του κειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos; Hi There &apos;.strip()</span></p>
			<p><span class="courier-code">&apos;Hi There&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;###Code#12###&apos;.strip(&apos;#&apos;)</span></p>
			<p><span class="courier-code">&apos;Code#12&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;xx x123xyx xx&apos;.strip(&apos;x&apos;)</span></p>
			<p><span class="courier-code">&apos;123xy&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.rstrip([χαρακτήρες])</b></span><span class="courier-code"> και </span><span class="courier-code"><b>κείμενο.lstrip([χαρακτήρες])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">lstrip</span> και η <span class="courier-code">rstrip</span> αφαιρούν από το κείμενο τα κενά που υπάρχουν στην αρχή (αριστερα) και στο τέλος (δεξιά) αντίστοιχα: </p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;##Κωδικός 10##&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.lstrip(&apos;#&apos;)</span></p>
			<p><span class="courier-code">&apos;Κωδικός 10##&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; s.rstrip(&apos;#&apos;)</span></p>
			<p><span class="courier-code">&apos;##Κωδικός 10&apos;</span></p>
			<p class="no-indent">Στην ουσία κάνουν την ίδια δουλειά που κάνει και η <span class="courier-code">strip</span>, αλλά μόνο από τη μια άκρη του κειμένου. Για αυτό τον λόγο ισχύει:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos; Hello &apos;.strip()==&apos; Hello &apos;.rstrip().lstrip()</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.replace(παλιό κείμενο, νέο κείμενο [,πλήθος])</b></span></p>
			<p class="no-indent">Μια μέθοδος που μπορεί να τροποποιήσει πολλαπλά τμήματα ενός κειμένου είναι η <span class="courier-code">replace</span>. Για τη χρήση της, δίνεται ένα κομμάτι κειμένου (<span class="courier-code">παλιό κείμενο</span>) που υπάρχει ήδη μέσα στο κείμενο και ένα ακόμη (<span class="courier-code">νέο κείμενο</span>) το οποίο αντικαθιστά το πρώτο. Αν δεν δοθεί το όρισμα πλήθος, η <span class="courier-code">replace</span> αντικαθιστά το παλιό με το νέο κείμενο όσες φορές υπάρχει αυτό, διαφορετικά το πλήθος ορίζει πόσες αντικαταστάσεις θα γίνουν:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">p=&apos;προϊόν, </span><span class="courier-code">τιμή, ποσότητα&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">p.replace(&apos;,&apos;,&apos;\t&apos;)</span></p>
			<p><span class="courier-code">&apos;προϊόν\t τιμή\</span><span class="courier-code">t ποσότητα&apos;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-4</b>: Να γίνει αλλαγή των κωδικών ‘<span class="courier-code">A</span>’ σε κωδικό ‘<span class="courier-code">c0</span>’.</p>
			</blockquote>
			<p class="no-indent">Μια απάντηση υπάρχει στη Λίστα Κώδικα 6-15.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-15 | Αντικατάσταση κειμένου</figcaption><img src="media/ListaKodika-6-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Το περιεχόμενο της λίστας θα είναι: </p>
			<p><span class="courier-code">[&apos;Hc01&apos;, &apos;#c02&apos;, &apos;#c03&apos;, &apos;#B12&apos;] </span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-5</b>: Τα «κορακίστικα»<sup class="superscript CharOverride-1"><span id="footnote-027-backlink"><a href="#footnote-027">67</a></span></sup> είναι ένα παιδικό παιχνίδι ομιλίας όπου πριν ή μετά από κάθε συλλαβή προστίθεται μια πρόθεση (<i>τσι</i>, <i>κο</i>, <i>κου</i> κ.λπ.) ώστε να προκύπτει ένα δυσνόητο κείμενο. Με αυτό τον τρόπο, όταν ήμασταν παιδιά, μιλούσαμε με φίλους για να μη μας καταλαβαίνουν όσοι άλλοι μας άκουγαν. </p>
			</blockquote>
			<p class="no-indent">Δίνεται μια πρόταση σε κορακίστικα: </p>
			<p><span class="courier-code">phrase=&apos;τσιπάτσιμε τσιότσιλοι τσιματσιζί&apos;</span></p>
			<p class="no-indent">Να μετατραπεί σε κανονικό κείμενο: </p>
			<p><span class="courier-code">&gt;&gt;&gt; print(phrase.replace(&apos;τσι&apos;,&apos;&apos;))</span></p>
			<p><span class="courier-code">πάμε όλοι μαζί</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.split([διαχωριστικό [,πλήθος</b></span><span class="courier-code"><b>])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">split</span> διασπά το κείμενο σε σειρά από μικρότερα τμήματα τα οποία τοποθετεί σε λίστα. Ο τεμαχισμός του κειμένου γίνεται στα σημεία όπου υπάρχει κενό, εκτός και αν δοθεί ως διαχωριστικό κάποιος άλλος χαρακτήρας (ένας ή περισσότεροι). Εξ ορισμού κόβεται όλο το κείμενο σε κομμάτια, εκτός και αν δοθεί το προαιρετικό όρισμα «πλήθος», που ορίζει πόσες κατατμήσεις του κειμένου θα γίνουν:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">languages=&apos;C Python Java C++ PHP&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">languages.split()</span></p>
			<p><span class="courier-code">[&apos;C&apos;, &apos;Python&apos;, &apos;Java&apos;, &apos;C++&apos;, &apos;PHP&apos;]</span></p>
			<p class="no-indent">Η προηγούμενη εντολή διαχωρίζει το κείμενο σε κάθε κενό που βρίσκει μέσα στο string, ενώ το αποτέλεσμα καταχωρείται σε μια νέα λίστα. </p>
			<p class="no-indent"><b>ΣΗΜΕΙΩΣΗ</b>: στην τελευταία εντολή το αποτέλεσμα δεν καταχωρήθηκε κάπου. Απλά εμφανίστηκε στην κονσόλα. Η πραγματική χρησιμότητά του όμως βρίσκεται στη δυνατότητα να αποθηκεύονται οι αλλαγές σε κάποια δομή, όπως μια νέα λίστα, ώστε να μπορεί να γίνει περαιτέρω επεξεργασία των δεδομένων. Η παρακάτω γραμμή αποθηκεύει το αποτέλεσμα στη λίστα <span class="courier-code">langlist</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; langlist=languages.split()</span></p>
			<p class="no-indent">Το επόμενο παράδειγμα χρησιμοποιεί άλλους χαρακτήρες για τον διαχωρισμό του κειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; grade=&apos;</span><span class="courier-code">Όνομα, Επίθετο, Βαθμός, Μάθημα&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; grlist=grade.split(&apos;, &apos;)#υπάρχει και το κενό μετά το &apos;,&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> print(grlist)</span></p>
			<p><span class="courier-code">[&apos;Όνομα&apos;, &apos;Επίθετο&apos;, &apos;Βαθμός&apos;, &apos;Μάθημα&apos;]</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-6</b>: Έχοντας αποσπάσει μια γραμμή αρχείου που περιέχει ακέραιους αριθμούς, χωρισμένους με κόμμα, να αποθηκεύσετε σε λίστα τους αριθμούς αυτούς.</p>
			</blockquote>
			<p class="no-indent">Στη Λίστα Κώδικα 6-16 παρουσιάζεται η απάντηση στο πρόβλημα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-16 | Μετατροπή κειμένου σε λίστα αριθμών</figcaption><img src="media/ListaKodika-6-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Αυτό που θα τυπωθεί στην οθόνη θα είναι:</p>
			<p><span class="courier-code">[1, 3, 12, 1023, 2]</span></p>
			<p class="no-indent">Η <span class="courier-code">split</span> σε αυτή την περίπτωση σπάει το κείμενο σε κάθε <span class="courier-code">&apos;,&apos;</span> και δημιουργεί μια λίστα με τμήματα κειμένου που περιέχουν αριθμούς. Αυτή η λίστα δίνεται ως όρισμα στη συνάρτηση <span class="courier-code">map</span> που μετατρέπει τα στοιχεία της από κείμενο σε ακεραίους, εφαρμόζοντας σε κάθε <span class="courier-code">str</span> στοιχείο της λίστας τη συνάρτηση <span class="courier-code">int</span>. Το αποτέλεσμα αποθηκεύεται σε νέα λίστα με όνομα <span class="courier-code">numbers</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.rsplit([διαχωριστικό [,πλήθος]])</b></span></p>
			<p class="no-indent">Η μέθοδος αυτή είναι παρόμοια με τη <span class="courier-code">split</span>, με μόνη διαφορά ότι ξεκινά τον διαχωρισμό του κειμένου από τα δεξιά: </p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">p=&apos;#Α/Α#Περιγραφή#Ονομασία#Κωδικός#Τιμή#Τεμάχια&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">p.rsplit(&apos;#&apos;,3)</span></p>
			<p><span class="courier-code">[&apos;#Α/Α#Περιγραφή#Ονομασία&apos;, &apos;Κωδικός&apos;, &apos;Τιμή&apos;, &apos;Τεμάχια&apos;]</span></p>
			<p class="no-indent">Όπως φαίνεται και από το αποτέλεσμα, μόνο τα τρία τμήματα από το τέλος έχουν διαχωριστεί από το κείμενο. Το υπόλοιπο έμεινε ανέπαφο και καταχωρήθηκε στην 1η θέση της λίστας.</p>
			<p>Η χρήση της <span class="courier-code">rsplit</span> αντί της <span class="courier-code">split</span> έχει νόημα μόνο όταν χρησιμοποιείται μαζί με το όρισμα <span class="courier-code">πλήθος</span>, ώστε ο διαχωρισμός να γίνεται σε κάποια τμήματα του κειμένου ξεκινώντας από το τέλος. Αν δεν δοθεί συγκεκριμένο πλήθος κατατμήσεων, οι δύο μέθοδοι θα επιστρέψουν τα ίδια ακριβώς αποτελέσματα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-7</b>: Μια λίστα περιέχει σειρά από string με αριθμούς. Να τους μετατρέψετε σε υπολίστες αριθμών.</p>
			</blockquote>
			<p class="no-indent">Ο κώδικας μετατροπής εμφανίζεται στη Λίστα Κώδικα 6-17.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-17 | String σε υπολιστές αριθμών</figcaption><img src="media/ListaKodika-6-17_fmt.png" alt=""/></figure>
			<p class="no-indent">Το περιεχόμενο της λίστας <span class="courier-code">l</span> θα είναι:</p>
			<p><span class="courier-code">[[1, 2], [1, 2, 3], [1, 2, 3, 4]]</span></p>
			<p class="no-indent">καθώς, στη σύνθεση νέας λίστας στη γραμμή 2, κάθε string της λίστας <span class="courier-code">l</span> διαχωρίζεται με τη <span class="courier-code">rsplit</span>, δίνεται στη <span class="courier-code">map</span>, μετατρέπεται σε ακέραιο μέσω της <span class="courier-code">int</span> και δίνεται ως νέο στοιχείο στη λίστα <span class="courier-code">l</span>. Το ίδιο αποτέλεσμα θα υπήρχε αν γινόταν χρήση της <span class="courier-code">split</span>.</p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο</b></span><span class="courier-code"><b>.splitlines(True ή False)</b></span></p>
			<p class="no-indent">Με αυτή τη μέθοδο <span class="courier-code">κείμενο</span> πολλών γραμμών μπορεί να «σπάσει» σε σειρά από γραμμές και κάθε γραμμή να αποθηκευτεί σε μια λίστα. Αυτή η λειτουργία χρησιμεύει σε περιπτώσεις μαζικής διαχείρισης κειμένου που προέρχεται από κάποιο αρχείο ή μια ιστοσελίδα. Για παράδειγμα, αφού ανοίξει ένα αρχείο και φορτωθεί το κείμενο, για να μπορέσει να γίνει η ανάλυσή του, συνήθως αποθηκεύεται σε κάποια δομή, όπως λίστα, ή υφίσταται επεξεργασία σε κάποια <span class="courier-code">for</span> η μια γραμμή μετά την άλλη. Η <span class="courier-code">splitlines</span> ανιχνεύει κάθε αλλαγή γραμμής και επιστρέφει μια λίστα, με στοιχεία της τις γραμμές του κειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">lines=&apos;line1\nline2\nline3&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">lines.splitlines()</span></p>
			<p><span class="courier-code">[&apos;line1&apos;, &apos;line2&apos;, &apos;line3&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">lines.splitlines(1)</span></p>
			<p><span class="courier-code">[&apos;line1\n&apos;, &apos;line2\n&apos;, &apos;line3&apos;]</span></p>
			<p class="no-indent">Αν δοθεί κάποιο όρισμα που μεταφράζεται σε <span class="courier-code">True</span>, τότε η <span class="courier-code">splitlines</span> κρατάει τον χαρακτήρα αλλαγής γραμμής στα αποτελέσματά της: </p>
			<p><span class="courier-code">&gt;&gt;&gt; text=&apos;&apos;&apos;Όνομα</span></p>
			<p><span class="courier-code">... Επίθετο</span></p>
			<p><span class="courier-code">... Τηλέφωνο&apos;&apos;&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; text.splitlines</span><span class="courier-code">()</span></p>
			<p><span class="courier-code">[&apos;Όνομα&apos;, &apos;Επίθετο&apos;, &apos;Τηλέφωνο&apos;]</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.join(επαναληπτικό αντικείμενο)</b></span></p>
			<p class="no-indent">Η <span class="courier-code">join</span> είναι μια από τις πιο συχνά χρησιμοποιούμενες μεθόδους, ειδικά όταν χρειάζεται να γίνει επεξεργασία κάποιου string συνδυαστικά με κάποιο άλλο επαναληπτικό αντικείμενο. Με την <span class="courier-code">join</span> γίνεται συνένωση ενός αλφαριθμητικού με στοιχεία κάποιου άλλου αντικειμένου. Τέτοιο αντικείμενο μπορεί να είναι κάποιο άλλο string, μια λίστα ή πλειάδα, ένα λεξικό ή σύνολο, κάποιο αρχείο ή αντικείμενο οριζόμενο από τον χρήστη. Αυτή η δυνατότητα της προσδίδει μεγάλη ευελιξία και μπορεί να χρησιμοποιηθεί σε πολλές περιπτώσεις μέσα στον κώδικα. Ακολουθούν μερικά παραδείγματα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">sep=&apos;,&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">sep.join(&apos;abcd&apos;)</span></p>
			<p><span class="courier-code">&apos;a,b,c</span><span class="courier-code">,d&apos;</span></p>
			<p class="no-indent">Η <span class="courier-code">join</span> τοποθετεί στο νέο string, που δημιουργεί, κάθε στοιχείο από το επαναληπτικό αντικείμενο, ακολουθούμενο από το κείμενο με το οποίο καλείται. Στην πιο πάνω εντολή, παρεμβάλλει ανάμεσα στα στοιχεία του string <span class="courier-code">&apos;abcd&apos;</span> τον χαρακτήρα <span class="courier-code">&apos;,&apos;</span> με τον οποίο κλήθηκε: </p>
			<p><span class="courier-code">&gt;&gt;&gt; sep.join([&apos;Python&apos;,&apos;java&apos;,&apos;c&apos;])</span></p>
			<p><span class="courier-code">&apos;Python,java,c&apos;</span></p>
			<p class="no-indent">Η συνένωση στοιχείων λίστας γίνεται πολύ εύκολα, χωρίς να χρειαστεί κάποια δομή επανάληψης. Προσοχή, ωστόσο, όταν τα στοιχεία της λίστας δεν είναι string:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sep.join([1,2,3])</span></p>
			<p><span class="courier-code">TypeError: sequence item 0: expected str instance, int found</span></p>
			<p class="no-indent">Σε αυτή την περίπτωση εμφανίζεται σφάλμα και σταματά η εκτέλεση. Η λύση είναι η μετατροπή των στοιχείων της λίστας σε κείμενο πριν την εφαρμογή της <span class="courier-code">join</span>. Η επόμενη εντολή μετατρέπει πρώτα κάθε αριθμό της λίστας σε κείμενο, εφαρμόζοντας τη συνάρτηση <span class="courier-code">str</span> σε καθέναν από αυτούς, και μετά τους ενώνει με το ‘<span class="courier-code">,</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sep.join(map(str,[1,2,3]))</span></p>
			<p><span class="courier-code">&apos;1,2,3&apos;</span></p>
			<p class="no-indent">Η <span class="courier-code">join</span>, στο προηγούμενο παράδειγμα, δέχεται στην ουσία ένα αντικείμενο τύπου <span class="courier-code">map</span> και όχι την αρχική λίστα με τους αριθμούς. Αυτό φαίνεται και από το τι ακριβώς επιστρέφει η <span class="courier-code">map</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; map(str,[1,2,3])</span></p>
			<p><span class="courier-code">&lt;map at 0x2068a091ba8&gt;</span></p>
			<p class="no-indent">Η <span class="courier-code">join</span> δέχεται και σύνολα με string, αλλά η σειρά που θα γίνει η συνένωση δεν θα είναι πάντα η ίδια. Αυτό έχει να κάνει με τον τρόπο που αποθηκεύονται τα στοιχεία ενός συνόλου μέσα σ’ αυτό (περισσότερα για τα σύνολα στο Κεφάλαιο 8):</p>
			<p><span class="courier-code">&gt;&gt;&gt; sep.join({&apos;1&apos;,&apos;a&apos;})</span></p>
			<p><span class="courier-code">&apos;a,1&apos;</span></p>
			<p class="no-indent">Συνένωση και συνδυασμός ενός string μπορεί να γίνει και με τα κλειδιά ενός λεξικού, αρκεί και αυτά να είναι string:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sep.join({&apos;1&apos;:&apos;Ένα&apos;,&apos;a&apos;:&apos;</span><span class="courier-code">Άλφα&apos;})</span></p>
			<p><span class="courier-code">&apos;1,a&apos;</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.partition(διαχωριστικό)</b></span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">partition</span> παίρνει το <span class="courier-code">κείμενο</span> και το χωρίζει σε τρία τμήματα τα οποία αποθηκεύει σε μια πλειάδα. Το 1ο τμήμα είναι το κείμενο από την αρχή μέχρι το διαχωριστικό (αλλά χωρίς αυτό) και τοποθετείται ως 1ο στοιχείο της πλειάδας. Το 2ο τμήμα είναι το διαχωριστικό σύμβολο, ενώ το 3ο τμήμα είναι το κείμενο που ακολουθεί μετά το διαχωριστικό και μέχρι το τέλος. Αν το διαχωριστικό δεν υπάρχει μέσα στο κείμενο, τότε το 1ο στοιχείο της πλειάδας είναι όλο το αρχικό κείμενο και τα άλλα δύο στοιχεία της είναι το κενό (‘’):</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Μαθαίνω#Python&apos;.partition(&apos;#&apos;)</span></p>
			<p><span class="courier-code">(&apos;Μαθαίνω&apos;, &apos;#&apos;, &apos;Python&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Μαθαίνω#Python&apos;.partition(&apos;p&apos;)</span></p>
			<p><span class="courier-code">(&apos;Μαθαίνω#Python&apos;, &apos;&apos;, &apos;&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Γιώργος Παπάς&apos;.partition(&apos; &apos;)</span></p>
			<p><span class="courier-code">(&apos;Γιώργος&apos;, &apos; &apos;, &apos;Παπάς&apos;)</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.rpartition(διαχωριστικό)</b></span></p>
			<p class="no-indent">Με παρόμοιο τρόπο λειτουργεί και η <span class="courier-code">rpartition</span>, μόνο που χωρίζει το κείμενο στο 1ο διαχωριστικό που θα βρει από δεξιά. Αν δεν υπάρχει ο χαρακτήρας διαχωρισμού, δημιουργεί πλειάδα τριών τιμών, με τις πρώτες δύο να είναι το κενό κείμενο ‘’ και η 3η να περιέχει το αρχικό κείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;ΚΩΔΙΚΟΣ:</span><span class="courier-code">Ω102&apos;.rpartition(&apos;Ω&apos;)</span></p>
			<p><span class="courier-code">(&apos;ΚΩΔΙΚΟΣ:&apos;, &apos;Ω&apos;, &apos;102&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">&apos;ΚΩΔΙΚΟΣ:Ω102&apos;.partition(&apos;</span><span class="courier-code">Ω&apos;)</span></p>
			<p><span class="courier-code">(&apos;Κ&apos;, &apos;Ω&apos;, &apos;ΔΙΚΟΣ:Ω102&apos;)</span></p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.translate(λεξικό αντιστοίχισης)</b></span></p>
			<p class="no-indent">Η <span class="courier-code">translate</span> αντικαθιστά χαρακτήρες του κειμένου με άλλους που ορίζονται στο λεξικό αντιστοίχισης. Αυτό το λεξικό μπορεί να δημιουργηθεί με τη μέθοδο <span class="courier-code">maketrans</span> που περιγράφεται αμέσως μετά. </p>
			<p class="no-indent"><span class="courier-code"><b>κείμενο.maketrans(x[,y[,[z]]])</b></span></p>
			<p class="no-indent">Η <span class="courier-code">maketrans</span> είναι στατική μέθοδος, δεν αλλάζει κάποιο χαρακτηριστικό του αντικειμένου που τη συνοδεύει και επιστρέφει ένα λεξικό. Αυτό το λεξικό χρησιμεύει ως αντιστοίχιση χαρακτήρων για την αντικατάστασή τους με τη μέθοδο <span class="courier-code">translate</span>. Δέχεται τρεις μορφές ορισμάτων. </p>
			<p>Στην πρώτη μορφή, το όρισμα είναι ένα λεξικό. Αυτό το λεξικό αποτελείται από μια αντιστοίχιση ένα προς ένα, από χαρακτήρες και τα υποκατάστατά τους. Ορίζεται δηλαδή ποιος χαρακτήρας θα αντικατασταθεί από ποιον. </p>
			<p>Αυτό χρειάζεται όταν πρέπει να γίνει μαζική αντικατάσταση χαρακτήρων από κάποιους άλλους. Οι τιμές που δίνονται μπορεί να είναι αριθμοί, οι οποίοι αντιστοιχούν σε μια κωδικοποίηση χαρακτήρων, ή χαρακτήρες ή ο τύπος <span class="courier-code">None</span>: </p>
			<p><span class="courier-code">&gt;&gt;&gt; str.maketrans({&apos;α&apos;:&apos;alpha&apos;,&apos;β&apos;:&apos;beta&apos;})</span></p>
			<p><span class="courier-code">{945: &apos;alpha&apos;, 946: &apos;beta&apos;}</span></p>
			<p class="no-indent">Αυτό το λεξικό θα «οδηγήσει» την αντικατάσταση όλων των χαρακτήρων (κλειδιών του λεξικού) ‘<span class="courier-code">α</span>’ και ‘<span class="courier-code">β</span>’, που έχουν κωδικούς Unicode 945 και 946, με τις αντίστοιχες τιμές τους, δηλαδή τα λεκτικά ‘<span class="courier-code">alpha</span>’ και ‘<span class="courier-code">beta</span>’. Η χρήση αυτού του λεξικού γίνεται με τη μέθοδο <span class="courier-code">translate</span>. Αν <span class="courier-code">d=str.maketrans({&apos;α&apos;:&apos;alpha&apos;,&apos;β&apos;:&apos;beta&apos;})</span>, τότε:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;Version </span><span class="courier-code">α - Revision β&apos;.translate(d)</span></p>
			<p><span class="courier-code">&apos;Version alpha - Revision beta&apos;</span></p>
			<p class="no-indent">Ο δεύτερος τρόπος περιλαμβάνει δύο ορίσματα που είναι και τα δύο συμβολοσειρές ίδιου μήκους και περιέχουν μια χαρακτήρα προς χαρακτήρα αντιστοίχιση. Κάθε χαρακτήρας της 1ης συμβολοσειράς θα αντιστοιχηθεί με έναν χαρακτήρα της 2ης συμβολοσειράς που βρίσκεται στην αντίστοιχη θέση. Το αποτέλεσμα είναι και εδώ ένα λεξικό αντικατάστασης: </p>
			<p><span class="courier-code">&gt;&gt;&gt; d=str.maketrans(&apos;ΆΈΎΌΊΉΏ&apos;,&apos;ΑΕΥΟΙΗΩ&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;γεια σου κόσμε&apos;.upper().translate(d)</span></p>
			<p><span class="courier-code">&apos;ΓΕΙΑ ΣΟΥ ΚΟΣΜΕ&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">{902: 913, 904: 917, 910: 933 ...}</span></p>
			<p class="no-indent">Αν υπάρχει και 3ο όρισμα, θα πρέπει να έχει τη μορφή κειμένου. Οι χαρακτήρες του κειμένου θα αντιστοιχηθούν με τον τύπο <span class="courier-code">None</span>· δηλαδή οι χαρακτήρες θα αφαιρεθούν από το τελικό κείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d=str.maketrans(&apos;ABC&apos;,&apos;αβγ&apos;,&apos;ab&apos;)</span></p>
			<p class="no-indent">Το περιεχόμενο του νέου λεξικού είναι:</p>
			<p><span class="courier-code">{65: 945, 66: 946, 67: 947, 97: None</span><span class="courier-code">, 98: None}</span></p>
			<p class="no-indent">Οι χαρακτήρες 97 και 98 είναι τα ‘<span class="courier-code">a</span>’ και ‘<span class="courier-code">b</span>’. Έχουν πάρει τιμή <span class="courier-code">None</span>, οπότε δεν θα υπάρχουν στο κείμενο μετά την εφαρμογή της <span class="courier-code">translate</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;code A-code Bba-code Caabb&apos;.translate(d)</span></p>
			<p><span class="courier-code">&apos;code α-code β-code γ&apos;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 6-8</b>: Στο παρακάτω κείμενο:</p>
			</blockquote>
			<p><span class="courier-code">text=&apos;δο1κι3μασ</span><span class="courier-code">2τι345κό44 κ5ε3ίμ3ενο0&apos;</span></p>
			<p class="no-indent">έχουν τυπωθεί κατά λάθος και αριθμοί (τυχαίοι και σε τυχαίες θέσεις). Δημιουργήστε κώδικα που θα αφαιρεί αυτούς τους αριθμούς.</p>
			<p>Ο κώδικας που αφαιρεί τους αριθμούς από τη μεταβλητή <span class="courier-code">text</span> παρουσιάζεται στη Λίστα Κώδικα 6-18.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 6-18 | Translate – αφαίρεση χαρακτήρων</figcaption><img src="media/ListaKodika-6-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Αυτό που θα τυπωθεί στην οθόνη θα είναι:</p>
			<p><span class="courier-code">δοκιμαστικό κείμενο</span></p>
		</section>
		<section role="section" id="ch8se17" data-featured="chapter-review">
			<h1><span role="label">6.17</span> Περίληψη</h1>
			<p class="no-indent">Σε αυτό το κεφάλαιο παρουσιάστηκαν λειτουργίες της Python σχετικά με:</p>
			<ul><li>Τα διαφορετικά είδη κειμένου που υποστηρίζει</li>
			<li>Τις ενσωματωμένες συναρτήσεις χειρισμού κειμένου</li>
			<li>Τις μεθόδους που συνοδεύουν κάθε αντικείμενο κειμένου</li>
			<li>Τρόπους αναπαράστασης και κωδικοποίησης χαρακτήρων</li>
			<li>Ιδιαιτερότητες στην επεξεργασία ελληνικών χαρακτήρων </li>
			<li>Νέο τρόπο μορφοποίησης κειμένου</li></ul>
			<p class="no-indent">Κατανοώντας τον τρόπο που η Python χειρίζεται τα δεδομένα κειμένου, ο αναγνώστης θα μπορέσει να γράψει κώδικα που θα τροποποιεί, με πραγματική ευκολία, μια δομή κειμένου, θα την προσαρμόζει στις ανάγκες του και θα μετατρέπει γρήγορα και αποδοτικά μια δομή, όπως η λίστα, σε άλλη, όπως το κείμενο.</p>
			<p>Στη συνέχεια, παρουσιάστηκαν και άλλα σημαντικά χαρακτηριστικά και βασικές δομές της γλώσσας, που επίσης μπορούν να συνδυαστούν με ό,τι έχει περιγραφεί μέχρι τώρα.</p>
			
		</section>
		<section role="section" id="ch8se18" data-featured="chapter-questions">
			<h1><span role="label">6.18</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Σε ποιες περιπτώσεις χρειάζεται να χρησιμοποιηθεί κείμενο σε ένα πρόγραμμα;</li>
			<li>Ποιες είναι οι μορφές κειμένου που υποστηρίζει η Python;</li>
			<li>Τι είναι οι κωδικοσελίδες; Πού χρησιμεύουν;</li>
			<li>Ποιες κατηγορίες μεθόδων υπάρχουν για τη διαχείριση κειμένου; Σε τι χρησιμεύουν;</li>
			<li>Ποια είδη τελεστών χρησιμοποιούνται με κείμενο; Πώς λειτουργούν;</li>
			<li>Ποιες ενσωματωμένες συναρτήσεις μπορούν να χρησιμοποιηθούν με ένα αντικείμενο τύπου str;</li>
			<li>Πώς λειτουργεί η κωδικοποίηση UTF-8;</li>
			<li>Τι είναι ο πίνακας Unicode; Πώς χρησιμοποιείται στην Python;</li></ol>
			
		</section>
		<section role="section" id="ch8se19" data-featured="chapter-assess">
			<h1><span role="label">6.19</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο από το πληκτρολόγιο και θα εμφανίζει, για κάθε χαρακτήρα, τον κωδικό του στον πίνακα Unicode.</li>
			<li>Δίνεται κείμενο μιας γραμμής. Να ελεγχθεί αν το κείμενο αυτό αποτελεί παλίνδρομο ή όχι. Ένα κείμενο θεωρείται παλίνδρομο ή καρκινική γραφή όταν μπορεί να διαβαστεί και ανάποδα. Για παράδειγμα, η πρόταση «ΑΝΑΣΑΝΑ ΞΑΝΑΣΑΝΑ» είναι καρκινική γιατί διαβάζεται και ανάποδα.</li>
			<li>Να εμφανιστεί η συχνότητα εμφάνισης κάθε χαρακτήρα ενός κειμένου.</li>
			<li>Να εμφανιστεί η συχνότητα εμφάνισης κάθε λέξης ενός κειμένου.</li>
			<li>Να κάνετε καταμέτρηση των λέξεων που υπάρχουν σε ένα κείμενο.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται μια λέξη από το πληκτρολόγιο. Δίνεται επίσης κάποιο έτοιμο κείμενο. Να εμφανίζει το πρόγραμμα ποιες λέξεις του κειμένου περιέχουν τη λέξη που δόθηκε.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται σειρά λέξεων από το πληκτρολόγιο και θα τις τοποθετεί σε λίστα. Στη συνέχεια, για ένα δοσμένο κείμενο θα βρίσκει τη συχνότητα εμφάνισης των λέξεων της λίστας σε αυτό.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο και θα ελέγχει αν αποτελεί υπερσύνδεσμο (link) από ιστοσελίδα. Να εμφανίζει επίσης ποια είναι η διεύθυνση (url).</li>
			<li>Για δοσμένο κείμενο να γράψετε πρόγραμμα που θα αφαιρεί τον χαρακτήρα ‘\n’ και θα προσθέτει την ετικέτα (tag) &lt;br&gt;.</li>
			<li>Η κρυπτογράφηση του Καίσαρα (Κώδικας του Καίσαρα<sup class="superscript CharOverride-1"><span id="footnote-026-backlink"><a href="#footnote-026">68</a></span></sup>) κωδικοποιεί ένα κείμενο ως εξής: δίνεται ένα κλειδί (αριθμός) και ένα κείμενο. Κάθε χαρακτήρας του κειμένου αντικαθίσταται από έναν άλλο ο οποίος βρίσκεται στο αλφάβητο μετά από τόσους χαρακτήρες όσους ορίζει το κλειδί. Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό ως κλειδί και κάποιο κείμενο, κρυπτογραφώντας το με τον Κώδικα του Καίσαρα. Δοκιμάστε να γράψετε αντίστοιχο πρόγραμμα που θα αποκρυπτογραφεί ένα τέτοιο κείμενο.</li>
			<li>Να γράψετε πρόγραμμα που θα αφαιρεί από ένα κείμενο όλα τα κενά και τα tab, αλλά θα αφήνει τον χαρακτήρα αλλαγής γραμμής.</li>
			<li>Δίνεται κείμενο με πραγματικούς αριθμούς χωρισμένους με κενά. Ως υποδιαστολή χρησιμοποιείται η τελεία. Να αντικατασταθεί με το κόμμα και να περαστούν οι αριθμοί, ως κείμενο, σε μια λίστα.</li>
			<li>Δίνεται κάποιο κείμενο. Να δημιουργήσετε λίστα η οποία θα αποτελείται από τον χαρακτήρα, τον αύξοντα αριθμό και τον κωδικό Unicode κάθε χαρακτήρα.</li>
			<li>Να γράψετε πρόγραμμα που θα μετράει σε ένα κείμενο πόσα φωνήεντα και πόσα σύμφωνα υπάρχουν.</li>
			<li>Να γράψετε πρόγραμμα που θα μετατρέπει τις τελείες σε κόμμα και το ανάποδο.</li>
			<li>Βρείτε τους χαρακτήρες που δεν επαναλαμβάνονται σε ένα κείμενο.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό έως 3 ψηφία και θα εμφανίζει κάθε στοιχείο με τη μορφή λέξης. Π.χ. για τον αριθμό 12 να εμφανίζει «Ένα» και «Δύο».</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν δεκαδικό αριθμό στο διάστημα (0, 1) και θα τον εμφανίζει ως ποσοστό με ακρίβεια 2 δεκαδικών. Π.χ. αν δοθεί ο αριθμός 0.34568 να εμφανιστεί ως 34.57%.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται δύο κείμενα και θα εμφανίζει το πιο μεγάλο κοινό κομμάτι τους.</li>
			<li>Να γράψετε πρόγραμμα που θα εμφανίζει πόσες φορές υπάρχει σε ένα κείμενο η πιο μεγάλη λέξη.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται μια λέξη και ένα κείμενο, εμφανίζοντας ποιες λέξεις του κειμένου ξεκινάνε με αυτή τη λέξη.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο πολλών γραμμών και θα το εμφανίζει βάζοντας αρίθμηση στις γραμμές του.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο και θα κάνει κεφαλαίο το πρώτο γράμμα κάθε πρότασης (είτε μετά από τελεία είτε σε κάθε νέα γραμμή).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο και θα εμφανίζει πόσοι χαρακτήρες δεν είναι γράμματα.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο από το πληκτρολόγιο και θα ελέγχει αν μπορεί να χρησιμοποιηθεί ως κωδικός ασφαλείας (password). Για να είναι αρκετά ισχυρός ο κωδικός, θα πρέπει να πληροί τις παρακάτω προϋποθέσεις:
			<ul><li>Να αποτελείται από τουλάχιστον 8 χαρακτήρες.</li>
			<li>Να περιέχει τουλάχιστον έναν αριθμό, ένα σύμβολο και ένα κεφαλαίο γράμμα.</li></ul>
			<p class="no-indent">Αν δεν πληροί τις προϋποθέσεις ασφαλείας, να εμφανίζει το μήνυμα </p>
			<p class="no-indent">«Ο κωδικός σας δεν είναι αρκετά ισχυρός».</p>
			</li>
			<li>Από μια λίστα με ονόματα χρηστών (usernames) διαγράψτε αυτά που περιέχουν κάποιον από τους παρακάτω χαρακτήρες: ‘ ’, ‘.</li>
			<li>Να δοθεί ένας αριθμός και να τυπωθεί σε λατινική μορφή.
			
				<table id="table037">
					<tbody>
						<tr class="No-Table-Style _idGenTableRowColumn-6">
							<td>
								<p class="no-indent">Ακέραιοι</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">1000</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">1900</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">500</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">400</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">100</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">90</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">50</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">40</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">10</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">9</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">5</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">4</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">1</p>
							</td>
						</tr>
						<tr class="No-Table-Style _idGenTableRowColumn-6">
							<td>
								<p class="no-indent">Λατινικά</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">M</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">CM</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">D</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">CD</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">C</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">XC</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">L</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">XL</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">X</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">IX</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">V</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">IV</p>
							</td>
							<td>
								<p class="no-indent ParaOverride-2">I</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			</li>
			<li>Να ελέγξετε αν δύο κείμενα περιέχουν τους ίδιους χαρακτήρες.</li>
			<li>Βρείτε αν μια λέξη περιέχει μοναδικά γράμματα.</li>
			<li>Δίνεται μια λέξη. Βρείτε το σκορ της στο Srable. Οι πόντοι που παίρνει κάθε γράμμα είναι οι παρακάτω:
			<p class="no-indent">1 πόντος: Α, Ο, Ε, Ι, Τ, Η, Σ, Ν</p>
			<p class="no-indent">2 πόντοι: Ρ, Κ, Π, Υ</p>
			<p class="no-indent">3 πόντοι: Λ, Μ, Ω</p>
			<p class="no-indent">4 πόντοι: Γ, Δ</p>
			<p class="no-indent">8 πόντοι: Β, Φ, Χ</p>
			<p class="no-indent">10 πόντοι: Ζ, Θ, Ξ, Ψ</p>
			</li>
			<li>Φτιάξτε πρόγραμμα που θα συμπιέζει ένα κείμενο της μορφής ‘ΑΑΑΑΔΔΔΔΔΔΔΕΕ’ ως εξής ‘4Α7Δ2Ε’.</li>
			<li>Δίνεται κείμενο που περιέχει γράμματα και αριθμούς. Να εμφανίσετε το πλήθος των γραμμάτων και των αριθμών.</li>
			<li>Δίνονται δύο κείμενα. Να εμφανίσετε τις θέσεις στο 1ο κείμενο όπου αρχίζει να εμφανίζεται το 2ο κείμενο (αν υπάρχουν τέτοιες θέσεις).</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται δύο string και θα τοποθετεί το 2ο κείμενο μέσα σε HTML tags από το 1ο κείμενο. Π.χ. τα κείμενα &apos;b&apos; και &apos;Python&apos; θα γίνουν &lt;b&gt;Python&lt;/b&gt;.</li>
			<li>Να δοθεί ένας αριθμός και να ελεγχθεί αν είναι έγκυρος αριθμός τηλεφώνου. Αν δεν είναι, τότε να αφαιρεθούν τα περιττά σύμβολα, ώστε να μείνουν μόνο αριθμοί.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται τα χρώματα μιας αντίστασης και θα εμφανίζει τον αριθμό Ohm που εκφράζει. Δίνεται η αντιστοιχία χρωμάτων και αριθμών:
			
				<table id="table038">
					<tbody>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>0</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>1</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>2</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>3</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>4</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>5</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>6</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>7</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>8</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>9</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Μαύρο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Καφέ</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Κόκκινο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Πορτοκαλί</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Κίτρινο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Πράσινο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Μπλε</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Μοβ</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Γκρίζο</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-12">
								<p>Άσπρο</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Δέσμη 4 χρωμάτων: Τα πρώτα 2 χρώματα δίνουν τον αριθμό. Το 3ο χρώμα είναι πολλαπλασιαστής: 10<sup class="superscript CharOverride-1">χρώμα</sup> και το 4ο χρώμα είναι η ανοχή. Π.χ. τα 3 χρώματα (χωρίς ανοχή).</p>
			<p class="no-indent">Κίτρινο, Πορτοκαλί, Κόκκινο, αντιστοιχούν σε 43 × 10<sup class="superscript CharOverride-1">2</sup> = 4,300 Ohm.</p>
			</li>
			<li>Δίνεται η ταχύτητα σύνδεσης, π.χ. “24Mbps”, ως κείμενο. Να τη μετατρέψετε σε ταχύτητα λήψης σε “3MBps”.</li>
			<li>Δίνεται κείμενο της μορφής “Version 2.7”. Να γράψετε πρόγραμμα που θα αυξάνει και τους δύο αριθμούς, εμφανίζοντας το αποτέλεσμα (π.χ. “Version 3.8”). <b>ΣΗΜΕΙΩΣΗ</b>: οι αριθμοί μπορεί να έχουν πολλά ψηφία.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται κείμενο με λέξεις και θα εμφανίζει κάθε λέξη αντίστροφα.</li>
		</ol>
		</section>
	</section>
	<section role="chapter" id="ch9">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 7</span> Πλειάδες</h1>
		<section role="section" id="ch9se1">
			<h1><span role="label">7.1</span> Εισαγωγή</h1>
			<img src="media/chapter_7_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Στις επόμενες παραγράφους παρουσιάζεται μια ακόμη ενσωματωμένη δομή της Python, η πλειάδα (tuple). Περιγράφονται</i><i> οι διαφορετικοί τρόποι δημιουργίας της, οι μέθοδοι που διαθέτει και οι τεχνικές χειρισμού των στοιχείων της. Επίσης, δίνονται τα χαρακτηριστικά της μαζί με τις ομοιότητες και διαφορές της με τη λίστα, ώστε ο αναγνώστης</i><i> να μπορεί να ξεχωρίζει και να χρησιμοποιεί καθεμιά από αυτές τις δομές με τον πλέον αποδοτικό τρόπο.</i></p>
			<p><i>Το πρώτο ερώτημα που δημιουργείται όταν κάποιος συναντά για πρώτη </i><i>φορά τις δομές της λίστας και της πλειάδας έχει να κάνει με τον λόγο ύπαρξης αυτών των δυο παρόμοιων δομών. Η αλήθεια είναι ότι οι ομοιότητες</i><i> ανάμεσά τους είναι περισσότερες από τις διαφορές τους. Ωστόσο, υπάρχουν κάποιες σημαντικές διαφοροποιήσεις που καθιστούν την κάθε δομή μοναδική.</i></p>
		</section>
		<section role="section" id="ch9se2">
			<h1><span role="label">7.2</span> Η δομή της πλειάδας</h1>
			<p class="no-indent">Η πλειάδα είναι ένας τύπος αντικειμένου ακολουθίας που μπορεί να περιλαμβάνει ως περιεχόμενο άλλου είδους αντικείμενα. Τα στοιχεία μέσα της είναι διατεταγμένα. Αυτό σημαίνει ότι κάθε στοιχείο καθορίζεται με βάση τη θέση του. Το βασικό χαρακτηριστικό της πλειάδας είναι ότι αποτελεί μια <i>αμετάβλητη (immutable)</i> δομή. Από τη στιγμή δηλαδή που θα δημιουργηθεί, δεν είναι δυνατόν να αλλάξει το περιεχόμενό της. Γι’ αυτό και δεν διαθέτει μεθόδους και λειτουργίες που υπάρχουν σε μια λίστα, για την προσθήκη στοιχείων, την ενημέρωση του περιεχομένου, την αλλαγή της δομής και του μεγέθους της ή τη διαγραφή των στοιχείων της. </p>
			<p>Η δυνατότητα της πλειάδας να παραμένει στην ίδια κατάσταση και μορφή, από τη στιγμή της δημιουργίας της μέχρι και το σημείο διαγραφής της από τη μνήμη ή τον τερματισμό του προγράμματος, είναι αυτό που στην ουσία τη διαφοροποιεί από τη λίστα. Σε ορισμένες, επίσης, περιπτώσεις, η χρήση της είναι υποχρεωτική. Για παράδειγμα, η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=1,2,3</span></p>
			<p class="no-indent">δημιουργεί μια νέα πλειάδα με όνομα <span class="courier-code">a</span>. Το ίδιο συμβαίνει και με άλλες δομές της Python, όπως οι συναρτήσεις που επιστρέφουν περισσότερα από ένα στοιχεία (βλ. Κεφάλαιο 10). Πλειάδες δημιουργούν και άλλα στοιχεία της γλώσσας, όπως κάποιες βιβλιοθήκες κώδικα. Σε αυτές τις περιπτώσεις η χρήση της πλειάδας είναι υποχρεωτική.</p>
			<p>Ο κύριος λόγος που κάνει απαραίτητη τη χρήση μιας πλειάδας σε ένα πρόγραμμα έχει να κάνει με το χαρακτηριστικό της αμετάβλητης δομής της και το γεγονός ότι μετά τη δημιουργία της δεν είναι δυνατό να αλλάξει. Έτσι, ένα στοιχείο που θα πρέπει να παραμείνει αναλλοίωτο καθ’ όλη τη διάρκεια εκτέλεσης του κώδικα θα πρέπει να έχει τη μορφή πλειάδας. Ακόμη και σε περιπτώσεις όπου κατά λάθος γίνουν προσπάθειες αλλαγής αυτού του στοιχείου, η Python θα εμφανίσει μήνυμα σφάλματος ώστε να αποφευχθεί κάτι τέτοιο. Αυτός ο τρόπος λειτουργίας αποφέρει έναν διαρκή έλεγχο για την ακεραιότητα των δεδομένων και προφυλάσσει από περιπτώσεις ακούσιας αλλοίωσής τους. </p>
		</section>
		<section role="section" id="ch9se3">
			<h1><span role="label">7.3</span> Δημιουργία πλειάδας</h1>
			<p class="no-indent">Για τη δημιουργία μιας νέας πλειάδας, αρκεί να δοθεί μια εντολή της μορφής:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=1,2,3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">(1,2,3)</span></p>
			<p class="no-indent">Το ίδιο αποτέλεσμα θα είχε και η παρακάτω εντολή, χρησιμοποιώντας αυτή τη φορά παρενθέσεις:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=(1,2,3)</span></p>
			<p class="no-indent">Η αναγνώριση μιας πλειάδας γίνεται συνήθως από τις παρενθέσεις που περικλείουν το περιεχόμενό της. Όπως φαίνεται και από τις επόμενες εντολές, μια πλειάδα μπορεί να περιέχει οποιοδήποτε άλλο αντικείμενο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=(&apos;Αννα&apos;,800,[&apos;Python&apos;,&apos;C&apos;])</span></p>
			<p class="no-indent">όπου το <span class="courier-code">a</span> είναι μια πλειάδα που περιέχει μια συμβολοσειρά, έναν ακέραιο αριθμό και μια λίστα με άλλες συμβολοσειρές. Περιέχει, δηλαδή, στοιχεία διαφορετικού τύπου δεδομένων.</p>
			<p>Ένας άλλος τρόπος δημιουργίας πλειάδων είναι και η συνάρτηση <span class="courier-code">tuple</span>, με την οποία δημιουργείται ένα νέο αντικείμενο τύπου πλειάδας από τιμές που τίθενται μέσα σε παρενθέσεις ή από τη μετατροπή κάποιας άλλης δομής. Για παράδειγμα, η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; t1=tuple((5,3))</span></p>
			<p class="no-indent">δημιουργεί μια πλειάδα με την τιμή <span class="courier-code">(5,3)</span>, ενώ η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; t2=tuple([1,2,3])</span></p>
			<p class="no-indent">μετατρέπει τη λίστα <span class="courier-code">[1,2,3]</span> σε πλειάδα με το ίδιο περιεχόμενο. Με παρόμοιο τρόπο η επόμενη εντολή μετατρέπει μια συμβολοσειρά σε πλειάδα. Κάθε χαρακτήρας της συμβολοσειράς τοποθετείται σε ξεχωριστή θέση στην πλειάδα, στη σειρά και συνεχόμενα, από τον αρχικό μέχρι τον τελευταίο χαρακτήρα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s=&apos;python&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t3=tuple(s)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t3</span></p>
			<p><span class="courier-code">(&apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;)</span></p>
			<p class="no-indent">Μια πλειάδα με ένα μόνο στοιχείο δημιουργείται με την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; t4=1,</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t4 </span></p>
			<p><span class="courier-code">(1,)</span></p>
			<p class="no-indent">Αυτό γίνεται γιατί, αν δοθεί ως <span class="courier-code">(1)</span>, θα αντιμετωπιστεί ως αριθμός. Η έκφραση <span class="courier-code">(1,)</span> χρησιμοποιείται για να μην υπάρχει σύγχυση περί του αν πρόκειται για πλειάδα με ένα στοιχείο ή απλά για έναν αριθμό μέσα σε παρενθέσεις.</p>
			<p>Για τη δημιουργία μιας κενής πλειάδας αρκεί η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; t5=tuple()</span></p>
			<p class="no-indent">ή:<span class="courier-code"> </span></p>
			<p><span class="courier-code">&gt;&gt;&gt; t5=()</span></p>
			<p class="no-indent">Η χρήση στοιχείων της πλειάδας γίνεται με βάση τη θέση τους. Η δεικτοδότηση που ισχύει και στις λίστες ή τις συμβολοσειρές ισχύει και για τις πλειάδες. Η παρακάτω γραμμή δημιουργεί μια νέα πλειάδα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=1,2,[1,2,3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">(1, 2, [1, 2, 3])</span></p>
			<p class="no-indent">Στη θέση 0 της πλειάδας <span class="courier-code">a</span> βρίσκεται το <span class="courier-code">1</span>, στη θέση 1 βρίσκεται το <span class="courier-code">2</span> και στη θέση 2 βρίσκεται η λίστα [<span class="courier-code">1,2,3]</span>.</p>
			<p>Για να χρησιμοποιηθεί, το 2ο στοιχείο του <span class="courier-code">a</span> θα πρέπει να δοθεί ως εξής:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(a[1])</span></p>
			<p><span class="courier-code">2</span></p>
			<p class="no-indent">Για την πρόσβαση σε εσωτερικά στοιχεία της πλειάδας που αφορούν άλλες δομές ακολουθίας, χρησιμοποιούνται επιπλέον δείκτες σε ξεχωριστές αγκύλες στο τέλος της έκφρασης. Για τη λίστα του προηγούμενου παραδείγματος, η επόμενη εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a[2][1]</span></p>
			<p><span class="courier-code">2</span></p>
			<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">2</span> ως εξής: ο δείκτης <span class="courier-code">[2]</span> αναφέρεται στο στοιχείο της θέσης 2, που είναι η λίστα <span class="courier-code">[1,2,3]</span>, ενώ ο δείκτης <span class="courier-code">[1]</span> επιστρέφει το στοιχείο της θέσης 1 της λίστας <span class="courier-code">[1,2,3]</span>, που είναι το 2.</p>
			<p>Παρόμοια είναι και η <i>κατάτμηση</i> (ή <i>τεμαχισμός – slicing</i>) που παρουσιάστηκε στο Κεφάλαιο 5 με τις λίστες. Με την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=(1,3,5,0,[2,4],7)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b[1:4]</span></p>
			<p><span class="courier-code">(3, 5, 0)</span></p>
			<p class="no-indent">επιστρέφονται ως πλειάδα τα στοιχεία από τη θέση 1 μέχρι και την 3η θέση. </p>
			<p>Μια πλειάδα μπορεί να περιέχει οποιαδήποτε τιμή. Αν προσπαθήσει όμως κανείς να αλλάξει κάποιο από τα στοιχεία και να τοποθετήσει στην αντίστοιχη θέση κάτι άλλο (κάποιο άλλο αντικείμενο), τότε θα εμφανιστεί σφάλμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b[0]=2</span></p>
			<p><span class="courier-code">TypeError: &apos;tuple&apos; object does not support item assignment</span></p>
			<p class="no-indent">Παρόλο όμως που η δομή της δεν μπορεί να αλλάξει, αν το περιεχόμενό της περιλαμβάνει μεταβαλλόμενες δομές (όπως λίστες), αυτές μπορούν να τροποποιηθούν. Δεν μπορούν όμως να αντικατασταθούν με νέες. Η παρακάτω εντολή θα αποτύχει:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b[4]=[2,1]</span></p>
			<p><span class="courier-code">TypeError: &apos;tuple&apos; object does not support </span><span class="courier-code">item assignment</span></p>
			<p class="no-indent">γιατί προσπάθησε να αντικαταστήσει την εμφωλευμένη λίστα με νέα λίστα και να αλλάξει την αναφορά της λίστας στη μνήμη με μια καινούργια, ενώ η επόμενη εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b[4][1]=1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">(1, 3, 5, 0, [2, 1], 7)</span></p>
			<p class="no-indent">άλλαξε με επιτυχία ένα στοιχείο (το <span class="courier-code">4</span> με τον αριθμό <span class="courier-code">1</span>) της ένθετης λίστας.</p>
			<p class="blockquote">Το περιεχόμενο επομένως μιας πλειάδας δεν αλλάζει, μπορεί όμως να αλλάξει το περιεχόμενο των μεταβλητών αντικειμένων που αυτή περιέχει.</p>
			<p class="no-indent">Αν υπάρχουν περιπτώσεις που χρειάζεται να αλλάξει το περιεχόμενο ή το μέγεθος μιας πλειάδας, τότε θα πρέπει ή να χρησιμοποιηθεί λίστα αντί για πλειάδα ή να δημιουργηθεί ξανά η πλειάδα με το ίδιο ή με άλλο όνομα και νέο περιεχόμενο. Αν η πλειάδα <span class="courier-code">b</span> περιέχει τις τιμές <span class="courier-code">1,2,3</span> και χρειάζεται να προστεθεί στο τέλος και η τιμή <span class="courier-code">4</span>, η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b+=4,</span></p>
			<p><span class="courier-code">(1, 2, 3, 4)</span></p>
			<p class="no-indent">θα προσθέσει στο τέλος της πλειάδας <span class="courier-code">b</span> τη νέα τιμή (<span class="courier-code">4</span>) και θα δημιουργήσει από την αρχή το αντικείμενο <span class="courier-code">b</span>. Αυτό διαπιστώνεται εύκολα αν πριν και μετά τις αλλαγές εκτελεστεί η συνάρτηση <span class="courier-code">id</span>. Η αναφορά στη μνήμη που επιστρέφει κάθε κλήση της <span class="courier-code">id</span> είναι διαφορετική, αφού αφορά διαφορετικά αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=(2,4,8)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; id(a)</span></p>
			<p><span class="courier-code">2062108694568</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a=a+(16,32) #δημιουργείται μια νέα πλειάδα</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">(2,4,8, 16,32)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; id(a)</span></p>
			<p><span class="courier-code">2062129800680</span></p>
			<p class="no-indent">Οι εμφωλευμένες τιμές σε μια πλειάδα μπορεί να είναι οτιδήποτε. Η πρόσβαση σε αυτές γίνεται με κατάλληλους δείκτες. Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 7-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 7-1 | Δεικτοδοτήσεις πλειάδας</figcaption><img src="media/ListaKodika-7-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">a</span> είναι μια πλειάδα με δυο στοιχεία. Το 1ο είναι μια νέα πλειάδα <span class="courier-code">(1,</span> <span class="courier-code">2,</span> <span class="courier-code">(3,</span> <span class="courier-code">4))</span>ενώ το 2ο μια λίστα <span class="courier-code">[5,</span> <span class="courier-code">6]</span>. Η δεικτοδότηση γίνεται όπως και στις λίστες. Για εμφωλευμένες δομές χρειάζονται επιπλέον αγκύλες με κατάλληλους δείκτες.</p>
			<p>Στην Εικόνα 7-1 αναλύεται πώς προέκυψε το αποτέλεσμα της γραμμής 12.</p>
			<figure class="lista-kodika">
				<figcaption>Εικονα 7-1 | Ανάλυση δεικτοδότησης ενθέτων δομών</figcaption><img src="media/chapter_7_image_2.jpg" alt=""/></figure>
			<p class="no-indent">Με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=tuple(&apos;python&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a[::-1]</span></p>
			<p><span class="courier-code">(&apos;n&apos;, &apos;o&apos;, &apos;h&apos;</span><span class="courier-code">, &apos;t&apos;, &apos;y&apos;, &apos;p&apos;)</span></p>
			<p class="no-indent">επιστρέφονται τα περιεχόμενα της πλειάδας με αντίστροφη σειρά.</p>
			<p>Μια πλειάδα είναι <i>επαναληπτικό</i> <i>αντικείμενο (iterable)</i> και μπορεί να συμμετέχει σε επαναληπτικές δομές όπως η <span class="courier-code">for.</span> Στη Λίστα Κώδικα 7-2 παρουσιάζονται ορισμένα παραδείγματα προσπέλασης πλειάδας με χρήση βρόχου τύπου <span class="courier-code">for</span>:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-2 | Προσπέλαση πλειάδας με χρήση της <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-7-2_fmt.png" alt=""/></figure>
			<p class="no-indent">ο οποίος, αφού τυπώσει το περιεχόμενο της πλειάδας: </p>
			<p><span class="courier-code">(&apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;)</span></p>
			<p class="no-indent">θα τη σαρώσει από την αρχή και θα εμφανίσει σε κάθε επανάληψη καθένα από τα στοιχεία της:</p>
			<p><span class="courier-code">p y t h o n</span></p>
		</section>
		<section role="section" id="ch9se4">
			<h1><span role="label">7.4</span> Πακετάρισμα πλειάδας</h1>
			<p class="no-indent">Με τη δημιουργία μιας νέας πλειάδας και την ανάθεση σε αυτήν μιας σειράς από τιμές ή αντικείμενα, που χωρίζονται μεταξύ τους με κόμμα, πραγματοποιείται άμεσα η λειτουργία του <i>πακεταρίσματος (packing)</i>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; p1=5,&apos;α&apos;,(3,2)</span></p>
			<p class="no-indent">Η λειτουργία στην ουσία αναθέτει σε μια «συσκευασία» αυτές τις πολλαπλές τιμές ή τις αναφορές όπου οι τιμές υπάρχουν στη μνήμη. Η σειρά με την οποία παρατίθενται τα δεδομένα είναι και η σειρά με την οποία θα τοποθετηθούν μέσα στην πλειάδα. Μ’ αυτή τη σειρά θα γίνεται και η προσπέλαση και δεικτοδότησή τους.</p>
			<p>Η αντίθετη διαδικασία, η εξαγωγή δηλαδή στοιχείων από την πλειάδα και η τοποθέτησή τους σε άλλες μεταβλητές, ονομάζεται <i>ξεπακετάρισμα (unpacking)</i>. Αυτή η διαδικασία, που έχει ήδη περιγραφεί για τη λίστα, είναι ακριβώς η ίδια και μπορεί να πάρει δυο μορφές. </p>
			<p>Στην πρώτη μορφή, κάθε στοιχείο της πλειάδας δίνεται ως τιμή σε μια μεταβλητή. Για παράδειγμα, η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,c=(1,2,[3,4])</span></p>
			<p class="no-indent">αναθέτει στα <span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span> τις τιμές <span class="courier-code">1,2</span> και <span class="courier-code">[3,4]</span> αντίστοιχα. Η προηγούμενη εντολή θα μπορούσε να δοθεί και πιο απλά ως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,c=1,2,[3,4]</span></p>
			<p class="no-indent">η οποία έχει ήδη παρουσιαστεί στο Κεφάλαιο 2 ως περίπτωση σύνθετης εντολής εκχώρησης πολλαπλών τιμών, ταυτόχρονα, σε μια σειρά από μεταβλητές.</p>
			<p>Απαραίτητη προϋπόθεση, το πλήθος των μεταβλητών να είναι ίδιο με το πλήθος των τιμών που θα τους ανατεθεί. Σε διαφορετική περίπτωση, θα προκύψει σφάλμα κατά την εκτέλεση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b=1,2,3,4</span></p>
			<p><span class="courier-code">ValueError: too many values to unpack (expected 2)</span></p>
			<p class="no-indent">γιατί οι τιμές είναι περισσότερες από τις μεταβλητές. Σε μια τέτοια περίπτωση το ξεπακετάρισμα μπορεί να πάρει την παρακάτω μορφή που ονομάζεται <i>επεκτεταμένη (extended unpacking)</i>, όπου οι αναθέσεις τιμών γίνονται με τέτοιο τρόπο ώστε κάθε μεταβλητή να παίρνει μια τιμή, εκτός από κάποια η οποία θα πάρει τις υπόλοιπες τιμές που δεν έχουν αποδοθεί κάπου. Η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,*c=1,2,3,4</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b,c</span></p>
			<p><span class="courier-code">(1, 2, [3, 4])</span></p>
			<p class="no-indent">θα δώσει στις πρώτες δυο μεταβλητές (<span class="courier-code">a</span> και <span class="courier-code">b</span>) τις πρώτες δυο τιμές (<span class="courier-code">1</span> και <span class="courier-code">2</span>), ενώ οι υπόλοιπες τιμές (<span class="courier-code">3</span> και <span class="courier-code">4</span>) θα δοθούν όλες μαζί, ως λίστα πλέον, στη μεταβλητή <span class="courier-code">c</span>.</p>
		</section>
		<section role="section" id="ch9se5">
			<h1><span role="label">7.5</span> Γεννήτριες εκφράσεις</h1>
			<p class="no-indent">Στο Κεφάλαιο 5 έγινε περιγραφή της <i>σύνθεσης λίστας (list comprehension)</i>. Ο ίδιος μηχανισμός μπορεί να χρησιμοποιηθεί και για πλειάδες, ωστόσο το αποτέλεσμα είναι αρκετά διαφορετικό. Η σύνθεση με τη χρήση παρενθέσεων παράγει ένα ειδικό αντικείμενο που ονομάζεται γεννήτρια και αναφέρεται ως <i>γεννήτρια έκφραση (generator expression)</i>. Πιο αναλυτικά, οι παρακάτω εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=[x**2 for x in [1,2,3,4]]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=(x**2 for x in [1,2,3,4])</span></p>
			<p class="no-indent">το μόνο στο οποίο διαφέρουν είναι η χρήση αγκυλών και παρενθέσεων στα δυο άκρα τους. Αν δοκιμάσει κανείς να τις χρησιμοποιήσει, θα δει ότι τα <span class="courier-code">a</span> και <span class="courier-code">b</span> είναι εντελώς διαφορετικά αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a), type(b)</span></p>
			<p><span class="courier-code">(&lt;class &apos;list&apos;&gt;, &lt;class &apos;generator&apos;&gt;)</span></p>
			<p class="no-indent">Από τις προηγούμενες εντολές φαίνεται ότι το <span class="courier-code">a</span> είναι ένα νέο αντικείμενο τύπου λίστας, με περιεχόμενο τα στοιχεία της λίστας <span class="courier-code">[1,2,3,4]</span> υψωμένα στο τετράγωνο. Αντίστοιχα, το <span class="courier-code">b</span> είναι ένα νέο αντικείμενο τύπου γεννήτριας. Αυτού του είδους τα αντικείμενα χρησιμοποιούνται κυρίως σε επαναληπτικές δομές, όπως η <span class="courier-code">for</span>, και παράγουν σε κάθε επανάληψη ένα διακριτό αποτέλεσμα, μια μεμονωμένη τιμή, και όχι όλες μαζί. Στη Λίστα Κώδικα 7-3 φαίνεται αυτή η λειτουργία.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-3 | Λειτουργία γεννήτριας με χρήση της <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-7-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Σε κάθε επανάληψη το <span class="courier-code">i</span> αποκτά μια από τις παραγόμενες τιμές του <span class="courier-code">b</span>, με τη σειρά που αυτό τις διαθέτει και εμφανίζονται στην οθόνη:</p>
			<p><span class="courier-code">1 4 9 16</span></p>
			<p class="no-indent">Χαρακτηριστικό της όλης διαδικασίας είναι ότι οι πιο πάνω τιμές δεν υπήρχαν αποθηκευμένες στο <span class="courier-code">b</span> ή κάπου αλλού, αλλά δημιουργήθηκαν τη στιγμή που έτρεχε κάθε επανάληψη. Έτσι αποφεύγεται η χρήση αποθηκευτικού χώρου, ειδικά σε περιπτώσεις όπου οι τιμές που πρέπει να παραχθούν είναι πάρα πολλές. Το παρακάτω πρόγραμμα (Λίστα Κώδικα 7-4) εμφανίζει τον χώρο που απαιτείται για την αποθήκευση όσων στοιχείων προκύπτουν από μια σύνθεση λίστας και μια γεννήτρια.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-4 | Διαφορά μεγέθους στη σύνθεση</figcaption><img src="media/ListaKodika-7-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Για τη μέτρηση της ποσότητας μνήμης που απαιτούν οι δυο μεταβλητές <span class="courier-code">a</span> και <span class="courier-code">b</span>, χρησιμοποιείται η μέθοδος <span class="courier-code">getsizeof</span> της ενσωματωμένης βιβλιοθήκης <span class="courier-code">sys</span>.</p>
			<p>Εκτός από το ότι το πρόγραμμα έπρεπε να περιμένει να τελειώσει η δημιουργία της λίστας για να προχωρήσει και να εκτελέσει τις υπόλοιπες λειτουργίες, το μέγεθος της λίστας μπορεί να είναι τόσο μεγάλο, ώστε να μη χωράει στη μνήμη, να εμφανιστεί κάποιο σφάλμα και το πρόγραμμα να μην τερματιστεί ποτέ:</p>
			<p><span class="courier-code">Μέγεθος λίστας: 824464</span></p>
			<p><span class="courier-code">Μέγεθος γεννήτριας: 88</span></p>
			<p class="no-indent">Αν χρειαστεί να χρησιμοποιηθεί μια από τις παραγόμενες τιμές του <span class="courier-code">b</span>, αυτό μπορεί να γίνει μέσω της μεθόδου <span class="courier-code">next</span>, όπως φαίνεται και στη συνέχεια:</p>
			<p><span class="courier-code">&gt;&gt;&gt; b=(x**2 for x in [1,2])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(b)</span></p>
			<p><span class="courier-code">1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(b)</span></p>
			<p><span class="courier-code">4</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(b)</span></p>
			<p><span class="courier-code">StopIteration</span></p>
			<p class="no-indent">Μόλις η γεννήτρια τελειώσει με τις τιμές που μπορεί να παράξει, προκαλείται η εξαίρεση <span class="courier-code">StopIteration</span> και εμφανίζεται το αντίστοιχο μήνυμα σφάλματος.</p>
			<p><b>ΣΗΜΕΙΩΣΗ</b>: αν η γεννήτρια χρησιμοποιηθεί κάπου (π.χ. σε μια <span class="courier-code">for</span>), τότε οι τιμές της θα «τελειώσουν» και θα πρέπει να εκτελεστεί ξανά η γεννήτρια έκφραση πριν χρησιμοποιηθούν πάλι οι τιμές της.</p>
		</section>
		<section role="section" id="ch9se6">
			<h1><span role="label">7.6</span> Μέθοδοι και ιδιότητες της πλειάδας</h1>
			<p class="no-indent">Η πλειάδα διαθέτει μερικές μόνο από τις μεθόδους διαχείρισης περιεχομένου που έχει η λίστα. Αυτό είναι αναμενόμενο, γιατί δεν έχει τη δυνατότητα να αλλάζει το περιεχόμενο ή τη δομή της. Έτσι, δεν είναι διαθέσιμες λειτουργίες όπως η εισαγωγή νέων στοιχείων, η διαγραφή ή εξαγωγή στοιχείων από αυτήν και η ταξινόμησή τους. Οι διαθέσιμες μέθοδοι είναι λίγες και έχουν σχέση με βασικές πληροφορίες που μπορεί κάποιος να πάρει για μια πλειάδα, όπως για παράδειγμα τη θέση ενός στοιχείου ή πόσες φορές υπάρχει αυτό μέσα στην πλειάδα.</p>
			<section role="subsection" id="ch9se6ss1">
				<h1><span role="label">7.6.1</span> Η μέθοδος <span class="courier-code">index</span></h1>
				<p class="no-indent">Ο τρόπος σύνταξης της μεθόδου <span class="courier-code">index</span> είναι:</p>
				<p><span class="courier-code">πλειάδα.index(τιμή, σημείο έναρξης)</span></p>
				<p class="no-indent">Η μέθοδος <span class="courier-code">index</span> αναζητά αν υπάρχει μια τιμή μέσα σε μια πλειάδα και επιστρέφει τη θέση όπου βρίσκεται. Αν υπάρχει πολλές φορές, θα επιστρέψει τη θέση του πρώτου στη σειρά στοιχείου που εντόπισε. Η αναζήτηση ενός στοιχείου γίνεται από την αρχή της πλειάδας, εκτός και αν καθοριστεί άλλο σημείο εκκίνησης, κάποια άλλη θέση. Για την επόμενη πλειάδα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p=tuple(&apos;Καλημέρα&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; p</span></p>
				<p><span class="courier-code">(&apos;Κ&apos;, &apos;α&apos;, &apos;λ&apos;, &apos;η&apos;, &apos;μ&apos;, &apos;έ&apos;, &apos;ρ&apos;, &apos;α&apos;)</span></p>
				<p class="no-indent">η επόμενη εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p.index(&apos;α&apos;)</span></p>
				<p><span class="courier-code">1</span></p>
				<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">1</span>, γιατί ο πρώτος χαρακτήρας ‘<span class="courier-code">α</span>’ υπάρχει στη θέση 1 της πλειάδας. Αντίστοιχα η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p.index(&apos;α&apos;,2)</span></p>
				<p><span class="courier-code">7</span></p>
				<p class="no-indent">επιστρέφει την τιμή <span class="courier-code">7</span>, γιατί άλλαξε το σημείο έναρξης της αναζήτησης (από τη θέση 2 και μετά) και εντόπισε τον 2ο χαρακτήρα ‘<span class="courier-code">α</span>’ της πλειάδας που βρίσκεται στη θέση <span class="courier-code">7</span>. Αν η αναζήτηση αποτύχει: </p>
				<p><span class="courier-code">&gt;&gt;&gt; p.index(&apos;Α&apos;,2)</span></p>
				<p><span class="courier-code">ValueError: tuple.index(x): x not in tuple</span></p>
				<p class="no-indent">θα εμφανιστεί μήνυμα σφάλματος.</p>
			</section>
			<section role="subsection" id="ch9se6ss2">
				<h1><span role="label">7.6.2</span> Η μέθοδος <span class="courier-code">count</span></h1>
				<p class="no-indent">Μια ακόμη μέθοδος είναι και η <span class="courier-code">count</span>, που καταμετρά πόσες φορές υπάρχει μια τιμή μέσα στην πλειάδα και επιστρέφει αυτό τον αριθμό. Η παρακάτω εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p.count(&apos;</span><span class="courier-code">α&apos;)</span></p>
				<p><span class="courier-code">2</span></p>
				<p class="no-indent">μετρά πόσοι χαρακτήρες ‘<span class="courier-code">α</span>’ υπάρχουν στην πλειάδα <span class="courier-code">p</span> του προηγούμενου παραδείγματος. Η επόμενη εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p2=(1,2,3,(2,2,2))</span></p>
				<p class="no-indent">χρειάζεται προσοχή γιατί περιέχει εμφωλευμένες δομές και το αποτέλεσμα ίσως να μην είναι το αναμενόμενο. Η αναζήτηση του αριθμού <span class="courier-code">2</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p2.count(2)</span></p>
				<p><span class="courier-code">1</span></p>
				<p class="no-indent">γίνεται μόνο στο 1ο, εξωτερικό «επίπεδο» της πλειάδας, χωρίς να εισέρχεται η συνάρτηση στο εσωτερικό άλλων ένθετων δομών. Γι’ αυτό τον λόγο δεν εντοπίζονται οι αριθμοί <span class="courier-code">2</span> που υπάρχουν στην ένθετη πλειάδα. Για να εντοπιστούν, θα πρέπει να γίνει κατάλληλη δεικτοδότηση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; p2[3].count(2)</span></p>
				<p><span class="courier-code">3</span></p>
			</section>
		</section>
		<section role="section" id="ch9se7">
			<h1><span role="label">7.7</span> Χρήση τελεστών με πλειάδες</h1>
			<p class="no-indent">Όπως και στη λίστα, έτσι και στην πλειάδα υπάρχουν διάφοροι τελεστές για την πραγματοποίηση ενεργειών πάνω στο περιεχόμενό τους. </p>
			<section role="subsection" id="ch9se7ss1">
				<h1><span role="label">7.7.1</span> Τελεστής <span class="courier-code">in</span></h1>
				<p class="no-indent">Ο τελεστής <span class="courier-code">in</span> χρησιμοποιείται για τον έλεγχο ύπαρξης μιας τιμής μέσα σε μια πλειάδα, αλλά και για τη χρήση πλειάδας σε δομές επανάληψης <span class="courier-code">for</span>. Στα επόμενα παραδείγματα φαίνονται μερικοί τρόποι χρήσης του τελεστή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=(1,2,(2,3))</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; 2 in a</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">Η τιμή <span class="courier-code">2</span> εντοπίστηκε μέσα στην πλειάδα, οπότε το αποτέλεσμα είναι <span class="courier-code">True</span>. Η παρακάτω όμως εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; 3 in a</span></p>
				<p><span class="courier-code">False</span></p>
				<p class="no-indent">αδυνατεί να εντοπίσει την τιμή <span class="courier-code">3</span> μέσα στην πλειάδα, επιστρέφοντας την τιμή <span class="courier-code">False</span>. Αυτό είναι επόμενο, αφού η αναζήτηση γίνεται ανάμεσα στα στοιχεία που υπάρχουν στην πλειάδα και όχι μέσα σε άλλα ένθετα αντικείμενα όπως είναι η εσωτερική πλειάδα <span class="courier-code">(2,3)</span>. Για την αναζήτηση της τιμής <span class="courier-code">2</span> μέσα στην «εσωτερική» πλειάδα, θα πρέπει να δοθεί η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; 3 in a[2]</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">όπου ο δείκτης <span class="courier-code">2</span> αναφέρεται στο αντικείμενο της 2ης θέσης (3ο στοιχείο δηλαδή) που είναι η πλειάδα <span class="courier-code">(2,3).</span></p>
			</section>
			<section role="subsection" id="ch9se7ss2">
				<h1><span role="label">7.7.2</span> Τελεστής <span class="courier-code">+</span> και <span class="courier-code">*</span></h1>
				<p class="no-indent">Στην πλειάδα, όπως και στις λίστες ή τις συμβολοσειρές, γίνεται <i>υπερφόρτωση (overload)</i> των τελεστών ‘<span class="courier-code">+</span>’ και ‘<span class="courier-code">*</span>’, όπου ο 1ος πραγματοποιεί συνένωση πλειάδων, ενώ ο 2ος προκαλεί την επαναληπτική εμφάνιση μιας πλειάδας. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=1,2</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a+a</span></p>
				<p><span class="courier-code">(1, 2, 1, 2)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a*3</span></p>
				<p><span class="courier-code">(1, 2, 1, 2, 1, 2)</span></p>
			</section>
			<section role="subsection" id="ch9se7ss3">
				<h1><span role="label">7.7.3</span> Τελεστής <span class="courier-code">+=</span> και <span class="courier-code">*=</span></h1>
				<p class="no-indent">Αν χρειαστεί να αλλάξει το περιεχόμενο μιας πλειάδας, θα πρέπει αυτή να δημιουργηθεί από την αρχή. Έτσι, για την πλειάδα <span class="courier-code">a</span> του προηγούμενου παραδείγματος, ισχύουν τα παρακάτω (Λίστα Κώδικα 7-5).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 7-5 | Χρήση τελεστών σε πλειάδες</figcaption><img src="media/ListaKodika-7-5_fmt.png" alt=""/></figure>
				<p class="no-indent"><b>Γραμμή 1</b>: Η πλειάδα <span class="courier-code">a</span> αλλάζει μορφή, παίρνοντας την τιμή που είχε μαζί με τις νέες τιμές <span class="courier-code">3</span> και <span class="courier-code">4</span>.</p>
				<p class="no-indent"><b>Γραμμή 4</b>: Το περιεχόμενο του <span class="courier-code">a</span> αλλάζει ξανά. Θα περιέχει δυο φορές ότι είχε πριν την εντολή 4.</p>
				<p class="no-indent"><b>Γραμμή 8</b>: Δεν μπορεί να γίνει συνένωση πλειάδας και αριθμού, γι’ αυτό και προκαλείται σφάλμα.</p>
				<p class="no-indent"><b>Γραμμή 10</b>: Για να γίνει συνένωση μιας πλειάδας με έναν ακόμη αριθμό, ή για να προστεθεί στην πλειάδα μια ακόμα τιμή, θα πρέπει η τιμή να δοθεί ως πλειάδα. Αυτό εξηγεί και το κόμμα στο τέλος της εντολής.</p>
				<p class="no-indent"><b>Γραμμή 16</b>: Με τον τελεστή ‘<span class="courier-code">+=</span>’ δημιουργείται νέο αντικείμενο, δηλαδή νέα πλειάδα. Αυτό φαίνεται και από το <span class="courier-code">id</span> του <span class="courier-code">a</span> πριν και μετά την εκτέλεση της εντολής με τον τελεστή ‘<span class="courier-code">+=</span>’.</p>
				<p class="no-indent"><b>Γραμμή 20</b>: Προστίθεται μια λίστα.</p>
				<p class="no-indent"><b>Γραμμή 25</b>: Γίνεται προσπάθεια να αδειάσει η εσωτερική λίστα, αλλά η εντολή αποτυγχάνει εμφανίζοντας μήνυμα σφάλματος.</p>
				<p>Αντίθετα, η εντολή στη:</p>
				<p class="no-indent"><b>Γραμμή 27</b>: αλλάζει το περιεχόμενο της λίστας στο εσωτερικό της πλειάδας και το αντικαθιστά με την κενή λίστα.</p>
			</section>
		</section>
		<section role="section" id="ch9se8">
			<h1><span role="label">7.8</span> Χρήση συναρτήσεων με πλειάδες</h1>
			<p class="no-indent">Οι ενσωματωμένες συναρτήσεις της Python που δέχονται αντικείμενα ακολουθίας μπορούν να χρησιμοποιήσουν και πλειάδες. Η Λίστα Κώδικα 7-6 περιλαμβάνει μερικά παραδείγματα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 7-6 | Χρήση συναρτήσεων με πλειάδες</figcaption><img src="media/ListaKodika-7-6_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 1</b>: Δημιουργείται μια νέα πλειάδα μέσω της συνάρτησης <span class="courier-code">range</span>, που περιέχει τους αριθμούς από το <span class="courier-code">0</span> μέχρι το <span class="courier-code">100</span>.</p>
			<p class="no-indent"><b>Γραμμή 2</b>: Υπολογίζεται το άθροισμα των στοιχείων της πλειάδας με τη βοήθεια της συνάρτησης <span class="courier-code">sum</span>. Προσοχή πρέπει να δοθεί στις περιπτώσεις όπου η πλειάδα περιέχει και άλλου τύπου στοιχεία, όπως στη γραμμή 12. Σ’ αυτή την περίπτωση, ο υπολογισμός του αθροίσματος θα αποτύχει.</p>
			<p class="no-indent"><b>Γραμμές 4, 6</b>: Υπολογίζονται το μέγιστο και το ελάχιστο στοιχείο της πλειάδας. Και εδώ, όπως σε όλα τα αντικείμενα ακολουθίας που δέχονται οι συναρτήσεις <span class="courier-code">min</span> και <span class="courier-code">max</span>, μπορεί να δοθεί και κανόνας φιλτραρίσματος του αποτελέσματος με τη μορφή συνάρτησης (βλ. Κεφάλαιο 5 με λίστες).</p>
			<p class="no-indent"><b>Γραμμές 8, 10</b>: Η συνάρτηση <span class="courier-code">len</span> επιστρέφει το μέγεθος (μήκος) της πλειάδας, δηλαδή το πλήθος των στοιχείων που περιέχει. Για την περίπτωση του <span class="courier-code">a</span> επιστρέφει τον αριθμό <span class="courier-code">101</span>, ενώ μαζί με την πλειάδα <span class="courier-code">(0,0)</span> επιστρέφει τον αριθμό <span class="courier-code">103</span>, αφού με την προσθήκη των στοιχείων της νέας πλειάδας αυξάνει το πλήθος των στοιχείων σε 103.</p>
			<p class="no-indent"><b>Γραμμή 15</b>: Η πλειάδα δεν μπορεί να ταξινομηθεί, γιατί πολύ απλά δεν μπορεί να αλλάξει. Με τη χρήση της συνάρτησης <span class="courier-code">sorted</span> μπορεί να γίνει η ταξινόμησή της και να δοθεί ως τιμή σε μια νέα μεταβλητή (την <span class="courier-code">b</span>), αφήνοντας την πλειάδα ανέπαφη.</p>
			<p class="no-indent"><b>Γραμμή 21</b>: Με τη συνάρτηση <span class="courier-code">any</span> ελέγχεται αν υπάρχει έστω και ένα στοιχείο μη μηδενικό ή μη κενό μέσα σε μια πλειάδα, ή γενικά σε ένα αντικείμενο ακολουθίας. Αν ισχύει αυτό, επιστρέφεται η τιμή <span class="courier-code">True</span>. Αν δεν υπάρχει κανένα τέτοιο, η συνάρτηση <span class="courier-code">any</span> επιστρέφει <span class="courier-code">False</span>.</p>
			<p class="no-indent"><b>Γραμμή 24</b>: Αντίθετα, η συνάρτηση <span class="courier-code">all</span> επιστρέφει <span class="courier-code">True</span> αν όλα τα στοιχεία της πλειάδας είναι μη μηδενικά ή δεν είναι κενά. Έστω και ένα αν είναι κενό ή μηδέν, η συνάρτηση επιστρέφει <span class="courier-code">False</span>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 7-1</b>: Για την πλειάδα <span class="courier-code">a=(2,4,8,2,5,4,2,8,2)</span> να βρεθούν οι θέσεις του αριθμού <span class="courier-code">2</span>, να προστεθούν σε νέα πλειάδα και να εμφανιστούν στην οθόνη.</p>
			</blockquote>
			<p class="no-indent">Στη Λίστα Κώδικα 7-7 παρουσιάζεται η απάντηση στο Παράδειγμα 7-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-7 | Εντοπισμός θέσεων</figcaption><img src="media/ListaKodika-7-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα που θα εμφανιστεί στην οθόνη είναι:</p>
			<p><span class="courier-code">0 3 6 8</span></p>
			<p class="no-indent">Το ίδιο αποτέλεσμα θα είχε και η παρακάτω εντολή, η οποία χρησιμοποιεί σύνθεση λίστας, παράγει μια πλειάδα και τυπώνει το περιεχόμενό της με την τεχνική unpacking:</p>
			<p><span class="courier-code">print(*tuple([x for x,y in enumerate(a) if y==2]))</span></p>
			<p class="no-indent">Ο αστερίσκος μπροστά από την πλειάδα ξετυλίγει τις τιμές της και εμφανίζει τα στοιχεία της χωρίς τις παρενθέσεις.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 7-2</b>: Να δημιουργηθεί πλειάδα με 1000 τυχαίες τιμές, από το –100 μέχρι το 100. Να υπολογιστούν ο αριθμητικός μέσος x, η διακύμανση <i>s</i><sup class="superscript CharOverride-1">2</sup> και η τυπική απόκλιση <i>s </i>και να εμφανιστούν στην οθόνη. Οι τύποι των παραπάνω στοιχείων είναι:</p>
			</blockquote>
			<p><img src="media/pg325.png"/></p>
			<p class="no-indent">Η Λίστα Κώδικα 7-8 περιλαμβάνει την απάντηση στο Παράδειγμα 7-2.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-8 | Βασικά στατιστικά</figcaption><img src="media/ListaKodika-7-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα (τυχαίο) που θα εμφανιστεί στην οθόνη είναι:</p>
			<p><span class="courier-code">-1.958 3375.68792392392 58.10067059788484 58.10067059788484</span></p>
			<p class="no-indent">Προφανώς τα αποτελέσματα που θα πάρει κάποιος αν ξανατρέξει το πρόγραμμα θα είναι διαφορετικά.</p>
			<p>Μετά την εισαγωγή των βιβλιοθηκών <span class="courier-code">random</span> και <span class="courier-code">math</span> στο πρόγραμμα, δημιουργείται μια λίστα με 1000 τυχαίες τιμές από το –100 μέχρι το 100. Στη γραμμή 3 υπολογίζεται ο αριθμητικός μέσος, στη γραμμή 4 η διακύμανση, ενώ στη γραμμή 5 η τυπική απόκλιση. Στη γραμμή 2 έγινε χρήση του ‘<span class="courier-code">_</span>’ και όχι κάποιας μεταβλητής, γιατί αυτή η τιμή δεν χρησιμοποιείται πουθενά.</p>
		</section>
		<section role="section" id="ch9se9">
			<h1><span role="label">7.9</span> Πλειάδα με ονοματεπώνυμο</h1>
			<p class="no-indent">Η πρόσβαση στα στοιχεία μιας πλειάδας γίνεται βάσει της θέσης που έχει κάθε στοιχείο της. Τις περισσότερες φορές, η δεικτοδότηση για την προσπέλαση των στοιχείων είναι απλή υπόθεση και μπορεί να γίνει εύκολα. Ωστόσο, όταν οι πληροφορίες είναι πολλές και απαιτείται προσδιορισμός κάθε στοιχείου με βάση κάποιο χαρακτηριστικό του, τότε ο χειρισμός των στοιχείων της πλειάδας γίνεται δύσκολος. Συνήθως, όταν απαιτείται η ανάκτηση κάποιου στοιχείου βάσει της τιμής ενός χαρακτηριστικού του (ενός κλειδιού δηλαδή), η χρήση της δομής του λεξικού είναι αναγκαία και αναπόφευκτη. Η δομή του λεξικού είναι μια από τις ενσωματωμένες και βασικές δομές της Python και περιγράφεται στο Κεφάλαιο 9, ωστόσο και αυτή έχει κάποιους περιορισμούς. Για την πρόσβαση σε στοιχεία μιας πλειάδας μέσω κάποιου αναγνωριστικού ή ονόματος, η Python διαθέτει τροποποιημένη δομή πλειάδας που είναι γνωστή ως <i>ονομαζόμενη πλειάδα</i> ή <i>πλειάδα με όνομα (named tuple)</i>. Αυτή η δομή βρίσκεται σε μια από τις βασικές βιβλιοθήκες της γλώσσας που ονομάζεται <span class="courier-code">collections</span>. Η βιβλιοθήκη είναι ενσωματωμένη στην Python στις τελευταίες εκδόσεις της (μετά την έκδοση 2.6) και είναι άμεσα διαθέσιμη μέσω της εντολής <span class="courier-code">import</span>. Η δημιουργία μιας πλειάδας με όνομα είναι απλή και γίνεται περισσότερο κατανοητή μέσα από το επόμενο παράδειγμα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 7-3</b>: Για τους υπάλληλους μιας εταιρείας, καταγράφονται κάποιες βασικές πληροφορίες όπως το όνομα, ο μισθός, η ηλικία και το τμήμα στο οποίο εργάζονται. Στον παρακάτω πίνακα έχουμε τα στοιχεία τριών υπαλλήλων.</p>
			</blockquote>
			
				<table id="table039">
					<tbody>
						<tr>
							
								<th>Όνομα</th>
							
							
								<th>Μισθός</th>
							
							
								<th>Ηλικία</th>
							
							
								<th>Τμήμα</th>
							
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-13 _idGenCellOverride-2">
								<p>Άννα</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13 _idGenCellOverride-2">
								<p>950</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13 _idGenCellOverride-2">
								<p>26</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13 _idGenCellOverride-2">
								<p>ΙΤ</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>Πέτρος</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>1100</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>28</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>ΙΤ</p>
							</td>
						</tr>
						<tr>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>Γιώργος</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>900</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>30</p>
							</td>
							<td class="Table-Style Texts Texts CellOverride-13">
								<p>Sales</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Με τη χρήση της πλειάδας, τα στοιχεία θα μπορούσαν να αποθηκευτούν ως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna=&apos;Άννα&apos;,950,26,&apos;IT&apos;</span></p>
			<p class="no-indent">και η πρόσβαση σε αυτά να γίνεται με κατάλληλη δεικτοδότηση της πλειάδας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna[1]</span></p>
			<p><span class="courier-code">950</span></p>
			<p class="no-indent">Στην πλειάδα με όνομα, θα χρειαστεί να γίνει εισαγωγή της βιβλιοθήκης <span class="courier-code">collections</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import collections</span></p>
			<p class="no-indent">Η πρώτη εργασία που πρέπει να γίνει είναι να δημιουργηθεί ένα αντικείμενο τύπου <span class="courier-code">namedtuple</span> στο οποίο θα ενσωματώνονται όλες οι απαραίτητες πληροφορίες κάθε υπαλλήλου. Η παρακάτω εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; employee=collections.namedtuple(&apos;Employee&apos;,&apos;name age sal dept&apos;)</span></p>
			<p class="no-indent">δημιουργεί αντικείμενο που ονομάζεται employee και περιλαμβάνει τις ιδιότητες όνομα (<span class="courier-code">name</span>), μισθό (<span class="courier-code">sal</span>), ηλικία (<span class="courier-code">age</span>) και τμήμα υπαλλήλου (<span class="courier-code">dept</span>), με την περιγραφή τους μέσα σε μια συμβολοσειρά.</p>
			<p>Για κάθε υπάλληλο θα δημιουργηθεί μια πλειάδα ως αντίγραφο ή στιγμιότυπο του αντικειμένου <span class="courier-code">employee</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna=employee(&apos;Άννα&apos;,26,950,&apos;ΙΤ&apos;)</span></p>
			<p class="no-indent">Το ίδιο αποτέλεσμα μπορεί να έχει και η επόμενη έκφραση:</p>
			<p><span class="courier-code">anna=employee(name=&apos;Άννα&apos;,sal=950,age=26,dept=&apos;ΙΤ&apos;)</span></p>
			<p class="no-indent">Mε τον 1ο τρόπο πρέπει τα στοιχεία να δοθούν με τη σωστή σειρά, όπως δηλώθηκαν δηλαδή κατά την κατασκευή του αντικειμένου, ενώ με τον 2ο τρόπο αυτό δεν είναι υποχρεωτικό, αφού κάθε στοιχείο δηλώνεται σε τι αντιστοιχεί.</p>
			<p>Η πρόσβαση σε κάθε στοιχείο ενός υπαλλήλου γίνεται με το όνομα της πλειάδας, είτε γράφοντας με αγκύλες τον δείκτη του στοιχείου είτε απλά γράφοντας το όνομά του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna[1]</span></p>
			<p><span class="courier-code">26</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; anna.age</span></p>
			<p><span class="courier-code">26</span></p>
			<p class="no-indent">Γράφοντας το όνομα της πλειάδας, φαίνονται όλες οι πληροφορίες που ενσωματώνει αυτή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna</span></p>
			<p><span class="courier-code">Employee(name=&apos;Άννα&apos;, age=26, sal=950, dept=&apos;ΙΤ&apos;</span><span class="courier-code">)</span></p>
			<p class="no-indent">Με παρόμοιο τρόπο δημιουργούνται πλειάδες και για τους άλλους υπαλλήλους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; peter=employee(name=&apos;Πέτρος&apos;,sal=1100,age=28,dept=&apos;ΙΤ&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; george=employee(name=&apos;Γιώργος&apos;,sal=900,age=30,dept=&apos;Sales&apos;)</span></p>
			<p class="no-indent">Και οι τρεις πλειάδες θα μπορούσαν να μπουν ως περιεχόμενο σε μια νέα πλειάδα ή λίστα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; emps=[anna,peter,george]</span></p>
			<p class="no-indent">Η νέα λίστα θα έχει ως περιεχόμενο τις τρεις ονομαζόμενες πλειάδες:</p>
			<p><span class="courier-code">&gt;&gt;&gt; emps</span></p>
			<p><span class="courier-code">[Employee(name=&apos;Άννα&apos;, age=26, sal=950, dept=&apos;ΙΤ&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;</span><span class="courier-code">Πέτρος&apos;, age=28, sal=1100, dept=&apos;ΙΤ&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;Γιώργος&apos;, age=30, sal=900, dept=&apos;Sales&apos;)]</span></p>
			<p class="no-indent">και κάθε πλειάδα είναι προσβάσιμη μέσω της λίστας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; emps[1]</span></p>
			<p><span class="courier-code">Employee(name=&apos;</span><span class="courier-code">Πέτρος&apos;, age=28, sal=1100, dept=&apos;ΙΤ&apos;)</span></p>
			<p class="no-indent">Συνδυάζοντας τα παραπάνω, ένα μεμονωμένο στοιχείο ενός υπαλλήλου είναι διαθέσιμο ως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; emps[1][0]</span></p>
			<p><span class="courier-code">&apos;Πέτρος&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; emps[1].name</span></p>
			<p><span class="courier-code">&apos;Πέτρος&apos;</span></p>
			<p class="no-indent">Για την εμφάνιση όλων των στοιχείων των υπαλλήλων, μπορεί να δοθούν οι εντολές μέσα σε μια δομή επανάληψης <span class="courier-code">for</span>. Ακολουθεί ολόκληρο το πρόγραμμα (Λίστα Κώδικα 7-9). </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 7-9 | Χρήση ενός <span class="courier-code">namedtuple</span></figcaption><img src="media/ListaKodika-7-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει τα πιο κάτω αποτελέσματα:</p>
			<p><span class="courier-code">Όνομα:Άννα, Μισθός:950</span></p>
			<p><span class="courier-code">Όνομα</span><span class="courier-code">:Πέτρος, Μισθός:1100</span></p>
			<p><span class="courier-code">Όνομα:Γιώργος, Μισθός:900</span></p>
			<p class="no-indent">Για την ταξινόμηση των πλειάδων των υπαλλήλων, μπορεί να χρησιμοποιηθεί η συνάρτηση <span class="courier-code">sorted</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sorted(emps, key=lambda x:x.name)</span></p>
			<p><span class="courier-code">[Employee(name=&apos;Άννα&apos;, age=26, sal=950, dept=&apos;ΙΤ&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;Γιώργος&apos;, age=30, sal=900, dept=&apos;Sales&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;</span><span class="courier-code">Πέτρος&apos;, age=28, sal=1100, dept=&apos;ΙΤ&apos;)]</span></p>
			<p class="no-indent">ή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sorted(emps, key=lambda x:x.sal)</span></p>
			<p><span class="courier-code">[Employee(name=&apos;Γιώργος&apos;, age=30, sal=900, dept=&apos;Sales&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;Άννα&apos;, age=26, sal=950, dept=&apos;ΙΤ&apos;),</span></p>
			<p><span class="courier-code"> Employee(name=&apos;Πέτρος&apos;</span><span class="courier-code">, age=28, sal=1100, dept=&apos;ΙΤ&apos;)]</span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">lambda</span> ονομάζεται ανώνυμη συνάρτηση και καθορίζει εδώ το κλειδί (<span class="courier-code">sal</span> ή <span class="courier-code">name</span>) βάσει του οποίου θα γίνει η ταξινόμηση των πλειάδων. Παρουσιάζεται εκτενώς στο Κεφάλαιο 10 με τις συναρτήσεις.</p>
			<p>Με παρόμοιο τρόπο μπορεί να γίνει χρήση και άλλων ενσωματωμένων συναρτήσεων όπως οι <span class="courier-code">min</span>, <span class="courier-code">max</span>, <span class="courier-code">sum</span> κ.λπ. Για την εύρεση του υπαλλήλου με τον μικρότερο μισθό, μπορεί να γίνει χρήση της συνάρτησης <span class="courier-code">min</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; min(emps, key=lambda x:x.sal).name</span></p>
			<p><span class="courier-code">&apos;Γιώργος&apos;</span></p>
			<p class="no-indent">Άλλες χρήσιμες ενέργειες που μπορούν να γίνουν είναι οι:</p>
			<p><span class="courier-code">&gt;&gt;&gt; anna._fields</span></p>
			<p><span class="courier-code">(&apos;name&apos;, &apos;age&apos;, &apos;sal&apos;, &apos;dept&apos;)</span></p>
			<p class="no-indent">όπου εμφανίζονται τα πεδία της πλειάδας. Μπορούν να γίνουν και έλεγχοι με τη χρήση των συναρτήσεων <span class="courier-code">any</span> και <span class="courier-code">all</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; any([x.sal&lt;800 for x in emps])</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; any([x.sal&gt;1000 for x in emps])</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Οι δυο τελευταίες εντολές ελέγχουν αν υπάρχει μισθός μικρότερος από 800€ ή μεγαλύτερος από 1000€ αντίστοιχα.</p>
		</section>
		<section role="section" id="ch9se10" data-featured="chapter-review">
			<h1><span role="label">7.10</span> Περίληψη</h1>
			<p class="no-indent">Στο κεφάλαιο αυτό παρουσιάστηκε η δομή της πλειάδας. Δόθηκαν τα χαρακτηριστικά της, οι ομοιότητες και οι διαφορές της με τη λίστα, οι τρόποι χρήσης της, οι περιορισμοί που υπάρχουν στη διαχείριση των στοιχείων της και μερικές χρήσιμες μέθοδοι. Έγινε περιγραφή των εκφράσεων της γεννήτριας και χρήσης μιας πλειάδας μέσα από επαναληπτικές δομές και ελέγχους. Έγινε παρουσίαση μιας ειδικής πλειάδας, της <span class="courier-code">namedtuple</span>, που περιλαμβάνει ονομασίες για κάθε στοιχείο, κάνοντας πιο εύκολη τη διαδικασία ενημέρωσης και χρήσης της. Τέλος, δόθηκαν παραδείγματα χρήσης μιας πλειάδας με διάφορες βασικές συναρτήσεις της Python.</p>
			
		</section>
		<section role="section" id="ch9se11" data-featured="chapter-questions">
			<h1><span role="label">7.11</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Τι είναι η πλειάδα; Ποια είναι τα χαρακτηριστικά της; Ποιους περιορισμούς έχει; Πότε χρησιμοποιείται;</li>
			<li>Αναφέρετε τις μεθόδους μιας πλειάδας.</li>
			<li>Αν μια δομή χρησιμοποιεί δεικτοδότηση και τα στοιχεία της δεν αλλάζουν κατά τη διάρκεια εκτέλεσης του προγράμματος, τι θα διαλέγατε ως δομή αποθήκευσης των δεδομένων; Λίστα ή πλειάδα;</li></ol>
			
		</section>
		<section role="section" id="ch9se12" data-featured="chapter-assess">
			<h1><span role="label">7.12</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol><li>Φτιάξτε λίστα με όλες τις μη κενές πλειάδες μιας άλλης λίστας.</li>
			<li>Μια λίστα περιέχει πλειάδες δυο στοιχείων. Το ένα στοιχείο είναι κείμενο και το άλλο αριθμός. Ταξινομήστε τη λίστα με βάση τους αριθμούς των πλειάδων.</li>
			<li>Δίνεται πλειάδα που περιέχει μέσα της δυο άλλες πλειάδες με τις συντεταγμένες δυο σημείων στο επίπεδο. Υπολογίστε την απόσταση μεταξύ τους χρησιμοποιώντας την Ευκλείδεια απόσταση.</li>
			<li>Μια πλειάδα <span class="courier-code">x</span> περιέχει 3 πλειάδες με 2 αριθμούς η καθεμιά. Υπολογίστε την ανάστροφή της (οι γραμμές να γίνουν στήλες).</li>
			<li>Μια πλειάδα περιέχει δυο λίστες. Ανταλλάξτε τις τιμές των δυο λιστών μεταξύ τους.</li>
			<li>Ελέγξτε αν μια πλειάδα με αριθμούς είναι παλινδρομική.</li>
			<li>Ελέγξτε αν οι αριθμοί που περιέχει μια πλειάδα αντιστοιχούν στους δείκτες των θέσεών τους.</li>
			<li>Υπολογίστε το άθροισμα των στοιχείων μιας πλειάδας (με –αλλά και χωρίς– τη χρήση συνάρτησης).</li>
			<li>Δημιουργήστε λίστα που θα περιέχει τριάδες τιμών σε πλειάδες και θα υπολογίζονται ως (μονοψήφιος αριθμός, τετράγωνο αριθμού, ρίζα αριθμού).</li>
			<li>Να γράψετε κώδικα που θα αντικαθιστά τις κενές πλειάδες από μια λίστα πλειάδων με την τιμή <span class="courier-code">None</span>.</li>
			<li>Να εξαγάγετε σε μια λίστα τα στοιχεία των πλειάδων που βρίσκονται μέσα σε άλλη λίστα.</li>
			<li>Μια πλειάδα έχει εσωτερικές πλειάδες με αριθμούς. Βρείτε πόσοι είναι αυτοί οι αριθμοί.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται ένα στοιχείο. Θα ελέγχει αν αυτό το στοιχείο υπάρχει μέσα σε μια πλειάδα και θα το διαγράφει απ’ αυτήν (δημιουργώντας νέα πλειάδα με το ίδιο όνομα και ένα στοιχείο λιγότερο).</li>
			<li>Να γράψετε πρόγραμμα που θα ελέγχει αν υπάρχουν διπλά στοιχεία σε μια πλειάδα.</li>
			<li>Υπολογίστε το άθροισμα των θετικών στοιχείων μιας πλειάδας.</li>
			<li>Υπολογίστε το άθροισμα των απόλυτων τιμών των στοιχείων μιας πλειάδας.</li>
			<li>Υπολογίστε και εμφανίστε τα κοινά στοιχεία δυο πλειάδων.</li>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί πλειάδα με την ακολουθία αριθμών Fibonacci για δοσμένο ακέραιο αριθμό.</li>
			<li>Να γράψετε πρόγραμμα που θα ζητάει δυο αριθμούς και θα αποθηκεύει σε πλειάδα όλους τους κοινούς διαιρέτες τους.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν αριθμό και θα υπολογίζει αν είναι αριθμός Armstrong. Αν είναι, θα βάζει τη δύναμη κάθε ψηφίου του ως στοιχείο σε μια πλειάδα.</li>
			<li>Να γράψετε πρόγραμμα που θα αποθηκεύει σε μια πλειάδα το username και το password κάποιου χρήστη, ελέγχοντας αν τα δυο αυτά στοιχεία είναι τουλάχιστον κατά το ήμισυ διαφορετικά μεταξύ τους.</li>
			<li>Δίνεται λίστα με πλειάδες από στοιχεία μαθητών: όνομα, βαθμός, τάξη. Ταξινομήστε τη με βάση τον βαθμό και, μετά, κατά όνομα.</li>
			<li>Δίνεται πρόταση από το πληκτρολόγιο. Να φτιάξετε λίστα πλειάδων με τα ζεύγη (λέξη, πλήθος) που θα εκφράζει το πόσες φορές εμφανίζεται κάθε λέξη μέσα στο κείμενο.</li>
			<li>Για δοσμένη πλειάδα εμφανίστε το 1ο μισό της σε φθίνουσα και το 2ο μισό της σε αύξουσα διάταξη.</li>
			<li>Να φτιάξετε λίστα πλειάδων που θα περιέχει α) το μήκος και το πλάτος ορθογωνίου (θα δίνονται από το πληκτρολόγιο), β) το εμβαδό και την περίμετρό του.</li>
			<li>Για δοσμένη λίστα τιμών, να φτιάξετε λίστα πλειάδων όπου κάθε πλειάδα θα περιέχει καθέναν από τους αριθμούς της λίστας μαζί με τον αντίστροφο και τον αντίθετό του. Αν δεν υπάρχει τέτοιος αριθμός, να τοποθετείται το λεκτικό ‘Δ/Υ’.</li>
			<li>Δίνεται λίστα πλειάδων με ζεύγη τιμών το όνομα χρήστη και το domain του e-mail του. Εμφανίστε και φτιάξτε νέα λίστα με όλα τα e-mail.</li>
			<li>Δίνονται οι συντεταγμένες δυο σημείων στο επίπεδο. Να εμφανίσετε αν αυτά τα σημεία είναι συμμετρικά, αν δηλαδή είναι ίδια σημεία αλλά με αντίθετα πρόσημα.</li></ol>
		</section>
	</section>
	<section role="chapter" id="ch10">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 8</span> Σύνολα</h1>
		<section role="section" id="ch10se1">
			<h1><span role="label">8.1</span> Εισαγωγή</h1>
			<img src="media/chapter_8_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Σε αυτό το κεφάλαιο περιγράφεται η λειτουργία και η δομή του συνόλου (set). Δίνονται τα χαρακτηριστικά</i><i> του συνόλου και οι τρόποι δημιουργίας και χρήσης του. Μέσα από παραδείγματα, περιγράφονται οι πράξεις συνόλων</i><i>, ενώ, όπου χρειάζεται, δίνονται και τα αντίστοιχα στοιχεία από τη θεωρία συνόλων. Τέλος, καταγράφονται οι </i><i>ιδιότητες και οι μέθοδοι που διαθέτει ένα σύνολο και πώς αυτά χρησιμοποιούνται στην πράξη. Και σε αυτό το κεφάλαιο, γίνεται παρουσίαση μιας </i><i>ενσωματωμένης βιβλιοθήκης κώδικα για τη χρήση μιας, παρόμοιας με τα σύνολα, δομής – αυτής του frozenset.</i></p>
		</section>
		<section role="section" id="ch10se2">
			<h1><span role="label">8.2</span> Τα χαρακτηριστικά των συνόλων</h1>
			<p class="no-indent">Τα σύνολα στην Python αποτελούν μια από τις βασικότερες δομές, όπως οι λίστες, οι πλειάδες κ.λπ. Είναι άμεσα διαθέσιμα και υπάρχουν σε κάθε έκδοση της γλώσσας. </p>
			<p class="blockquote">Σύνολο είναι μια μεταβαλλόμενη (mutable) μη διατεταγμένη συλλογή μοναδικών και αμετάβλητων (immutable) στοιχείων.</p>
			<p class="no-indent">Αυτή η ακολουθία τιμών είναι δυνατόν να αλλάξει, δηλαδή μπορούν να προστεθούν νέα ή να αφαιρεθούν υπάρχοντα στοιχεία από αυτήν. Τέτοιες δομές ονομάζονται <i>μεταβλητές (ή μεταβαλλόμενες – mutable)</i>. Το σύνολο δέχεται μόνο αμετάβλητα αντικείμενα, παρόλο που το ίδιο δεν είναι. Τέτοια αντικείμενα είναι οι πλειάδες, οι συμβολοσειρές και οι αριθμοί. Τα στοιχεία που υπάρχουν μέσα του, επομένως, δεν μπορούν να αλλάξουν τιμή, να μεταβληθούν. Μπορούν όμως να αφαιρεθούν από το εσωτερικό του.</p>
			<p>Αυτή η συμπεριφορά έχει να κάνει με τον τρόπο που λειτουργεί, αλλά και με το πώς δημιουργείται και αποθηκεύεται εσωτερικά στη μνήμη ένα σύνολο, από την ίδια τη γλώσσα. Η υλοποίηση του συνόλου γίνεται με τη χρήση <i>πινάκων κατακερματισμού (hash tables)</i>, που μνημονεύονται σε επόμενη ενότητα. Αυτή η δομή χρησιμοποιείται κυρίως στις περιπτώσεις όπου τα δεδομένα είναι μοναδικά και η αναζήτηση πρέπει να γίνεται γρήγορα.</p>
			<p>Υπάρχει άμεση σύνδεση του συνόλου, ως δομής αναπαράστασης δεδομένων, με ό,τι ορίζεται ως σύνολο στα μαθηματικά. Οι ιδιότητες, οι σχέσεις και οι πράξεις που ισχύουν στη μαθηματική θεωρία των συνόλων ισχύουν ακριβώς το ίδιο, και σχεδόν με την ίδια σημειολογία, και στην περίπτωση των συνόλων στην Python.</p>
			<p>Έτσι, στα μαθηματικά ένα σύνολο <i>A</i>, που περιέχει τους μονοψήφιους άρτιους αριθμούς, ορίζεται ως εξής:</p>
			<p class="no-indent"><i>A</i> <span class="math-font">=</span> <span class="math-font">{</span>2, 4, 6, 8<span class="math-font">}</span></p>
			<p class="no-indent">Με αυτόν ακριβώς τον τρόπο μπορεί να οριστεί και ένα νέο σύνολο με τα ίδια στοιχεία στην Python:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> A={2,4,6,8}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; A</span></p>
			<p><span class="courier-code">{2,4,6,8}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(A)</span></p>
			<p><span class="courier-code">&lt;class &apos;set&apos;&gt;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">c={&apos;A&apos;,22,&apos;B&apos;,12}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">c</span></p>
			<p><span class="courier-code">{12, 22, &apos;A&apos;, &apos;B&apos;}</span></p>
			<p class="no-indent">Τι σημαίνει όμως το χαρακτηριστικό ότι ένα σύνολο είναι μη διατεταγμένο; Σημαίνει ότι τα στοιχεία που τοποθετούνται σε ένα σύνολο δεν αποθηκεύονται σε αυτό με τη σειρά με την οποία δίνονται. Έτσι, τα στοιχεία του συνόλου <span class="courier-code">c</span> εμφανίζονται με εντελώς διαφορετική σειρά από εκείνη με την οποία έγινε η εισαγωγή τους στο σύνολο. Ως αποτέλεσμα, η πρόσβαση στα στοιχεία ενός συνόλου δεν είναι άμεση – με την έννοια ότι δεν υπάρχει πρόσβαση με βάση τη θέση κάθε στοιχείου γιατί, πολύ απλά, μια τέτοια θέση δεν είναι γνωστή, ή συγκεκριμένη. Έτσι, στην περίπτωση του συνόλου, δεν είναι διαθέσιμη η δεικτοδότηση, και, κατά συνέπεια, ούτε και ο <i>τεμαχισμός-κατάτμηση (slicing)</i> των στοιχείων του. Η μόνη λειτουργία που μπορεί να γίνει σε ένα σύνολο, σε σχέση με κάποιο στοιχείο που μπορεί να περιέχεται μέσα σε αυτό, είναι η αναζήτησή του: Να ελεγχθεί, δηλαδή, αν ένα συγκεκριμένο στοιχείο υπάρχει ή όχι μέσα σε δοσμένο σύνολο. Αυτή η λειτουργία στα μαθηματικά είναι γνωστή με το σύμβολο <span class="math-font">∈</span> (ανήκει) ή <span class="math-font">∉</span> (δεν ανηκει) και περιγράφεται αναλυτικά σε επόμενη παράγραφο.</p>
			<p>Αυτή η «αδυναμία» άμεσης πρόσβασης σε συγκεκριμένο στοιχείο του συνόλου δεν αποτελεί εμπόδιο ή περιορισμό στη χρήση του συνόλου, γιατί, πολύ απλά, οι εφαρμογές που προκύπτουν είναι διαφορετικές και δεν χρειάζονται, τις περισσότερες φορές, άμεση πρόσβαση στα στοιχεία. Στη συνέχεια του κεφαλαίου, δίνονται αντίστοιχα παραδείγματα.</p>
			<p>Επίσης, ακόμα κι αν δεν υπάρχει δυνατότητα άμεσης δεικτοδότησης των στοιχείων ενός συνόλου, η αναζήτηση συγκεκριμένου στοιχείου γίνεται πολύ γρήγορα και σε πολλές περιπτώσεις η πολυπλοκότητα είναι <i>Ο(1)</i>, η αναζήτηση δηλαδή γίνεται άμεσα. Αυτό έχει να κάνει με το είδος των στοιχείων που είναι αποθηκευμένα στο σύνολο και, πιο συγκεκριμένα, με τον hash κωδικό που τους έχει αποδοθεί κατά την αποθήκευσή τους, καθώς και από το αν κάθε στοιχείο βρίσκεται μόνο του σε μια μοναδική διεύθυνση της μνήμης. Η περίπτωση αυτή αναλύεται στη συνέχεια του κεφαλαίου.</p>
			<p>Πότε επομένως και σε ποιες περιπτώσεις είναι απαραίτητο να γίνει χρήση ενός συνόλου; Οι περιπτώσεις είναι αρκετές και κωδικοποιούνται στη συνέχεια.</p>
			<p class="no-indent">Ένα σύνολο μπορεί να χρησιμοποιηθεί όταν:</p>
			<ol><li>Από ένα πλήθος στοιχείων χρειάζεται να κρατηθεί μόνο ένα από κάθε πολλαπλά εμφανιζόμενο στοιχείο.</li>
			<li>Η διάταξη των στοιχείων είναι άγνωστη ή δεν απαιτείται να είναι γνωστή και συγκεκριμένη.</li>
			<li>Στις περιπτώσεις όπου απαιτείται γρήγορη αναζήτηση μιας τιμής μέσα σ’ αυτό.</li>
			<li>Όταν τα στοιχεία είναι αμετάβλητα, αλλά η ίδια η δομή μπορεί να αλλάζει.</li>
			<li>Όταν είναι γνωστό ότι στα στοιχεία θα εφαρμοστούν πράξεις συνόλων (όπως η ένωση, η τομή, η διαφορά κ.λπ.).</li>
			<li>Είναι αναγκαίο από μια άλλη δομή να εξαχθεί κάθε στοιχείο της μόνο μια φορά.</li></ol>
			<p class="no-indent">Για όλες τις περιπτώσεις, θα δοθούν παραδείγματα σε επόμενες παραγράφους.</p>
		</section>
		<section role="section" id="ch10se3">
			<h1><span role="label">8.3</span> Κατακερματισμός</h1>
			<p class="no-indent">Η δομή ενός συνόλου και ενός λεξικού βασίζεται στη χρήση ενός <i>πίνακα κατακερματισμού (hash table)</i>. Η λειτουργία ενός τέτοιου πίνακα στηρίζεται στην αποθήκευση στοιχείων βάσει μοναδικών κλειδιών που αποδίδονται σ’ αυτά· ενώ στη δομή της λίστας, που αντιστοιχεί με εκείνη ενός <i>πίνακα (array)</i>, όπου η αποθήκευση των δεδομένων (συνήθως, αλλά όχι απαραίτητα, ίδιου τύπου) γίνεται σε συνεχόμενες θέσεις μνήμης και η πρόσβαση σ’ αυτά γίνεται με βάση τη θέση, η αποθήκευση δεδομένων σε πίνακες κατακερματισμού γίνεται πολύ διαφορετικά. Για κάθε στοιχείο που θα αποθηκευτεί απαιτείται η παραγωγή ενός <i>μοναδικού κλειδιού (hash key)</i>. Ο τρόπος παραγωγής του ποικίλλει και μπορεί να είναι διαφορετικός ανά περίπτωση. Η δημιουργία του κλειδιού γίνεται από κατάλληλη συνάρτηση που ονομάζεται <i>συνάρτηση κατακερματισμού (hash function)</i> και η οποία θα πρέπει να δημιουργεί κλειδιά μοναδικά για κάθε στοιχείο που θα εισέρχεται στη δομή. Η αντιστοίχιση ενός κλειδιού με συγκεκριμένο στοιχείο έχει δυο επιπτώσεις στον κώδικα:</p>
			<ol><li>Απαιτείται επιπλέον υπολογιστικός χρόνος για τη δημιουργία του κλειδιού. Γι’ αυτό και η επιλογή του τρόπου δημιουργίας του είναι πολύ σημαντική.</li>
			<li>Η αναζήτηση ενός στοιχείου έχει πολυπλοκότητα <i>Ο(1)</i>, γίνεται δηλαδή άμεσα και πολύ γρήγορα. </li>
			</ol><p class="no-indent">Υπάρχουν όμως περιπτώσεις όπου ένα κλειδί αποδίδεται σε περισσότερα από ένα στοιχεία. Τότε δημιουργείται <i>διένεξη</i> ή <i>σύγκρουση (collision)</i> και απαιτείται διόρθωση ή ειδικός χειρισμός. Υπάρχουν πολλοί αλγόριθμοι αντιμετώπισης τέτοιων διενέξεων, με πιο συνήθη τεχνική αυτήν της <i>αλυσίδωσης (chaining)</i>, την αποθήκευση δηλαδή των στοιχείων στην ίδια θέση μνήμης αλλά με τη μορφή <i>συνδεδεμένης λίστας (linked list)</i>.</p>
			<p>Στην Python μόνο αμετάβλητα δεδομένα μπορούν να χρησιμοποιηθούν σε πίνακες κατακερματισμού. Αυτά τα δεδομένα ονομάζονται <i>κατακερματιζόμενα </i><i>(hashable)</i>. Τα μεταβλητά αντικείμενα, όπως η λίστα, δεν είναι κατακερματιζόμενα, γιατί η τοποθέτηση τέτοιων στοιχείων σε έναν πίνακα εγκυμονεί τον εξής κίνδυνο: Αν το αντικείμενο αλλάξει, τότε θα πρέπει να αλλάξει και το κλειδί του, οπότε θα πρέπει να μετακινηθεί σε άλλη θέση στον πίνακα hash. Κάτι τέτοιο όμως είναι αρκετά χρονοβόρο και περιπλέκει πολύ τη διαδικασία συντήρησης του πίνακα. Γι’ αυτό τα στοιχεία ενός συνόλου είναι μόνο αμετάβλητα αντικείμενα. Το ίδιο ισχύει και για τα κλειδιά ενός λεξικού, που περιγράφεται στο επόμενο κεφάλαιο.</p>
			<p>Η δημιουργία κλειδιού γίνεται με χρήση της ενσωματωμένης συνάρτησης <span class="courier-code">hash</span>, ενώ κάθε αντικείμενο <i>οριζόμενο από τον χρήστη (user-defined)</i> και κάθε αμετάβλητο αντικείμενο διαθέτουν εξ ορισμού τη δική τους __<span class="courier-code">hash</span>__ μέθοδο (περισσότερα στοιχεία για τις ειδικές μεθόδους της Python θα δοθούν στο Κεφάλαιο 11). Το παραγόμενο κλειδί προκύπτει με τυχαίο τρόπο, καθώς κάθε εκτέλεση της συνάρτησης <span class="courier-code">hash</span> σε διαφορετικές συνεδρίες του διερμηνευτή ή σε διαφορετικά λειτουργικά συστήματα αποδίδει διαφορετικό κλειδί. Το στοιχείο της τυχαιότητας είναι απαραίτητο ώστε να προλαμβάνονται περιπτώσεις παραβιάσεων συστημάτων με επιθέσεις <i>άρνησης</i><i> πρόσβασης (denial of service)</i>.</p>
			<p>Σύμφωνα με την επίσημη τεκμηρίωση της Python, ένα αντικείμενο είναι κατακερματιζόμενο αν διαθέτει μια τιμή κατακερματισμού, η οποία δεν αλλάζει ποτέ κατά τη διάρκεια «ζωής» του αντικειμένου και χρειάζεται να διαθέτει υλοποιημένη μια μέθοδο __<span class="courier-code">hash</span>__. Έτσι, αντικείμενα που συγκρινόμενα μεταξύ τους είναι ίσα, θα διαθέτουν την ίδια τιμή κατακερματισμού. Αντικείμενα μεταβλητά δεν είναι κατακερματιζόμενα. Άρα, μέλη ενός συνόλου ή κλειδιά ενός λεξικού μπορεί να είναι μόνο αμετάβλητα αντικείμενα, όπως οι πλειάδες, οι συμβολοσειρές και οι αριθμοί, ή οριζόμενα από τον χρήστη αντικείμενα, όπου η τιμή κατακερματισμού προκύπτει από το id που έχουν.</p>
		</section>
		<section role="section" id="ch10se4">
			<h1><span role="label">8.4</span> Δημιουργία και διαχείριση συνόλων</h1>
			<p class="no-indent">Για να δημιουργηθεί ένα νέο σύνολο μπορεί να γίνει χρήση είτε των χαρακτήρων ‘<span class="courier-code">{</span>‘ και ‘<span class="courier-code">}</span>’, είτε της συνάρτησης <span class="courier-code">set</span>. Έτσι, για τη δημιουργία ενός συνόλου με τους μονοψήφιους περιττούς αριθμούς, αρκεί να δοθεί η παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; mp={1,3,5,7,9}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; mp</span></p>
			<p><span class="courier-code">{1, 3, 5, 7, 9}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(mp)</span></p>
			<p><span class="courier-code">&lt;class &apos;set&apos;&gt;</span></p>
			<p class="no-indent">Παρόμοιος είναι και ο τρόπος χρήσης της ενσωματωμένης συνάρτησης <span class="courier-code">set</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; mp =set([1,3,5,7,9])</span></p>
			<p class="no-indent">Και οι δυο μορφές είναι εξίσου απλές και αγγίζουν τον τρόπο που το ίδιο σύνολο δηλώνεται στα μαθηματικά:</p>
			<p class="no-indent"><i>mp</i> <span class="math-font">=</span> <span class="math-font">{</span>1,3,5,7,9<span class="math-font">}</span></p>
			<p class="no-indent">Η δημιουργία ενός συνόλου μπορεί να γίνει και με τη βοήθεια άλλων συναρτήσεων, όπως η <span class="courier-code">range</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; mp=set(range(1,10,2))</span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">set</span> δέχεται ένα αντικείμενο ακολουθίας (λίστα, πλειάδα κ.λπ.) ή μια άλλη συνάρτηση (όπως η <span class="courier-code">range</span>) και μετατρέπει το περιεχόμενό της σε μέλη ενός συνόλου. Η σειρά τοποθέτησης των στοιχείων μέσα στο σύνολο είναι άγνωστη και κάθε μεμονωμένο στοιχείο θα υπάρχει μόνο μια φορά.</p>
			<p>Το κενό σύνολο ‘<span class="courier-code">{}</span>’ δημιουργείται μόνο με τη χρήση της συνάρτησης <span class="courier-code">set</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=set()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">set()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
			<p><span class="courier-code">&lt;class &apos;set&apos;&gt;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a={}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">{}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(a)</span></p>
			<p><span class="courier-code">&lt;class &apos;dict&apos;&gt;</span></p>
			<p class="no-indent">Δεν μπορούν να χρησιμοποιηθούν τα άγκιστρα για τη δημιουργία ενός κενού συνόλου, γιατί με αυτό τον τρόπο δημιουργείται ένα κενό λεξικό. Μια ακόμη διαφορά στους δυο τρόπους δημιουργίας συνόλων φαίνεται στις παρακάτω εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; name={&apos;Άννα&apos;}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; name2=set(&apos;Άννα&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; name, name2</span></p>
			<p><span class="courier-code">({&apos;Άννα&apos;}, {&apos;Ά&apos;</span><span class="courier-code">, &apos;ν&apos;, &apos;α&apos;})</span></p>
			<p class="no-indent">Στην περίπτωση της μεταβλητής <span class="courier-code">name</span>, το κείμενο που δίνεται μέσα στα άγκιστρα γίνεται μέλος του νέου συνόλου, ολόκληρο, ως ενιαίο αντικείμενο. Αντίθετα, στο σύνολο <span class="courier-code">name2</span>, μέσω της συνάρτησης <span class="courier-code">set</span>, θα τοποθετηθούν οι χαρακτήρες που συνθέτουν τη συμβολοσειρά ‘<span class="courier-code">Άννα</span>’, και μάλιστα μόνο τρεις από αυτούς, ώστε να μην υπάρχει ο ίδιος χαρακτήρας δυο φορές.</p>
			<p>Με παρόμοια λογική, μια από τις παρακάτω εντολές θα αποτύχει:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a={[1,2]}</span></p>
			<p><span class="courier-code">TypeError: unhashable type: &apos;list&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=set([1,2])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">{1, 2}</span></p>
			<p class="no-indent">Ενώ στην περίπτωση του <span class="courier-code">b</span>, η συνάρτηση <span class="courier-code">set</span> μετατρέπει τα μέλη μιας ακολουθίας, όπως η λίστα, σε μέλη συνόλου, στην περίπτωση του <span class="courier-code">a</span> δεν γίνεται καμία μετατροπή. Ό,τι υπάρχει μέσα στα άγκιστρα δίνεται ως περιεχόμενο στο νέο σύνολο <span class="courier-code">a</span>. Κάτι τέτοιο όμως προκαλεί την εμφάνιση σφάλματος, γιατί η λίστα είναι μεταβαλλόμενο αντικείμενο και δεν μπορεί να είναι μέλος συνόλου.</p>
			<p>Ακολουθούν μερικά ακόμη παραδείγματα δημιουργίας συνόλων τα οποία παρουσιάζονται στη Λίστα Κώδικα 8-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-1 | Δημιουργία συνόλων</figcaption><img src="media/ListaKodika-8-1_fmt.png" alt=""/></figure>
			<p class="no-indent"><b>Γραμμή 1</b>: Ό,τι υπάρχει μέσα στα άγκιστρα τοποθετείται ως μέλος του νέου συνόλου <span class="courier-code">a</span>. </p>
			<p class="no-indent"><b>Γραμμή 4</b>: Το νέο σύνολο <span class="courier-code">b</span> θα αποτελείται από τους χαρακτήρες της συμβολοσειράς που δίνεται ως όρισμα. Κάθε χαρακτήρας θα υπάρχει στο σύνολο μόνο μια φορά.</p>
			<p class="no-indent"><b>Γραμμή 7</b>: Το σύνολο <span class="courier-code">c</span> θα αποτελείται από τα νούμερα που δίνονται, αλλά κάθε αριθμός θα υπάρχει στο σύνολο <span class="courier-code">c</span> μόνο μια φορά.</p>
			<p class="no-indent"><b>Γραμμή 10</b>: Εδώ φαίνεται το διαφορετικό αποτέλεσμα χρήσης της συνάρτησης <span class="courier-code">set</span> και των χαρακτήρων ‘<span class="courier-code">{}</span>’. Το σύνολο <span class="courier-code">a</span> θα έχει ως περιεχόμενο τους μοναδικούς χαρακτήρες του κειμένου που θα προκύψει. Το σύνολο <span class="courier-code">b</span> θα περιέχει ολόκληρο το τελικό κείμενο.</p>
			<p class="no-indent"><b>Γραμμή 13</b>: Πριν δημιουργηθεί το νέο σύνολο <span class="courier-code">a</span>, προηγείται η συνένωση των δυο συμβολοσειρών που θα αποτελεί το τελικό περιεχόμενο του συνόλου.</p>
			<p class="no-indent"><b>Γραμμές 16, 19</b>: Το ίδιο ισχύει και για άλλους τύπους, όπως οι πλειάδες. </p>
			<p class="no-indent"><b>Γραμμή 22</b>: Γίνεται προσπάθεια να τοποθετηθεί μια λίστα μέσα σε σύνολο, κάτι που τελικά αποτυγχάνει.</p>
			<p class="no-indent"><b>Γραμμή 24</b>: Αντίθετα, η συνάρτηση <span class="courier-code">set</span> θα μετατρέψει τη δομή της λίστας και το περιεχόμενό της σε μεμονωμένα στοιχεία που θα τοποθετηθούν στο νέο σύνολο.</p>
		</section>
		<section role="section" id="ch10se5">
			<h1><span role="label">8.5</span> Προσθήκη στοιχείων</h1>
			<p class="no-indent">Η δομή του συνόλου είναι μεταβαλλόμενη – μπορεί δηλαδή να τροποποιείται. Τα σύνολα διαθέτουν λειτουργίες, και για την προσθήκη στοιχείων μέσα σ’ αυτά αλλά και για τη διαγραφή τιμών τους. Υπάρχουν δυο τρόποι ενημέρωσης ενός συνόλου: α) μπορεί να προστεθεί ένα μεμονωμένο στοιχείο μέσα σε ένα σύνολο ή β) να μετατραπεί μια ακολουθία σε σειρά από τιμές που θα τοποθετηθούν στο σύνολο.</p>
			<section role="subsection" id="ch10se5ss1">
				<h1><span role="label">8.5.1</span> Η μέθοδος <span class="courier-code">add</span></h1>
				<p class="no-indent">Με αυτό τον τρόπο είναι δυνατόν να προστεθεί ένα στοιχείο μέσα σε ένα ήδη υπάρχον σύνολο. Η γενική μορφή της <span class="courier-code">add</span> είναι:</p>
				<p><span class="courier-code">σύνολο.add(hashable αντικείμενο)</span></p>
				<p class="no-indent">Αν το αντικείμενο που πρόκειται να προστεθεί είναι <i>μη κατακερματιζόμενο (unhashable)</i>, όπως η λίστα ή το σύνολο, τότε η εντολή θα αποτύχει:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.add([1,2])</span></p>
				<p><span class="courier-code">TypeError: unhashable type: &apos;list&apos;</span></p>
				<p class="no-indent">Σε κάθε άλλη περίπτωση, το αντικείμενο που θα δοθεί ως όρισμα στη μέθοδο θα προστεθεί στο σύνολο, σε άγνωστη όμως θέση:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.add(3)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 2, 3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.add((1,2,3))</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 2, 3, (1, 2, 3)}</span></p>
				<p class="no-indent">Αν το αντικείμενο που επιχειρείται να προστεθεί υπάρχει ήδη μέσα στο σύνολο, η προσθήκη δεν θα γίνει μεν, αλλά η εντολή δεν θα αποτύχει και δεν θα εμφανιστεί κάποιο μήνυμα σφάλματος:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.add(2)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 2, 3, (1, 2, 3)}</span></p>
			</section>
			<section role="subsection" id="ch10se5ss2">
				<h1><span role="label">8.5.2</span> Η μέθοδος <span class="courier-code">update</span></h1>
				<p class="no-indent">Με τη μέθοδο <span class="courier-code">update</span> σαρώνεται ένα οποιοδήποτε αντικείμενο ακολουθίας και κάθε στοιχείο του προστίθεται ως νέο μέλος στο σύνολο. Η προσθήκη γίνεται αν αυτά τα στοιχεία δεν υπάρχουν ήδη μέσα στο σύνολο. Αν κάποιο απλώς υπάρχει ήδη μέσα στο σύνολο, τότε αγνοείται από τη διαδικασία:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.update([1,3,5])</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 2, 3, 5}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.update(&apos;αβγ&apos;</span><span class="courier-code">)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 2, 3, &apos;β&apos;, 5, &apos;γ&apos;, &apos;α&apos;}</span></p>
				<p class="no-indent">Η λειτουργία της <span class="courier-code">update</span> επιτρέπει τη μετατροπή μιας δομής ακολουθίας σε μεμονωμένα στοιχεία, τα οποία τελικά προστίθενται στο σύνολο αν δεν υπάρχουν ήδη μέσα σ’ αυτό. Ο τρόπος λειτουργίας της μοιάζει με τη συνάρτηση <span class="courier-code">set</span>, και οι δυο δηλαδή δέχονται μια ακολουθία και τοποθετούν τα μέλη της σε ένα σύνολο.</p>
				<p>Ιδιαίτερη προσοχή χρειάζεται σε εμφωλευμένες δομές, όπου η μετατροπή «φτάνει» μόνο στο αρχικό επίπεδο και όχι σε άλλες «εσωτερικές» δομές, τις οποίες και δέχεται με την αρχική τους μορφή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.update([[1,2],[3,4]])</span></p>
				<p><span class="courier-code">TypeError: unhashable type: &apos;list&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.update([(1,2),(3,4)])</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{(1, 2), 1, 2, 3, (3, 4)}</span></p>
				<p class="no-indent">Εδώ, στην πρώτη περίπτωση, προκύπτει σφάλμα, γιατί η εξωτερική δομή της λίστας δίνει ως στοιχεία δύο άλλες λίστες, οι οποίες δεν είναι δυνατόν να προστεθούν στο σύνολο. Αντίθετα, στη δεύτερη εντολή τα στοιχεία της λίστας είναι πλειάδες, οι οποίες μπορούν να προστεθούν, και τελικά τοποθετούνται, στο σύνολο <span class="courier-code">a</span>.</p>
			</section>
		</section>
		<section role="section" id="ch10se6">
			<h1><span role="label">8.6</span> Διαγραφή στοιχείων</h1>
			<p class="no-indent">Για τη διαγραφή στοιχείων από σύνολο υπάρχουν διαθέσιμες τρεις μέθοδοι, με διαφορετικές δυνατότητες και χαρακτηριστικά η καθεμιά. Οι μέθοδοι αυτές είναι η <span class="courier-code">discard</span>, η <span class="courier-code">remove</span> και η <span class="courier-code">pop</span>.</p>
			<section role="subsection" id="ch10se6ss1">
				<h1><span role="label">8.6.1</span> Η μέθοδος <span class="courier-code">discard</span></h1>
				<p class="no-indent">Η γενική μορφή της <span class="courier-code">discard</span> είναι:</p>
				<p><span class="courier-code">σύνολο.discard(στοιχείο)</span></p>
				<p class="no-indent">Με αυτή τη μέθοδο επιχειρείται η διαγραφή στοιχείου από σύνολο. Αν το στοιχείο υπάρχει στο σύνολο, τότε αφαιρείται. Διαφορετικά, δεν συμβαίνει τίποτα και η εντολή ολοκληρώνεται χωρίς να σημειωθεί σφάλμα κατά την εκτέλεσή της. Αυτή είναι και η μοναδική διαφορά από τη μέθοδο <span class="courier-code">remove</span>. Οι παρακάτω εντολές περιγράφουν τη λειτουργία της:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.discard(2)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.discard(4)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{1, 3}</span></p>
				<p class="no-indent">Όπως φαίνεται από τη δεύτερη εφαρμογή της <span class="courier-code">discard</span>, ο διερμηνευτής δεν εμφάνισε κάποιο σφάλμα, παρόλο που η μέθοδος απέτυχε να αφαιρέσει το στοιχείο <span class="courier-code">4</span> που δεν υπάρχει στο σύνολο <span class="courier-code">a</span>. Αυτή είναι και η διαφορά της με την επόμενη μέθοδο, τη <span class="courier-code">remove</span>. Στην πράξη, το συγκεκριμένο χαρακτηριστικό μπορεί να χρησιμοποιηθεί στις περιπτώσεις όπου δεν είναι απαραίτητος ο έλεγχος ύπαρξης μιας τιμής πριν γίνει προσπάθεια εξαγωγής της από ένα σύνολο. Αυτή η «σιωπηλή» αποτυχία της μεθόδου δεν προκαλεί τον τερματισμό του προγράμματος και έτσι αποφεύγονται περιττοί έλεγχοι.</p>
			</section>
			<section role="subsection" id="ch10se6ss2">
				<h1><span role="label">8.6.2</span> Η μέθοδος <span class="courier-code">remove</span></h1>
				<p class="no-indent">Η γενική μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">σύνολο.remove(στοιχείο)</span></p>
				<p class="no-indent">Αυτή η μέθοδος αφαιρεί στοιχείο από ένα σύνολο. Αν το στοιχείο δεν υπάρχει στο σύνολο, προκύπτει σφάλμα που προκαλεί τη διακοπή εκτέλεσης του προγράμματος:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.remove(3)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.remove(4)</span></p>
				<p><span class="courier-code">KeyError: 4</span></p>
				<p class="no-indent">Η τελευταία εντολή προκάλεσε την εμφάνιση του σφάλματος <span class="courier-code">KeyError</span> στην προσπάθεια αφαίρεσης ενός στοιχείου (του αριθμού <span class="courier-code">4</span>) που δεν υπήρχε μέσα στο σύνολο <span class="courier-code">a</span>.</p>
			</section>
			<section role="subsection" id="ch10se6ss3">
				<h1><span role="label">8.6.3</span> Η μέθοδος <span class="courier-code">pop</span></h1>
				<p class="no-indent">Η μέθοδος <span class="courier-code">pop</span>, σε αντίθεση με τις άλλες δυο μεθόδους, δεν δέχεται κανένα όρισμα. Στη γενική μορφή της είναι:</p>
				<p><span class="courier-code">σύνολο.pop()</span></p>
				<p class="no-indent">Αν το σύνολο δεν είναι κενό, τότε αφαιρείται ένα (άγνωστο ποιο) στοιχείο από το σύνολο. Ταυτόχρονα, το στοιχείο αυτό επιστρέφεται ως αποτέλεσμα είτε στην οθόνη, μέσω της κονσόλας, είτε με τη μορφή εκχώρησης, σε κάποια μεταβλητή. Αντίθετα, οι άλλες δυο μέθοδοι (<span class="courier-code">discard</span> και <span class="courier-code">remove</span>) δεν επιστρέφουν τίποτα (επιστρέφουν δηλαδή το αποτέλεσμα <span class="courier-code">None</span>). Αν το σύνολο είναι κενό, η <span class="courier-code">pop</span> προκαλεί την εμφάνιση σφάλματος. Ακολουθούν μερικά παραδείγματα χρήσης της μεθόδου <span class="courier-code">pop</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={&apos;a&apos;,1,&apos;b&apos;,2}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">{&apos;α&apos;, 2, &apos;β&apos;, 1}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.pop()</span></p>
				<p><span class="courier-code">&apos;β&apos;</span></p>
				<p class="no-indent">Από το σύνολο <span class="courier-code">a</span> εξάγεται ένα στοιχείο, το ‘<span class="courier-code">β</span>’:</p>
				<p><span class="courier-code">&gt;&gt;&gt; b=a.pop()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
				<p><span class="courier-code">2</span></p>
				<p class="no-indent">Εξάγεται το στοιχείο <span class="courier-code">2</span> και εκχωρείται στη μεταβλητή <span class="courier-code">b</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; print(a.pop())</span></p>
				<p><span class="courier-code">α</span></p>
				<p class="no-indent">Εξάγεται το στοιχείο ‘<span class="courier-code">α</span>’ και αποτελεί όρισμα της <span class="courier-code">print</span>, που το τυπώνει στην οθόνη:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c=set()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c.update(a.pop())</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c</span></p>
				<p><span class="courier-code">{1}</span></p>
				<p class="no-indent">Ο αριθμός <span class="courier-code">1</span> εξάγεται από το σύνολο <span class="courier-code">a</span> και τοποθετείται ως τιμή στο σύνολο <span class="courier-code">c</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.pop()</span></p>
				<p><span class="courier-code">KeyError: &apos;pop from an empty set&apos;</span></p>
				<p class="no-indent">Το σύνολο <span class="courier-code">a</span> πλέον είναι κενό. Η τελευταία προσπάθεια εφαρμογής της <span class="courier-code">pop</span> σε κενό σύνολο αποτυγχάνει, εμφανίζοντας μήνυμα σφάλματος.</p>
			</section>
			<section role="subsection" id="ch10se6ss4">
				<h1><span role="label">8.6.4</span> Η μέθοδος <span class="courier-code">clear</span></h1>
				<p class="no-indent">Για τη διαγραφή όλων των στοιχείων ενός συνόλου και το «άδειασμά» του, μπορεί να χρησιμοποιηθεί η μέθοδος <span class="courier-code">clear</span>. Η σύνταξή της είναι απλή:</p>
				<p><span class="courier-code">σύνολο.clear()</span></p>
				<p class="no-indent">Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a.clear()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">set()</span></p>
			</section>
			<section role="subsection" id="ch10se6ss5">
				<h1><span role="label">8.6.5</span> Η συνάρτηση <span class="courier-code">del</span></h1>
				<p class="no-indent">Η διαγραφή ολόκληρου του συνόλου από τη μνήμη (τον χώρο ονομάτων του διερμηνευτή δηλαδή) γίνεται με τον ίδιο τρόπο που διαγράφεται κάθε αντικείμενο στην Python, με χρήση της συνάρτησης <span class="courier-code">del</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a={1,2,3}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; del a</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">NameError: name &apos;a&apos; is not defined</span></p>
			</section>
		</section>
		<section role="section" id="ch10se7">
			<h1><span role="label">8.7</span> Επεξεργασία συνόλων</h1>
			<p class="no-indent">Στις επόμενες ενότητες περιγράφονται οι τρόποι χρήσης του συνόλου μέσα σε ένα πρόγραμμα, σε διαφορετικές περιπτώσεις και για διάφορες λειτουργίες.</p>
			<section role="subsection" id="ch10se7ss1">
				<h1><span role="label">8.7.1</span> Χρήση δομών επανάληψης</h1>
				<p class="no-indent">Το σύνολο αποτελεί μια <i>συλλογή (collection)</i> στοιχείων και, παρόλο που η σειρά εισαγωγής και τοποθέτησης των στοιχείων του δεν είναι γνωστή και προφανής, εντούτοις μπορεί να γίνει επεξεργασία τους, όπως σε άλλες δομές, με χρήση της εντολής <span class="courier-code">for</span>. Κάθε σύνολο είναι επαναληπτικό αντικείμενο. Επομένως, μπορεί να δοθεί πρόσβαση, η οποία στις περισσότερες φορές είναι σχεδόν τυχαία, σε κάθε στοιχείο που ανήκει σε αυτό. Εάν χρειάζεται να σαρωθεί όλο το σύνολο, για να εμφανιστούν για παράδειγμα τα στοιχεία του στην οθόνη, αυτό μπορεί να γίνει εύκολα με μια εντολή <span class="courier-code">for</span>. Η σάρωση γίνεται με βάση το κλειδί κατακερματισμού που έχει κάθε στοιχείο. Στη Λίστα Κώδικα 8-2 παρουσιάζεται ένα παράδειγμα σάρωσης των στοιχείων του συνόλου <span class="courier-code">a</span> με χρήση της δομής <span class="courier-code">for</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-2 | Εμφάνιση συνόλου</figcaption><img src="media/ListaKodika-8-2_fmt.png" alt=""/></figure>
				<p class="no-indent">Μόλις εκτελεστεί το παραπάνω πρόγραμμα, θα εμφανιστούν στην οθόνη τα περιεχόμενα του συνόλου <span class="courier-code">a</span>:</p>
				<p><span class="courier-code">b 1 2 a</span></p>
				<p class="no-indent">Η σειρά με την οποία τυπώνονται τα στοιχεία δεν έχει να κάνει, όπως φαίνεται, με τη σειρά που δόθηκαν κατά την κατασκευή του συνόλου. Αν εκτελεστεί μάλιστα το πρόγραμμα ξανά, η σειρά εμφάνισης των στοιχείων μπορεί να αλλάξει πάλι.</p>
				<p>Υποτυπώδης δεικτοδότηση μπορεί να γίνει με χρήση της συνάρτησης <span class="courier-code">enumerate</span>, όπου για κάθε διαδοχική τιμή του συνόλου παράγεται και ένας δείκτης που απλά αναφέρει τον αύξοντα αριθμό κάθε στοιχείου στην τρέχουσα σάρωση. Στη Λίστα Κώδικα 8-3 παρουσιάζεται ένα παράδειγμα με χρήση της συνάρτησης <span class="courier-code">enumerate</span> (γραμμή 2).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-3 | «Δεικτοδότηση»</figcaption><img src="media/ListaKodika-8-3_fmt.png" alt=""/></figure>
				<p class="no-indent">Έτσι, θα εμφανιστούν τα αποτελέσματα:</p>
				<p><span class="courier-code">0 - a</span></p>
				<p><span class="courier-code">1 - 2</span></p>
				<p><span class="courier-code">2 - 1</span></p>
				<p><span class="courier-code">3 - b</span></p>
				<p class="no-indent">όπου ο πρώτος αριθμός δηλώνει τη σειρά με την οποία εμφανίστηκε κάθε στοιχείο. Αυτή η σειρά μπορεί να αλλάξει σε μελλοντικές εκτελέσεις του ίδιου κώδικα.</p>
				<p>Έτσι, στις περιπτώσεις όπου χρειάζεται να δημιουργηθεί νέο σύνολο με βάση τις ήδη υπάρχουσες τιμές άλλου συνόλου, αυτό μπορεί να γίνει με χρήση της <span class="courier-code">for</span>. Στη Λίστα Κώδικα 8-4 δημιουργείται νέο σύνολο <span class="courier-code">b</span> με βάση τις τιμές του συνόλου <span class="courier-code">a</span>, κάνοντας χρήση της επαναληπτικής δομής <span class="courier-code">for</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-4 | Προσθήκη στοιχείων</figcaption><img src="media/ListaKodika-8-4_fmt.png" alt=""/></figure>
				<p class="no-indent">Αν τρέξουμε το πρόγραμμα, θα εμφανιστούν τα περιεχόμενα των δυο συνόλων στην οθόνη:</p>
				<p><span class="courier-code">{1, 2, 4, -3} {16, 1, 4, 9}</span></p>
				<p class="no-indent">Επειδή η σειρά των στοιχείων είναι (σχεδόν) τυχαία, δεν μπορεί να γίνει χρήση της κατά θέση αντιστοίχισης των στοιχείων των δυο συνόλων. Η μόνη πληροφορία που προκύπτει από τις τιμές των δυο συνόλων είναι ότι το 2ο σύνολο περιλαμβάνει ως μέλη του τα τετράγωνα των αριθμών του 1ου συνόλου.</p>
			</section>
		</section>
		<section role="section" id="ch10se8">
			<h1><span role="label">8.8</span> Σύνθεση συνόλων</h1>
			<p class="no-indent">Όπως και στην περίπτωση της λίστας, έτσι και για την κατασκευή ενός συνόλου μπορεί να γίνει χρήση της <i>σύνθεσης (comprehension)</i>. Η σύνθεση αποτελεί έναν εύκολο, άμεσο, σύντομο και ταχύτατο τρόπο κατασκευής συνόλων, όπως ακριβώς γίνεται και με τις λίστες. Το τελευταίο παράδειγμα, όπου δημιουργείται νέο σύνολο με τα τετράγωνα των στοιχείων ενός άλλου, μπορεί να δοθεί σε μια εντολή σύνθεσης:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {x**2 for x in a}</span></p>
			<p><span class="courier-code">{1, 4, 9, 16}</span></p>
			<p class="no-indent">Αν απαιτείται και ταυτόχρονο φιλτράρισμα των αποτελεσμάτων, τότε μπορεί να γίνει πρόσθετη χρήση της εντολής ελέγχου <span class="courier-code">if</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {x**2 for x in a if x&gt;0}</span></p>
			<p><span class="courier-code">{1, 4, 16}</span></p>
			<p class="no-indent">και έτσι το σύνολο που προκύπτει περιέχει τα τετράγωνα μόνο των θετικών στοιχείων του <span class="courier-code">a</span>.</p>
			<p>Η χρήση εμφωλευμένων βρόχων σε συνθέσεις συνόλων είναι επίσης δυνατή. Αυτή η περίπτωση δεν χρησιμεύει μόνο για τη σάρωση ενός συνόλου, αλλά και για τη συνδυαστική ανίχνευση πληροφοριών σε περισσότερα από ένα σύνολα. Στο επόμενο παράδειγμα (Λίστα Κώδικα 8-5):</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-5 | Σύνθεση συνόλου</figcaption><img src="media/ListaKodika-8-5_fmt.png" alt=""/></figure>
			<p class="no-indent">θα τυπωθεί: </p>
			<p><span class="courier-code">{2, 3}</span></p>
			<p class="no-indent">Το νέο σύνολο που δημιουργείται (<span class="courier-code">c</span>) περιέχει τα κοινά στοιχεία των δυο συνόλων. Αυτή η λειτουργία είναι γνωστή από τα μαθηματικά ως <i>τομή (intersection)</i>, αποτελεί μια από τις βασικές λειτουργίες των συνόλων, γίνεται πολύ πιο εύκολα με χρήση κατάλληλων τελεστών και περιγράφεται σε επόμενη παράγραφο.</p>
		</section>
		<section role="section" id="ch10se9">
			<h1><span role="label">8.9</span> Ο τελεστής <span class="courier-code">&apos;</span><span class="courier-code">in&apos;</span> σε σύνολα</h1>
			<p class="no-indent">Στην περιγραφή του τελεστή <span class="courier-code">in</span>, που δόθηκε σε προηγούμενα κεφάλαια, μνημονεύτηκε η λειτουργία αναζήτησης την οποία εκτελεί κάθε φορά που χρησιμοποιείται. Με τον ίδιο τρόπο χρησιμοποιείται και στα σύνολα. Σε αυτή την περίπτωση η λειτουργία του τελεστή <span class="courier-code">in</span> ταυτίζεται με την έννοια του συμβόλου <span class="math-font">∈</span> στα μαθηματικά: Έστω το σύνολο <span class="courier-code">a</span> <span class="math-font">=</span> <span class="math-font">{</span>2, 4, 6, 8<span class="math-font">}</span> που αποτελείται από τους μονοψήφιους άρτιους ακέραιους αριθμούς. Για το σύνολο αυτό ισχύουν τα παρακάτω:</p>
			<p>2<span class="math-font">∈</span><span class="courier-code">a</span>, 1<span class="math-font">∉</span><span class="courier-code">a</span></p>
			<p class="no-indent">Η συγκεκριμένη λογική ισχύει και στον κώδικα που ακολουθεί:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 2 in a</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; 1 in a</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">ή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 1 not in a</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Ακολουθούν μερικά ακόμη παραδείγματα του τελεστή <span class="courier-code">in</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; s={1,2,3}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; 5 in s</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;a&apos; in {&apos;a&apos;,&apos;</span><span class="courier-code">b&apos;,&apos;c&apos;}</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;d&apos; not in {&apos;a&apos;,&apos;b&apos;</span><span class="courier-code">,&apos;c&apos;}</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Η διαφορά στη χρήση του τελεστή <span class="courier-code">in</span> στα σύνολα, σε σχέση με τη χρήση του σε άλλες δομές όπως η λίστα, έχει να κάνει με την αποτελεσματικότητά του στην περίπτωση των συνόλων. Η πολυπλοκότητα αναζήτησης ενός στοιχείου σε ένα σύνολο μπορεί να είναι ακόμα και <i>Ο(1)</i>, αν στον πίνακα κατακερματισμού δεν υπάρχουν συγκρούσεις. Γίνεται δηλαδή πολύ πιο γρήγορα σε σχέση με τη σειριακή αναζήτηση που πραγματοποιείται με τη χρήση του <span class="courier-code">in</span> στις λίστες, όπου η πολυπλοκότητα χειρότερης περίπτωσης είναι <i>Ο(n)</i>. Στα σύνολα, στη χειρότερη περίπτωση, υπάρχει πολυπλοκότητα <i>O</i><i>(log n)</i>. Για την καλύτερη κατανόηση της διαφοράς στην ταχύτητα εκτέλεσης εντολών με χρήση του τελεστή <span class="courier-code">in</span>, ακολουθούν οι παρακάτω μετρήσεις χρόνου εκτέλεσης στην κονσόλα IPython με την εντολή <span class="courier-code">timeit</span>:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]:</b></span><span class="courier-code"> s=set(range(1000)) </span></p>
			<p><span class="courier-code"><b>In [2]:</b></span><span class="courier-code"> t=list(range(1000))</span></p>
			<p><span class="courier-code"><b>In [3]:</b></span><span class="courier-code"> %timeit 12 in t</span><span class="courier-code"> #αναζήτηση σε κάποιο ενδιάμεσο σημείο</span></p>
			<p><span class="courier-code">156 ns ± 1.46 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p><span class="courier-code"><b>In [4]:</b></span><span class="courier-code"> %timeit 12 in s </span><span class="courier-code">#αναζήτηση σε κάποιο ενδιάμεσο σημείο</span></p>
			<p><span class="courier-code">39.1 ns ± 0.747 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p><span class="courier-code"><b>In [5]:</b></span><span class="courier-code"> %timeit 999 in t </span><span class="courier-code">#αναζήτηση στο τέλος</span></p>
			<p><span class="courier-code">9.26 µs ± 111 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</span></p>
			<p><span class="courier-code"><b>In [6]:</b></span><span class="courier-code"> %timeit 999 in s #αναζήτηση στο τέλος</span></p>
			<p><span class="courier-code">63.2 ns </span><span class="courier-code">± 0.692 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p><span class="courier-code"><b>In [7]:</b></span><span class="courier-code"> %timeit 1 in t #αναζήτηση στην αρχή</span></p>
			<p><span class="courier-code">43.1 ns </span><span class="courier-code">± 1.07 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p><span class="courier-code"><b>In [8]:</b></span><span class="courier-code"> %timeit 1 in s #αναζήτηση στην αρχή</span></p>
			<p><span class="courier-code">38.9 ns ± 0.451 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p class="no-indent">Όπως φαίνεται και από τις μετρήσεις, οι χρόνοι αναζήτησης μπορεί να είναι παρόμοιοι και στις δυο δομές, αν το στοιχείο αναζήτησης βρίσκεται στην αρχή του πίνακα. Αν όμως βρίσκεται πιο μετά, π.χ. στη θέση 12, τότε ο χρόνος αναζήτησης στη λίστα γίνεται τετραπλάσιος απ’ ό,τι στο σύνολο. Αν το στοιχείο που αναζητείται βρίσκεται στο τέλος, τότε η διαφορά είναι τεράστια.</p>
			<p>Αυτό το πλεονέκτημα όμως έρχεται και με ένα κόστος. Ο χρόνος δημιουργίας ενός συνόλου είναι σχεδόν διπλάσιος από αυτόν που απαιτείται για μια λίστα:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]:</b></span><span class="courier-code"> %timeit s=set(range(1000))</span></p>
			<p><span class="courier-code">25.8 µs ± 557 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each) </span></p>
			<p><span class="courier-code"><b>In [2]:</b></span><span class="courier-code"> %timeit t=list(range(1000))</span></p>
			<p><span class="courier-code">13.1 µs ± 213 ns per loop (mean ± </span><span class="courier-code">std. dev. of 7 runs, 100000 loops each)</span></p>
			<p><span class="courier-code"><b>In [3]:</b></span><span class="courier-code"> %timeit s=set(range(100_000))</span></p>
			<p><span class="courier-code">7.15 ms ± 168 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</span></p>
			<p><span class="courier-code"><b>In [4]:</b></span><span class="courier-code"> </span><span class="courier-code">%timeit t=list(range(100_000))</span></p>
			<p><span class="courier-code">1.66 ms ± 31.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span></p>
			<p class="no-indent">Δίνεται ότι 1 ms (<i>millisecond</i>) = 10<sup class="superscript CharOverride-1">–3</sup> sec, 1 μs (<i>microsecond</i>) = 10<sup class="superscript CharOverride-1">–6</sup> sec, 1 ns (<i>nanosecond</i>) = 10<sup class="superscript CharOverride-1">–9</sup> sec.</p>
			<p class="no-indent">Επίσης, αν αλλάξει το πλήθος των δεδομένων, ο χρόνος αναζήτησης στην περίπτωση της λίστας μεγαλώνει κατά πολύ, σε αντίθεση με αυτόν που απαιτείται για ένα αντίστοιχο σύνολο. Αν, για παράδειγμα, τα <span class="courier-code">s</span> και <span class="courier-code">t</span> έχουν 100,000 στοιχεία, οι χρόνοι αναζήτησης είναι:</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<p><span class="courier-code"><b>In [1]:</b></span><span class="courier-code"> %timeit 50000 in s</span></p>
			<p><span class="courier-code">63.3 ns </span><span class="courier-code">± 1.08 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span></p>
			<p><span class="courier-code"><b>In [2]:</b></span><span class="courier-code"> %timeit 50000 in t</span></p>
			<p><span class="courier-code">462 µs ± 2.64 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span></p>
			<p class="no-indent">όπου ο χρόνος αναζήτησης στο σύνολο κρατήθηκε περίπου ίδιος, σε αντίθεση με τον χρόνο αναζήτησης στη λίστα.</p>
		</section>
		<section role="section" id="ch10se10">
			<h1><span role="label">8.10</span> Υποσύνολα – συγκρίσεις </h1>
			<p class="no-indent">Πολύ συχνά χρειάζεται να γίνουν έλεγχοι – όπως αν ένα σύνολο αποτελεί τμήμα άλλου συνόλου, αν ένα σύνολο είναι το ίδιο με κάποιο άλλο ή αν δυο σύνολα είναι εντελώς διαφορετικά μεταξύ τους. Σε άλλες δομές, τέτοιες εργασίες θα έπρεπε να γίνουν με πολλαπλές προσπελάσεις των στοιχείων τους και με αντίστοιχα πολλούς λογικούς ελέγχους. Με τη χρήση συνόλων, τέτοιου είδους εργασίες απλοποιούνται και γίνονται άμεσα, χρησιμοποιώντας κατάλληλους τελεστές σύγκρισης. Οι σχεσιακοί τελεστές (&gt;, &gt;=, &lt;, &lt;=) συγκρίνουν δυο σύνολα και προσδιορίζουν τη σχέση που υπάρχει μεταξύ τους (σχέσεις υπερσυνόλων ή υποσυνόλων).</p>
			<p>Στα μαθηματικά, ένα σύνολο <i>Α</i> λέγεται ότι είναι <i>υποσύνολο (subset) </i>ενός συνόλου <i>Β</i>, <i>A</i> <span class="math-font">⊆</span> <i>B</i>, αν ισχύει:</p>
			<p class="no-indent"><span class="math-font">{∀</span><i>x</i> <span class="math-font">∈</span> <i>A</i>: <i>x</i> <span class="math-font">∈</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">Στην Python αυτό ελέγχεται ως εξής:</p>
			<p><span class="courier-code">Α&lt;=Β ή Α.issubset(B)</span></p>
			<p class="no-indent">Τέτοιοι έλεγχοι έχουν ως αποτέλεσμα μια λογική τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}&lt;={3,1,2}</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; {&apos;α&apos;,&apos;β&apos;}&lt;={&apos;α&apos;</span><span class="courier-code">,&apos;β&apos;}</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}&lt;={1,4}</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">Δυο σύνολα ελέγχονται αν είναι ίσα, αν περιέχουν δηλαδή τα ίδια στοιχεία, ως εξής:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,4,2}=={4,2,1}</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Ένα σύνολο <i>Α</i> ονομάζεται γνήσιο υποσύνολο του <i>Β</i>, <i>A</i> <span class="math-font">⊂</span> <i>B</i>, αν ισχύει:</p>
			<p class="no-indent"><span class="math-font">{∀</span><i>x</i> <span class="math-font">∈</span> <i>A</i>: <i>x</i> <span class="math-font">∈</span> <i>B</i> <span class="math-font">⋀</span> <i>A</i> <span class="math-font">≠</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">αν δηλαδή κάθε στοιχείο του <i>Α</i> υπάρχει στο <i>Β</i>, αλλά το <i>Β</i> περιέχει και άλλα στοιχεία που δεν περιλαμβάνονται στο <i>Α</i>.</p>
			<p>Στην Python αυτό ελέγχεται με τη σχέση <i>Α </i>&lt; <i>Β</i>, δηλαδή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}&lt;{1,2,&apos;a&apos;}</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}&lt;{1,2}</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">Αντίστοιχες σχέσεις ισχύουν και στις περιπτώσεις <i>υπερσυνόλων (supersets)</i>, όπου ένα σύνολο <i>Α</i> είναι υπερσύνολο του <i>Β</i>, <i>A</i> <span class="math-font">⊇</span> <i>B</i>, αν ισχύει:</p>
			<p class="no-indent"><span class="math-font">{∀</span><i>x</i> <span class="math-font">∈</span> <i>B</i>: <i>x</i> <span class="math-font">∈</span> <i>A</i> <span class="math-font">⋀</span> <i>A</i> <span class="math-font">≠</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">Στην Python αυτό γίνεται με τις παρακάτω εντολές, χρησιμοποιώντας τελεστές σύγκρισης ή κατάλληλες μεθόδους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2,3}&gt;={1,3}</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2,3}.issuperset({1,3})</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Αν δυο σύνολα δεν έχουν κανένα κοινό στοιχείο, ονομάζονται ξένα μεταξύ τους, ενώ τομή τους (μια λειτουργία εύρεσης κοινών στοιχείων, που περιγράφεται αργότερα) είναι το κενό σύνολο. Το κενό σύνολο συμβολίζεται με <span class="courier-code">Ø</span> στα μαθηματικά και με ‘<span class="courier-code">{}</span>’ στην Python. Ο έλεγχος γίνεται με τη μέθοδο <span class="courier-code">isdisjoint</span>. Παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}.isdisjoint({1,3})#Υπάρχει κοινό στοιχείο το &apos;1&apos;</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2}.isdisjoint({4,3})#Δεν υπάρχει κανένα κοινό στοιχείο</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Ο παρακάτω πίνακας συνοψίζει όλες τις λειτουργίες ελέγχου συνόλων.</p>
			<figure role="table" id="tb26">
				<figcaption><span role="label">Πίνακας 8-1</span> | Τελεστές σύγκρισης συνόλων</figcaption>
				<table id="table040">
					<tbody>
						<tr>
							
								<th><span class="CharOverride-3">Έλεγχος</span></th>
							
							
								<th><span class="CharOverride-3">Σχέση</span></th>
							
							
								<th><span class="CharOverride-3">Τελεστής</span></th>
							
							
								<th><span class="CharOverride-3">Μέθοδος</span></th>
							
							
								<th><span class="CharOverride-3">Παράδειγμα</span></th>
							
							
								<th><span class="CharOverride-3">Αποτέλεσμα</span></th>
							
						</tr>
						<tr>
							<td>
								<p>Α υποσύνολο Β</p>
							</td>
							<td>
								<p><i>Α</i> <span class="math-font">⊆</span> <i>Β</i></p>
							</td>
							<td>
								<p><span class="courier-code">&lt;=</span></p>
							</td>
							<td>
								<p><span class="courier-code">issubset</span></p>
							</td>
							<td>
								<p><span class="courier-code">{1,2}&lt;={3,1,2,4}</span></p>
								<p><span class="courier-code">{1,2}&lt;={1,3,4}</span></p>
							</td>
							<td>
								<p><span class="courier-code">True</span></p>
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>Α γνήσιο υποσύνολο Β</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">⊂</span> <i>Β</i></p>
							</td>
							<td >
								<p><span class="courier-code">&lt;</span></p>
							</td>
							<td >
							</td>
							<td >
								<p><span class="courier-code">{1,3}&lt;{5,3,1}</span></p>
								<p><span class="courier-code">{1,3}&lt;{3,1}</span></p>
							</td>
							<td >
								<p><span class="courier-code">True</span></p>
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>A υπερσύνολο B</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">⊇</span> <i>Β</i></p>
							</td>
							<td >
								<p><span class="courier-code">&gt;=</span></p>
							</td>
							<td >
								<p><span class="courier-code">issuperset</span></p>
							</td>
							<td >
								<p><span class="courier-code">{1,2,5}&gt;={1,5}</span></p>
								<p><span class="courier-code">{1,5}&gt;={1,3}</span></p>
							</td>
							<td >
								<p><span class="courier-code">True</span></p>
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>A γνήσιο υπερσύνολο B</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">⊃</span> <i>Β</i></p>
							</td>
							<td >
								<p><span class="courier-code">&gt;</span></p>
							</td>
							<td >
							</td>
							<td >
								<p><span class="courier-code">{1,5}&gt;{1,5}</span></p>
								<p><span class="courier-code">{1,5,2}&gt;{1,5}</span></p>
							</td>
							<td >
								<p><span class="courier-code">False</span></p>
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>Α και Β ξένα</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">∩</span> <i>Β </i><span class="math-font">=</span> <span class="math-font">∅</span></p>
							</td>
							<td >
							</td>
							<td >
								<p><span class="courier-code">isdisjoint</span></p>
							</td>
							<td >
								<p><span class="courier-code">{1,2}.isdis-joint({4,3})</span></p>
							</td>
							<td >
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>Α διάφορο του Β</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">≠</span> <i>Β</i></p>
							</td>
							<td >
								<p><span class="courier-code">!=</span></p>
							</td>
							<td >
							</td>
							<td >
								<p><span class="courier-code">{1,2}!={1,3}</span></p>
								<p><span class="courier-code">{1,2}!={2,1}</span></p>
							</td>
							<td >
								<p><span class="courier-code">True</span></p>
								<p><span class="courier-code">False</span></p>
							</td>
						</tr>
						<tr>
							<td >
								<p>Α ίσο με Β</p>
							</td>
							<td >
								<p><i>Α</i> <span class="math-font">=</span> <i>Β</i></p>
							</td>
							<td >
								<p><span class="courier-code">==</span></p>
							</td>
							<td >
							</td>
							<td >
								<p><span class="courier-code">{1,2}=={1,3}</span></p>
								<p><span class="courier-code">{1,2}=={2,1}</span></p>
							</td>
							<td >
								<p><span class="courier-code">False</span></p>
								<p><span class="courier-code">True</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 8-6.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-6 | Συγκρίσεις συνόλων</figcaption><img src="media/ListaKodika-8-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Όπως φαίνεται και από τα πιο πάνω παραδείγματα, η λειτουργία των συγκριτικών τελεστών είναι διαφορετική στα σύνολα απ’ ό,τι στις άλλες δομές της Python. Στα σύνολα δεν γίνεται λογική σύγκριση αλλά εντοπισμός της σχέσης ενός συνόλου με κάποιο άλλο, αν δηλαδή το ένα είναι τμήμα του άλλου. Αντίθετα, σε δομές όπως οι λίστες οι συγκρίσεις γίνονται λεξικογραφικά, ανάμεσα στα στοιχεία των ακολουθιών.</p>
		</section>
		<section role="section" id="ch10se11">
			<h1><span role="label">8.11</span> Πράξεις συνόλων</h1>
			<p class="no-indent">Μια από τις πιο συχνές χρήσεις ενός συνόλου είναι η εύρεση μοναδικών τιμών από μια ακολουθία στοιχείων που επαναλαμβάνονται. Το επόμενο παράδειγμα (Λίστα Κώδικα 8-7) εντοπίζει τα μοναδικά στοιχεία που υπάρχουν σε μια λίστα με αριθμούς.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-7 | Μοναδικές τιμές</figcaption><img src="media/ListaKodika-8-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα του προγράμματος είναι ένα σύνολο <span class="courier-code">s</span> που περιέχει κάθε μοναδικό στοιχείο της λίστας <span class="courier-code">x</span>. Τα στοιχεία αυτά θα τυπωθούν στην οθόνη:</p>
			<p><span class="courier-code">{1, 2, 3, 4, 5, 6, 7}</span></p>
			<p class="no-indent">Τα πλεονεκτήματα που προσφέρει η χρήση συνόλων στον κώδικα δεν περιορίζονται μόνο στις περιπτώσεις γρήγορης ανάκτησης μοναδικών στοιχείων μιας λίστας τιμών ή στον έλεγχο εύρεσης μελών ενός συνόλου. Τα σύνολα συνοδεύονται από μια σειρά τελεστών και μεθόδων που διεκπεραιώνουν την πραγματοποίηση πράξεων μεταξύ τους. Οι πράξεις είναι γνωστές από τη μαθηματική θεωρία των συνόλων και εφαρμόζονται σε κάθε σύνολο, με οποιοδήποτε περιεχόμενο.</p>
			<p>Κάθε πράξη γίνεται ανάμεσα σε δυο ή περισσότερα σύνολα και έχει ως αποτέλεσμα τη δημιουργία ενός νέου συνόλου. Σε μια γραμμή μπορούν να γίνουν πολλαπλές διαδοχικές πράξεις. Ένας τρόπος αναπαράστασης πράξεων συνόλων είναι τα διαγράμματα Venn. Στις επόμενες γραμμές παρουσιάζεται, για κάθε πράξη, η διαγραμματική αναπαράσταση, ο μαθηματικός ορισμός και ο αντίστοιχος κώδικας σε Python.</p>
		</section>
		<section role="section" id="ch10se12">
			<h1><span role="label">8.12</span> Ένωση συνόλων</h1>
			<p class="no-indent">Η πράξη της <i>ένωσης (union)</i> ανάμεσα σε δυο σύνολα επιτρέπει τη δημιουργία ενός νέου συνόλου, που θα περιέχει τα στοιχεία και των δυο συνόλων. Μια τιμή όμως που υπάρχει και στα δυο σύνολα θα εμφανίζεται μόνο μια φορά.</p>
			<figure class="lista-kodika">
				<figcaption>Εικόνα 8-1 | Ένωση δύο συνόλων <i>Α</i> και <i>Β</i></figcaption><img src="media/chapter_8_image_2.jpg" alt=""/></figure>
			<p class="no-indent">Στο διάγραμμα Venn (Εικόνα 8-1) τα στοιχεία της ένωσης των δυο συνόλων <i>Α</i> και <i>Β</i> βρίσκονται στη γραμμοσκιασμένη περιοχή. Ο μαθηματικός τύπος της ένωσης είναι:</p>
			<p class="no-indent"><i>A</i> <span class="math-font">∪</span> <i>B</i> <span class="math-font">= {</span><i>x</i> <span class="math-font">∈</span> <i>A</i> <span class="math-font">⋀</span> <i>y</i> <span class="math-font">∈</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">Στην Python η ένωση συνόλων πραγματοποιείται με τον τελεστή ‘<span class="courier-code">|</span>’ (pipelining) ή με τη μέθοδο <span class="courier-code">union</span>. Οι μέθοδοι πράξεων συνόλων δεν τροποποιούν τα αρχικά σύνολα και δέχονται ως όρισμα είτε ένα σύνολο, οπότε κάνουν την πράξη, είτε μια δομή ακολουθίας, την οποία πρώτα μετατρέπουν σε σύνολο και μετά πραγματοποιούν την πράξη.</p>
			<p>Έστω δυο σύνολα <span class="courier-code">a={1,2,3}</span> και <span class="courier-code">b={2,3,4}</span>. Η ένωσή τους παρουσιάζεται στη Λίστα Κώδικα 8-8. </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-8 | Ένωση</figcaption><img src="media/ListaKodika-8-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Όλες οι πράξεις συνόλων επιστρέφουν ένα νέο σύνολο. Έτσι, μπορεί μια πράξη να γίνει στην κονσόλα, ώστε να εμφανίσει άμεσα το αποτέλεσμα στην οθόνη, ή να τεθεί ως εντολή ανάθεσης μέσα σε κάποιο πρόγραμμα, ώστε να δημιουργηθεί ένα νέο σύνολο σε μια μεταβλητή.</p>
			<p>Προσοχή χρειάζεται στη χρήση μεθόδων, γιατί το όρισμά τους πρώτα μετατρέπεται σε σύνολο και μετά γίνεται η πράξη με αυτό. Για παράδειγμα, στη γραμμή 11, η ακολουθία χαρακτήρων ‘<span class="courier-code">java&apos;</span> θα μετατραπεί στο σύνολο <span class="courier-code">{&apos;a&apos;, &apos;j&apos;, &apos;v&apos;}</span> και μετά θα γίνει ένωσή της με το άλλο σύνολο.</p>
			<p>Η ένωση θα μπορούσε να γίνει και με περισσότερα σύνολα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; {1,2,3}|{2,3,4}|{1,3,5}</span></p>
			<p><span class="courier-code">{1, 2, 3, 4, 5}</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-1</b>: Δίνονται δυο φράσεις κειμένου. Να εντοπίσετε ποια γράμματα χρησιμοποιούν και οι δυο φράσεις.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-9 | Ένωση – σύνολα χαρακτήρων</figcaption><img src="media/ListaKodika-8-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις εκτελεστεί το πρόγραμμα (Λίστα Κώδικα 8-9), θα εμφανιστεί το σύνολο:</p>
			<p><span class="courier-code">{&apos;l&apos;, &apos;r&apos;, &apos;e&apos;, &apos;o&apos;, &apos;W&apos;, &apos;d&apos;, &apos;H&apos;}</span></p>
			<p class="no-indent">που περιέχει τα γράμματα των δυο φράσεων.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-2</b>: Δίνονται δυο σετ παραγγελιών ανταλλακτικών. Ζητείται να γίνει ενοποίηση των παραγγελιών σε μία που θα περιέχει όλα τα υλικά.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-10 | Ένωση – σύνολα λέξεων</figcaption><img src="media/ListaKodika-8-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι συνολικές παραγγελίες φαίνονται στην έξοδο του προγράμματος της Λίστας Κώδικα 8-10:</p>
			<p><span class="courier-code">{&apos;Τακάκια&apos;</span><span class="courier-code">, &apos;Δίσκοι&apos;, &apos;Μπουζί&apos;, &apos;Ψαλίδια&apos;, &apos;Φίλτρα&apos;, &apos;Λάδι&apos;}</span></p>
		</section>
		<section role="section" id="ch10se13">
			<h1><span role="label">8.13</span> Τομή συνόλων</h1>
			<p class="no-indent">Όταν από δυο σύνολα χρειάζεται να βρεθούν τα στοιχεία που είναι κοινά, τότε χρησιμοποιείται η πράξη της <i>τομής (intersection)</i>.</p>
			<figure class="image" id="img44" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 8-2 | Η τομή δύο συνόλων <i>Α</i> και <i>Β</i></figcaption><img src="media/chapter_8_image_3.jpg" alt=""/></figure>
			<p class="no-indent">Στα μαθηματικά η τομή δυο συνόλων <i>Α</i> και <i>Β</i> ορίζεται ως εξής:</p>
			<p class="no-indent"><i>A</i> <span class="math-font">∩</span> <i>B</i> <span class="math-font">= {</span><i>x</i>:<i> x</i> <span class="math-font">∈</span> <i>A</i> <span class="math-font">⋀</span> <i>x</i> <span class="math-font">∈</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">Ο τελεστής ‘<span class="courier-code">&amp;</span>’ πραγματοποιεί την τομή δυο (ή περισσότερων) συνόλων στην Python, ενώ αντίστοιχη είναι και η λειτουργία της μεθόδου <span class="courier-code">intersection</span>. Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 8-11.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-11 | Τομή</figcaption><img src="media/ListaKodika-8-11_fmt.png" alt=""/></figure>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-3</b>: Να γράψετε πρόγραμμα που δέχεται μια φράση και εμφανίζει ποια φωνήεντα περιέχει αυτή. </p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-12 | Τομή – σύνολα χαρακτήρων</figcaption><img src="media/ListaKodika-8-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος (Λίστα Κώδικα 8-12), θα εμφανιστεί το παρακάτω σύνολο γραμμάτων στην οθόνη:</p>
			<p><span class="courier-code">{&apos;η&apos;, &apos;ό&apos;, &apos;α&apos;, &apos;ε&apos;, &apos;έ&apos;}</span></p>
			<p class="no-indent">που περιέχει τα φωνήεντα της φράσης. Η συνάρτηση <span class="courier-code">set</span> θα μετατρέψει το κείμενο της μεταβλητής <span class="courier-code">word</span> σε σύνολο, ενώ η μέθοδος <span class="courier-code">intersection</span> θα εντοπίσει ποια γράμματα της φράσης είναι κοινά με αυτά που βρίσκονται στο σύνολο με τα φωνήεντα, εμφανίζοντας έτσι μόνο τα φωνήεντα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-4</b>: Μια εταιρεία πραγματοποιεί δυο έρευνες αγοράς για τα προϊόντα της. Θέλει να βρει ποια από τα προϊόντα επέλεξαν οι καταναλωτές και στις δυο έρευνες. Τα προϊόντα έχουν κωδικοποίηση με αριθμούς από το 1 μέχρι το 9 (θα μπορούσε, ωστόσο, να χρησιμοποιηθεί και η ονομασία τους, χωρίς να αλλάξει τίποτα στη λογική του προγράμματος).</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί ο κώδικας (Λίστα Κώδικα 8-13) για το πρόβλημα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-13 | Τομή – σύνολα αριθμών</figcaption><img src="media/ListaKodika-8-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του προγράμματος θα εμφανίσει τα κοινά και στις δυο έρευνες προϊόντα:</p>
			<p><span class="courier-code">{2, 5, 6}</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-5</b>: Δίνονται τρία σύνολα <span class="courier-code">p1</span>, <span class="courier-code">p2</span> και <span class="courier-code">p3</span>, με τις παραγγελίες ενός καταστήματος. Ζητούνται <b>α)</b> να βρεθούν τα προϊόντα που είναι κοινά και στις τρεις παραγγελίες και <b>β)</b> να βρεθούν τα κοινά προϊόντα στις παραγγελίες <span class="courier-code">p1</span> και <span class="courier-code">p3</span>.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-14 | Τομή – σύνολα λέξεων</figcaption><img src="media/ListaKodika-8-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις γίνει η εκτέλεση του προγράμματος (Λίστα Κώδικα 8-14), θα εμφανιστούν τα παρακάτω αποτελέσματα στην οθόνη:</p>
			<p><span class="courier-code">{&apos;π2&apos;} {&apos;π1&apos;, &apos;π2&apos;}</span></p>
		</section>
		<section role="section" id="ch10se14">
			<h1><span role="label">8.14</span> Διαφορά συνόλων</h1>
			<p class="no-indent">Η πράξη της <i>διαφοράς (difference)</i> ενός συνόλου από ένα άλλο δημιουργεί σύνολο που περιέχει όσα στοιχεία του 1ου δεν υπάρχουν στο 2ο. Έτσι, ανάμεσα σε δυο σύνολα, η διαφορά τους κρατάει τα στοιχεία που υπάρχουν στο ένα, αφαιρώντας από αυτό τα κοινά με το άλλο σύνολο στοιχεία (Εικόνα 8-3).</p>
			<figure class="image" id="img45" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 8-3 | Η διάφορα του συνόλου <i>Α</i> από το <i>Β</i></figcaption><img src="media/chapter_8_image_4.jpg" alt=""/></figure>
			<p class="no-indent">Η διαφορά συνόλων ορίζεται στα μαθηματικά ως εξής:</p>
			<p class="no-indent"><i>A</i> <span class="math-font">–</span> <i>B</i> <span class="math-font">= {</span><i>x</i>:<i> x</i> <span class="math-font">∈</span> <i>A</i> <span class="math-font">⋀</span> <i>x</i> <span class="math-font">∉</span> <i>B</i><span class="math-font">}</span></p>
			<p class="no-indent">ή: </p>
			<p class="no-indent"><i>B</i> <span class="math-font">–</span> <i>A</i> <span class="math-font">= {</span><i>x</i>:<i> x</i> <span class="math-font">∈</span> <i>B</i> <span class="math-font">⋀</span> <i>x</i> <span class="math-font">∉</span> <i>A</i><span class="math-font">}</span></p>
			<p class="no-indent">Η πράξη της διαφοράς γίνεται στην Python με χρήση του τελεστή ‘<span class="courier-code">-</span>‘ και με την εφαρμογή της μεθόδου <span class="courier-code">difference</span>. Ο τελεστής δέχεται δυο σύνολα ως τελεστέους, ενώ η <span class="courier-code">difference</span> αποτελεί μέθοδο ενός συνόλου, δέχεται ως όρισμα μια ακολουθία την οποία μετατρέπει σε σύνολο και επιστρέφει τη διαφορά των δυο συνόλων. Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 8-15.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-15 | Διαφορά</figcaption><img src="media/ListaKodika-8-15_fmt.png" alt=""/></figure>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-6</b>: Δίνεται μια φράση. Να εμφανίσετε ποια σύμφωνα υπάρχουν σ’ αυτήν.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-16 | Διαφορά – σύμφωνα λέξης</figcaption><img src="media/ListaKodika-8-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις τρέξει το πρόγραμμα (Λίστα Κώδικα 8-16), θα εμφανιστεί στην οθόνη:</p>
			<p><span class="courier-code">{&apos;μ&apos;, &apos;λ&apos;, &apos;ρ&apos;, &apos;Κ&apos;}</span></p>
			<p class="no-indent">που είναι τα σύμφωνα της λέξης “<span class="courier-code">Καλημέρα</span>”.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-7</b>: Ένας πωλητής διαθέτει λίστα με τα προϊόντα που έχει ετοιμοπαράδοτα. Λαμβάνει από πελάτες δυο νέες παραγγελίες. Θέλει να βρει ποια προϊόντα τού λείπουν και θα πρέπει να προμηθευτεί. Πόσα κομμάτια από κάθε προϊόν που του λείπει πρέπει να παραγγείλει; Από πόσα είδη συνολικά;</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-17 | Διαφορά – παραγγελίες</figcaption><img src="media/ListaKodika-8-17_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του προγράμματος (Λίστα Κώδικα 8-17) θα εμφανίσει τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">{&apos;b1&apos;, &apos;a2&apos;, &apos;b4&apos;, &apos;c3&apos;} </span></p>
			<p class="no-indent">(τα είδη που δεν διαθέτει),</p>
			<p><span class="courier-code">{(&apos;a2&apos;, 2), (&apos;b4&apos;, 1), (&apos;b1&apos;, 2), (&apos;c3&apos;, 1)} </span></p>
			<p class="no-indent">(οι ποσότητες ανά είδος) και </p>
			<p><span class="courier-code">4</span></p>
			<p class="no-indent">(το σύνολο των ειδών προς παραγγελία).</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-8</b>: Μια εταιρεία Catering διοργάνωσε δυο εκδηλώσεις. Στα μενού υπήρχαν κάποια προϊόντα κοινά και στις δυο εκδηλώσεις και για τα οποία υπήρχαν μέτριες κριτικές, ενώ για τα υπόλοιπα οι κριτικές ήταν άριστες. Ζητούνται <b>α)</b> να βρεθούν τα κοινά προϊόντα και <b>β)</b> τα υλικά με άριστες κριτικές, μόνο στην 1η εκδήλωση, μόνο στη 2η, και τέλος και στις δύο.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-18 | Διαφορά – catering</figcaption><img src="media/ListaKodika-8-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι απαντήσεις στα ερωτήματα δίνονται στη Λίστα Κώδικα 8-18 και η εκτέλεσή του επιστρέφει τα αποτελέσματα:</p>
			<p><span class="courier-code">{&apos;k&apos;, &apos;e&apos;}</span></p>
			<p><span class="courier-code">{&apos;f&apos;, &apos;v&apos;, &apos;a&apos;} {&apos;j&apos;, &apos;s&apos;, &apos;p&apos;, &apos;o&apos;, &apos;d&apos;}</span></p>
			<p><span class="courier-code">{&apos;j&apos;, &apos;v&apos;, &apos;s&apos;, &apos;p&apos;, &apos;a&apos;, &apos;o&apos;, &apos;f&apos;, &apos;d&apos;}</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-9</b>: Τα ονόματα των μελών των πληρωμάτων τριών αεροσκαφών υπάρχουν αποθηκευμένα σε πλειάδες. Βρείτε:</p>
			</blockquote>
			<p><b>α)</b> τα μέλη του 1ου πληρώματος που δεν έκαναν άλλο ταξίδι.</p>
			<p><b>β)</b> τα μέλη που έκαναν και τα τρία ταξίδια.</p>
			<p><b>γ)</b> τα μέλη που έκαναν δύο από τα τρία ταξίδια.</p>
			<p><b>δ)</b> τα μέλη που ήταν μόνο σε ένα ταξίδι.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-19 | Διαφορά – πληρώματα</figcaption><img src="media/ListaKodika-8-19_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη Λίστα Κώδικα 8-19 παρουσιάζεται ο κώδικας για το Πρόβλημα 8-9. Τα αποτελέσματα της εκτέλεσής του στην οθόνη είναι:</p>
			<p><span class="courier-code">{&apos;Νίκη&apos;, &apos;Γιώργος&apos;}</span></p>
			<p><span class="courier-code">{&apos;Άννα&apos;}</span></p>
			<p><span class="courier-code">{&apos;Άκης&apos;, &apos;Βαγγέλης&apos;, &apos;</span><span class="courier-code">Εύα&apos;}</span></p>
			<p><span class="courier-code">{&apos;Νίκη&apos;, &apos;Θανάσης&apos;, &apos;Γιώργος&apos;}</span></p>
		</section>
		<section role="section" id="ch10se15">
			<h1><span role="label">8.15</span> Συμμετρική διαφορά συνόλων</h1>
			<p class="no-indent">Έστω δυο σύνολα <i>Α</i> και <i>Β</i>. Το σύνολο των στοιχείων τους που δεν είναι κοινά προκύπτει από τη <i>συμμετρική διαφορά</i> <i>τους</i> <i>(symmetric</i><i> difference)</i>. Ένα στοιχείο επομένως θα βρίσκεται στο νέο σύνολο αν είναι μέλος του ενός και όχι του άλλου συνόλου (δηλαδή θα βρίσκεται μόνο στο ένα). </p>
			<figure class="image" id="img46" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 8-4 | Συμμετρική διάφορα των συνόλων <i>Α</i> και <i>Β</i></figcaption><img src="media/chapter_8_image_5.jpg" alt=""/></figure>
			<p class="no-indent">Ο αντίστοιχος ορισμός στα μαθηματικά είναι:</p>
			<p class="no-indent"><i>A</i> <span class="math-font">⊖</span> <i>B</i> <span class="math-font">= {</span><i>x</i>: <span class="math-font">(</span><i>x</i> <span class="math-font">∈</span> <i>A</i> <span class="math-font">⋀</span> <i>x</i> <span class="math-font">∉</span> <i>B</i><span class="math-font">) ⋁ (</span><i>x</i> <span class="math-font">∈</span> <i>B</i> <span class="math-font">⋀</span> <i>x</i> <span class="math-font">∉</span> <i>A</i><span class="math-font">)}</span></p>
			<p class="no-indent">Το σύμβολο ‘<span class="courier-code">^</span>’ χρησιμοποιείται στην Python για τη συμμετρική διαφορά, ενώ υπάρχει και η μέθοδος <span class="courier-code">symmetric_difference</span>. Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 8-20.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-20 | Συμμετρική διαφορά</figcaption><img src="media/ListaKodika-8-20_fmt.png" alt=""/></figure>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-10</b>: Δίνονται δυο λίστες με τις πόλεις από δυο εκδρομές ενός ταξιδιωτικού γραφείου. Ζητείται να εμφανιστούν ποιες πόλεις δέχτηκαν επίσκεψη μία μόνο φορά.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-21 | Συμμετρική διαφορά – ταξιδιωτικό γραφείο</figcaption><img src="media/ListaKodika-8-21_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση της Λίστας Κώδικα 8-21 θα εμφανίσει:</p>
			<p><span class="courier-code">{&apos;Βιέννη&apos;, &apos;Ρώμη&apos;, &apos;Αθήνα&apos;}</span></p>
			<p class="no-indent">τις πόλεις δηλαδή με μόνο μία επίσκεψη.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-11</b>: Στον τελικό ενός διαγωνισμού προκρίνονται όσοι από τους διαγωνιζομένους είχαν δυο νίκες στους τρεις προκριματικούς. Έστω τρία σύνολα που περιέχουν τους νικητές κάθε προκριματικού. Εμφανίστε ποιοι θα λάβουν μέρος στον τελικό και ποιοι όχι.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-22 | Συμμετρική διαφορά – διαγωνισμός</figcaption><img src="media/ListaKodika-8-22_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του κώδικα (Λίστα Κώδικα 8-22) θα εμφανίσει:</p>
			<p><span class="courier-code">Πέρασαν:{1, 3, 5, 9}</span></p>
			<p><span class="courier-code">Δεν πέρασαν:{2, 4, 6, 7, 8, 12} </span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 8-12</b>: Οι ενδεκάδες που χρησιμοποίησε μια ομάδα, στους δυο τελευταίους της αγώνες, δίνονται σε δύο λίστες. Να εμφανίσετε τους παίκτες που αγωνίστηκαν μόνο σε έναν από τους δύο αγώνες.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 8-23 | Συμμετρική διαφορά – παίκτες ομάδας</figcaption><img src="media/ListaKodika-8-23_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην οθόνη θα εμφανιστεί η παρακάτω λίστα, με τους παίκτες που έπαιξαν σε έναν από τους δυο αγώνες:</p>
			<p><span class="courier-code">{6, 8, 44, 15, 26}</span></p>
		</section>
		<section role="section" id="ch10se16">
			<h1><span role="label">8.16</span> Ενσωματωμένες συναρτήσεις</h1>
			<p class="no-indent">Τα σύνολα είναι αντικείμενα συλλογές και μπορούν να χρησιμοποιηθούν σε εντολές <span class="courier-code">for</span>, όπως οι λίστες ή οι πλειάδες, καθώς και να λειτουργήσουν με τις ενσωματωμένες συναρτήσεις <span class="courier-code">min</span>, <span class="courier-code">max</span>, <span class="courier-code">sum</span>, <span class="courier-code">len</span>. Ακολουθούν μερικά παραδείγματα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-24 | Συναρτήσεις</figcaption><img src="media/ListaKodika-8-24_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">sorted</span> δουλεύει και με σύνολα. Ταξινομεί, έτσι, τα στοιχεία ενός συνόλου, επιστρέφοντας όμως τα στοιχεία με τη νέα τους διάταξη, με τη μορφή λίστας.</p>
		</section>
		<section role="section" id="ch10se17">
			<h1><span role="label">8.17</span> Τελεστές εκχώρησης σε σύνολα</h1>
			<section role="subsection" id="ch10se17ss1">
				<h1><span role="label">8.17.1</span> Τελεστής ‘=’ και μέθοδος <span class="courier-code">copy</span></h1>
				<p class="no-indent">Στην αρχή του κεφαλαίου παρουσιάστηκαν οι τρόποι δημιουργίας ενός νέου συνόλου. Υπάρχουν όμως περιπτώσεις όπου είναι απαραίτητο να δημιουργηθεί ένα νέο σύνολο ως αντίγραφο κάποιου άλλου. Υπάρχουν δυο τρόποι αντιγραφής: Ο ένας με χρήση του τελεστή εκχώρησης και ο άλλος με χρήση της μεθόδου <span class="courier-code">copy</span>. Η διαφορά τους είναι σημαντική και συνοψίζεται στο εξής: με το ‘<span class="courier-code">=</span>’ δημιουργείται ένας ακόμα δείκτης στο ίδιο αντικείμενο, ενώ με την <span class="courier-code">copy</span> δημιουργείται ένα αντίγραφο της δομής. Στα επόμενα παραδείγματα φαίνεται η διαφορά στη χρήση τους (Λίστα Κώδικα 8-25).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-25 | Αντιγραφή</figcaption><img src="media/ListaKodika-8-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Η δημιουργία του συνόλου <span class="courier-code">b</span>, ως αντιγράφου του <span class="courier-code">a</span>, δεν κατασκευάζει νέο αντικείμενο ή νέο σύνολο, αλλά έναν νέο δείκτη που «δείχνει» στο ίδιο αντικείμενο στο οποίο αναφέρεται το <span class="courier-code">a</span>. Έτσι, όταν ένα από τα δυο αλλάξει, αλλάζει και το άλλο. Αυτό αφορά και την προσθήκη και την αφαίρεση στοιχείων από αυτά. Αντίθετα, στην περίπτωση του συνόλου <span class="courier-code">c</span> δημιουργείται νέο ξεχωριστό σύνολο. Αυτό φαίνεται τόσο από το διαφορετικό <span class="courier-code">id</span> που έχει, σε σχέση με τα <span class="courier-code">a</span> και <span class="courier-code">b</span>, όσο και από τη συμπεριφορά του στις αλλαγές που συμβαίνουν στα άλλα δυο σύνολα. Όταν αυτά τροποποιούνται, το σύνολο <span class="courier-code">c</span> παραμένει αμετάβλητο.</p>
			</section>
			<section role="subsection" id="ch10se17ss2">
				<h1><span role="label">8.17.2</span> Σύνθετοι τελεστές και μέθοδοι</h1>
				<p class="no-indent">Τα σύνολα έχουν τους δικούς τους σύνθετους τελεστές ανάθεσης, που επιτρέπουν την άμεση τροποποίησή τους χωρίς να είναι απαραίτητο να δημιουργούνται ξανά από την αρχή. Οι λειτουργίες που επιτελούν αυτοί οι τελεστές υπάρχουν και ως μέθοδοι σε κάθε αντικείμενο τύπου συνόλου. Το διαφορετικό που προσφέρει μια μέθοδος από τον αντίστοιχο σύνθετο τελεστή είναι ότι δέχεται ως όρισμα μία ή περισσότερες ακολουθίες, τις μετατρέπει σε σύνολα και μετά κάνει την αντίστοιχη πράξη. Αντίθετα, οι σύνθετοι τελεστές δέχονται και ενεργούν απευθείας μόνο σε σύνολα. Οι διαθέσιμοι τελεστές φαίνονται στον Πίνακα 8-2.</p>
				<figure role="table" id="tb27">
					<figcaption><span role="label">Πίνακας 8-2</span> | Ενημέρωση συνόλων</figcaption>
					<table id="table041">
						<tbody>
							<tr>
								
									<th>Τελεστής</th>
								
								
									<th>Μέθοδος</th>
								
								
									<th>Λειτουργία</th>
								
								
									<th>Παράδειγμα</th>
								
							</tr>
							<tr>
								<td>
									<p><span class="courier-code">|=</span></p>
								</td>
								<td>
									<p><span class="courier-code">update</span></p>
								</td>
								<td>
									<p>Ένωση</p>
								</td>
								<td>
									<p><span class="courier-code">a.update(b)</span></p>
								</td>
							</tr>
							<tr>
								<td >
									<p><span class="courier-code">&amp;=</span></p>
								</td>
								<td >
									<p><span class="courier-code">intersection_update</span></p>
								</td>
								<td >
									<p>Τομή</p>
								</td>
								<td >
									<p><span class="courier-code">a&amp;=b</span></p>
								</td>
							</tr>
							<tr>
								<td >
									<p><span class="courier-code">-=</span></p>
								</td>
								<td >
									<p><span class="courier-code">difference_update</span></p>
								</td>
								<td >
									<p>Διαφορά</p>
								</td>
								<td >
									<p><span class="courier-code">a-=b</span></p>
								</td>
							</tr>
							<tr>
								<td >
									<p><span class="courier-code">^=</span></p>
								</td>
								<td >
									<p><span class="courier-code">symmetric_difference_update</span></p>
								</td>
								<td >
									<p>Συμμετρική διαφορά</p>
								</td>
								<td >
									<p><span class="courier-code">a^=b</span></p>
								</td>
							</tr>
						</tbody>
					</table>
				</figure>
				<p class="no-indent">Οι τελεστές αυτοί αντιστοιχούν σε μια από τις τέσσερις πράξεις συνόλων. Πιο αναλυτικά:</p>
				<p class="no-indent"><span class="bold-italics">Ενημέρωση συνόλου μέσω ένωσης. Τελεστής </span><span class="courier-code"><b>|=</b></span></p>
				<p class="no-indent">Για την ένωση συνόλων και την ενημέρωση ενός συνόλου χρησιμοποιείται είτε ο τελεστής ‘<span class="courier-code">|=</span>’, είτε η μέθοδος <span class="courier-code">update</span>. Η γενική μορφή σύνταξης της μεθόδου είναι:</p>
				<p><span class="courier-code">σύνολο.update(ακολουθία 1, ακολουθία 2 …)</span></p>
				<p class="no-indent">Ακολουθούν μερικά παραδείγματα.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-26 | Ενημέρωση με ένωση</figcaption><img src="media/ListaKodika-8-26_fmt.png" alt=""/></figure>
				<p class="no-indent">Προσοχή πρέπει να δοθεί στον τρόπο που επεξεργάζεται τα ορίσματά της η μέθοδος <span class="courier-code">update</span>: δέχεται μία ή περισσότερες ακολουθίες και παράγει αντίστοιχα σύνολα πριν εκτελέσει την πράξη (ή τις πράξεις) της ένωσης. Το ίδιο ισχύει και για τις υπόλοιπες μεθόδους ενημέρωσης συνόλων που περιγράφονται στη συνέχεια.</p>
				<p class="no-indent"><span class="bold-italics">Ενημέρωση συνόλου μέσω τομής. Τελεστής </span><span class="courier-code"><b>&amp;=</b></span></p>
				<p class="no-indent">Μέσα από τη λειτουργία της τομής συνόλων μπορεί να ενημερωθεί ένα σύνολο, με τη χρήση του τελεστή ‘<span class="courier-code">&amp;=</span>’ ή της μεθόδου <span class="courier-code">intersection_update</span>. Η γενική μορφή της μεθόδου είναι:</p>
				<p><span class="courier-code">σύνολο.intersection_update (ακολουθία </span><span class="courier-code">1, ακολουθία 2 …)</span></p>
				<p class="no-indent">Ακολουθούν μερικά παραδείγματα ενημέρωσης συνόλου μέσω τομής (Λίστα Κώδικα 8-27).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-27 | Ενημέρωση με τομή</figcaption><img src="media/ListaKodika-8-27_fmt.png" alt=""/></figure>
				<p class="no-indent"><span class="bold-italics">Ενημέρωση συνόλου μέσω διαφοράς. Τελεστής </span><span class="courier-code"><b>-=</b></span></p>
				<p class="no-indent">Σε αυτή την περίπτωση γίνεται ενημέρωση ενός συνόλου μέσα από τη λειτουργία της διαφοράς ενός συνόλου με ένα ή περισσότερα σύνολα, με χρήση του τελεστή ‘<span class="courier-code">-=</span>’ ή της μεθόδου <span class="courier-code">difference</span>_<span class="courier-code">update</span>. Ο τρόπος σύνταξης είναι:</p>
				<p><span class="courier-code">σύνολο.difference_update(ακολουθία 1, ακολουθία 2 …)</span></p>
				<p class="no-indent">Η λειτουργία τους φαίνεται στα επόμενα παραδείγματα (Λίστα Κώδικα 8-28).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-28 | Ενημέρωση με διαφορά</figcaption><img src="media/ListaKodika-8-28_fmt.png" alt=""/></figure>
				<p class="no-indent"><span class="bold-italics">Ενημέρωση συνόλου μέσω συμμετρικής διαφοράς. Τελεστής </span><span class="courier-code"><b>^=</b></span></p>
				<p class="no-indent">Γίνεται ενημέρωση ενός συνόλου με τη συμμετρική διαφορά του με ένα ή περισσότερα σύνολα, χρησιμοποιώντας τον τελεστή ‘<span class="courier-code">^=</span>’ ή τη μέθοδο <span class="courier-code">symmetric</span>_<span class="courier-code">difference</span>_<span class="courier-code">update</span>. Η σύνταξη της σχετικής μεθόδου είναι:</p>
				<p><span class="courier-code">σύνολο.symmetric_difference_update(ακολουθία </span><span class="courier-code">1, ακολουθία 2 …)</span></p>
				<p class="no-indent">Ακολουθούν μερικά παραδείγματα (Λίστα Κώδικα 8-29) εφαρμογής τους.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-29 | Ενημέρωση με συμμετρική διαφορά</figcaption><img src="media/ListaKodika-8-29_fmt.png" alt=""/></figure>
			</section>
		</section>
		<section role="section" id="ch10se18">
			<h1><span role="label">8.18</span> Frozenset</h1>
			<p class="no-indent">Εκτός από τα σύνολα, η Python προσφέρει μια ακόμη παρόμοια δομή, αυτήν του <i>frozenset («κλειδωμένου» συνόλου)</i>. Η ονομασία αυτού του είδους συνόλου παραπέμπει στη μία και μοναδική διαφορά του από ένα κανονικό σύνολο: είναι μια δομή αμετάβλητη. Αυτό σημαίνει ότι δεν μπορεί να αλλάξει μετά τη δημιουργία του και ότι δεν διαθέτει τις αντίστοιχες μεθόδους ενημέρωσης. Η χρήση του είναι το ίδιο απλή (Λίστα Κώδικα 8-30), όπως και στην περίπτωση του συνόλου:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 8-30 | Frozensets</figcaption><img src="media/ListaKodika-8-30_fmt.png" alt=""/></figure>
			<p class="no-indent">Πράξεις μεταξύ διαφορετικών συνόλων μπορεί να γίνουν. Η δομή που προκύπτει από την πράξη των συνόλων <span class="courier-code">a</span> και <span class="courier-code">b</span> στη γραμμή 7 είναι ίδια με τη δομή του 1ου τελεστέου.</p>
		</section>
		<section role="section" id="ch10se19" data-featured="chapter-review">
			<h1><span role="label">8.19</span> Περίληψη</h1>
			<p class="no-indent">Στο κεφάλαιο αυτό έγινε περιγραφή των χαρακτηριστικών του συνόλου. Παρουσιάστηκαν οι τρόποι χειρισμού τέτοιων δομών μέσα από τις διαδικασίες κατασκευής νέων συνόλων και της ενημέρωσής τους από άλλες δομές. Μέσα από τα παραδείγματα που παρουσιάστηκαν, δόθηκαν λεπτομερώς οι λειτουργίες που μπορεί να επιτελέσει ένα σύνολο. Έγινε ανάλυση του τρόπου με τον οποίο οι πράξεις συνόλων επιτρέπουν την επίλυση πολύπλοκων προβλημάτων, με κατάλληλους τρόπους, ώστε να αποφεύγονται χρονοβόρες επαναλήψεις και πολλαπλοί έλεγχοι, για να βρεθούν πολύπλοκες σχέσεις ανάμεσα στα δεδομένα. Έγινε επίσης περιγραφή του τρόπου σύγκρισης ενός συνόλου με άλλο, ώστε να ελεγχθούν οι σχέσεις που υπάρχουν μεταξύ διαφορετικών συνόλων.</p>
			
		</section>
		<section role="section" id="ch10se20" data-featured="chapter-questions">
			<h1><span role="label">8.20</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Ποια είναι η χρησιμότητα ενός συνόλου;</li>
			<li>Πώς δημιουργείται νέο σύνολο;</li>
			<li>Τι είδους δεδομένα δέχεται ένα σύνολο;</li>
			<li>Ποιες μεθόδους διαθέτει ένα σύνολο;</li>
			<li>Ποιες είναι οι πράξεις συνόλων; Ποιοι τελεστές χρησιμοποιούνται; Ποιες είναι οι διαθέσιμες για αυτό τον σκοπό μέθοδοι;</li>
			<li>Πώς μπορεί να ενημερωθεί ένα σύνολο;</li></ol>
			
		</section>
		<section role="section" id="ch10se21" data-featured="chapter-assess">
			<h1><span role="label">8.21</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
		<ol>	<li>Να γράψετε πρόγραμμα που θα δέχεται στοιχεία από τον χρήστη μέχρι να δοθεί το κενό και θα δημιουργεί δυο νέα σύνολα. Το ένα με χρήση συνάρτησης.</li>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί νέο σύνολο από άλλο αντικείμενο (λίστα ή συμβολοσειρά).</li>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί σύνολο με δέκα μοναδικά στοιχεία. Μπορούν να τυπωθούν με την αντίστροφη σειρά;</li>
			<li>Να γράψετε πρόγραμμα που θα εμφανίζει ταξινομημένα τα στοιχεία ενός συνόλου.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται 100 αριθμούς, από το 1 μέχρι το 10, και θα τους εισάγει σε ένα σύνολο. Να κατασκευάσετε κατάλληλη δομή όπου θα καταγράφεται το πλήθος εμφάνισης κάθε αριθμού. Τι είδους δομή θα επιλέγατε;</li>
			<li>Να γράψετε πρόγραμμα που θα υλοποιεί τη λειτουργία της τομής συνόλων σε δυο λίστες.</li>
			<li>Να γράψετε πρόγραμμα που θα διαβάζει κείμενο και θα εμφανίζει όλους τους διαφορετικούς χαρακτήρες που υπάρχουν μέσα σ’ αυτό.</li>
			<li>Μια βιβλιοθήκη διαθέτει δυο καταλόγους με τίτλους βιβλίων. Να γράψετε πρόγραμμα που θα εμφανίζει α) τους κοινούς τίτλους, β) τους τίτλους που υπάρχουν σε έναν μόνο από τους καταλόγους και γ) όλους τους διαφορετικούς τίτλους βιβλίων.</li>
			<li>Σε μια λίστα καταγράφονται τα νούμερα τηλεφωνικών κλήσεων μιας εταιρείας. Να γράψετε πρόγραμμα (με, αλλά και χωρίς τη χρήση συνόλων) που θα εμφανίζει σε ποιους αριθμούς έγινε έστω και μία κλήση.</li>
		</ol></section>
	</section>
	<section role="chapter" id="ch11">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 9</span> Λεξικά</h1>
		<section role="section" id="ch11se1">
			<h1><span role="label">9.1</span> Εισαγωγή</h1>
			<img src="media/chapter_9_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Το λεξικό είναι μια ακόμα από τις βασικές δομές της Python, με ιδιαίτερα χαρακτηριστικά και ιδιότητες. Στο κεφάλαιο αυτό γίνεται η παρουσίαση της σύνθετης δομής του λεξικού και των εργαλείων που διαθέτει η γλώσσα για την επεξεργασία του. Περιγράφονται, μέσα από παραδείγματα, όλες οι λειτουργίες των μεθόδων που συνοδεύουν ένα λεξικό, για την εισαγωγή δεδομένων και την επεξεργασία τους. Σκοπός του κεφαλαίου είναι η εξοικείωση του αναγνώστη με μια ξεχωριστή σε δυνατότητες δομή της Python, αυτή των λεξικών.</i></p>
		</section>
		<section role="section" id="ch11se2">
			<h1><span role="label">9.2</span> Βασικές έννοιες</h1>
			<p class="no-indent">Η Python διαθέτει μεγάλη ποικιλία τύπων δεδομένων με τη μορφή, φυσικά, αντικειμένων που ενσωματώνουν και αντίστοιχες λειτουργίες. Μια δομή αρκετά διαφορετική από τις υπόλοιπες, τόσο στον τρόπο λειτουργίας, όσο και στον τρόπο χειρισμού της, είναι το <i>λεξικό (dictionary)</i>. Πρόκειται για <i>ενσωματωμένο τύπο (built-in)</i> άμεσα διαθέσιμο για χρήση. Λεξικό είναι μια μη διατεταγμένη και μεταβαλλόμενη δομή της γλώσσας. Ονομάζεται μη <i>διατεταγμένο (unordered)</i> αντικείμενο, γιατί ο τρόπος με τον οποίο αποκτά κάποιος πρόσβαση στα στοιχεία του δεν στηρίζεται σε κάποια δεικτοδότηση με βάση τη θέση των στοιχείων μέσα σ’ αυτό, αλλά σύμφωνα με τις τιμές κάποιων, μοναδικών, κλειδιών. Η αποθήκευση των δεδομένων γίνεται σε ζεύγη, κλειδιών και αντίστοιχων τιμών. Είναι <i>μεταβλητό (mutable)</i> αντικείμενο, που σημαίνει ότι μπορεί και αλλάζει μέγεθος, δυναμικά, <i>κατά την εκτέλεση του προγράμματος (run time)</i>. Είναι ένα αντικείμενο <i>αντιστοίχισης </i><i>(mapping)</i> και μπορεί να παρέχει λειτουργίες που υλοποιούνται με μεθόδους ή επαναληπτικές δομές.</p>
			<p>Η μορφή που έχει ένα λεξικό είναι: </p>
			<p><span class="courier-code">{κλειδί 1: τιμή 1, κλειδί 2: τιμή 2 κ.λπ</span><span class="courier-code">.}</span></p>
			<p class="no-indent">και αποτελείται πάντα από ακολουθία της μορφής <span class="courier-code">κλειδί: τιμή</span>. Ως κλειδί μπορεί να χρησιμοποιηθεί κάθε αμετάβλητος τύπος δεδομένων της γλώσσας, όπως αριθμοί, κείμενο, πλειάδα ή frozenset. Αυτό συμβαίνει γιατί ο τρόπος αποθήκευσης του λεξικού βασίζεται σε <i>πίνακες κατακερματισμού (hash tables</i><i>)</i>, όπως εξηγούνται στο Κεφάλαιο 8, που δημιουργούνται βάσει της μοναδικότητας των κλειδιών του. Οι αντίστοιχες τιμές των κλειδιών μπορεί να είναι οτιδήποτε. Τα κλειδιά είναι μοναδικά, ενώ οι τιμές μπορεί να εμφανίζονται πολλές φορές. Η χρήση του λεξικού θυμίζει αρκετά το γνωστό, κοινό, λεξικό, όπου, για κάθε όρο ή λέξη (κλειδί), υπάρχει ένας ορισμός (τιμή).</p>
			<p>Το επόμενο κομμάτι κώδικα είναι παράδειγμα αντικειμένου τύπου λεξικού, στο οποίο αναφέρεται η μεταβλητή <span class="courier-code">d</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">{&apos;Όνομα&apos;: &apos;Άννα&apos;,</span></p>
			<p><span class="courier-code"> &apos;</span><span class="courier-code">Τμήμα&apos;: &apos;Πωλήσεις&apos;,</span></p>
			<p><span class="courier-code"> &apos;Μισθός&apos;: 1000,</span></p>
			<p><span class="courier-code"> &apos;Περιοχές&apos;: [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span> <span class="courier-code">type(d)</span></p>
			<p><span class="courier-code">&lt;class &apos;dict&apos;&gt;</span></p>
			<p class="no-indent">Όπως φαίνεται και από το περιεχόμενο του <span class="courier-code">d</span>, που αποτελεί λεξικό, τα κλειδιά είναι συμβολοσειρές, ενώ οι τιμές τους διάφορα είδη αντικειμένων, όπως κείμενο, αριθμοί και λίστες. </p>
		</section>
		<section role="section" id="ch11se3">
			<h1><span role="label">9.3</span> Δημιουργία λεξικού</h1>
			<p class="no-indent">Η δημιουργία λεξικού γίνεται εύκολα και άμεσα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1={}</span></p>
			<p class="no-indent">με τη χρήση των αγκίστρων ‘<span class="courier-code">{</span>‘ και ‘<span class="courier-code">}</span>’ και την εκχώρησή τους σε μια μεταβλητή όπως η <span class="courier-code">d</span>. Η παραπάνω εντολή δημιουργεί νέο κενό λεξικό. Το ίδιο μπορεί να γίνει και με την ενσωματωμένη συνάρτηση <span class="courier-code">dict</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d2=dict()</span></p>
			<p class="no-indent">η οποία, αν δεν περιέχει καμία τιμή μέσα στις παρενθέσεις, δημιουργεί νέο, κενό αρχικά, λεξικό.</p>
			<p>Αν είναι γνωστά εκ των προτέρων τα δεδομένα του λεξικού, ή αν χρειάζεται να δοθούν κάποια αρχικά στοιχεία, τότε μπορεί να δοθεί απευθείας η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1={&apos;url&apos;:&apos;www.mysite.gr&apos;,&apos;visitors&apos;:5} </span></p>
			<p class="no-indent">Σε αυτή την περίπτωση, μέσα στα άγκιστρα, δίνονται ζεύγη κλειδιών-τιμών χωρισμένα μεταξύ τους με κόμμα, ενώ ανάμεσα σε κάθε κλειδί και την τιμή του υπάρχει ο χαρακτήρας ‘:’. Το <span class="courier-code">d1</span> αποτελείται από δύο ζεύγη κλειδιών-τιμών. </p>
			<p>Χρησιμοποιώντας τη συνάρτηση <span class="courier-code">dict</span> για τη δημιουργία νέου λεξικού με κάποια αρχικά δεδομένα, θα πρέπει το περιεχόμενό του να δοθεί ως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1=dict([(&apos;url&apos;,&apos;www.mysite.gr&apos;),(&apos;visitors&apos;,5)])</span></p>
			<p class="no-indent">μια λίστα δηλαδή που περιέχει πλειάδες ζευγών της μορφής <span class="courier-code">(κλειδί, τιμή)</span>.</p>
			<p>Η <span class="courier-code">dict</span> μπορεί να χρησιμοποιηθεί και με <i>ονομαστικά (named)</i><sup class="superscript CharOverride-1"><span id="footnote-025-backlink"><a href="#footnote-025">69</a></span></sup> κλειδιά:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1=dict(url=&apos;www.mysite.gr&apos;,visitors=5)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d1</span></p>
			<p><span class="courier-code">{&apos;url&apos;: &apos;www.mysite.gr&apos;, &apos;visitors&apos;: 5}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d2=dict(e=2.72,log100=2,π=3.14)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d2</span></p>
			<p><span class="courier-code">{&apos;e&apos;: 2.72, &apos;log100&apos;: 2, &apos;π&apos;: 3.14}</span></p>
			<p class="no-indent">όπου τα ορίσματα <span class="courier-code">e</span>, <span class="courier-code">log100</span> και <span class="courier-code">π</span> δεν χρειάζεται να έχουν στο όνομά τους εισαγωγικά. Τοποθετούνται αυτόματα μόλις δημιουργηθεί το λεξικό. </p>
			<p>Για τη δημιουργία λεξικού με αρχικές τιμές μπορεί να γίνει χρήση της συνάρτησης <span class="courier-code">zip</span>. Η <span class="courier-code">zip</span> δέχεται δυο λίστες, μια με τα κλειδιά και μια με τις αντίστοιχες τιμές, ενώ, από αυτές, παράγει μια σειρά από πλειάδες τιμών. Αυτές οι πλειάδες θα χρησιμοποιηθούν από τη συνάρτηση <span class="courier-code">dict</span>. Η λειτουργία φαίνεται στο τμήμα προγράμματος της Λίστας Κώδικα 9-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-1 | Δημιουργία λεξικού</figcaption><img src="media/ListaKodika-9-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Το περιεχόμενο του λεξικού <span class="courier-code">d</span> θα είναι: </p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">{&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 5}</span></p>
			<p class="no-indent">ενώ η επανάληψη <span class="courier-code">for</span> θα τυπώσει το περιεχόμενο της <span class="courier-code">zip</span>:</p>
			<p><span class="courier-code">(&apos;a&apos;, 1)</span></p>
			<p><span class="courier-code">(&apos;b&apos;, 3)</span></p>
			<p><span class="courier-code">(&apos;c&apos;, 5)</span></p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Η συνάρτηση <span class="courier-code">zip</span> δέχεται δυο ακολουθίες με ίδιο πλήθος στοιχείων και παράγει αντικείμενο τύπου <span class="courier-code">zip</span>, το οποίο μπορεί να χρησιμοποιηθεί επαναληπτικά σε άλλες συναρτήσεις ή σε εντολές <span class="courier-code">for</span>. Ενσωματώνει μέσα της πλειάδες από τιμές ως ζεύγη, τα οποία κατασκευάζει από τα ορίσματά της. Παίρνει ένα στοιχείο από την αντίστοιχη θέση κάθε ακολουθίας.</p>
			</aside>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-1</b>: Δίνεται λίστα με τα ονόματα υπαλλήλων και λίστα με τους μισθούς τους. Να δημιουργηθεί λεξικό που θα περιέχει ως κλειδιά τα ονόματα και ως τιμές τους μισθούς.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί το αντίστοιχο πρόγραμμα στη Λίστα Κώδικα 9-2.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-2 | Δημιουργία λεξικού με τη <span class="courier-code">zip</span></figcaption><img src="media/ListaKodika-9-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος, θα εμφανιστούν τα περιεχόμενα του νέου λεξικού:</p>
			<p><span class="courier-code">{&apos;Ζωή&apos;: 1200, &apos;Ηρώ&apos;: 900, &apos;Άκης&apos;: 1100}</span></p>
		</section>
		<section role="section" id="ch11se4">
			<h1><span role="label">9.4</span> Προσπέλαση λεξικού</h1>
			<p class="no-indent">Προσπέλαση ονομάζεται η λειτουργία εκείνη που επιτρέπει την πρόσβαση σε στοιχείο μιας ακολουθίας δομής, ώστε να είναι δυνατή η ανάγνωση των τιμών της δομής ή η εγγραφή πληροφοριών σε αυτήν. Για την πρόσβαση σε κάποιο από τα στοιχεία ενός λεξικού, χρησιμοποιείται η ονομασία του κλειδιού του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d={&apos;Όνομα&apos;: &apos;Άννα&apos;,</span></p>
			<p><span class="courier-code">&#9;   &apos;</span><span class="courier-code">Τμήμα&apos;: &apos;Πωλήσεις&apos;,</span></p>
			<p><span class="courier-code">&#9;   &apos;Μισθός&apos;: 1000,</span></p>
			<p><span class="courier-code">&#9;   &apos;Περιοχές&apos;: [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d[&apos;</span><span class="courier-code">Μισθός&apos;]</span></p>
			<p><span class="courier-code">1000</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d[&apos;Περιοχές&apos;]</span></p>
			<p><span class="courier-code">[&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]</span></p>
			<p class="no-indent">Μέσα σε αγκύλες, αν δώσουμε το όνομα του κλειδιού, εμφανίζεται η τιμή του.</p>
			<p>Στο λεξικό δεν μπορεί να χρησιμοποιηθεί κάποιος αριθμητικός δείκτης όπως σε άλλες δομές (λίστα, συμβολοσειρά ή πλειάδα), γιατί η σειρά των στοιχείων του δεν είναι γνωστή από πριν. Η παρακάτω εντολή θα εμφανίσει μήνυμα σφάλματος:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d[1]</span></p>
			<p><span class="courier-code">KeyError: 1</span></p>
			<p class="no-indent">Πρόβλημα θα υπάρχει επίσης αν το όνομα του κλειδιού δεν υπάρχει στο λεξικό, οπότε πάλι θα εμφανιστεί μήνυμα σφάλματος και θα διακοπεί η εκτέλεση: </p>
			<p><span class="courier-code">&gt;&gt;&gt; d[&apos;Ηλικία&apos;]</span></p>
			<p><span class="courier-code">KeyError: &apos;Ηλικία&apos;</span></p>
			<p class="no-indent">Για την προσπέλαση όλων των κλειδιών ενός λεξικού, διαδοχικά, το ένα μετά το άλλο, μπορεί να γίνει χρήση της εντολής <span class="courier-code">for</span> όπως φαίνεται στη Λίστα Κώδικα 9-3.</p>
			
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-3 | Προσπέλαση λεξικού βάσει ονόματος</figcaption><img src="media/ListaKodika-9-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις τρέξει η <span class="courier-code">for</span>, κάθε κλειδί του λεξικού <span class="courier-code">d</span> θα δοθεί ως τιμή στη μεταβλητή <span class="courier-code">i</span> και θα τυπωθεί το περιεχόμενό της μέσω της <span class="courier-code">print</span>. Με τη βοήθεια της μεταβλητής <span class="courier-code">i</span> μπορεί να εμφανιστεί και η αντίστοιχη τιμή κάθε κλειδιού (<span class="courier-code">d[i]</span>): </p>
			<p><span class="courier-code">a 12</span></p>
			<p><span class="courier-code">b 13</span></p>
			<p class="no-indent">Ενώ παλαιότερα η σειρά εμφάνισης των στοιχείων του <span class="courier-code">d</span> θα ήταν άγνωστη, από την έκδοση 3.6 της Python η σειρά εμφάνισης των στοιχείων ενός λεξικού είναι η σειρά με την οποία έγινε η εισαγωγή τους. Αυτό προστέθηκε και τυπικά στις προδιαγραφές της γλώσσας στην έκδοση 3.7.</p>
			<p>Για την ανάκτηση του περιεχομένου ενός λεξικού μπορούν να χρησιμοποιηθούν και οι ενσωματωμένες μέθοδοι <span class="courier-code">keys</span>, <span class="courier-code">values</span> και <span class="courier-code">items</span> και να ενταχθούν σε μια επαναληπτική δομή <span class="courier-code">for</span>. </p>
			<p>Όπως κάθε μέθοδος, η <span class="courier-code">values</span> γράφεται αμέσως μετά το όνομα του λεξικού και αφού προηγηθεί μια τελεία ανάμεσά τους. Η <span class="courier-code">values</span> επιστρέφει λίστα με όλες τις τιμές του λεξικού. Η επόμενη <span class="courier-code">for</span> (Λίστα Κώδικα 9-4) τυπώνει το περιεχόμενο (τις τιμές) του λεξικού <span class="courier-code">d</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-4 | Προσπέλαση λεξικού βάσει τιμών</figcaption><img src="media/ListaKodika-9-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του παραπάνω κώδικα, θα εμφανιστούν στην οθόνη οι παρακάτω τιμές:</p>
			<p><span class="courier-code">Άννα</span></p>
			<p><span class="courier-code">Πωλήσεις</span></p>
			<p><span class="courier-code">1000</span></p>
			<p><span class="courier-code">[&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;</span><span class="courier-code">]</span></p>
			<p class="no-indent">Η μέθοδος <span class="courier-code">values</span> (όπως και οι άλλες δύο) χρησιμοποιείται ως <i>επαναλήπτης</i> (iterator)<sup class="superscript CharOverride-1"><span id="footnote-024-backlink"><a href="#footnote-024">70</a></span></sup> στη <span class="courier-code">for</span>, η οποία παίρνει μια μια τις τιμές του λεξικού, με <i>άγνωστη (</i><i>arbitrary)</i> όμως σειρά. Αντίστοιχη είναι και η λειτουργία της μεθόδου <span class="courier-code">keys</span>, η οποία επιστρέφει τα κλειδιά ενός λεξικού (Λίστα Κώδικα 9-5).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-5 | Προσπέλαση λεξικού βάσει κλειδιών</figcaption><img src="media/ListaKodika-9-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του πιο πάνω τμήματος προγράμματος θα εμφανίσει τα παρακάτω αποτελέσματα στην οθόνη:</p>
			<p><span class="courier-code">Όνομα</span></p>
			<p><span class="courier-code">Τμήμα</span></p>
			<p><span class="courier-code">Μισθός</span></p>
			<p><span class="courier-code">Περιοχές</span></p>
			<p class="no-indent">Έτσι, με γνωστά τα κλειδιά, είναι δυνατή η πρόσβαση και στις αντίστοιχες τιμές, όπως φαίνεται στη Λίστα Κώδικα 9-6.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-6 | Προσπέλαση λεξικού με πολλαπλή χρήση κλειδιού</figcaption><img src="media/ListaKodika-9-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση του κώδικα θα εμφανίσει:</p>
			<p><span class="courier-code">Κλειδί:Όνομα, Τιμή:Άννα</span></p>
			<p><span class="courier-code">Κλειδί:Τμήμα, Τιμή:Πωλήσεις</span></p>
			<p><span class="courier-code">Κλειδί:Μισθός, Τιμή:1000</span></p>
			<p><span class="courier-code">Κλειδί:Περιοχές, Τιμή:[&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]</span></p>
			<p class="no-indent">Παρόμοια είναι και η χρήση της μεθόδου <span class="courier-code">items</span>, η οποία επιστρέφει λίστα κλειδιών-τιμών του λεξικού. Το προηγούμενο αποτέλεσμα θα μπορούσε να επιστραφεί και με το επόμενο κομμάτι κώδικα (Λίστα Κώδικα 9-7).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-7 | Προσπέλαση λεξικού με πλειάδες κλειδιού-τιμής</figcaption><img src="media/ListaKodika-9-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι παραπάνω μέθοδοι μπορεί να χρησιμοποιηθούν και έξω από δομές <span class="courier-code">for</span>, ενώ αποδίδουν τα αντίστοιχα περιεχόμενα του λεξικού (κλειδιά, τιμές ή και τα δύο) σε μια οντότητα που μοιάζει με λίστα, αλλά δεν είναι:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d.keys()</span></p>
			<p><span class="courier-code">dict_keys([&apos;Όνομα&apos;, &apos;Τμήμα&apos;, &apos;Μισθός&apos;, &apos;Περιοχές&apos;])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d.values()</span></p>
			<p><span class="courier-code">dict_values([&apos;</span><span class="courier-code">Άννα&apos;, &apos;Πωλήσεις&apos;, 1000, [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d.items()</span></p>
			<p><span class="courier-code">dict_items([(&apos;Όνομα&apos;, &apos;Άννα&apos;), (&apos;Τμήμα&apos;, &apos;Πωλήσεις&apos;), (&apos;Μισθός&apos;, 1000), (&apos;</span><span class="courier-code">Περιοχές&apos;, [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;])])</span></p>
			<p class="no-indent">Τα αποτελέσματα μπορούν να καταχωρηθούν και σε μεταβλητές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; v=d.values()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; v</span></p>
			<p><span class="courier-code">dict_values([&apos;Άννα&apos;, &apos;Πωλήσεις&apos;, 1000, [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; type(v)</span></p>
			<p><span class="courier-code">&lt;class &apos;dict_values&apos;&gt;</span></p>
			<p class="no-indent">‘Όπως φαίνεται, το περιεχόμενο της μεταβλητής <span class="courier-code">v</span> μοιάζει με τη μορφή της λίστας, αλλά στην πραγματικότητα είναι αυτό που ονομάζεται <i>όψη λεξικού (dictionary view)</i>, ενώ ο αντίστοιχος τύπος της είναι <span class="courier-code">dict_values</span>. Με την εντολή <span class="courier-code">v=d.values()</span>, η μεταβλητή <span class="courier-code">v</span> αποκτά σύνδεση με το λεξικό <span class="courier-code">d</span>, όπου της δίνονται οι αναφορές των τιμών του <span class="courier-code">d</span> και όχι το περιεχόμενό του. Αυτό κάνει τη μεταβλητή <span class="courier-code">v</span> να λειτουργεί δυναμικά, να αλλάζει και να τροποποιείται «μόνη» της, αυτόματα, με κάθε αλλαγή που συμβαίνει στο λεξικό στο οποίο αναφέρεται. Αν επομένως αφαιρεθεί ένα στοιχείο από το λεξικό, η όψη θα ενημερωθεί αυτόματα. Οι παρακάτω εντολές ενημερώνουν το λεξικό αλλά και την αντίστοιχη όψη του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; k=d.keys()</span></p>
			<p><span class="courier-code">dict_keys([&apos;Όνομα&apos;, &apos;Τμήμα&apos;, &apos;Μισθός&apos;, &apos;Περιοχές&apos;])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; del d[&apos;Τμήμα&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">{&apos;Όνομα&apos;: &apos;Άννα&apos;, &apos;Μισθός&apos;: 1000, &apos;Περιοχές&apos;: [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;</span><span class="courier-code">]}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d.keys()</span></p>
			<p><span class="courier-code">dict_keys([&apos;Όνομα&apos;, &apos;Μισθός&apos;, &apos;Περιοχές&apos;])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; k</span></p>
			<p><span class="courier-code">dict_keys([&apos;Όνομα&apos;, &apos;Μισθός&apos;, &apos;Περιοχές&apos;])</span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">del</span>, που περιγράφεται σε επόμενη ενότητα, διαγράφει ένα κλειδί από το λεξικό (το κλειδί <span class="courier-code">&apos;Τμήμα&apos;</span>). Η εμφάνιση του λεξικού στην οθόνη δείχνει τη νέα μορφή του. Αντίστοιχη όμως είναι και η αλλαγή της όψης που υπάρχει ήδη στη μεταβλητή <span class="courier-code">k</span>.</p>
			<p>Αυτή η λειτουργία βοηθάει στην ταχύτερη επεξεργασία των στοιχείων ενός λεξικού, αφού στην όψη δεν αποθηκεύονται τα δεδομένα, παρά μόνο οι αναφορές μνήμης όπου βρίσκονται αυτά. Πλεονεκτήματα υπάρχουν και από το ότι δεν απαιτείται περισσότερος χώρος στη μνήμη ώστε να αναπαρασταθούν τα δεδομένα αυτά, υπάρχουν μόνο μια φορά στο λεξικό. Όταν αλλάξουν αυτά, αλλάζουν αυτόματα και στην όψη.</p>
			<p>Αν παρ’ όλα αυτά χρειάζεται αποθήκευση του περιεχομένου κάποιου λεξικού σε άλλη δομή, όπως η λίστα ή η πλειάδα, αυτό γίνεται με τις εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x=list(d.values())</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">[&apos;Άννα&apos;, 1000, [&apos;Αθήνα&apos;, &apos;</span><span class="courier-code">Ηράκλειο&apos;]]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y=tuple(d.keys())</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y</span></p>
			<p><span class="courier-code">(&apos;Όνομα&apos;, &apos;Μισθός&apos;, &apos;Περιοχές&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; del d[&apos;Περιοχές&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
			<p><span class="courier-code">{&apos;Όνομα&apos;: &apos;Άννα&apos;</span><span class="courier-code">, &apos;Μισθός&apos;: 1000}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; v</span></p>
			<p><span class="courier-code">dict_values([&apos;Άννα&apos;, 1000])</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">[&apos;Άννα&apos;, 1000, [&apos;Αθήνα&apos;, &apos;Ηράκλειο&apos;]]</span></p>
			<p class="no-indent">Οι τιμές των όψεων ενημερώνονται πάντα μετά από κάθε αλλαγή του λεξικού στο οποίο αναφέρονται, ενώ οι τιμές των <span class="courier-code">x</span> και <span class="courier-code">y</span> (λίστα και πλειάδα αντίστοιχα) δεν επηρεάζονται καθόλου.</p>
		</section>
		<section role="section" id="ch11se5">
			<h1><span role="label">9.5</span> Ανάκτηση δεδομένων λεξικού</h1>
			<p class="no-indent">Για την ανάκτηση της τιμής ενός κλειδιού, μπορεί να χρησιμοποιηθεί και η μέθοδος <span class="courier-code">get</span>. Η γενική μορφή της είναι:</p>
			<p><span class="courier-code">λεξικό</span><span class="courier-code">.get(κλειδί [,τιμή])</span></p>
			<p class="no-indent">Το προαιρετικό όρισμα <span class="courier-code">τιμή</span> καθορίζει την τιμή που θα επιστραφεί από τη μέθοδο αν το κλειδί δεν υπάρχει στο λεξικό. Αν δεν δοθεί τέτοια τιμή και το κλειδί δεν υπάρχει, η <span class="courier-code">get</span> επιστρέφει την τιμή <span class="courier-code">None</span>. Δίνονται μερικά παραδείγματα στη Λίστα Κώδικα 9-8.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-8 | Ανάκτηση δεδομένων</figcaption><img src="media/ListaKodika-9-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Σε αντίθεση με την εντολή στη γραμμή 4 που προκαλεί σφάλμα, η <span class="courier-code">get</span> στις γραμμές 8 και 10 δεν διακόπτεται με σφάλμα, επιστρέφει μια τιμή<sup class="superscript CharOverride-1"><span id="footnote-023-backlink"><a href="#footnote-023">71</a></span></sup>.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-2</b>: Ένα λεξικό περιέχει τα ονόματα πόλεων ως κλειδιά και τα ονόματα συνεργατών μιας εταιρείας με έδρα τη Θεσσαλονίκη. Να γράψετε πρόγραμμα που θα διαβάζει το όνομα μιας πόλης και θα εμφανίζει το όνομα του συνεργάτη. Αν δεν υπάρχει κάποιος σε αυτή την πόλη, να εμφανίζεται κατάλληλο μήνυμα.</p>
			</blockquote>
			<p class="no-indent">Η μορφή του λεξικού είναι: </p>
			<p><span class="courier-code">names=dict(Πάτρα=&apos;Νίκος&apos;,Ηράκλειο=&apos;Άννα&apos;,</span><span class="courier-code">Ξάνθη=&apos;Γιώργος&apos;,Λάρισα=&apos;Νίκη&apos;)</span></p>
			<p class="no-indent">Το πρόγραμμα θα είναι:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-9 | Ανάκτηση δεδομένων – πόλεις και συνεργάτες</figcaption><img src="media/ListaKodika-9-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Αν η πόλη που δίνει ο χρήστης του προγράμματος (Λίστα Κώδικα 9-9) δεν υπάρχει στο λεξικό, εμφανίζεται στην οθόνη το κείμενο <span class="courier-code">s</span>. Αν υπάρχει, εμφανίζεται το αντίστοιχο περιεχόμενο του λεξικού. Δοκιμάζοντας με κάποιες τιμές το πιο πάνω σενάριο, εμφανίζονται τα παρακάτω:</p>
			<p><span class="courier-code">Δώσε το όνομα μιας πόλης:</span><span class="courier-code"><b>Λαμία</b></span></p>
			<p><span class="courier-code">Στην πόλη Λαμία δεν υπάρχει συνεργάτης</span></p>
			<p><span class="courier-code">Δώσε το όνομα μιας πόλης:</span><span class="courier-code"><b>Ξάνθη</b></span></p>
			<p><span class="courier-code">Γιώργος</span></p>
			<p class="no-indent">Για την εμφάνιση των παραπάνω αποτελεσμάτων, μέσα στον κώδικα δεν χρειάστηκε να χρησιμοποιηθεί κάποια δομή ελέγχου!</p>
			<p>Ο έλεγχος ύπαρξης κλειδιού σε ένα λεξικό μπορεί να γίνει και με τον τελεστή <span class="courier-code">in</span>. Η χρήση του είναι απλή:</p>
			<p><span class="courier-code">κλειδί in λεξικό</span></p>
			<p class="no-indent">Αν το κλειδί υπάρχει στο λεξικό, επιστρέφεται η τιμή <span class="courier-code">True</span>, διαφορετικά η τιμή <span class="courier-code">False</span>.</p>
			<p>Για παράδειγμα, οι εντολές της Λίστας Κώδικα 9-10:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-10 | Έλεγχος δεδομένων – <span class="courier-code">in</span></figcaption><img src="media/ListaKodika-9-10_fmt.png" alt=""/></figure>
			<p class="no-indent">θα εμφανίσουν την τιμή <span class="courier-code">True</span>, αν οι τιμές αριστερά από το <span class="courier-code">in</span> υπάρχουν στο λεξικό, και την τιμή <span class="courier-code">False</span> αν δεν υπάρχουν.</p>
			<p>Αντίθετα, με τον τελεστή άρνησης <span class="courier-code">not</span> <span class="courier-code">in</span> μπορεί να ελεγχθεί αν ένα κλειδί δεν υπάρχει μέσα σε λεξικό. Στις επόμενες γραμμές (Λίστα Κώδικα 9-11), γίνεται έλεγχος, πριν την προσθήκη μιας τιμής, αν το κλειδί της (<span class="courier-code">key</span>) υπάρχει ήδη στο λεξικό, ώστε να μην αλλάξει η τιμή:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-11 | Έλεγχος δεδομένων – <span class="courier-code">not in</span></figcaption><img src="media/ListaKodika-9-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Το Παράδειγμα 9-2 θα μπορούσε να λυθεί και με άλλο τρόπο:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-12 | Έλεγχος δεδομένων – <span class="courier-code">not in</span> – πόλεις και συνεργάτες</figcaption><img src="media/ListaKodika-9-12_fmt.png" alt=""/></figure>
			<p class="no-indent">όπου η <span class="courier-code">print</span> θα τυπώσει το 1ο στοιχείο της λίστας (στη θέση 0), αν το αποτέλεσμα του ελέγχου της <span class="courier-code">in</span> είναι <span class="courier-code">False</span> (δηλαδή 0), ή το 2ο στοιχείο (στη θέση 1), αν η <span class="courier-code">in</span> επιστρέψει <span class="courier-code">True</span> (δηλαδή 1).</p>
			<p>Ο τελεστής <span class="courier-code">in</span> μπορεί να χρησιμοποιηθεί και σε λογικές εκφράσεις short circuit, για την αποφυγή πρόκλησης σφάλματος σε αναγνώσεις ενός λεξικού. Έστω το πιο κάτω λεξικό με τους πληθυσμούς κάποιων χωρών:</p>
			<p><span class="courier-code">population=dict(Ελλάδα=10_816_286, Γαλλία=67_348_000)</span></p>
			<p class="no-indent">Η πρόσβαση στα στοιχεία του λεξικού γίνεται με βάση το κλειδί του:</p>
			<p><span class="courier-code">population[&apos;Ελλάδα&apos;]</span></p>
			<p class="no-indent">οπότε και εμφανίζεται η αντίστοιχη τιμή. Αν δεν υπάρχει το κλειδί, τότε εμφανίζεται σφάλμα:</p>
			<p><span class="courier-code">population[&apos;ΗΠΑ&apos;] </span></p>
			<p><span class="courier-code">KeyError: &apos;ΗΠΑ&apos;</span></p>
			<p class="no-indent">Αυτό αντιμετωπίζεται αν τεθεί ως έκφραση βραχυκυκλώματος:</p>
			<p><span class="courier-code">&apos;ΗΠΑ&apos; in population and population[&apos;ΗΠΑ&apos;] </span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">Αν το κλειδί υπάρχει, η <span class="courier-code">and</span> θα κάνει αποτίμηση και του 2ου τελεστέου και θα επιστρέψει την τιμή του κλειδιού. Αν δεν υπάρχει, η <span class="courier-code">and</span> θα σταματήσει μετά την αποτίμηση του 1ου τελεστέου, που είναι ο έλεγχος <span class="courier-code">in</span> (ο οποίος θα αποτύχει), και θα επιστρέψει την τιμή <span class="courier-code">False</span>.</p>
			<p>Η <span class="courier-code">in</span> μπορεί να χρησιμοποιηθεί και σε άλλες μορφές της <span class="courier-code">if</span>:</p>
			<p><span class="courier-code">&apos;Δεν υπάρχει&apos; if &apos;ΗΠΑ&apos;</span><span class="courier-code"> not in population else population[&apos;ΗΠΑ&apos;]</span></p>
			<p><span class="courier-code">&apos;Δεν υπάρχει&apos;</span></p>
			<p><span class="courier-code">&apos;Δεν υπάρχει&apos; if &apos;Γαλλία&apos; not in population else population[&apos;Γαλλία&apos;]</span></p>
			<p><span class="courier-code">67348000</span></p>
		</section>
		<section role="section" id="ch11se6">
			<h1><span role="label">9.6</span> Εισαγωγή στοιχείων</h1>
			<p class="no-indent">Εκτός από τις αρχικές τιμές που μπορεί να πάρει ένα λεξικό κατά τη φάση της δημιουργίας του, έχει τη δυνατότητα να πάρει νέες ή να ενημερώνει το περιεχόμενό του οποιαδήποτε στιγμή μέσα σε ένα πρόγραμμα. Αυτό γίνεται με τον τελεστή εκχώρησης ‘<span class="courier-code">=</span>’. Έστω το λεξικό <span class="courier-code">prices</span> που περιέχει τις παρακάτω τιμές:</p>
			<p><span class="courier-code">prices={&apos;προϊόν Α&apos;:20,&apos;προϊόν Β&apos;:15}</span></p>
			<p class="no-indent">Η εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; prices[&apos;προϊόν Α&apos;]=10</span></p>
			<p class="no-indent">θα αλλάξει την τιμή του κλειδιού ‘<span class="courier-code">προϊόν Α</span>’ από <span class="courier-code">20</span> σε <span class="courier-code">10</span>. Αν το κλειδί δεν υπάρχει, θα δημιουργηθεί νέα καταχώριση στο λεξικό:</p>
			<p><span class="courier-code">&gt;&gt;&gt; prices[&apos;προϊόν Γ&apos;]=20</span></p>
			<p class="no-indent">Το κλειδί ‘<span class="courier-code">προϊόν Γ</span>’ δεν βρέθηκε στο λεξικό. Ο διερμηνευτής δεν εμφανίζει κάποιο σφάλμα, απλά δημιουργεί μια νέα καταχώριση στο λεξικό με το νέο κλειδί (‘<span class="courier-code">προϊόν Γ</span>’) και την τιμή που του δόθηκε (<span class="courier-code">20</span>). Αυτό φαίνεται από το νέο περιεχόμενο του λεξικού:</p>
			<p><span class="courier-code">&gt;&gt;&gt; prices</span></p>
			<p><span class="courier-code">{&apos;προϊόν Α&apos;: 10, &apos;προϊόν Β&apos;: 15, &apos;προϊόν Γ&apos;: 20}</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-3</b>: Δίνεται λίστα με πλειάδες που περιέχουν δυο στοιχεία η καθεμιά, με την ονομασία προϊόντος και την τιμή του. Δίνεται επίσης λεξικό που περιέχει κάποια προϊόντα και τις τιμές τους. Να γράψετε πρόγραμμα που θα ενημερώνει τις υπάρχουσες τιμές με τις νέες και θα προσθέτει και τις καινούργιες.</p>
			</blockquote>
			<p class="no-indent">Στη Λίστα Κώδικα 9-13 παρουσιάζεται η απάντηση στο Παράδειγμα 9-3.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-13 | Εισαγωγή στοιχείων – τιμές προϊόντων</figcaption><img src="media/ListaKodika-9-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Με τις εντολές <span class="courier-code">print</span> θα εμφανιστεί το περιεχόμενο των λεξικών και της λίστας:</p>
			<p><span class="courier-code">{&apos;Α&apos;: 5, &apos;Δ&apos;: 12, &apos;Β&apos;: 8}</span></p>
			<p><span class="courier-code">[(&apos;Α&apos;, 8), (&apos;Ε&apos;, 15), (&apos;Δ&apos;, 10)]</span></p>
			<p><span class="courier-code">{&apos;Α&apos;: 8, &apos;Δ&apos;: 10, &apos;Β&apos;</span><span class="courier-code">: 8, &apos;Ε&apos;: 15}</span></p>
			<p class="no-indent">Πώς λειτούργησε το πρόγραμμα; Η εντολή <span class="courier-code">for</span> σαρώνει τη λίστα <span class="courier-code">newprices</span>, δίνοντας στην προσωρινή μεταβλητή <span class="courier-code">price</span> μια πλειάδα της λίστας σε κάθε επανάληψη. Επειδή το 1ο στοιχείο της πλειάδας (θέση 0) είναι το κλειδί του λεξικού, θα χρησιμοποιηθεί στη γραμμή 6 ως όνομα κλειδιού. Αντίστοιχα το 2ο στοιχείο (θέση 1) της πλειάδας είναι η νέα τιμή του κλειδιού.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-4</b>: Να γράψετε πρόγραμμα που θα ζητάει τα ονόματα 10 ατόμων και θα τα καταχωρεί σε λεξικό. Ως κλειδί μπορεί να χρησιμοποιηθεί αρίθμηση από το 0 μέχρι το 9.</p>
			</blockquote>
			<p class="no-indent">Το νέο λεξικό μπορεί να περιέχει αριθμούς ως κλειδιά. Αυτό συχνά είναι χρήσιμο, γιατί δίνει πρόσβαση στα στοιχεία του λεξικού μέσω ενός αριθμητικού δείκτη.</p>
			<p>Το πρόγραμμα φαίνεται στη Λίστα Κώδικα 9-14.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-14 | Εισαγωγή στοιχείων – αρίθμηση κλειδιών</figcaption><img src="media/ListaKodika-9-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεσή του, το παραπάνω πρόγραμμα θα γεμίσει το λεξικό <span class="courier-code">n</span> με 10 ονόματα. Η πρόσβαση στα ονόματα γίνεται μέσω του κλειδιού που είναι αριθμός:</p>
			<p><span class="courier-code">&gt;&gt;&gt; n[0]</span></p>
			<p class="no-indent">όπου θα εμφανιστεί το 1ο όνομα που δόθηκε. Μπορεί αυτή η χρήση του λεξικού να μοιάζει με δεικτοδότηση λίστας, αλλά δεν λειτουργεί όπως στη λίστα. Οι επόμενες εντολές θα αποτύχουν:</p>
			<p><span class="courier-code">&gt;&gt;&gt; n[1:3]</span></p>
			<p><span class="courier-code">TypeError: unhashable type: &apos;slice&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; n[-1]</span></p>
			<p><span class="courier-code">KeyError: -1</span></p>
			<p class="no-indent">γιατί το λεξικό δεν υποστηρίζει ούτε τεμαχισμό ούτε αρνητική (αντίστροφη) δεικτοδότηση.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-5</b>: Να γράψετε πρόγραμμα που θα δέχεται μια φράση και θα υπολογίζει πόσες φορές εμφανίζεται κάθε λέξη της, καταχωρώντας αυτή την πληροφορία σε λεξικό.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-15 | Επεξεργασία στοιχείων – συχνότητα λέξεων</figcaption><img src="media/ListaKodika-9-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 4 της Λίστας Κώδικα 9-15, η εντολή εκχώρησης δημιουργεί νέα καταχώριση στο λεξικό <span class="courier-code">words</span> αν η λέξη <span class="courier-code">word</span> δεν υπάρχει ήδη στο λεξικό. Ως κλειδί τοποθετείται η νέα λέξη και ως τιμή ο αριθμός <span class="courier-code">1</span> (γιατί η <span class="courier-code">get</span> επιστρέφει <span class="courier-code">0</span>), που σημαίνει ότι αυτή η λέξη υπάρχει μια φορά. Αν η λέξη υπάρχει ήδη, η <span class="courier-code">get</span> θα επιστρέψει έναν αριθμό ο οποίος στη συνέχεια θα αυξηθεί κατά <span class="courier-code">1</span> για να καταμετρήσει και τη νέα εμφάνιση της λέξης.</p>
			<p>Αν εκτελεστεί το πιο πάνω πρόγραμμα και δοθεί μια φράση, θα εμφανιστεί το πλήθος των λέξεών της:</p>
			<p><span class="courier-code">Δώσε μια πρόταση</span><span class="courier-code">:</span><span class="courier-code"><b>η Python είναι η γλώσσα που προτιμώ</b></span></p>
			<p><span class="courier-code">{&apos;η&apos;: 2, &apos;Python&apos;: 1, &apos;είναι&apos;: 1, &apos;γλώσσα&apos;: 1, &apos;που&apos;: 1, &apos;προτιμώ&apos;: 1}</span></p>
		</section>
		<section role="section" id="ch11se7">
			<h1><span role="label">9.7</span> Εμφωλευμένες-ένθετες δομές</h1>
			<p class="no-indent">Ένα λεξικό μπορεί να περιέχει ως τιμές άλλες σύνθετες δομές, όπως λίστες, πλειάδες, σύνολα ή ακόμα και άλλα λεξικά. Σε αυτή την περίπτωση, για την πρόσβαση σε επιμέρους τιμές αυτών των δομών θα χρειαστούν περισσότερες αγκύλες, με κατάλληλους δείκτες ή ονόματα. Για παράδειγμα, έστω ότι ένα λεξικό περιέχει τη λίστα <span class="courier-code">[5,10,15,20,25]</span> και ως κλειδί το ‘<span class="courier-code">a</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt; dict1={&apos;a&apos;:[5,10,15,20,25]}</span></p>
			<p class="no-indent">Οι εντολές της Λίστας Κώδικα 9-16 εμφανίζουν στοιχεία της λίστας.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-16 | Εμφώλευση</figcaption><img src="media/ListaKodika-9-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 1 δίνεται στην κονσόλα μόνο το όνομα του λεξικού και εμφανίζεται όλο το περιεχόμενό του. Προσθέτοντας σε αγκύλες το όνομα του κλειδιού (γραμμή 3), εμφανίζεται η αντίστοιχη τιμή. Επειδή είναι λίστα, μπορεί να προστεθεί στο τέλος ένα ακόμα ζευγάρι από αγκύλες (γραμμή 5), το οποίο θα λειτουργήσει σε ό,τι επιστρέφει η <span class="courier-code">dict1</span>[‘<span class="courier-code">a</span>’]. Το στοιχείο της λίστας που βρίσκεται στη θέση 1 είναι το 10.</p>
			<p>Με τον ίδιο τρόπο λειτουργεί και το κομμάτι <span class="courier-code">1:4</span> στη γραμμή 7. Επιστρέφει το κομμάτι της λίστας από τη θέση 1 έως και τη θέση 3.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-6</b>: Να δημιουργηθεί κατάλληλο λεξικό που θα έχει ως κλειδιά <b>α)</b> το είδος ενός τραπουλόχαρτου με τιμές: καρδιές, σπαθί, καρό και μπαστούνι και <b>β</b><b>)</b> τον χαρακτηρισμό του με τιμές από το 1 μέχρι το 10 και τις φιγούρες. Να γράψετε πρόγραμμα που θα εμφανίζει τυχαία 1 φύλλο με τη μορφή ‘<span class="courier-code">5 καρό</span>’.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-17 | Εμφώλευση – τράπουλα</figcaption><img src="media/ListaKodika-9-17_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος, θα εμφανιστεί κάτι σαν αυτό:</p>
			<p><span class="courier-code">2 Καρδιές</span></p>
		</section>
		<section role="section" id="ch11se8">
			<h1><span role="label">9.8</span> Αντιγραφή</h1>
			<p class="no-indent">Όπως αναφέρθηκε και στην αρχή, το λεξικό είναι μια μεταβαλλόμενη δομή. Αυτό σημαίνει ότι η εκχώρηση ενός λεξικού <span class="courier-code">a</span> σε μεταβλητή <span class="courier-code">b</span> δεν δημιουργεί νέο λεξικό, αλλά μια ακόμη αναφορά στο υπάρχον λεξικό <span class="courier-code">a</span>. Κάθε αλλαγή που θα γίνεται στα στοιχεία του <span class="courier-code">a</span> θα αποτυπώνεται και στο <span class="courier-code">b</span>. Ισχύει και το ανάποδο. Όταν αλλάζει το <span class="courier-code">b</span>, αλλάζει αντίστοιχα και το <span class="courier-code">a</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; a=dict(Μάιος</span><span class="courier-code">=500,Απρίλιος=400)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b=a</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,b</span></p>
			<p><span class="courier-code">({&apos;Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400}, </span></p>
			<p><span class="courier-code">{&apos;Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400})</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a[&apos;Μάρτιος&apos;]=600</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">{&apos;</span><span class="courier-code">Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400, &apos;Μάρτιος&apos;: 600}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">{&apos;Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400, &apos;Μάρτιος&apos;: 600}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a[&apos;Μάιος&apos;]=550</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
			<p><span class="courier-code">{&apos;</span><span class="courier-code">Μάιος&apos;: 550, &apos;Απρίλιος&apos;: 400, &apos;Μάρτιος&apos;: 600}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; b</span></p>
			<p><span class="courier-code">{&apos;Μάιος&apos;: 550, &apos;Απρίλιος&apos;: 400, &apos;Μάρτιος&apos;: 600}</span></p>
			<p class="no-indent">Κάθε αλλαγή που συμβαίνει στο ένα, μεταφέρεται και στο άλλο. </p>
			<p>Για τη δημιουργία ενός ανεξάρτητου, νέου λεξικού που θα αποτελεί, αρχικά τουλάχιστον, αντίγραφο του <span class="courier-code">a</span>, χρησιμοποιείται η μέθοδος <span class="courier-code">copy</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c=a.copy()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a[&apos;Δεκέμβριος&apos;]=700</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; a,c</span></p>
			<p><span class="courier-code">({&apos;Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400, &apos;Δεκέμβριος&apos;: 700},</span></p>
			<p><span class="courier-code">{&apos;Μάιος&apos;: 500, &apos;Απρίλιος&apos;: 400})</span></p>
			<p class="no-indent">Η αντιγραφή ενός λεξικού σε άλλο, καινούργιο, απαιτεί προσοχή, γιατί κάποιες αλλαγές στο ένα μπορεί να μεταφερθούν και στο άλλο. Αν η τιμή ενός κλειδιού είναι μεταβλητό αντικείμενο (όπως η λίστα) τότε, αν αλλάξουμε το ένα λεξικό, θα αλλάξει και το άλλο. Αντίθετα, αν η τιμή είναι αμετάβλητο αντικείμενο, όπως συμβολοσειρά ή αριθμός, τότε οι αλλαγές στο ένα δεν θα επηρεάσουν το άλλο. Στις παρακάτω εντολές (Λίστα Κώδικα 9-18), επιχειρούνται διάφορες αλλαγές σε δυο λεξικά που είναι αντίγραφα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-18 | Αντιγραφή</figcaption><img src="media/ListaKodika-9-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Τα αποτελέσματα που τυπώνονται στην οθόνη, με την εκτέλεση των παραπάνω εντολών, είναι:</p>
			<p><span class="courier-code">{&apos;Μάρκα&apos;: &apos;Sierra&apos;, &apos;Κυβισμός&apos;</span><span class="courier-code">: 2000, &apos;Έτη&apos;: [1989, 1990, 1992]}</span></p>
			<p><span class="courier-code">{&apos;Μάρκα&apos;: &apos;Sierra&apos;, &apos;Κυβισμός&apos;: 2000, &apos;Έτη&apos;: [19</span><span class="courier-code">89, 1990, 1992]}</span></p>
			<p><span class="courier-code">{&apos;Μάρκα&apos;: &apos;Sierra&apos;, &apos;Κυβισμός&apos;: 3000, &apos;Έτη&apos;: [1989, 1990, 1992]}</span></p>
			<p><span class="courier-code">{&apos;</span><span class="courier-code">Μάρκα&apos;: &apos;Sierra&apos;, &apos;Κυβισμός&apos;: 2000, &apos;Έτη&apos;: [1989, 1990, 1992]}</span></p>
			<p class="no-indent">Στη γραμμή 3 γίνεται αλλαγή σε μια τιμή που είναι μεταβλητό αντικείμενο (λίστα) στο λεξικό <span class="courier-code">car2</span>, αλλαγή η οποία «μεταφέρεται» και στο αρχικό λεξικό <span class="courier-code">car</span>. Αντίθετα, όταν αλλάζει στη γραμμή 6 η τιμή του κυβισμού, που είναι αμετάβλητο αντικείμενο (αριθμός), η αλλαγή πραγματοποιείται μόνο στο συγκεκριμένο λεξικό (στο <span class="courier-code">car</span>) και όχι στο αντίγραφο (<span class="courier-code">car2</span>).</p>
			<p>Όπως αναφέρθηκε και στο Κεφάλαιο 5 με τις λίστες, αυτό μπορεί να αποφευχθεί χρησιμοποιώντας τη μέθοδο <span class="courier-code">deepcopy</span> από τη βιβλιοθήκη <span class="courier-code">copy</span>. Η <span class="courier-code">deepcopy</span> πραγματοποιεί (όπως λέει και η ονομασία της) ένα «βαθύ» αντίγραφο, σε αντίθεση με το «ρηχό» αντίγραφο της απλής <span class="courier-code">copy</span>. Τι σημαίνει αυτό; Ότι δημιουργούνται νέες αναφορές στα περιεχόμενα του αντιγράφου, οι οποίες δεν επηρεάζονται από αλλαγές που θα συμβούν σε κάποιο από τα δυο, ίδια κατά τ’ άλλα, λεξικά. Στη συνέχεια, κάθε αλλαγή στο ένα δεν επηρεάζει το άλλο. Ένα παράδειγμα:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-19 | «Βαθύ» αντίγραφο</figcaption><img src="media/ListaKodika-9-19_fmt.png" alt=""/></figure>
			<p class="no-indent">Όπως φαίνεται (γραμμές 5 και 6) από το αποτέλεσμα:</p>
			<p><span class="courier-code">{&apos;Όνομα&apos;: &apos;Γιώργος&apos;, &apos;ΓΠ&apos;: [&apos;C&apos;, &apos;Java&apos;, &apos;Python&apos;]}</span></p>
			<p><span class="courier-code">{&apos;Όνομα&apos;: &apos;Γιώργος&apos;, &apos;ΓΠ&apos;: [&apos;C&apos;, &apos;Java&apos;]}</span></p>
			<p class="no-indent">η αλλαγή που έγινε στο 1ο λεξικό (γραμμή 4) δεν επηρέασε το 2ο. </p>
			<section role="subsection" id="ch11se8ss1">
				<h1><span role="label">9.8.1</span> Η μέθοδος <span class="courier-code">update</span></h1>
				<p class="no-indent">Η αντιγραφή στοιχείων από λεξικό, ή κάποια δομή ακολουθίας που περιέχει ζεύγη τιμών, σε άλλο λεξικό γίνεται μέσω της μεθόδου <span class="courier-code">update</span>. Δεν δημιουργείται κάποιου είδους σύνδεση ανάμεσα στις δυο δομές· η μεταφορά στοιχείων γίνεται μόνο κατά την εκτέλεση της μεθόδου. Αν οι δομές που συμμετέχουν στην <span class="courier-code">update</span> τροποποιηθούν στη συνέχεια, δεν επηρεάζει η μια την άλλη. Προσοχή χρειάζεται όμως στην περίπτωση που υπάρχουν ίδια κλειδιά. Το λεξικό που θα ενημερωθεί θα αποκτήσει νέες τιμές στα κοινά, ήδη υπάρχοντα κλειδιά. Δίνονται τα παρακάτω παραδείγματα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; d1={2017:150,2018:200,2016:180}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d2={&apos;Α εξάμ&apos;:120,&apos;Β εξάμ&apos;:80,2018:240}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d1.update([(2015,300),(2014,0)])</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d1</span></p>
				<p><span class="courier-code">{2017: 150, 2018: </span><span class="courier-code"><b>200</b></span><span class="courier-code">, 2016: 180, 2015: 300, 2014: 0}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d1.update(d2)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d1</span></p>
				<p><span class="courier-code">{2017: 150,</span></p>
				<p><span class="courier-code"> 2018: </span><span class="courier-code"><b>240</b></span><span class="courier-code">,</span></p>
				<p><span class="courier-code"> 2016: 180,</span></p>
				<p><span class="courier-code"> 2015: 300,</span></p>
				<p><span class="courier-code"> 2014: 0,</span></p>
				<p><span class="courier-code"> &apos;Α εξάμ&apos;: 120,</span></p>
				<p><span class="courier-code"> &apos;Β</span><span class="courier-code"> εξάμ&apos;: 80}</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 9-7</b>: Δίνονται δυο λεξικά με τις πωλήσεις δυο καταστημάτων μιας εταιρείας για τα έτη 2012 έως 2016. Να γράψετε πρόγραμμα που θα ενημερώνει το 1ο λεξικό ώστε να περιέχει το άθροισμα των πωλήσεων και των δυο καταστημάτων.</p>
				</blockquote>
				<p class="no-indent">Στο Παράδειγμα 9-7 θα χρησιμοποιηθεί μια δομή <span class="courier-code">for</span>, γιατί τα κοινά στοιχεία των δυο λεξικών θα πρέπει να αθροιστούν. </p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-20 | Ενημέρωση λεξικού</figcaption><img src="media/ListaKodika-9-20_fmt.png" alt=""/></figure>
				<p class="no-indent">Οι γραμμές 1 και 2 δημιουργούν τα δυο λεξικά με κάποιες αρχικές τιμές. Η σάρωση των στοιχείων του λεξικού <span class="courier-code">salesB</span>, ώστε να ενσωματωθούν οι τιμές του στο λεξικό <span class="courier-code">salesΑ</span>, γίνεται μέσα από τη <span class="courier-code">for</span> στη γραμμή 3. Στη γραμμή 4 ελέγχεται αν το κλειδί του <span class="courier-code">salesB</span> υπάρχει ήδη στο λεξικό που θα ενημερωθεί (<span class="courier-code">salesA</span>), ώστε να μη διαγραφεί η υπάρχουσα τιμή αλλά να προστεθεί σ’ αυτήν το νέο ποσό (γραμμή 5). Αν το κλειδί είναι καινούργιο, δημιουργείται νέα καταχώριση στο λεξικό <span class="courier-code">salesA</span>, με την εντολή στη γραμμή 7. Το νέο περιεχόμενο του λεξικού <span class="courier-code">salesA</span> θα είναι:</p>
				<p><span class="courier-code">{2011: 500, 2013: 400, 2015: 650, 2016: 700, 2012: 600, 2014: 500}</span></p>
				<p class="no-indent">Αποφεύγοντας τον έλεγχο των γραμμών 4-7, μπορεί να δοθεί κατευθείαν η παρακάτω εντολή:</p>
				<p><span class="courier-code">salesA[key]=salesA.get(key,0)+val</span></p>
				<p class="no-indent">με την οποία, αν το κλειδί (<span class="courier-code">key</span>) δεν υπάρχει στο λεξικό <span class="courier-code">salesA</span>, τότε προστίθεται στο λεξικό, έχοντας ως τιμή το <span class="courier-code">0</span>, όπου θα προστεθεί και η νέα τιμή (<span class="courier-code">val</span>). Αν όμως το κλειδί υπάρχει, τότε απλά θα προστεθεί στην τιμή του και η νέα τιμή από το άλλο λεξικό.</p>
			</section>
			<section role="subsection" id="ch11se8ss2">
				<h1><span role="label">9.8.2</span> Η μέθοδος <span class="courier-code">fromkeys </span></h1>
				<p class="no-indent">Η δημιουργία νέου λεξικού με αρχικοποίηση των στοιχείων του γίνεται με έναν ακόμη τρόπο, μέσω της μεθόδου <span class="courier-code">fromkeys</span>. Η γενική μορφή της είναι:</p>
				<p><span class="courier-code">λεξικό=dict.fromkeys(ακολουθία, τιμή)</span></p>
				<p class="no-indent">όπου <span class="courier-code">λεξικό</span> είναι το νέο λεξικό που θα δημιουργηθεί, <span class="courier-code">ακολουθία</span> μια οποιαδήποτε δομή όπως λίστα, πλειάδα ή συμβολοσειρά, ενώ <span class="courier-code">τιμή</span> μπορεί να είναι οτιδήποτε. Αν δεν δοθεί το όρισμα <span class="courier-code">τιμή</span>, τότε το νέο λεξικό θα έχει σε όλα τα κλειδιά την τιμή <span class="courier-code">None</span>. Οι εντολές στη Λίστα Κώδικα 9-21 δημιουργούν λεξικό <span class="courier-code">d</span> από τρεις διαφορετικές πηγές κλειδιών.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-21 | Ενημέρωση λεξικού με τη <span class="courier-code">fromkeys</span></figcaption><img src="media/ListaKodika-9-21_fmt.png" alt=""/></figure>
				<p class="no-indent">Το αποτέλεσμα των παραπάνω εντολών είναι η δημιουργία του λεξικού <span class="courier-code">d</span> με τις παρακάτω μορφές:</p>
				<p><span class="courier-code">{1: 0, 2: 0, 3: 0, 4: 0}</span></p>
				<p><span class="courier-code">{&apos;α&apos;: 0, &apos;β&apos;: 0, &apos;</span><span class="courier-code">γ&apos;: 0, &apos;δ&apos;: 0}</span></p>
				<p><span class="courier-code">{1: 0, 2: 0, 3: 0, 4: 0}</span></p>
				<p class="no-indent">Χρειάζεται ιδιαίτερη προσοχή αν η τιμή είναι μεταβλητό αντικείμενο, γιατί θα υπάρξει σύνδεση του νέου λεξικού με αυτήν. Αν αλλάξει η τιμή, θα αλλάξει και το περιεχόμενο του λεξικού. Στις επόμενες εντολές φαίνεται ο τρόπος λειτουργίας της μεθόδου <span class="courier-code">fromkeys</span> όταν χρησιμοποιείται ως τιμή κάποιου κλειδιού μια μεταβαλλόμενη δομή.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-22 | Ενημέρωση λεξικού με μεταβλητά αντικείμενα</figcaption><img src="media/ListaKodika-9-22_fmt.png" alt=""/></figure>
				<p class="no-indent">Το περιεχόμενο της λίστας <span class="courier-code">a</span> θα αποτελέσει την αρχική τιμή κάθε κλειδιού του νέου λεξικού. Αν αλλάξει κάτι σ’ αυτή τη λίστα, τότε η αλλαγή θα γίνει αυτόματα και στο λεξικό.</p>
				<p class="no-indent">Το αποτέλεσμα που εμφανίζεται στην οθόνη είναι:</p>
				<p><span class="courier-code">{1: [1, 2], 2: [1, 2], 3: [1, 2]}</span></p>
				<p><span class="courier-code">{1: [1, 2, 3], 2: [1, 2, 3], 3: [1, 2, 3]}</span></p>
				<p class="no-indent">Η σύνδεση είναι αμφίδρομη, που σημαίνει ότι, αν αλλάξει μια τιμή στη λίστα μέσα στο λεξικό, τότε θα αλλάξουν όλες οι αναφορές της λίστας. Η παρακάτω εντολή αλλάζει σε <span class="courier-code">11</span> το 1ο στοιχείο της λίστας του κλειδιού <span class="courier-code">1</span>.</p>
				<p><span class="courier-code">&gt;&gt;&gt; d[1][1]=11</span></p>
				<p class="no-indent">Αυτό έχει αποτέλεσμα να αλλάξουν οι τιμές σε κάθε αναφορά της λίστας, όπου κι αν βρίσκονται αυτές,</p>
				<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
				<p><span class="courier-code">{1: [1, 11, 3], 2: [1, 11, 3], 3: [1, 11, 3]}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a</span></p>
				<p><span class="courier-code">[1, 11, 3]</span></p>
				<p class="no-indent">όχι μόνο μέσα στο λεξικό, αλλά και στην αρχική λίστα.</p>
				<p>Στο επόμενο λεξικό καταχωρείται ως αρχική τιμή των κλειδιών η τιμή <span class="courier-code">None</span>.</p>
				<p><span class="courier-code">&gt;&gt;&gt; d1=dict.fromkeys(list(range(1,5)))</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d1</span></p>
				<p><span class="courier-code">{1: None, 2: None, 3: None, 4: None}</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[2,4,6]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d2=dict.fromkeys(a)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d2</span></p>
				<p><span class="courier-code">{2: None, 4: None, 6: None}</span></p>
				<p class="no-indent">Αν αλλάξει το περιεχόμενο της ακολουθίας <span class="courier-code">a</span>, η αλλαγή δεν συμβαίνει στο λεξικό <span class="courier-code">d2</span>, γιατί τα στοιχεία του <span class="courier-code">a</span> είναι κλειδιά στο <span class="courier-code">d</span> και όχι τιμές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a.remove(2)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d2</span></p>
				<p><span class="courier-code">{2: None, 4: None, 6: None}</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 9-8</b>: <b>α)</b> Να γράψετε πρόγραμμα που θα δημιουργεί ένα λεξικό με κλειδιά τα φωνήεντα και αρχικές τιμές τους το 0.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-23 | Ενημέρωση λεξικού – φωνήεντα</figcaption><img src="media/ListaKodika-9-23_fmt.png" alt=""/></figure>
				<p class="no-indent">Μετά την εκτέλεση των παραπάνω εντολών, το νέο λεξικό θα έχει τη μορφή:</p>
				<p><span class="courier-code">{&apos;α&apos;</span><span class="courier-code">: 0, &apos;ε&apos;: 0, &apos;ο&apos;: 0, &apos;ω&apos;: 0, &apos;υ&apos;: 0, &apos;η&apos;: 0, &apos;ι&apos;: 0}</span></p>
				<p class="no-indent"><b>β)</b> Να δοθεί μια φράση και να καταχωρηθεί στο προηγούμενο λεξικό το πλήθος από κάθε φωνήεν της φράσης. </p>
				<p>Έστω ότι, με την εκτέλεση της <span class="courier-code">input</span>, δίνεται η φράση:</p>
				<p><span class="courier-code">Δώσε μια φράση: </span><span class="courier-code"><b>καλημερα ομορφε κοσμε</b></span><span class="courier-code"> </span></p>
				<p class="no-indent">Η Λίστα Κώδικα 9-24 σαρώνει τη φράση και προσθέτει στο λεξικό κάθε είδους φωνήεν που συναντά.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-24 | Ενημέρωση λεξικού – πλήθος φωνηέντων</figcaption><img src="media/ListaKodika-9-24_fmt.png" alt=""/></figure>
				<p class="no-indent">Αν ένας χαρακτήρας είναι φωνήεν, τότε αυξάνεται ο αντίστοιχος μετρητής μέσα στο λεξικό.</p>
				<p>Η μορφή του λεξικού, μετά την καταμέτρηση των χαρακτήρων, είναι:</p>
				<p><span class="courier-code">{&apos;α&apos;: 2, &apos;ε&apos;: 3, &apos;ο&apos;: 3, &apos;ω&apos;: 0, &apos;υ&apos;: 0, &apos;η&apos;: 1, &apos;ι&apos;: 0}</span></p>
				<p class="no-indent">Το στοιχείο <span class="courier-code">&apos;α&apos;: 2</span> σημαίνει ότι το πλήθος των χαρακτήρων <span class="courier-code">&apos;α&apos; </span>είναι <span class="courier-code">2</span>.</p>
				<p class="no-indent"><b>γ)</b> Να εμφανιστεί το πλήθος όλων των χαρακτήρων της φράσης, πόσα ήταν τα φωνήεντα και πόσα τα σύμφωνα (χωρίς τα κενά).</p>
				<p>Αυτό μπορεί να γίνει με τη βοήθεια κατάλληλων ενσωματωμένων συναρτήσεων, όπως η <span class="courier-code">sum</span> και η <span class="courier-code">len</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-25 | Ενημέρωση λεξικού – πλήθος χαρακτήρων</figcaption><img src="media/ListaKodika-9-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Η συνάρτηση <span class="courier-code">sum</span> δέχεται τις τιμές του λεξικού (που εκφράζουν το πλήθος από κάθε φωνήεν) και τις αθροίζει.</p>
				<p>Η μέθοδος κειμένου <span class="courier-code">count</span> μετράει το πλήθος των κενών, ώστε να μη συμπεριληφθούν στις μετρήσεις.</p>
				<p>Για την αρχική φράση, το αποτέλεσμα που θα επιστρέψει το πρόγραμμα είναι:</p>
				<p><span class="courier-code">Σύμφωνα:10, Φωνήεντα:9, Σύνολο:21</span></p>
			</section>
			<section role="subsection" id="ch11se8ss3">
				<h1><span role="label">9.8.3</span> Η μέθοδος <span class="courier-code">setdefault</span></h1>
				<p class="no-indent">Αναφέρθηκε ήδη ότι, σε κάθε προσπάθεια ανάκτησης της τιμής ενός κλειδιού που δεν υπάρχει στο λεξικό, προκαλείται σφάλμα. Επίσης, όταν καταχωρείται μια τιμή σε ένα κλειδί, αν το κλειδί υπάρχει, τότε αλλάζει η τιμή του, ενώ αν δεν υπάρχει, δημιουργείται νέο κλειδί με νέα τιμή. Η μέθοδος <span class="courier-code">setdefault</span> αναλαμβάνει κάποιες από αυτές τις εργασίες και τις εκτελεί ταυτόχρονα. Η γενική μορφή της είναι:</p>
				<p><span class="courier-code">μεταβλητή=λεξικό.setdefault(κλειδί[,τιμή])</span></p>
				<p class="no-indent">Η <span class="courier-code">setdefault</span> επιστρέφει μια τιμή στη μεταβλητή ως εξής:</p>
				<p>Αν το όρισμα <span class="courier-code">κλειδί</span> υπάρχει στο λεξικό, επιστρέφει την τιμή του κλειδιού και αγνοείται το όρισμα <span class="courier-code">τιμή</span>, ακόμα κι αν έχει δοθεί.</p>
				<p>Αν το όρισμα <span class="courier-code">κλειδί</span> δεν υπάρχει στο λεξικό και έχει δοθεί το όρισμα <span class="courier-code">τιμή</span>, τότε επιστρέφεται στη μεταβλητή το όρισμα <span class="courier-code">τιμή</span> και ταυτόχρονα εισάγεται ως νέα καταχώριση το νέο κλειδί και η τιμή στο λεξικό.</p>
				<p>Αν το <span class="courier-code">κλειδί</span> δεν υπάρχει στο λεξικό και δεν έχει δοθεί το όρισμα <span class="courier-code">τιμή</span>, τότε η μεταβλητή θα πάρει την τιμή <span class="courier-code">None</span> (τύπου <span class="courier-code">NoneType</span>) και θα προστεθεί το ζεύγος (<span class="courier-code">κλειδί</span>, <span class="courier-code">None</span>) στο λεξικό.</p>
				<img src="media/icon-6_fmt.png" alt=""/>
				<aside>
				<p>Η «επιστροφή» μιας τιμής γίνεται με δυο διαφορετικούς τρόπους σε αρκετές συναρτήσεις της Python. Αν γραφτεί ως εντολή εκχώρησης με το ‘<span class="courier-code">=</span>’, τότε η μεταβλητή αριστερά από το ‘<span class="courier-code">=</span>’ παίρνει την επιστρεφόμενη τιμή. Αν δοθεί η εντολή στην κονσόλα, η επιστρεφόμενη τιμή εμφανίζεται ως αποτέλεσμα στην κονσόλα. Ο δεύτερος τρόπος χρησιμεύει για τον άμεσο έλεγχο λειτουργίας μιας εντολής και του αποτελέσματός της. Μέσα σε ένα πρόγραμμα έχει πρακτική αξία μόνο ως εντολή εκχώρησης σε κάποια μεταβλητή, γιατί, διαφορετικά, η τιμή που θα επιστραφεί δεν θα εμφανιστεί πουθενά – παρά μόνο αν η εντολή δοθεί μέσα σε μια εντολή <span class="courier-code">print</span> ώστε αυτή, τελικά, να μπορέσει να εμφανιστεί στην οθόνη.</p>
				</aside>
				<p class="no-indent">Ακολουθούν μερικά παραδείγματα στη Λίστα Κώδικα 9-26.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-26 | Πολλαπλή επεξεργασία – <span class="courier-code">setdefault</span></figcaption><img src="media/ListaKodika-9-26_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 1 εισάγεται νέο λεξικό <span class="courier-code">d</span>, τα περιεχόμενα του οποίου φαίνονται στη γραμμή 3. Εκτελώντας τις εντολές στις γραμμές 4 και 6, επιστρέφονται στην οθόνη οι τιμές των κλειδιών ‘<span class="courier-code">a</span>’ και ‘<span class="courier-code">b</span>’ που υπάρχουν στο λεξικό. Αντίθετα, στη γραμμή 8 δεν επιστρέφεται κανένα αποτέλεσμα, αφού το κλειδί ‘<span class="courier-code">c</span>’ δεν υπάρχει στο λεξικό. Με την εντολή αυτή όμως προστέθηκε το κλειδί ‘<span class="courier-code">c</span>’ στο λεξικό, ενώ ως τιμή του πήρε την τιμή <span class="courier-code">None</span>. Αυτό φαίνεται και από το αποτέλεσμα της γραμμής 12. Στη γραμμή 14 αναζητείται το κλειδί ‘<span class="courier-code">d</span>’, το οποίο, επειδή δεν υπάρχει, προστίθεται στο λεξικό με τιμή <span class="courier-code">15</span>, η οποία και εμφανίζεται στην κονσόλα. Η <span class="courier-code">setdefault</span> στη γραμμή 16 προσθέτει νέο κλειδί, το ‘<span class="courier-code">e</span>’, με τιμή <span class="courier-code">30</span>, η οποία καταχωρείται στη μεταβλητή <span class="courier-code">x</span>. Στη γραμμή 20 φαίνεται το τελικό περιεχόμενο του λεξικού.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 9-9</b>: Στο λεξικό <span class="courier-code">transactions</span> βρίσκονται οι συναλλαγές πελατών της εταιρείας με τη μορφή όνομα πελάτη: ποσό. Οι συναλλαγές υπάρχουν και σε αντίγραφο ασφαλείας <span class="courier-code">trback</span>. Να γίνει έλεγχος υπολοίπου για έναν πελάτη ως εξής: να εμφανιστεί το υπόλοιπό του στην οθόνη αν υπάρχει στο κύριο λεξικό. Αν δεν υπάρχει, να ανακτηθεί το υπόλοιπο από το αντίγραφο, να εμφανιστεί στην οθόνη και να καταχωρηθεί στο κύριο λεξικό.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί το αντίστοιχο πρόγραμμα στη Λίστα Κώδικα 9-27.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-27 | Πολλαπλή επεξεργασία – υπόλοιπα πελατών</figcaption><img src="media/ListaKodika-9-27_fmt.png" alt=""/></figure>
				<p class="no-indent">Αν το όνομα <span class="courier-code">client</span> βρεθεί στα κλειδιά του λεξικού <span class="courier-code">transactions</span>, θα επιστραφεί η τιμή του. Αν όχι, ανακτάται από το λεξικό <span class="courier-code">trback</span>, εμφανίζεται στην οθόνη και καταχωρείται ως νέα εγγραφή στο λεξικό <span class="courier-code">transactions</span>. Ακολουθεί μια δοκιμαστική εκτέλεση του προγράμματος, όπου δίνεται ως όνομα πελάτη το “<span class="courier-code">Έφη</span>”:</p>
				<p><span class="courier-code">Δώσε το όνομα του πελάτη: </span><span class="courier-code"><b>Έφη</b></span></p>
				<p><span class="courier-code">Το υπόλοιπο του πελάτη Έφη είναι 1500 </span></p>
				<p><span class="courier-code">{&apos;</span><span class="courier-code">Γιώργος&apos;: 300, &apos;Άννα&apos;: 200, &apos;Νίκη&apos;: 0, &apos;Έφη&apos;: 1500}</span></p>
				<p class="no-indent">Όπως φαίνεται και από το τελευταίο αποτέλεσμα, το περιεχόμενο του λεξικού <span class="courier-code">transactions</span> ενημερώθηκε με τα στοιχεία του πελάτη που έλειπαν.</p>
				<p>Οι εντολές των γραμμών 4 και 5 θα μπορούσαν να δοθούν απευθείας με μία μόνο, αλλά όχι τόσο ευανάγνωστη, εντολή:</p>
				<p><span class="courier-code">print(f&apos;Το υπόλοιπο του πελάτη {client} είναι {transactions.setdefault(client,trback[client])}&apos;)</span></p>
			</section>
		</section>
		<section role="section" id="ch11se9">
			<h1><span role="label">9.9</span> Διαγραφή </h1>
			<p class="no-indent">Το λεξικό είναι μια δομή που μπορεί να αλλάζει με την προσθήκη ή τη διαγραφή στοιχείων. Η διαγραφή στοιχείων γίνεται με αρκετούς τρόπους, οι οποίοι παρουσιάζονται στη συνέχεια.</p>
			<section role="subsection" id="ch11se9ss1">
				<h1><span role="label">9.9.1</span> Η συνάρτηση <span class="courier-code">del</span></h1>
				<p class="no-indent">Η διαγραφή στοιχείων γίνεται βάσει του κλειδιού τους. Η εντολή <span class="courier-code">del</span> δέχεται το όνομα του λεξικού και το όνομα του κλειδιού που θα διαγραφεί. Αν το κλειδί δεν υπάρχει, εμφανίζεται μήνυμα σφάλματος.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-28 | Διαγραφή – <span class="courier-code">del</span></figcaption><img src="media/ListaKodika-9-28_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εντολή στη γραμμή 4 της Λίστας Κώδικα 9-28 διαγράφει το κλειδί ‘<span class="courier-code">a</span>’ και την τιμή του. Η νέα κλήση της στη γραμμή 7 προκαλεί σφάλμα, γιατί το συγκεκριμένο κλειδί δεν υπάρχει πλέον στο λεξικό.</p>
				<p>Με τη συνάρτηση <span class="courier-code">del</span> μπορεί να διαγραφεί ολόκληρο το λεξικό, όπως διαγράφεται κάθε άλλο αντικείμενο. Αρκεί να δοθεί μόνο το όνομα του λεξικού:</p>
				<p><span class="courier-code">&gt;&gt;&gt; del d</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
				<p><span class="courier-code">NameError: name &apos;d&apos; is not defined</span></p>
			</section>
			<section role="subsection" id="ch11se9ss2">
				<h1><span role="label">9.9.2</span> Η μέθοδος <span class="courier-code">pop</span></h1>
				<p class="no-indent">Η γενική μορφή σύνταξης της <span class="courier-code">pop</span> είναι:</p>
				<p><span class="courier-code">μεταβλητή=</span><span class="courier-code">λεξικό.pop(κλειδί [,τιμή])</span></p>
				<p class="no-indent">Με τη μέθοδο <span class="courier-code">pop</span> εξάγεται ένα κλειδί, μαζί με την αντίστοιχη τιμή του, αν υπάρχει αυτό το κλειδί μέσα στο λεξικό. Η τιμή εμφανίζεται στην κονσόλα ή καταχωρείται στη μεταβλητή που βρίσκεται πριν το ‘<span class="courier-code">=</span>’. Αν το κλειδί δεν υπάρχει στο λεξικό, τότε εμφανίζεται ή καταχωρείται στη μεταβλητή η προκαθορισμένη <span class="courier-code">τιμή</span> που δίνεται μέσα στην <span class="courier-code">pop</span> για αυτή την περίπτωση. Αν δεν δοθεί η προαιρετική τιμή και το κλειδί δεν υπάρχει, τότε εμφανίζεται σφάλμα κατά την εκτέλεση. Ακολουθούν μερικά παραδείγματα.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 9-29 | Διαγραφή – <span class="courier-code">pop</span></figcaption><img src="media/ListaKodika-9-29_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 2 της Λίστας Κώδικα 9-29 προκαλείται σφάλμα από την αδυναμία εύρεσης του κλειδιού ‘<span class="courier-code">πι</span>’. Αντίθετα, στη γραμμή 4, αν και το κλειδί πάλι δεν υπάρχει, η εντολή δεν προκαλεί ωστόσο κάποιο σφάλμα. Η τιμή <span class="courier-code">3.1415</span> που υπάρχει στην <span class="courier-code">pop</span> ως δεύτερο όρισμα επιστρέφεται στην κονσόλα. Στη γραμμή 6 η <span class="courier-code">pop</span> εκτελείται επιτυχώς, γιατί το κλειδί ‘<span class="courier-code">π</span>’ υπάρχει στο λεξικό. Η τιμή του κλειδιού επιστρέφεται στην κονσόλα και το κλειδί αφαιρείται από το λεξικό, ενώ η τιμή <span class="courier-code">3.1415</span> αγνοείται. Το ίδιο συμβαίνει και με την εντολή στη γραμμή 8, μόνο που το αποτέλεσμα επιστρέφεται σε μια μεταβλητή (<span class="courier-code">a</span>). Το περιεχόμενο του λεξικού, μετά τις διαδοχικές αφαιρέσεις στοιχείων, φαίνεται στη γραμμή 12.</p>
			</section>
			<section role="subsection" id="ch11se9ss3">
				<h1><span role="label">9.9.3</span> Η μέθοδος <span class="courier-code">popitem</span></h1>
				<p class="no-indent">Η <span class="courier-code">popitem</span> δεν δέχεται κάποιο όρισμα, επιστρέφει ένα από τα ζεύγη κλειδιών-τιμών του λεξικού (είτε στην κονσόλα είτε σε κάποια μεταβλητή) και ταυτόχρονα τα διαγράφει από το λεξικό. Το τι θα επιστρέψει η <span class="courier-code">popitem</span> εξαρτάται από τον μηχανισμό κατακερματισμού με τον οποίο αποθήκευσε τα στοιχεία του λεξικού, εσωτερικά, η Python. Δεν είναι τυχαία η επιλογή του στοιχείου που θα εξαχθεί, αλλά ούτε και γνωστή από πριν (σε εκδόσεις της γλώσσας πριν την 3.6):</p>
				<p><span class="courier-code">&gt;&gt;&gt; emp=dict(Όνομα=&apos;Ζωή&apos;,Μισθός=1200,Τμήμα=&apos;ΙΤ&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; emp.popitem()</span></p>
				<p><span class="courier-code">(&apos;Τμήμα&apos;, &apos;ΙΤ&apos;</span><span class="courier-code">)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; emp.popitem()</span></p>
				<p><span class="courier-code">(&apos;Μισθός&apos;, 1200)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; emp.popitem()</span></p>
				<p><span class="courier-code">(&apos;Όνομα&apos;, &apos;Ζωή&apos;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; emp.popitem()</span></p>
				<p><span class="courier-code">KeyError: &apos;popitem(): dictionary is empty&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; emp</span></p>
				<p><span class="courier-code">{}</span></p>
			</section>
			<section role="subsection" id="ch11se9ss4">
				<h1><span role="label">9.9.4</span> Η μέθοδος <span class="courier-code">clear</span> και το κενό {}</h1>
				<p class="no-indent">Ενώ με τη συνάρτηση <span class="courier-code">del</span> διαγράφεται από τη μνήμη (τον αντίστοιχο χώρο ονομάτων) ένα λεξικό, με την <span class="courier-code">clear</span> διαγράφεται το περιεχόμενό του. Το λεξικό συνεχίζει να υπάρχει στον χώρο ονομάτων του διερμηνευτή και μπορεί να συνεχίζει να χρησιμοποιείται για την εισαγωγή νέων στοιχείων. Με τις παρακάτω εντολές φαίνεται ο τρόπος χρήσης και το αποτέλεσμα της συνάρτησης <span class="courier-code">clear</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; d=dict(a=5,b=10)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d.clear()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; d</span></p>
				<p><span class="courier-code">{}</span></p>
				<p class="no-indent">Προσοχή χρειάζεται όταν από το λεξικό, του οποίου θα διαγραφεί το περιεχόμενο, έχει γίνει κάποιο αντίγραφο, γιατί θα διαγραφεί και το περιεχόμενο του αντιγράφου. Αυτό αντιμετωπίζεται διαγράφοντας το περιεχόμενο του ενός και καταχωρώντας του το κενό λεξικό <span class="courier-code">{}</span>. Δίνεται ένα παράδειγμα για την καλύτερη κατανόηση του μηχανισμού των δυο μεθόδων, στη Λίστα Κώδικα 9-30.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-30 | Διαγραφή – <span class="courier-code">clear</span></figcaption><img src="media/ListaKodika-9-30_fmt.png" alt=""/></figure>
				<p class="no-indent">Το αποτέλεσμα του πιο πάνω προγράμματος θα είναι:</p>
				<p><span class="courier-code">{} {} {&apos;Κική&apos;: 28, &apos;Μιχάλης&apos;: 26, &apos;Σοφία&apos;: 30}</span></p>
				<p><span class="courier-code">{} {&apos;IT&apos;: 1200, &apos;Production&apos;: 900}</span></p>
				<p class="no-indent">Η διαγραφή του περιεχομένου του λεξικού <span class="courier-code">emp</span> στη γραμμή 4 επηρεάζει και το περιεχόμενο του <span class="courier-code">emp2</span>. Αυτό είναι επόμενο όμως, αφού η αντιγραφή στη γραμμή 2 δεν δημιούργησε νέο λεξικό, αλλά αντέγραψε στο <span class="courier-code">emp2</span> όλες τις αναφορές του περιεχομένου του <span class="courier-code">emp</span>. Από τη στιγμή που αφαιρέθηκαν όλες οι αναφορές (σε κλειδιά και τιμές), αφαιρέθηκαν και από το αντίγραφο. Αυτό δεν συμβαίνει στην περίπτωση του <span class="courier-code">emp3</span> (γραμμή 3), το οποίο δεν αλλάζει με τη διαγραφή του <span class="courier-code">emp</span>.</p>
				<p>Με παρόμοιο τρόπο, στη γραμμή 8, με την εντολή εκχώρησης, το αντικείμενο <span class="courier-code">sal</span> παίρνει νέο περιεχόμενο και δημιουργείται νέο λεξικό, κάτι που δεν επηρεάζει το αντίγραφο, αφού οι αναφορές στα κλειδιά και τις τιμές τους συνεχίζουν να υπάρχουν στη μνήμη.</p>
			</section>
		</section>
		<section role="section" id="ch11se10">
			<h1><span role="label">9.10</span> Σύνθεση λεξικού</h1>
			<p class="no-indent">Η επεξεργασία των στοιχείων ενός λεξικού μπορεί να γίνει με πολλούς τρόπους. Είτε απευθείας, με τη χρήση κατάλληλων κλειδιών, είτε μέσω των <i>όψεων (views)</i> και της ενσωμάτωσής τους σε δομές <span class="courier-code">for</span>, είναι δυνατή η πρόσβαση στα στοιχεία που περιέχει ένα λεξικό. Για την επεξεργασία ενός λεξικού ή τη δημιουργία ενός νέου, υπάρχει και η διαδικασία της <i>σύνθεσης (comprehension)</i>. Όπως και στην περίπτωση της σύνθεσης μιας λίστας από άλλα στοιχεία, έτσι και εδώ μπορεί να δημιουργηθεί λεξικό μέσα από την επεξεργασία άλλων δομών, όπως για παράδειγμα από έτοιμες συναρτήσεις, λίστες, πλειάδες ή άλλα λεξικά.</p>
			<p>Το πρώτο παράδειγμα δημιουργεί λεξικό, με τα κλειδιά και τα τετράγωνα των τιμών τους, από άλλο λεξικό:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1=dict(a=5,b=10,c=12)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d2={key:value**2 for key,value in d1.items()}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(d1)</span></p>
			<p><span class="courier-code">{&apos;a&apos;: 5, &apos;b&apos;: 10, &apos;c&apos;: 12}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(d2)</span></p>
			<p><span class="courier-code">{&apos;a&apos;: 25, &apos;b&apos;: 100, &apos;c&apos;: 144}</span></p>
			<p class="no-indent">Στη σύνθεση μπορεί να συμμετέχουν και άλλες δομές, όπως λίστες ή συναρτήσεις:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x=[&apos;n1&apos;,&apos;n2&apos;,&apos;n3&apos;,&apos;n4&apos;]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; y={x[i]:i*i for i in range(4)}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(y)</span></p>
			<p><span class="courier-code">{&apos;n1&apos;: 0, &apos;n2&apos;: 1, &apos;n3&apos;: 4, &apos;n4&apos;: 9}</span></p>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">range</span> παράγει σειρά από αριθμούς οι οποίοι χρησιμοποιούνται ως δείκτες της λίστας για την κατασκευή κλειδιών και υπολογιζόμενων τιμών του νέου λεξικού.</p>
			<p>Χρήσιμη για την κατασκευή λεξικών μέσω της σύνθεσης άλλων δομών είναι και η συνάρτηση <span class="courier-code">zip</span>. Η <span class="courier-code">zip</span> δέχεται δυο επαναληπτικά αντικείμενα και επιστρέφει τα ζεύγη των τιμών τους από τις αντίστοιχες θέσεις. Το επόμενο παράδειγμα εκτελεί αυτή τη λειτουργία:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y=[2,4,6],[1,3,5]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; z={i:j for i,j in zip(x,y</span><span class="courier-code">)}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(z)</span></p>
			<p><span class="courier-code">{2: 1, 4: 3, 6: 5}</span></p>
			<p class="no-indent">Η σύνθεση μπορεί να περιέχει και δομές ελέγχου. Στο επόμενο παράδειγμα το νέο λεξικό θα αποτελείται μόνο από τους περιττούς αριθμούς του <span class="courier-code">d1</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; d1=dict(x=1,x1=3,x2=4,x3=5,x4=6)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(d1)</span></p>
			<p><span class="courier-code">{&apos;x&apos;: 1, &apos;x1&apos;: 3, &apos;x2&apos;: 4, &apos;x3&apos;: 5, &apos;x4&apos;: 6}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d2={k:v for k,v in d1.items() if v%2==1}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(d2)</span></p>
			<p><span class="courier-code">{&apos;x&apos;: 1, &apos;x1&apos;: 3, &apos;x3&apos;: 5}</span></p>
			<p class="no-indent">Η σύνθεση μπορεί να περιέχει και πιο σύνθετους ελέγχους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x=list(range(4))</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(x)</span></p>
			<p><span class="courier-code">[0, 1, 2, 3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; d={i:(&apos;Άρτιος&apos; if i%2==0 else &apos;Περιττός&apos;) for i in x}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(d)</span></p>
			<p><span class="courier-code">{0: &apos;Άρτιος&apos;, 1: &apos;Περιττός&apos;, 2: &apos;Άρτιος&apos;</span><span class="courier-code">, 3: &apos;Περιττός&apos;}</span></p>
			<p class="no-indent">Ένα λεξικό μπορεί να περιέχει άλλα λεξικά, αλλά μόνο ως τιμές και όχι ως κλειδιά, κάτι αναμενόμενο, αφού το λεξικό είναι μεταβλητό αντικείμενο και ένα κλειδί πρέπει πάντα να αποτελεί αμετάβλητο αντικείμενο. Έτσι, αν χρειάζεται να αποθηκευτούν μια σειρά από σημεία στο επίπεδο (Α, Β, Γ, Δ) και οι αντίστοιχες συντεταγμένες τους, το λεξικό <span class="courier-code">points</span> κρατάει αυτή την πληροφορία.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-31 | Σύνθεση λεξικού</figcaption><img src="media/ListaKodika-9-31_fmt.png" alt=""/></figure>
			<p class="no-indent">Η <span class="courier-code">for</span> παράγει με τη <span class="courier-code">range</span> τρεις τιμές, τις οποίες χρησιμοποιεί ως δείκτες για τις τρεις λίστες. Τα εσωτερικά άγκιστρα δημιουργούν τα λεξικά των συντεταγμένων για κάθε σημείο. Το πρόγραμμα θα τυπώσει το τελικό λεξικό:</p>
			<p><span class="courier-code">{&apos;Α&apos;: {&apos;x&apos;:1,&apos;y&apos;:-1}, &apos;Β&apos;: {&apos;x&apos;:3,&apos;y&apos;:4}, &apos;Γ&apos;: {&apos;x&apos;:8,&apos;y&apos;:-2}}</span></p>
			<p class="no-indent">Η πρόσβαση στα επιμέρους στοιχεία του λεξικού γίνεται με τους παρακάτω τρόπους:</p>
			<p><span class="courier-code">&gt;&gt;&gt; points[&apos;Α&apos;]</span></p>
			<p><span class="courier-code">{&apos;x&apos;: 1, &apos;y&apos;: -1}</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; points[&apos;Α&apos;][&apos;x&apos;]</span></p>
			<p><span class="courier-code">1</span></p>
			<p class="no-indent">Από το αποτέλεσμα της 1ης εντολής φαίνεται ότι το περιεχόμενο κάθε κλειδιού είναι ένα λεξικό. Για την ανάκτηση μιας τιμής από κάποιο εσωτερικό λεξικό, θα πρέπει να δοθούν και τα δυο κλειδιά.</p>
			<p>Το προηγούμενο πρόβλημα θα μπορούσε να λυθεί και με την παρακάτω επαναληπτική δομή, η οποία υπάρχει στη Λίστα Κώδικα 9-32.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-32 | Σύνθεση – <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-9-32_fmt.png" alt=""/></figure>
		</section>
		<section role="section" id="ch11se11">
			<h1><span role="label">9.11</span> Άλλες λειτουργίες</h1>
			<section role="subsection" id="ch11se11ss1">
				<h1><span role="label">9.11.1</span> Ταξινόμηση</h1>
				<p class="no-indent">Όπως αναφέρθηκε ήδη, σε εκδόσεις της Python πριν την 3.6, η σειρά τοποθέτησης στοιχείων σε ένα λεξικό είναι άγνωστη. Γενικότερα, η ταξινόμηση κλειδιών ή τιμών δεν μπορεί να γίνει άμεσα, μέσα στο ίδιο το λεξικό, αλλά εξωτερικά, σε κάποια άλλη δομή (λίστα ή πλειάδα). Για να γίνει κάτι τέτοιο, θα πρέπει πρώτα να εξαχθούν οι τιμές ή τα κλειδιά (ή και τα δυο) και στη συνέχεια να γίνει η εφαρμογή κατάλληλων μεθόδων ή συναρτήσεων ταξινόμησης. Για παράδειγμα, οι παρακάτω εντολές δημιουργούν νέες ταξινομημένες δομές ως προς τα κλειδιά ή τις τιμές ενός λεξικού.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-33 | Ταξινόμηση</figcaption><img src="media/ListaKodika-9-33_fmt.png" alt=""/></figure>
				<p class="no-indent"><b>Γραμμή 1</b>: Δημιουργείται το λεξικό <span class="courier-code">d</span> με περιεχόμενο:</p>
				<p><span class="courier-code">&#9;&#9;{&apos;c&apos;: 12, &apos;b&apos;: 3, &apos;a&apos;: 8}</span></p>
				<p class="no-indent"><b>Γραμμή 2</b>: Μια νέα λίστα (<span class="courier-code">x</span>) κατασκευάζεται με τα κλειδιά του λεξικού, ταξινομημένα σε αύξουσα διάταξη. Η <span class="courier-code">d.keys</span> δημιουργεί μια όψη των κλειδιών του λεξικού. Επειδή είναι επαναληπτικό αντικείμενο, δίνεται ως όρισμα στη συνάρτηση <span class="courier-code">sorted</span>, η οποία ταξινομεί τα στοιχεία και τα εκχωρεί σε νέα λίστα.</p>
				<p class="no-indent"><b>Γραμμή 3</b>: Παρόμοια λειτουργία και σ’ αυτή την εντολή, μόνο που η νέα λίστα θα περιέχει τις ταξινομημένες τιμές (<span class="courier-code">values</span>) του λεξικού.</p>
				<p class="no-indent"><b>Γραμμή 4</b>: Το μόνο που αλλάζει σε σχέση με τη γραμμή 2 είναι ότι τα κλειδιά εξάγονται μέσω της μεθόδου <span class="courier-code">keys</span>, δημιουργείται νέα λίστα με τη συνάρτηση <span class="courier-code">list</span> και αμέσως εφαρμόζεται η συνάρτηση <span class="courier-code">sorted</span> που ταξινομεί τα στοιχεία και τα εκχωρεί στη λίστα <span class="courier-code">z</span>.</p>
				<p class="no-indent"><b>Γραμμή 5</b>: Η ταξινόμηση σε φθίνουσα διάταξη γίνεται πάλι με χρήση της συνάρτησης <span class="courier-code">sorted</span>, βάζοντας επιπλέον και το όρισμα <span class="courier-code">reverse</span>. Το περιεχόμενο της λίστας <span class="courier-code">x2</span> είναι:</p>
				<p><span class="courier-code">&#9;&#9;[&apos;c&apos;, &apos;b&apos;, &apos;a&apos;]</span></p>
				<p class="no-indent"><b>Γραμμή 6</b>: Για κάθε πλειάδα ζευγαριών κλειδιού-τιμής που δημιουργεί η μέθοδος <span class="courier-code">items</span>, η συνάρτηση <span class="courier-code">lambda</span> επιλέγει το 2ο στοιχείο (στη θέση 1). Έτσι, η ταξινόμηση γίνεται με βάση τις τιμές του λεξικού. Το περιεχόμενο του <span class="courier-code">w</span> είναι:</p>
				<p><span class="courier-code">&#9;&#9;[(&apos;b&apos;, 3), (&apos;a&apos;, 8), (&apos;c&apos;, 12)]</span></p>
				<p class="no-indent">Η ταξινόμηση μπορεί να γίνει χωρίς τη χρήση άλλων δομών, χρησιμοποιώντας κατάλληλα τις παραπάνω συναρτήσεις απευθείας σε μια εντολή επανάληψης,</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-34 | Ταξινόμηση σε <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-9-34_fmt.png" alt=""/></figure>
				<p class="no-indent">και τυπώνοντας τις τιμές του λεξικού με την ακόλουθη μορφή:</p>
				<p><span class="courier-code">(&apos;a&apos;, 8),(&apos;b&apos;, 3),(&apos;c&apos;, 12),</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 9-10</b>: Δίνονται οι πωλήσεις που πέτυχε το προσωπικό μιας εταιρείας. Να εμφανιστούν τα ονόματα σύμφωνα με το ύψος των πωλήσεών τους.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-35 | Ταξινόμηση σε <span class="courier-code">for me</span><span class="courier-code"> lambda</span></figcaption><img src="media/ListaKodika-9-35_fmt.png" alt=""/></figure>
				<p class="no-indent">Η συνάρτηση <span class="courier-code">sorted</span> κάνει φθίνουσα ταξινόμηση. Το κριτήριο της ταξινόμησης ορίζεται μέσα από την ανώνυμη συνάρτηση <span class="courier-code">lambda</span>, που επιλέγει φθίνουσα ταξινόμηση <span class="courier-code">reverse=True</span> με βάση τις τιμές του λεξικού. Το αποτέλεσμα της <span class="courier-code">print</span> θα είναι:</p>
				<p><span class="courier-code">Πέτρος Νίκη Γιώργος</span></p>
			</section>
		</section>
		<section role="section" id="ch11se12">
			<h1><span role="label">9.12</span> Λεξικό αντί δομών ελέγχου</h1>
			<p class="no-indent">Ένα κατάλληλα δομημένο λεξικό μπορεί να χρησιμοποιηθεί και όταν χρειάζεται να γίνει πολλαπλός έλεγχος επιλογής μιας τιμής. Τα κλειδιά του μπορούν να αποτελούν τα κριτήρια επιλογής και να αντικαταστήσουν σύνθετους ελέγχους.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 9-11</b>: Ένα ιδιωτικό ΚΤΕΟ χρεώνει τους πελάτες σύμφωνα με τον παρακάτω πίνακα και ανάλογα με τον τύπο του οχήματος.</p>
			</blockquote>
			
				<table id="table042">
					<tbody>
						<tr>
								<th>Τύπος οχήματος</th>
								<th>Χρέωση σε €</th>
							
						</tr>
						<tr>
							<td>
								<p>Δίκυκλο</p>
							</td>
							<td>
								<p>30</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Υγραέριο</p>
							</td>
							<td>
								<p>50</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>ΙΧ</p>
							</td>
							<td>
								<p>50</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Ταξί</p>
							</td>
							<td>
								<p>40</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Φορτηγό</p>
							</td>
							<td>
								<p>60</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Επαγγελματικό</p>
							</td>
							<td>
								<p>45</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Εκπαιδευτικό</p>
							</td>
							<td>
								<p>35</p>
							</td>
						</tr>
					</tbody>
				</table>
			
			<p class="no-indent">Να δημιουργηθεί πρόγραμμα που θα διαβάζει τον τύπο του οχήματος και θα εμφανίζει το ποσό που θα πρέπει να πληρώσει ο πελάτης.</p>
			<p>Μια τυπική διαδικασία ελέγχου του τύπου του οχήματος θα περιλάμβανε σειρά από εντολές <span class="courier-code">if</span>. Το πρόγραμμα θα είχε την πιο κάτω μορφή (Λίστα Κώδικα 9-36).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-36 | Πολλαπλή επιλογή</figcaption><img src="media/ListaKodika-9-36_fmt.png" alt=""/></figure>
			<p class="no-indent">Στο λεξικό η πιο πάνω πολλαπλή δομή ελέγχου δεν είναι απαραίτητη. Η παρακάτω λίστα προγράμματος (Λίστα Κώδικα 9-37) δείχνει τον τρόπο χρήσης του.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 9-37 | Λεξικό αντί πολλαπλής επιλογής</figcaption><img src="media/ListaKodika-9-37_fmt.png" alt=""/></figure>
			<p class="no-indent">Όπως φαίνεται από τον κώδικα, η διαδικασία εύρεσης της κατάλληλης χρέωσης απλοποιείται και το πλήθος των εντολών μειώνεται σε σημαντικό βαθμό. Μόλις δοθεί ο τύπος του οχήματος, τίθεται ως κλειδί στο λεξικό, ενώ το λεξικό απλά επιστρέφει την κατάλληλη τιμή. </p>
		</section>
		<section role="section" id="ch11se13" data-featured="chapter-review">
			<h1><span role="label">9.13</span> Περίληψη</h1>
			<p class="no-indent">Θέμα αυτού του κεφαλαίου ήταν μια σύνθετη δομή της Python, το λεξικό. Έγινε περιγραφή της μορφής που μπορεί να έχει και των μηχανισμών που διαθέτει για τη λειτουργία του. Παρουσιάστηκαν σειρά από ενσωματωμένες μεθόδους για τη δημιουργία και ενημέρωση των στοιχείων του, όπως και τρόποι διαχείρισης των δεδομένων του μέσα από τις διαδικασίες σύνθεσης και μέσω εντολών επανάληψης. Έγινε παρουσίαση των τρόπων εξαγωγής στοιχείων αλλά και της λειτουργίας των όψεων, που προσθέτουν μοναδικά χαρακτηριστικά και πολλαπλές μορφές σε ένα λεξικό και στα στοιχεία που αυτό περιέχει. Δόθηκαν τρόποι χρήσης του λεξικού, ώστε να μπορεί να εκτελεί λειτουργίες όπως η ταξινόμηση, ή να αντικαθιστά, σε πολλές περιπτώσεις, πολύπλοκες και χρονοβόρες διαδικασίες πολλαπλών ελέγχων.</p>
			
		</section>
		<section role="section" id="ch11se14" data-featured="chapter-questions">
			<h1><span role="label">9.14</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Πώς δημιουργείται ένα λεξικό;</li>
			<li>Με ποιους τρόπους εισάγονται στοιχεία σε ένα λεξικό;</li>
			<li>Πώς λειτουργεί η σύνθεση;</li>
			<li>Με ποιους τρόπους γίνεται η προσπέλαση των κλειδιών και των τιμών ενός λεξικού;</li>
			<li>Μπορεί να γίνει ταξινόμηση ενός λεξικού;</li>
			<li>Τι είδους αντικείμενα μπορούν να τοποθετηθούν ως κλειδιά σε ένα λεξικό;</li>
			<li>Οι τιμές ενός λεξικού μπορεί να είναι οτιδήποτε ή υπάρχει κάποιος περιορισμός;</li>
			<li>Σε ποιες περιπτώσεις δεδομένων ενδείκνυται η χρήση λεξικού;</li>
			<li>Μπορεί να τοποθετηθεί ένα λεξικό μέσα σε άλλο; Υπάρχουν περιορισμοί;</li>
			<li>Η αντιγραφή λεξικού σε άλλο δημιουργεί κάποια σύνδεση μεταξύ τους ή τα δυο λεξικά είναι εντελώς ανεξάρτητα;</li></ol>
			
		</section>
		<section role="section" id="ch11se15" data-featured="chapter-assess">
			<h1><span role="label">9.15</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί λεξικό με κλειδιά του τους αριθμούς από το 10 έως το 100, και τιμές τα τετράγωνα των κλειδιών.</li>
			<li>Να γράψετε πρόγραμμα που θα εισάγει σε λεξικό έναν αριθμό ο οποίος θα δέχεται από το πληκτρολόγιο και θα έχει ως τιμή του την τετραγωνική του ρίζα.</li>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί λεξικό με κλειδιά κάποιους αριθμούς και τιμές τους μέγιστους κοινούς διαιρέτες.</li>
			<li>Να γράψετε λεξικό με 5 κλειδιά τις ονομασίες <i>λογ</i>, <i>δυν</i>, <i>ημ</i>, <i>συν</i>, <i>εφ</i> και τιμές τις μαθηματικές συναρτήσεις για τον λογάριθμο, τη δύναμη, το ημίτονο, το συνημίτονο και την εφαπτομένη. Να γίνει η χρήση τους δοκιμαστικά με κάποιους αριθμούς.</li>
			<li>Να γράψετε πρόγραμμα που θα διαβάζει κείμενο και θα δημιουργεί λεξικό με κλειδιά κάθε ξεχωριστό γράμμα του κειμένου και τιμές τους το πόσες φορές εμφανίζεται το κάθε γράμμα.</li>
			<li>Να γράψετε πρόγραμμα που θα ενώνει 3 λεξικά μεταξύ τους σε ένα νέο.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται ένα κλειδί από το πληκτρολόγιο, θα ελέγχει αν υπάρχει αυτό και, εφόσον υπάρχει, θα αλλάζει το κλειδί κατάλληλα ώστε να μπορεί να τοποθετηθεί το καινούργιο.</li>
			<li>Να γράψετε πρόγραμμα που θα υπολογίζει το άθροισμα και το γινόμενο των στοιχείων ενός λεξικού.</li>
			<li>Δίνεται μια λίστα που περιέχει λεξικά. Να γράψετε πρόγραμμα που θα δημιουργεί νέα λίστα με περιεχόμενο τις τιμές των άλλων λεξικών.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται μια φράση (κείμενο) και θα δημιουργεί λεξικό με κλειδιά μια αρίθμηση και τιμές όλες τις πιθανές αναδιατάξεις της φράσης. Για παράδειγμα, για τη φράση ‘πχ’ να γίνει το λεξικό <span class="courier-code">{1:&apos;πχ&apos;,2¨&apos;χπ&apos;}</span>.</li>
			<li>Να γράψετε πρόγραμμα που θα υπολογίζει τη μέγιστη και την ελάχιστη τιμή ενός λεξικού.</li>
			<li>Να γράψετε πρόγραμμα που θα δέχεται έναν τριψήφιο αριθμό και θα δημιουργεί λεξικό το οποίο θα περιέχει ως κλειδιά μια αρίθμηση και ως τιμές τις μονάδες, τις δεκάδες και τις εκατοντάδες του αριθμού.</li>
			<li>Να γράψετε πρόγραμμα που θα ελέγχει αν υπάρχουν διπλότυπες τιμές σε ένα λεξικό.</li>
			<li>Να γράψετε πρόγραμμα που θα διαγράφει διπλές τιμές ενός λεξικού ώστε στο τέλος κάθε τιμή να υπάρχει μόνο μία φορά.</li>
			<li>Ένα λεξικό περιέχει ως κλειδιά του αριθμούς έως και το 9 με τη μορφή χαρακτήρων. Οι τιμές τους είναι ημερομηνίες κατάθεσης της φορολογικής δήλωσης. Να γράψετε πρόγραμμα που θα δέχεται έναν ΑΦΜ και, με βάση το τελευταίο ψηφίο του, θα εμφανίζει την ημερομηνία που πρέπει να γίνει η δήλωση.</li>
			<li>Να γράψετε πρόγραμμα που θα δημιουργεί λίστα με τα αθροίσματα κάθε ζεύγους κλειδιού-τιμής ενός λεξικού.</li>
			<li>Να γράψετε πρόγραμμα που θα ελέγχει αν ένα λεξικό περιέχει κενές τιμές (π.χ. κενές λίστες).</li>
			<li>Να γράψετε πρόγραμμα που θα ελέγχει αν ένα λεξικό έχει τιμές <span class="courier-code">None</span>.</li>
			<li>Ένα λεξικό περιέχει λίστες ως τιμές του. Να γίνει ένα νέο λεξικό με τα ίδια κλειδιά και με τιμές το μέγεθος κάθε λίστας.</li>
			<li>Δυο λεξικά έχουν ακριβώς τα ίδια κλειδιά και οι τιμές τους είναι αριθμοί. Να δημιουργηθεί νέο λεξικό που θα περιέχει τα ίδια κλειδιά, αλλά οι τιμές του θα είναι το άθροισμα των αντίστοιχων τιμών των δυο πρώτων λεξικών.</li>
			<li>Δίνονται οι πληροφορίες φοιτητών με τη μορφή: ΑΜ, Επίθετο, email. Να καταχωρηθούν σε λεξικό με κλειδί τον ΑΜ και τα υπόλοιπα στοιχεία σε λίστα.</li>
			<li>Σε ένα λεξικό υπάρχουν τα ονόματα χρηστών (κλειδιά) και οι κωδικοί τους (τιμές). Να γράψετε πρόγραμμα που θα δέχεται ένα όνομα χρήστη και τον κωδικό του, εμφανίζοντας μήνυμα αν είναι αποδεκτά ή όχι.</li>
			<li>Δίνεται λεξικό της μορφής: 
			<p><span class="courier-code">{κλειδί1:τιμή1,κλειδί2:τιμή2,κλειδί3:</span><span class="courier-code">τιμή1}</span></p>
			<p class="no-indent">Να δημιουργηθεί λεξικό που θα περιέχει ως κλειδιά τις τιμές του αρχικού λεξικού και ως τιμές τις πλειάδες των κλειδιών με κοινές τιμές:</p>
			<p><span class="courier-code">{τιμή1:(κλειδί1,κλειδί3),τιμή2:(κλειδί2)}</span></p>
			</li>
			<li>Δίνεται ένα λεξικό της μορφής: 
			<p><span class="courier-code">{κωδικός χώρας:[πληθυσμός, ήπειρος] …}</span></p>
			<p class="no-indent">με τιμές:</p>
			<p><span class="courier-code">{&apos;GR&apos;:[…,&apos;</span><span class="courier-code">Ευρώπη&apos;],&apos;BR&apos;:[…,&apos;Λατ.Αμερική&apos;],&apos;FR&apos;:[…,&apos;Ευρώπη&apos;</span><span class="courier-code">]}</span></p>
			<p class="no-indent">Να δημιουργηθεί λεξικό που θα περιλαμβάνει ως κλειδιά την ήπειρο και θα έχει ως τιμές νέα λεξικά με τις χώρες με τον πληθυσμό τους. Το προηγούμενο λεξικό θα πρέπει να πάρει τη μορφή:</p>
			<p><span class="courier-code">{&apos;Ευρώπη&apos;:{&apos;GR&apos;</span><span class="courier-code">:…,&apos;FR&apos;:…},&apos;Λατ.Αμερική&apos;:{…}…}</span></p>
			</li>
			<li>Δίνεται λεξικό με τη μορφή:
			<p><span class="courier-code">{&apos;μετοχήΑ&apos;:[τιμές μετοχής], &apos;μετοχήΒ&apos;:[τιμές μετοχής],…}</span></p>
			<p class="no-indent">Να δημιουργηθεί λεξικό που θα περιέχει τα ίδια κλειδιά και για τιμές τη μέση τιμή της μετοχής.</p>
			</li>
			<li>Να δημιουργηθεί λεξικό που θα περιέχει τον κωδικό ενός προϊόντος και την τιμή του. Να εισαχθούν επαναληπτικά πολλά προϊόντα με τις τιμές τους, μέχρι να δοθεί ως τιμή αρνητικός αριθμός.</li>
			<li>Για το προηγούμενο ερώτημα να γράψετε πρόγραμμα που θα ζητάει έναν αριθμό και θα εμφανίζει τα προϊόντα με τιμή μεγαλύτερη από τον αριθμό αυτό.</li>
			<li>Δίνεται λεξικό που περιέχει ως κλειδί τον αριθμό πτήσης και ως τιμή μια λίστα με το ζεύγος τόπων προορισμού και αναχώρησης. Να γράψετε πρόγραμμα που θα εμφανίζει τη μέγιστη συνεχόμενη διαδρομή. Αν το λεξικό είναι το:
				<p><span class="courier-code">{1:[&apos;Α&apos;,&apos;Β&apos;],2:[&apos;Β&apos;,&apos;Δ&apos;],3:[&apos;Α&apos;</span><span class="courier-code">,&apos;Δ&apos;],4:[&apos;Δ&apos;,&apos;Γ&apos;]}</span></p>
				<p class="no-indent">να εμφανίζει τη διαδρομή ΑΒΔΓ που είναι η μεγαλύτερη.</p>
			</li>
			</ol>
		</section>
	</section>
	<section role="chapter" id="ch12">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 10</span> Συναρτήσεις &amp; Βιβλιοθήκες</h1>
		<section role="section" id="ch12se1">
			<h1><span role="label">10.1</span> Εισαγωγή</h1>
			<img src="media/chapter_10_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Στις ενότητες που ακολουθούν περιγράφεται ένα από τα πιο σημαντικά θέματα σχετικά με την οργάνωση και τη </i><i>δομή ενός προγράμματος γραμμένου σε μια γλώσσα υψηλού επιπέδου με διαδικαστικό χαρακτήρα, όπως η Python. Ένα βασικό</i><i> στοιχείο της είναι ο τμηματικός προγραμματισμός και ακολουθεί τις τεχνικές της ιεραρχικής σχεδίασης ενός προγράμματος. Γ</i><i>ίνεται περιγραφή της συνάρτησης (function), του μηχανισμού δηλαδή που διαθέτει η γλώσσα για την ομαδοποίηση</i><i> και συγκέντρωση πολλών εντολών σε κατάλληλα οργανωμένο χώρο, ώστε να μπορεί να χρησιμοποιηθεί σε περισσότερες από μία περιπτώσεις, </i><i>περισσότερες από μία φορές. Αφού παρουσιαστούν τα πλεονεκτήματα αυτής της οργάνωσης του κώδικα σε επιμέρους αυτόνομα </i><i>τμήματα, αναλύεται η δομή που έχει, οι μορφές που μπορεί να πάρει, η επικοινωνία με άλλα </i><i>τμήματα κώδικα ή η σύνδεση με άλλα στοιχεία της Python, η δυνατότητα ενσωμάτωσης σε άλλες δομές αλλά και οι πολλαπλές</i><i> χρήσεις που μπορεί να έχει μια συνάρτηση.</i></p>
			<p><i>Μέσα από παραδείγματα μικρών σεναρίων, παρουσιάζονται </i><i>οι πολλοί και διαφορετικοί τρόποι χρήσης τους. Γίνεται παρουσίαση μιας ειδικής κατηγορίας συναρτήσεων, των λεγόμενων</i><i> «ανώνυμων», μαζί με τα χαρακτηριστικά και τον τρόπο λειτουργίας του. </i><i>Περιγράφεται, ακόμη, η οργάνωση και συγκέντρωση κώδικα σε μικρότερα τμήματα και η αποθήκευσή τους σε λειτουργικές μονάδες-</i><i>αρχεία ή δομές φακέλων στον δίσκο, με την κατασκευή πακέτων ή βιβλιοθηκών κώδικα. Τέλος, </i><i>γίνεται παρουσίαση τεχνικών επίλυσης προβλημάτων μέσα από μηχανισμούς αναδρομικής κλήσης συναρτήσεων, </i><i>με την ανάλυση βασικών αναδρομικών αλγορίθμων.</i></p>
		</section>
		<section role="section" id="ch12se2">
			<h1><span role="label">10.2</span> Υποπρογράμματα</h1>
			<p class="no-indent">Η δημιουργία προγραμμάτων απαιτεί, κατ’ αρχάς, την κατάλληλη σχεδίασή τους, τόσο σχετικά με τη λογική που ακολουθείται, όσο και με τη δομή που θα έχει ο κώδικας. Η λογική έχει να κάνει με την ίδια τη φύση του προγράμματος και με το πώς υλοποιείται ο αλγόριθμος που επιλύει ένα συγκεκριμένο πρόβλημα. Η δομή, από την άλλη, σχετίζεται με την ιεραρχική ανάλυση των επιμέρους τμημάτων που αποτελούν τη λύση του προβλήματος. Ένα σωστά δομημένο πρόγραμμα θα πρέπει να αποτελείται από τμήματα κώδικα που θα επιλύουν συγκεκριμένα κομμάτια του προβλήματος, κατάλληλα συνδεδεμένα μεταξύ τους, ακολουθώντας μια λογική σειρά.</p>
			<p>Αυτά τα τμήματα κώδικα οργανώνονται με τη μορφή υποπρογραμμάτων και βρίσκονται είτε μέσα στον κώδικα, σε κατάλληλα επιλεγμένα σημεία, είτε αποθηκεύονται εξωτερικά, σε κάποια αρχεία ή καταλόγους, και καλούνται κάθε φορά που είναι αναγκαίο. Παίρνουν τη μορφή πακέτων, βιβλιοθηκών ή μεμονωμένων υποπρογραμμάτων. </p>
			<p>Όλες οι γλώσσες προγραμματισμού διαθέτουν τέτοιους μηχανισμούς και σε πολλές περιπτώσεις παίρνουν δυο διαφορετικές μορφές. Είτε τη μορφή <i>διαδικασίας (procedure-subroutine)</i> είτε τη μορφή <i>συνάρτησης (function)</i>. Στην πρώτη περίπτωση, ο κώδικας επιτελεί κάθε λειτουργία που μπορεί να κάνει ένα οποιοδήποτε πρόγραμμα, όπως να εισάγει στοιχεία, να εμφανίζει αποτελέσματα ή να επεξεργάζεται δεδομένα και να κάνει υπολογισμούς. Στη δεύτερη περίπτωση, οι δυνατότητες του κώδικα μπορεί να περιορίζονται μόνο σε υπολογισμούς και να αφορούν αποκλειστικά και μόνο την κλήση τους για την επιστροφή μιας ή και πολλαπλών, σε κάποιες περιπτώσεις, υπολογιζόμενων τιμών.</p>
			<p>Κάποιες γλώσσες, όπως οι Fortran, VB, Pascal, PL/SQL, διαθέτουν και τα δυο είδη υποπρογραμμάτων, ενώ κάποιες άλλες, όπως οι C, Lua, Javascript, Julia κ.ά., υλοποιούν κάθε εργασία μόνο με συναρτήσεις. Άλλες γλώσσες με αντικειμενοστραφή χαρακτηριστικά, όπως οι Java, Ruby, Perl, C#, διαθέτουν διαφορετικής φύσης μηχανισμούς, όπως τη δημιουργία μεθόδων για να διαχειρίζονται αντικείμενα. Η Python διαθέτει μόνο έναν τύπο υποπρογραμμάτων, τις συναρτήσεις, μαζί με τη δυνατότητα δημιουργίας αντικειμένων και αντίστοιχων μεθόδων για τον χειρισμό τους (βλ. Κεφάλαιο 11). Η οργάνωση του κώδικα με τη χρήση συναρτήσεων σε ένα προγραμματιστικό μοντέλο (<i>διαδικαστικό – procedural</i>, ή <i>συναρτησιακό – functional</i>), που μπορεί να υλοποιήσει η Python, έχει πολλαπλά πλεονεκτήματα και οφέλη.</p>
			<ol><li>Υλοποιείται καλύτερα η ιεραρχική σχεδίαση ενός προγράμματος με τη διάσπαση του αρχικού προβλήματος σε μικρότερα, απλούστερα και πιο εύκολο να επιλυθούν προβλήματα.</li>
			<li>Μειώνεται ο χρόνος ανάπτυξης, δοκιμής, ελέγχου και εκσφαλμάτωσης του προγράμματος. Η ανάπτυξη σύνθετων προγραμμάτων που απαιτούν τη συνεργασία πολλών ατόμων γίνεται πιο εύκολα, αφού πολλά τμήματα κώδικα μπορεί να γίνονται ταυτόχρονα, ή παράλληλα, από διαφορετικά άτομα. Σε αυτό βοηθάει και η χρήση συστημάτων συνεργατικής γραφής και <i>διαμοιρασμού σε αποθετήρια (repositories)</i> κώδικα όπως το github<sup class="superscript CharOverride-1"><span id="footnote-022-backlink"><a href="#footnote-022">72</a></span></sup>.</li>
			<li>Απαιτείται λιγότερος κώδικας, αφού με τη χρήση συναρτήσεων ο κώδικας που γράφεται μπορεί να <i>χρησιμοποιηθεί πολλές φορές (reusability)</i> και με διαφορετικούς τρόπους, ώστε πολλά τμήματα κώδικα να μην επαναλαμβάνονται.</li>
			<li>Βοηθάει στην κατασκευή ευανάγνωστου και εύκολα κατανοητού κώδικα, αφού κάθε τμήμα του επιτελεί μια συγκεκριμένη λειτουργία.</li>
			<li>Κάνει τη συντήρηση ή ενημέρωση ενός προγράμματος πιο εύκολη και γρήγορη, αφού οι όποιες αλλαγές ή προσθήκες νέων στοιχείων γίνονται σε συγκεκριμένα τμήματα κώδικα.</li>
			<li>Ο καλά δομημένος κώδικας έχει αποτέλεσμα την εμφάνιση λιγότερων σφαλμάτων, καθώς μειώνει την πολυπλοκότητα του προγράμματος, υλοποιώντας μικρότερα και απλούστερα τμήματα κώδικα.</li>
			<li>Δίνεται η δυνατότητα, μέσω της επαναχρησιμοποίησης κώδικα, να αναπτυχθεί και να εξελιχθεί ένα πρόγραμμα, αλλά και η ίδια η γλώσσα. Δεν είναι τυχαίο το γεγονός ότι υπάρχουν ελεύθερα διαθέσιμες χιλιάδες βιβλιοθήκες κώδικα γραμμένες σε Python. Έτσι, είναι δυνατός ο διαμοιρασμός και η ενσωμάτωση κώδικα σε προγράμματα άλλων δημιουργών.</li>
			<li>Υλοποιείται η έννοια της <i>αφαιρετικότητας (abstraction)</i>. Έτσι, δεν χρειάζεται κάποιος να γνωρίζει πώς κατασκευάστηκε μια μονάδα κώδικα ώστε να τη χρησιμοποιήσει. Αρκεί να γνωρίζει τον τρόπο χρήσης της και τα αποτελέσματα που επιστρέφει. Αυτό είναι και το χαρακτηριστικό των ενσωματωμένων αντικειμένων και συναρτήσεων της γλώσσας.</li>
			</ol><p class="no-indent">Στις επόμενες ενότητες περιγράφονται τα χαρακτηριστικά, οι μορφές, ο τρόπος οργάνωσης και επικοινωνίας των συναρτήσεων στην Python.</p>
			<p>Έχει ειπωθεί ξανά ότι στην Python όλα είναι αντικείμενα. Το ίδιο συμβαίνει και στην περίπτωση των συναρτήσεων. Μια συνάρτηση, ενσωματωμένη ή οριζόμενη από τον χρήστη, είναι ένα <i>αντικείμενο</i> και μάλιστα <i>πρώτης κλάσης (first-class object)</i>. Έτσι, μια συνάρτηση μπορεί: </p>
			<ul><li>να εκχωρηθεί σε μια μεταβλητή,</li>
			<li>να ενσωματωθεί σε βασικές δομές της Python, όπως να δοθεί ως στοιχείο σε μια λίστα,</li>
			<li>να δοθεί ως παράμετρος σε μια άλλη συνάρτηση, η οποία θα αποτελεί <i>συνάρτηση πρώτης </i>ή <i>υψηλής </i><i>τάξης (high-order function)</i>,</li>
			<li>να επιστραφεί η ίδια ως αποτέλεσμα μετά την κλήση μιας συνάρτησης.</li></ul>
			<p class="no-indent">Όλες αυτές οι περιπτώσεις χρήσης συναρτήσεων αποτελούν το περιεχόμενο των επόμενων ενοτήτων.</p>
			<p>Τα χαρακτηριστικά όμως μιας συνάρτησης στην Python είναι ακόμα περισσότερα. Μια ειδική κατηγορία αποτελούν και οι λεγόμενες ανώνυμες συναρτήσεις ή συναρτήσεις lambda. Αυτές είναι συναρτήσεις μιας γραμμής, που κατασκευάζονται εύκολα, γρήγορα και άμεσα, σε κάθε είδους εντολή της Python. Μια ακόμη μορφή συνάρτησης είναι και η <i>γεννήτρια (generator</i><i>)</i>. Σε επόμενη ενότητα περιγράφεται η χρήση και η λειτουργία της, καθώς και οι περιπτώσεις όπου αυτός ο τύπος συνάρτησης είναι αναγκαίος.</p>
		</section>
		<section role="section" id="ch12se3">
			<h1><span role="label">10.3</span> Συναρτήσεις</h1>
			<p class="no-indent">Στην Python, καθώς και σε άλλες γλώσσες, όπως η C, υπάρχει μόνο ένα είδος υποπρογραμμάτων, η <i>συνάρτηση (function)</i>. Μια συνάρτηση μπορεί να δεχθεί καμία, μία ή περισσότερες τιμές. Αυτές οι τιμές μπορεί να είναι διαφορετικές κάθε φορά που καλείται μια συνάρτηση. Μπορεί ακόμη να είναι περισσότερες ή λιγότερες ή και διαφορετικού τύπου. Πιο αναλυτικά, μια συνάρτηση γράφεται:</p>
			<p><span class="courier-code">def όνομα(παράμετροι):</span></p>
			<p><span class="courier-code">&#9;εντολές της συνάρτησης</span></p>
			<p><span class="courier-code">&#9;[return</span><span class="courier-code"> [τιμές]]</span></p>
			<p class="no-indent">Η λέξη <span class="courier-code">def</span> αναφέρεται στον ορισμό μιας νέας συνάρτησης, όπου θα πρέπει να δοθεί το όνομά της και μέσα σε παρενθέσεις τα ορίσματά της, που ονομάζονται <i>παράμετροι (parameters)</i>. Αυτή η πρώτη γραμμή αποτελεί την <i>επικεφαλίδα (header)</i> της συνάρτησης. Ο χαρακτήρας ‘<span class="courier-code">:</span>’, και εδώ, σηματοδοτεί την έναρξη νέου <i>τμήματος (block)</i> κώδικα, όπως γίνεται και σε άλλες εντολές (<span class="courier-code">if</span>, <span class="courier-code">for</span> κ.λπ.). Έτσι, όλες οι εντολές που βρίσκονται μέσα σε μια συνάρτηση θα πρέπει να έχουν εσοχή σε σχέση με την επικεφαλίδα της. Το τέλος μιας συνάρτησης δίνεται είτε με την απαλοιφή της εσοχής, είτε με τη <i>λέξη κλειδί (keyword)</i> <span class="courier-code">return</span>. Οι παράμετροι είναι μεταβλητές (καμία, μία ή περισσότερες) που χρησιμοποιούνται για τη μεταφορά τιμών κατά την κλήση μιας συνάρτησης. Περιγράφονται σε επόμενη ενότητα.</p>
			<p>Ακολουθεί παράδειγμα γραμμένο στην κονσόλα της γλώσσας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; def hi():</span></p>
			<p><span class="courier-code">&#9;print(&apos;Hello Python&apos;)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<p class="no-indent">Με τις παραπάνω εντολές, δημιουργήθηκε συνάρτηση με όνομα <span class="courier-code">hi</span>. Οι κενές παρενθέσεις δίπλα στο όνομά της υποδηλώνουν την απουσία παραμέτρων (αυτή η έννοια περιγράφεται στη συνέχεια) για τη μεταφορά δεδομένων προς τη συνάρτηση. Η δήλωση του ονόματος τελειώνει με τον χαρακτήρα ‘<span class="courier-code">:</span>’. Αυτό ξεκινά και το μπλοκ εντολών που περιέχει η συνάρτηση. Στο συγκεκριμένο παράδειγμα, υπάρχει μόνο μία εντολή, που τυπώνει ένα μήνυμα. Η δήλωση της συνάρτησης έχει ολοκληρωθεί και είναι άμεσα διαθέσιμη από την κονσόλα ή από κάποιο IDE. Στην κονσόλα, γράφοντας το όνομα της συνάρτησης, μαζί με τις παρενθέσεις:</p>
			<p><span class="courier-code">&gt;&gt;&gt; hi()</span></p>
			<p class="no-indent">καλούμε τη συνάρτηση. Έτσι, ο διερμηνευτής ξεκινάει να εκτελεί τις εντολές που υπάρχουν μέσα στη συνάρτηση (δηλαδή την <span class="courier-code">print</span>), εμφανίζοντας στην οθόνη:</p>
			<p><span class="courier-code">Hello Python</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<p class="no-indent">και επιστρέφει πάλι στο σήμα προτροπής της κονσόλας. Η συνάρτηση μπορεί να κληθεί όσες φορές θέλουμε, χωρίς περιορισμούς (αυτό όμως εξαρτάται και από το περιεχόμενό της). Γράφοντας επομένως το όνομα της συνάρτησης (μαζί με τις παρενθέσεις), ο διερμηνευτής καλεί τη συνάρτηση και ξεκινά να εκτελεί τις εντολές που βρίσκονται μέσα της. Ο έλεγχος επιστρέφει στο σήμα προτροπής της κονσόλας μόλις ολοκληρωθεί η εκτέλεση όλων των εντολών της συνάρτησης. Σε αυτό το παράδειγμα, η <span class="courier-code">hi</span> δεν επιστρέφει πίσω στην κονσόλα κάποια δεδομένα. Απλά εμφανίζει το μήνυμα της <span class="courier-code">print</span> και ολοκληρώνει την εργασία της.</p>
			<p>Το ίδιο μπορεί να γίνει και μέσα από το περιβάλλον ενός IDE, γράφοντας ένα <i>σενάριο (script)</i> που θα περιέχει τον ορισμό και την κλήση (ή τις κλήσεις) της συνάρτησης. Γράφοντας λοιπόν:</p>
			<p><span class="courier-code">def hi():</span></p>
			<p><span class="courier-code">&#9;print</span><span class="courier-code">(&apos;Hello Python&apos;)</span></p>
			<p><span class="courier-code">hi()</span></p>
			<p class="no-indent">ορίζεται η συνάρτηση και αμέσως μετά γίνεται η κλήση της. Εκτελώντας τον κώδικα, θα εμφανιστεί στην οθόνη το ίδιο αποτέλεσμα:</p>
			<p><span class="courier-code">Hello Python</span></p>
			<p class="no-indent">Για να μπορέσει να κληθεί μια συνάρτηση από την κονσόλα, θα πρέπει πρώτα να περάσει από έλεγχο και να φορτωθεί από τον διερμηνευτή της γλώσσας. Έτσι, αν δοθεί στη γραμμή εντολών μια φορά, η συνάρτηση θα είναι «γνωστή» και θα μπορεί να χρησιμοποιηθεί σε οποιαδήποτε άλλη στιγμή. Σε νέα <i>συνεδρία (session)</i> όμως του περιβάλλοντος της Python, θα πρέπει να ξαναφορτωθεί ο κώδικας, προκειμένου να γίνει και πάλι διαθέσιμη η συνάρτηση.</p>
			<p>Στην περίπτωση συγγραφής κάποιου σεναρίου, πρέπει η δήλωση της συνάρτησης να υπάρχει προτού χρησιμοποιηθεί για πρώτη φορά. Αυτό μπορεί να γίνει σε οποιοδήποτε σημείο του κώδικα. Τα παρακάτω παραδείγματα υποθέτουμε ότι γράφονται σε κάποιον κειμενογράφο ενός IDE και εκτελούνται μέσα από το περιβάλλον του. Το επόμενο πρόγραμμα:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-1 | Δημιουργώντας συναρτήσεις</figcaption><img src="media/ListaKodika-10-1_fmt.png" alt=""/></figure>
			<p class="no-indent">περιέχει τη δήλωση της συνάρτησης στη γραμμή 2 και 3. Η κλήση της μπορεί να γίνει από τη γραμμή 4 και μετά.</p>
			<p>Εκτελώντας το πρόγραμμα στη Λίστα Κώδικα 10.1, εμφανίζονται στην οθόνη: </p>
			<p><span class="courier-code">Εντολές πριν από τη συνάρτηση</span></p>
			<p><span class="courier-code">Μια ακόμη εντολή εδώ</span></p>
			<p><span class="courier-code">Μια εντολή μέσα στη συνάρτηση</span></p>
			<p><span class="courier-code">και μια τελευταία</span></p>
			<p class="no-indent">Τι ακριβώς συνέβη; Η εκτέλεση έγινε με την εξής σειρά: Γραμμή 1 (εμφάνιση μηνύματος), 4 (εμφάνιση μηνύματος), 5 (κλήση της συνάρτησης), 2 (εκτέλεση των εντολών της συνάρτησης), 3 (εμφάνιση μηνύματος μέσα στη συνάρτηση), 6 (επιστροφή στο σημείο κλήσης και εμφάνιση μηνύματος).</p>
			<p>Όπως φαίνεται και από τα αποτελέσματα που εμφανίζονται, η εκτέλεση του κώδικα ξεκινάει από την αρχή, από τη γραμμή 1. Παρεμβάλλεται η δήλωση της συνάρτησης <span class="courier-code">myfunc</span>, όπου ελέγχεται και φορτώνεται ο κώδικάς της για να είναι διαθέσιμος όποτε και όπου γίνει η κλήση του. Η διακοπή της εσοχής στη γραμμή 4 σηματοδοτεί τον<sub class="subscript CharOverride-1"> </sub>τερματισμό του κώδικα της συνάρτησης. Έτσι, η <span class="courier-code">print</span> της γραμμής 4 βρίσκεται έξω από τη συνάρτηση και εκτελείται αμέσως μετά την εντολή της γραμμής 1. Στη γραμμή 5 γίνεται η κλήση της συνάρτησης. Σε αυτό το σημείο, ο έλεγχος περνά στη συνάρτηση στη γραμμή 2, οπότε εκτελείται η <span class="courier-code">print</span> της γραμμής 3 που είναι η πρώτη και μοναδική εντολή μέσα στη συνάρτηση. Μετά από αυτήν, δεν υπάρχουν άλλες εντολές με εσοχή, οπότε σταματά η εκτέλεση της συνάρτησης, επιστρέφει ο έλεγχος πίσω, εκεί όπου έγινε η κλήση, και η εκτέλεση του προγράμματος συνεχίζεται με την επόμενη (αν υπάρχει άλλη) εντολή. Στο παράδειγμα, η επόμενη εντολή, που είναι και η τελευταία, είναι στη γραμμή 6.</p>
			<p>Το παρακάτω πρόγραμμα:</p>
			<p><span class="courier-code">myfunc2()</span></p>
			<p><span class="courier-code">def </span><span class="courier-code">myfunc2():</span></p>
			<p><span class="courier-code">&#9;print(&apos;Hello&apos;) </span></p>
			<p class="no-indent">θα εμφανίσει το σφάλμα:</p>
			<p><span class="courier-code">NameError: name &apos;myfunc2&apos; is not defined</span></p>
			<p class="no-indent">αφού η κλήση της συνάρτησης γίνεται πριν από τον ορισμό της.</p>
			<p>Όπως φάνηκε και από τα προηγούμενα παραδείγματα, η κλήση μιας συνάρτησης γίνεται με χρήση του ονόματός της, ενώ απαραιτήτως θα πρέπει να δοθούν και οι παρενθέσεις. Αν δεν μπουν παρενθέσεις, τότε η συνάρτηση δεν καλείται και δεν εκτελείται, αλλά εμφανίζονται κάποιες πληροφορίες σχετικά με αυτήν στην κονσόλα της γλώσσας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; myfunc2</span></p>
			<p><span class="courier-code">&lt;function myfunc2 at 0x000001841E7EC1E0&gt;</span></p>
			<p class="no-indent">Η χρήση του ονόματος μιας συνάρτησης, χωρίς τις παρενθέσεις, στην ουσία χρησιμοποιεί μια <i>αναφορά (reference)</i> στο αντικείμενο της συνάρτησης και μπορεί να γίνει για την εκχώρηση αυτής της συνάρτησης σε μια μεταβλητή. Η επόμενη εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; f=myfunc2</span></p>
			<p class="no-indent">δημιουργεί αντίγραφο της συνάρτησης <span class="courier-code">myfunc2</span> και το εκχωρεί στη μεταβλητή <span class="courier-code">f</span>. Βασικά, δημιουργεί ένα νέο αντικείμενο τύπου <span class="courier-code">function</span> <span class="courier-code">myfunc2</span>: </p>
			<p><span class="courier-code">&gt;&gt;&gt; f</span></p>
			<p><span class="courier-code">&lt;function myfunc2 at 0x000001841E7EC1E0&gt; </span></p>
			<p class="no-indent">Άρα, η <span class="courier-code">f</span> μπορεί να κληθεί όπως και η <span class="courier-code">myfunc2</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; f()</span></p>
			<p><span class="courier-code">Hello</span></p>
			<p class="no-indent">Αυτό είναι και ένα από τα χαρακτηριστικά των αντικειμένων πρώτης κλάσης, όπως είναι και η συνάρτηση. Επιτρέπεται σε μια συνάρτηση να δίνεται ως τιμή σε μια μεταβλητή. </p>
			<p>Αντίθετα η εντολή: </p>
			<p><span class="courier-code">&gt;&gt;&gt; g=myfunc2()</span></p>
			<p><span class="courier-code">Hello</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<p class="no-indent">θα εκτελέσει τη συνάρτηση <span class="courier-code">myfunc2</span>, τρέχοντας την <span class="courier-code">print</span> και εμφανίζοντας έτσι το παραπάνω μήνυμα. Τι περιέχει όμως η μεταβλητή <span class="courier-code">g</span>; Η επόμενη εντολή δεν επιστρέφει τίποτα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; g</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<p class="no-indent">γιατί ως τιμή της η <span class="courier-code">g</span> έχει την τιμή <span class="courier-code">None</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; </span><span class="courier-code">g==None</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">Γιατί συνέβη αυτό; Επειδή μια συνάρτηση, όταν εκτελεστεί, επιστρέφει πίσω, εκεί όπου έγινε η κλήση της, μια τιμή.</p>
			<p>Μια συνάρτηση επιστρέφει πάντα μια ή περισσότερες τιμές. Αυτές οι τιμές καθορίζονται με την εντολή <span class="courier-code">return</span>. Μπορεί όμως να μη χρειάζεται να επιστραφεί κάποια τιμή. Σε αυτή την περίπτωση δεν είναι υποχρεωτικό να υπάρχει μέσα στη συνάρτηση η εντολή <span class="courier-code">return</span>, όπως έγινε με τα παραδείγματα μέχρι τώρα. Αν δεν δοθεί καμία εντολή <span class="courier-code">return</span>, η συνάρτηση επιστρέφει την τιμή <span class="courier-code">None</span>.</p>
			<p>Η εντολή <span class="courier-code">return</span> μπορεί να βρίσκεται σε οποιοδήποτε σημείο μέσα στη συνάρτηση και περισσότερες από μια φορές. Μετά την εκτέλεση της <span class="courier-code">return</span>, σταματά και η εκτέλεση της συνάρτησης, οπότε ο έλεγχος επιστρέφει στο σημείο κλήσης της συνάρτησης και οι τιμές που συνοδεύουν τη <span class="courier-code">return</span> (αν υπάρχουν) επιστρέφουν και εκχωρούνται σε μεταβλητές ή σε άλλα στοιχεία της Python. Αυτό όμως το χαρακτηριστικό των συναρτήσεων παρουσιάζεται σε επόμενη ενότητα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-1</b>: Να γράψετε συνάρτηση που όταν καλείται θα εμφανίζει έναν τυχαίο αριθμό από το 1 μέχρι το 49.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-2 | Εμφανίζοντας έναν τυχαίο αριθμό</figcaption><img src="media/ListaKodika-10-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">rnd</span> περιλαμβάνει την εισαγωγή της βιβλιοθήκης <span class="courier-code">random</span>, την παραγωγή ενός τυχαίου αριθμού, με τη <span class="courier-code">randint</span>, και την εμφάνισή του στην οθόνη. Η κλήση της συνάρτησης γίνεται στη γραμμή 6. Ένα πιθανό αποτέλεσμα που θα εμφανιστεί στην οθόνη είναι:</p>
			<p><span class="courier-code">Τυχαίος αριθμος:37</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-2</b>: Να γράψετε συνάρτηση, που όταν καλείται, θα εμφανίζει την τρέχουσα ημερομηνία και ώρα.</p>
			</blockquote>
			<p class="no-indent">Οι απαραίτητες εντολές βρίσκονται στη Λίστα Κώδικα 10-3.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-3 | Εμφανίζοντας ημερομηνία &amp; ώρα</figcaption><img src="media/ListaKodika-10-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Στις γραμμές 1-5 ορίζεται μια συνάρτηση με όνομα <span class="courier-code">now</span>. Περιλαμβάνει την εισαγωγή του module <span class="courier-code">time</span> και τη χρήση της συνάρτησης <span class="courier-code">strftime</span>, που παίρνει ημερομηνία και ώρα από το ρολόι του υπολογιστή και την καταχωρεί στη μεταβλητή <span class="courier-code">s</span> με μια κατάλληλη μορφοποίηση<sup class="superscript CharOverride-1"><span id="footnote-021-backlink"><a href="#footnote-021">73</a></span></sup>. Καλώντας τη συνάρτηση <span class="courier-code">now</span> στις γραμμές 7 και 8, μεσολαβεί μια καθυστέρηση 0,3 δευτερολέπτων (μέσω της <span class="courier-code">sleep</span>) και εμφανίζεται η τρέχουσα ημερομηνία και ώρα:</p>
			<p><span class="courier-code">Wed</span><span class="courier-code">, 19 Jun 2019 22:26:18</span></p>
			<p><span class="courier-code">Wed, 19 Jun 2019 22:26:19</span></p>
		</section>
		<section role="section" id="ch12se4">
			<h1><span role="label">10.4</span> Εμβέλεια</h1>
			<p class="no-indent">Μια συνάρτηση, συνήθως, χρειάζεται να κάνει υπολογισμούς και να επεξεργαστεί δεδομένα. Σε αυτή την ενότητα περιγράφονται οι τρόποι που μια μεταβλητή μπορεί να έχει πρόσβαση στα δεδομένα του προγράμματος. Εξ ορισμού στην Python, όλα τα δεδομένα είναι προσβάσιμα από οποιοδήποτε σημείο, οπουδήποτε μέσα σε ένα πρόγραμμα. Υπάρχουν όμως αρκετοί μηχανισμοί που επιτρέπουν την καλύτερη οργάνωση των δεδομένων και εξασφαλίζουν την <i>ασφάλεια (security)</i> και την <i>ακεραιότητά τους (integrity)</i>.</p>
			<p>Βασικό στοιχείο στον τρόπο που μπορεί μια συνάρτηση να χειριστεί δεδομένα είναι η έννοια της <i>εμβέλειας (scope)</i>. Πότε δηλαδή, πού και σε ποιες περιπτώσεις μια μεταβλητή μπορεί να διαθέσει ή να τροποποιήσει το περιεχόμενό της. Η Python διαχειρίζεται τα δεδομένα αποθηκεύοντας, γενικά, κάθε λειτουργικό στοιχείο της μέσα σε χώρους μνήμης που ονομάζονται <i>χώροι </i><i>ονομάτων (namespaces)</i>. Έτσι, κάθε ενότητα κώδικα μπορεί να οργανωθεί σε αυτόνομα τμήματα, ώστε να είναι εύκολη αλλά και ελεγχόμενη η πρόσβαση στα δεδομένα τους.</p>
			<p>Η έννοια της εμβέλειας είναι σχετική με τον τρόπο που μπορεί κάθε στοιχείο να είναι διαθέσιμο σε κάποιο τμήμα προγράμματος. Αυτή καθορίζει τον τρόπο που το περιεχόμενο μιας μεταβλητής θα είναι διαθέσιμο σε διαφορετικά τμήματα κώδικα. Η Python διαθέτει τρία (κυρίως) επίπεδα χώρων ονομάτων, όπου αποθηκεύονται και είναι διαθέσιμα τα δεδομένα ενός προγράμματος.</p>
			<p><b>Καθολικό επίπεδο ή επίπεδο αρχείου</b>. Είναι το αρχείο που είναι ανοικτό σε ένα ολοκληρωμένο περιβάλλον ανάπτυξης προγραμμάτων και στο οποίο γράφεται ο κώδικας. Ονομάζεται και <i>module scope</i>, αφού θα μπορούσε να αφορά και κάποιο εξωτερικό αρχείο, ο κώδικας του οποίου έχει φορτωθεί με την εντολή <span class="courier-code">import</span>. Σε αυτό το επίπεδο, κάθε μεταβλητή ή αντικείμενο είναι διαθέσιμα σε κάθε γραμμή κώδικα, ακόμα και σε αυτές που βρίσκονται μέσα σε συναρτήσεις. Για παράδειγμα, δίνεται το παρακάτω πρόγραμμα, που περιλαμβάνει δεδομένα από την εισαγωγή μιας βιβλιοθήκης, καθώς και άλλα που δημιουργούνται μέσα στο πρόγραμμα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-4 | Καθολικό επίπεδο πρόσβασης μεταβλητών</figcaption><img src="media/ListaKodika-10-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Όλα τα στοιχεία της βιβλιοθήκης <span class="courier-code">math</span> γίνονται διαθέσιμα σε όλο το πρόγραμμα, μέσα και έξω από τις συναρτήσεις. Το ίδιο συμβαίνει και με τη μεταβλητή <span class="courier-code">r</span>. Αυτού του είδους η εμβέλεια ονομάζεται <i>καθολική (global)</i> και οι αντίστοιχες <i>μεταβλητές καθολικές (</i><i>global variables)</i>.</p>
			<p>Αν η εργασία δεν γίνεται σε κάποιο IDE που διαθέτει δικό του <i>συντάκτη κώδικα (code editor)</i>, αλλά πραγματοποιείται μέσα στο ίδιο το κέλυφος του διερμηνευτή, τότε η τρέχουσα <i>συνεδρία (session)</i> περιλαμβάνει αυτό τον καθολικό χώρο ονομάτων. Για παράδειγμα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import math</span></p>
			<p class="no-indent">Από εδώ και πέρα, κάθε στοιχείο της βιβλιοθήκης <span class="courier-code">math</span> είναι άμεσα διαθέσιμο για χρήση:</p>
			<p><span class="courier-code">&gt;&gt;&gt; r=5</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; def func():</span></p>
			<p><span class="courier-code">&#9;&#9;print(math.pi*r**2)</span></p>
			<p class="no-indent">Αφού δηλώθηκε η συνάρτηση <span class="courier-code">func</span>, είναι πλέον διαθέσιμη στην κονσόλα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; func()</span></p>
			<p><span class="courier-code">78.53981633974483</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;</span></p>
			<p class="no-indent">Μόλις κλείσει το πρόγραμμα του διερμηνευτή, η μνήμη αδειάζει και θα πρέπει να ξαναδοθούν οι πιο πάνω εντολές. Διαφορετικά, σε κάθε προσπάθεια επανεκτέλεσης του κώδικα της συνάρτησης της προηγούμενης συνεδρίας, εμφανίζεται ένα μήνυμα σφάλματος:</p>
			<p><span class="courier-code">NameError: name &apos;func&apos; is not defined</span></p>
			<p class="no-indent"><b>Ο τοπικός χώρος ονομάτων</b> αποτελείται από αντικείμενα που δημιουργούνται με κάποια εντολή εκχώρησης μέσα σε συναρτήσεις ή ορισμούς κλάσεων. Κάθε συνάρτηση έχει τον δικό της τοπικό χώρο. Έτσι, οι μεταβλητές που δημιουργούνται μέσα σε μια συνάρτηση δεν είναι «ορατές» σε άλλα τμήματα κώδικα. Το περιεχόμενό τους υπάρχει όσο εκτελείται ο κώδικας που υπάρχει μέσα στη συνάρτηση. Μόλις σταματήσει η εκτέλεση μιας συνάρτησης, ο τοπικός χώρος ονομάτων της αδειάζει και παύει πλέον να υπάρχει πρόσβαση στα τοπικά της δεδομένα. Για παράδειγμα, δίνεται το πρόγραμμα στη Λίστα Κώδικα 10-5.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-5 | Τοπικές μεταβλητές</figcaption><img src="media/ListaKodika-10-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος, θα εμφανιστούν:</p>
			<p><span class="courier-code">Μέσα στη Συνάρτηση 1 0</span></p>
			<p><span class="courier-code">Έξω από τη Συνάρτηση 0 0</span></p>
			<p class="no-indent">Η 1η <span class="courier-code">print</span>, μέσα στη συνάρτηση, θα εμφανίσει την τιμή του <span class="courier-code">a</span> με 1, γιατί το <span class="courier-code">a</span> πήρε νέα τιμή μέσα στη συνάρτηση και αποτελεί νέο αντικείμενο (τύπου <span class="courier-code">int</span>), που δεν έχει καμία σχέση με το <span class="courier-code">a</span> του κώδικα έξω από τη συνάρτηση, που εξακολουθεί να υπάρχει ως άλλη, ξεχωριστή μεταβλητή. Αντίθετα, το <span class="courier-code">b</span> κρατάει την ίδια τιμή (<span class="courier-code">0</span>) μέσα και έξω από τη συνάρτηση, αφού δεν επιχειρήθηκε αλλαγή της τιμής του (και κατά συνέπεια δημιουργίας νέου αντικειμένου) μέσα στη συνάρτηση. Έτσι, το <span class="courier-code">a</span> αποτελεί <i>τοπική (local</i><i>)</i> μεταβλητή, στον τοπικό χώρο ονομάτων και το <span class="courier-code">b</span> <i>καθολική (global)</i> μεταβλητή. Επειδή η εντολή εκχώρησης σηματοδοτεί τη δημιουργία νέων αντικειμένων, το παρακάτω πρόγραμμα, στη Λίστα Κώδικα 10-6, θα εμφάνιζε το σφάλμα:</p>
			<p><span class="courier-code">UnboundLocalError: local variable &apos;k&apos; referenced before assignment</span></p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-6 | Πρόβλημα εκχώρησης</figcaption><img src="media/ListaKodika-10-6_fmt.png" alt=""/></figure>
			<p class="no-indent">που δηλώνει ότι η μεταβλητή <span class="courier-code">k</span> χρησιμοποιήθηκε πριν της γίνει ανάθεση κάποιας τιμής. Αυτό γίνεται γιατί στη γραμμή 4 δημιουργείται νέο αντικείμενο τύπου λίστας, ενώ στη γραμμή 3 γίνεται ήδη αναφορά σε αυτό. Αν δεν υπήρχε η γραμμή 4, τότε η γραμμή 3 δεν θα είχε κανένα πρόβλημα και θα τύπωνε το περιεχόμενο του <span class="courier-code">k</span>, με την τιμή που πήρε αυτό στη γραμμή 1.</p>
			<p>Αυτή η ελευθερία, στην πρόσβαση στοιχείων από διαφορετικά σημεία, υπάρχει ώστε να είναι δυνατή η άμεση χρήση δεδομένων από οπουδήποτε χρειάζεται και οποιαδήποτε στιγμή. Με αυτό τον τρόπο, είναι διαθέσιμες παντού και οι ενσωματωμένες συναρτήσεις της Python (π.χ. <span class="courier-code">int</span>, <span class="courier-code">type</span> κ.λπ.), κάτι που δεν θα ήταν εφικτό αν κάθε τμήμα κώδικα είχε περιορισμένη πρόσβαση στον χώρο ονομάτων. Αυτό είναι το τρίτο επίπεδο χώρου ονομάτων και ονομάζεται <b>ενσωματωμένος χώρος ονομάτων (built-</b><b>in namespace)</b>. Αποτελεί τον τελευταίο στη σειρά χώρο όπου ο διερμηνευτής θα ψάξει για να εντοπίσει ένα όνομα (μιας μεταβλητής, μιας συνάρτησης ή κάποιου αντικειμένου γενικότερα). Η σειρά αναζήτησης ενός ονόματος είναι:</p>
			<p class="no-indent">τοπικός (αν υπάρχει) Q καθολικός Q ενσωματωμένος</p>
			<p class="no-indent">Γράφοντας επομένως την παρακάτω εντολή, όπου το <span class="courier-code">a</span> μπορεί να είναι οποιοδήποτε αντικείμενο,</p>
			<p><span class="courier-code">b=a</span></p>
			<p class="no-indent">ο διερμηνευτής θα αναζητήσει το όνομα <span class="courier-code">a</span> στον τοπικό χώρο (αν υπάρχει τέτοιος). Αν το βρει εκεί, θα επιστρέψει το περιεχόμενό του στη μεταβλητή <span class="courier-code">b</span>. Διαφορετικά, θα το αναζητήσει στον καθολικό χώρο. Αν και αυτή η αναζήτηση αποτύχει, τότε θα γίνει αναζήτηση στον ενσωματωμένο. Αν δεν βρεθεί πουθενά το όνομα <span class="courier-code">a</span>, τότε εμφανίζεται το μήνυμα: </p>
			<p><span class="courier-code">NameError: name &apos;a&apos; is not defined</span></p>
			<p class="no-indent">Η διάκριση που γίνεται ανάμεσα σε μεταβαλλόμενα και αμετάβλητα αντικείμενα περιπλέκει λίγο την κατάσταση. Αν μια μεταβλητή, όπως το <span class="courier-code">k</span>, μεταβληθεί μέσα σε μια συνάρτηση, τότε θα παραμείνει καθολική, με ενημερωμένο όμως το περιεχόμενό της. Αυτό γίνεται επειδή δεν δημιουργείται νέο αντικείμενο, αλλά τροποποιείται ένα ήδη υπάρχον. Το επόμενο πρόγραμμα της Λίστας Κώδικα 10-7 δείχνει αυτή την περίπτωση.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-7 | Μεταβλητά αντικείμενα</figcaption><img src="media/ListaKodika-10-7_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα, μόλις εκτελεστεί, θα εμφανίσει αρχικά:</p>
			<p><span class="courier-code">[&apos;a&apos;, &apos;b&apos;] [1]</span></p>
			<p class="no-indent">που είναι το αποτέλεσμα της <span class="courier-code">print</span> μέσα στη συνάρτηση (γραμμή 6). Εδώ, το <span class="courier-code">k1</span> είναι τοπικό όνομα, ενώ το <span class="courier-code">k2</span> είναι το αρχικό (της γραμμής 2) που ενημερώθηκε με νέο περιεχόμενο στη γραμμή 5. Η 2η <span class="courier-code">print</span>, στη γραμμή 8, θα εμφανίσει: </p>
			<p><span class="courier-code">[] [1]</span></p>
			<p class="no-indent">δηλαδή το αρχικό <span class="courier-code">k1</span> (που ήταν και παρέμεινε κενό), αφού το <span class="courier-code">k1</span> μέσα στη συνάρτηση σταμάτησε να υπάρχει, καθώς και το ενημερωμένο, από τη γραμμή 5, <span class="courier-code">k2</span>. Το <span class="courier-code">k2</span> ενημερώθηκε από την <span class="courier-code">append</span> και οι αλλαγές αυτές δεν δημιούργησαν νέο αντικείμενο. Σε αυτή την περίπτωση το <span class="courier-code">k1</span> είναι καθολικό όνομα, έξω από τη συνάρτηση, και τοπικό μέσα στη συνάρτηση, ενώ το <span class="courier-code">k2</span> παραμένει καθολικό παντού.</p>
			<p>Αν χρειαστεί μια μεταβλητή να πάρει νέα τιμή ή μορφή μέσα στη συνάρτηση, η οποία να ισχύει καθολικά, τότε μπορεί να δηλωθεί, μέσα στη συνάρτηση, ως καθολική μεταβλητή. Αυτή η δήλωση γίνεται χρησιμοποιώντας το λεκτικό <span class="courier-code">global</span> και πρέπει να γίνει πριν από την τοπική χρήση της, πριν δηλαδή γίνει κάποια αναφορά στο όνομά της. Αυτό φαίνεται στη Λίστα Κώδικα 10-8.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-8 | Η εντολή <span class="courier-code">global</span></figcaption><img src="media/ListaKodika-10-8_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα θα εμφανίσει:</p>
			<p><span class="courier-code">Είχα μάθει Java</span></p>
			<p><span class="courier-code">Χρησιμοποιούσα </span><span class="courier-code">Java</span></p>
			<p><span class="courier-code">αλλά τώρα όμως μαθαίνω Python</span></p>
			<p><span class="courier-code">και η Python μού αρέσει</span></p>
			<p class="no-indent">γιατί στη γραμμή 4 η μεταβλητή <span class="courier-code">lang</span> (τύπου συμβολοσειράς, που είναι αμετάβλητο αντικείμενο) δηλώνεται ως καθολική. Έτσι, η αλλαγή τιμής της θα περάσει και στον κώδικα έξω από τη συνάρτηση.</p>
			<p>Η χρήση ονομάτων, για την κατασκευή αντικειμένων στην Python, είναι τέτοια, που μπορεί να επιτρέψει μέσα στον κώδικα να υπάρχουν μεταβλητές με ίδια ονομασία με αυτήν άλλων αντικειμένων της γλώσσας. Έτσι, μπορεί μια μεταβλητή να πάρει το όνομα <span class="courier-code">max</span>, ενώ υπάρχει ήδη ενσωματωμένη συνάρτηση με το ίδιο όνομα. Τέτοιου είδους ονομασίες θα πρέπει να αποφεύγονται, αλλά δεν είναι κάτι που η Python δεν επιτρέπει. Κάθε αντικείμενο που κατασκευάζεται από τον χρήστη παίρνει ένα όνομα και αυτό το όνομα καταχωρείται στον κατάλληλο χώρο ονομάτων. Αν δημιουργηθεί μέσα σε μια συνάρτηση, αποτελεί στοιχείο του τοπικού χώρου, αλλιώς θα βρεθεί στον καθολικό χώρο ονομάτων. Αυτό φαίνεται στη Λίστα Κώδικα 10-9.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-9 | Χρήση ονομάτων</figcaption><img src="media/ListaKodika-10-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Τα <span class="courier-code">a</span> και <span class="courier-code">b</span> είναι καθολικές μεταβλητές, παίρνουν τιμή στο κύριο πρόγραμμα (έξω από κάθε συνάρτηση) και χρησιμοποιούνται και μέσα στη συνάρτηση. Εκεί υπολογίζεται ο μεγαλύτερος από τα <span class="courier-code">a</span> και <span class="courier-code">b</span> και η τιμή του καταχωρείται σε μια νέα μεταβλητή με όνομα <span class="courier-code">max</span>. Όταν η <span class="courier-code">print</span> στη γραμμή 6 χρησιμοποιήσει το όνομα <span class="courier-code">max</span>, ο διερμηνευτής θα ψάξει πρώτα στον τοπικό χώρο ονομάτων και όχι στον ενσωματωμένο. Έτσι, δεν θα υπάρξει καμία διένεξη με το όνομα <span class="courier-code">max</span> που υπάρχει στις ονομασίες των ενσωματωμένων αντικειμένων της Python. Έτσι, όμως, η συνάρτηση <span class="courier-code">max</span> δεν μπορεί να χρησιμοποιηθεί πουθενά μέσα σε αυτό τον τοπικό χώρο ονομάτων. Μπορεί να γίνει όμως χρήση της σε άλλο σημείο, έξω από τη συνάρτηση <span class="courier-code">findmax</span>, όπως γίνεται στη γραμμή 10. Τα αποτελέσματα της εκτέλεσης του προγράμματος είναι:</p>
			<p><span class="courier-code">Max=1</span></p>
			<p><span class="courier-code">1</span></p>
			<p class="no-indent">Με τον ίδιο τρόπο, αν δοθεί στην κονσόλα η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; min=a if a&lt;b else b</span></p>
			<p class="no-indent">το όνομα <span class="courier-code">min</span> σταματάει να αναφέρεται στην ενσωματωμένη συνάρτηση <span class="courier-code">min</span> και έχει την τιμή του <span class="courier-code">a</span> ή του <span class="courier-code">b</span>. Αυτό σημαίνει ότι, πλέον, η συνάρτηση <span class="courier-code">min</span> δεν είναι διαθέσιμη πουθενά, ούτε στην κονσόλα ούτε στο πρόγραμμα που γράφεται στον συντάκτη του IDE. Για να διατεθεί ξανά το όνομα <span class="courier-code">min</span> στην ενσωματωμένη συνάρτηση, θα πρέπει να γίνει επανεκκίνηση του διερμηνευτή, ή να διαγραφεί το αντικείμενο <span class="courier-code">m</span><span class="courier-code">in</span> με την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; del min</span></p>
		</section>
		<section role="section" id="ch12se5">
			<h1><span role="label">10.5</span> Εσωτερικές συναρτήσεις</h1>
			<p class="no-indent">Μετά τον ορισμό της, μια συνάρτηση μπορεί να χρησιμοποιηθεί από οποιοδήποτε σημείο μέσα στον κώδικα. Ακόμα και μέσα από κάποια άλλη συνάρτηση. Στη Λίστα Κώδικα 10-10, παρουσιάζεται αυτή η λειτουργία.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-10 | Κλήση συνάρτησης από συνάρτηση</figcaption><img src="media/ListaKodika-10-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι <span class="courier-code">f1</span> και <span class="courier-code">f2</span> είναι δυο συναρτήσεις. Η εκτέλεση του προγράμματος ξεκινάει με την κλήση της συνάρτησης <span class="courier-code">f</span><span class="courier-code">2</span> στη γραμμή 8. Ο έλεγχος περνά στην <span class="courier-code">f2</span>, όπου τρέχει η <span class="courier-code">print</span> της γραμμής 5. Στη συνέχεια, στη γραμμή 6, καλείται η <span class="courier-code">f1</span> (μέσα από την <span class="courier-code">f2</span>). Ο έλεγχος περνά στην <span class="courier-code">f1</span>, τυπώνεται το μήνυμα της γραμμής 2, τερματίζει η <span class="courier-code">f1</span>, γίνεται επιστροφή στην <span class="courier-code">f2</span> η οποία επίσης τερματίζει. Η επόμενη εντολή που θα εκτελεστεί είναι η νέα κλήση της <span class="courier-code">f1</span>, αυτή τη φορά όμως από τη γραμμή 9. Έτσι, τα αποτελέσματα της εκτέλεσης είναι:</p>
			<p><span class="courier-code">f2</span></p>
			<p><span class="courier-code">f1</span></p>
			<p><span class="courier-code">f1</span></p>
			<p class="no-indent">Μια συνάρτηση μπορεί, όχι μόνο να περιλαμβάνει τη χρήση άλλων συναρτήσεων, αλλά και τον ορισμό τους. Είναι επομένως δυνατή η δημιουργία συναρτήσεων μέσα σε συναρτήσεις. Αυτό χρησιμοποιείται όταν, για θέματα οργάνωσης του κώδικα, είναι αναγκαίο κάποιες εντολές να συγκεντρωθούν σε μεμονωμένα τμήματα. Μια άλλη χρήση τους είναι για τη λειτουργία «κλεισίματος», που περιγράφεται σε επόμενη παράγραφο. Το πρόγραμμα που δίνεται στη Λίστα Κώδικα 10-11 περιγράφει την ενσωμάτωση μιας συνάρτησης μέσα σε μια άλλη.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-11 | Ένθετες συναρτήσεις</figcaption><img src="media/ListaKodika-10-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεσή του θα εμφανιστούν:</p>
			<p><span class="courier-code">Εξωτερική συνάρτηση</span></p>
			<p><span class="courier-code">Εσωτερική συνάρτηση</span></p>
			<p class="no-indent">αφού στη γραμμή 6 καλείται η <span class="courier-code">f1</span>, μέσα της τρέχει η <span class="courier-code">print</span> στη γραμμή 2 και αμέσως μετά καλείται, στη γραμμή 5, η εσωτερική συνάρτηση <span class="courier-code">f2</span> και εμφανίζεται η 2η γραμμή κειμένου στην οθόνη. Μετά τον τερματισμό της <span class="courier-code">f2</span>, τερματίζεται και η <span class="courier-code">f1</span> και τελειώνει το πρόγραμμα.</p>
			<p>Πέρα από λόγους επίδειξης αυτής της λειτουργίας, η πιο πάνω Λίστα Κώδικα δεν έχει καμία πρακτική εφαρμογή και αξία. Ο κυριότερος λόγος που μπορεί μια συνάρτηση να περιέχει άλλες είναι η δυνατότητα που δίνεται στην εσωτερική συνάρτηση να «θυμάται» τιμές που έχουν παραχθεί από τη συνάρτηση η οποία την περιέχει. Η περιγραφή αυτής της λειτουργίας θα γίνει λίγο παρακάτω, μετά την εξοικείωση με τον τρόπο που επιστρέφουν τιμές οι συναρτήσεις.</p>
			<p>Στις ένθετες συναρτήσεις υπάρχει πρόσβαση σε μεταβλητές του κυρίως προγράμματος ή της εξωτερικής συνάρτησης. Αν μια μεταβλητή, που υπάρχει στην εξωτερική συνάρτηση, πάρει νέα τιμή μέσα στην εσωτερική, τότε αυτή μετατρέπεται σε τοπική (υπάρχει ως νέο αντικείμενο) και η νέα τιμή ισχύει μόνο στο εσωτερικό της. Ακολουθεί ένα πρόγραμμα για την περιγραφή αυτής της λειτουργίας.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-12 | Λειτουργία ένθετων συναρτήσεων</figcaption><img src="media/ListaKodika-10-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Η σειρά εκτέλεσης των εντολών φαίνεται στην αρίθμηση μέσα σε κύκλο, στο δεξιό άκρο της Λίστας Κώδικα 10-12. Με την εκτέλεση του προγράμματος θα εμφανιστούν: </p>
			<p><span class="courier-code">99</span></p>
			<p><span class="courier-code">98</span></p>
			<p><span class="courier-code">99</span></p>
			<p><span class="courier-code">100</span></p>
			<p class="no-indent">Για να γίνει κοινή χρήση και να μπορεί να αλλάζει τιμή η μεταβλητή <span class="courier-code">x</span> και στις δυο ένθετες συναρτήσεις <span class="courier-code">f1</span> και <span class="courier-code">f2</span>, θα πρέπει η μεταβλητή να οριστεί ως <i>μη τοπική (</i><i>non-local)</i> στην ένθετη συνάρτηση <span class="courier-code">f2</span>. Αυτή η λειτουργία φαίνεται στη Λίστα Κώδικα 10-13.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-13 | Η εντολή <span class="courier-code">nonlocal</span></figcaption><img src="media/ListaKodika-10-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του κώδικα, θα εμφανιστούν στην οθόνη τα επόμενα αποτελέσματα:</p>
			<p><span class="courier-code">Πριν την εσωτερική κλήση 99</span></p>
			<p><span class="courier-code">Εσωτερικά, </span><span class="courier-code">πριν την αλλαγή 99</span></p>
			<p><span class="courier-code">Το x μετά την εσωτερική αλλαγή 98</span></p>
			<p><span class="courier-code">Μετά την κλήση της εσωτερικής συνάρτησης 98</span></p>
			<p><span class="courier-code">Κύριο πρόγραμμα 100</span></p>
		</section>
		<section role="section" id="ch12se6">
			<h1><span role="label">10.6</span> Επιστροφή τιμών</h1>
			<p class="no-indent">Ο τοπικός χώρος καθορίζεται κάθε φορά δυναμικά, κατά την κλήση μιας συνάρτησης. Έτσι, σε κάθε κλήση δημιουργείται ο ανάλογος χώρος και υπάρχει όσο εκτελείται η συνάρτηση. Χαρακτηριστική είναι η περίπτωση όπου μια συνάρτηση καλεί τον εαυτό της. Αυτή η τεχνική ονομάζεται <i>αναδρομή (</i><i>recursion)</i> και εφαρμόζεται σε πολλά προβλήματα. Η χρήση της περιγράφεται σε ξεχωριστή ενότητα, αμέσως μετά. Αυτό που αξίζει να σημειωθεί προς το παρόν είναι ότι, σε κάθε αναδρομική κλήση, δημιουργείται ένας νέος τοπικός χώρος ονομάτων για την ίδια συνάρτηση.</p>
			<p>Με τον τερματισμό εκτέλεσης μιας συνάρτησης, σταματά να υπάρχει ο χώρος ονομάτων της. Το περιεχόμενό της παύει να υπάρχει και τα δεδομένα της δεν είναι πλέον διαθέσιμα πουθενά στο πρόγραμμα. Τα δεδομένα αυτά αναλαμβάνει ο διερμηνευτής να τα διαγράψει από τη μνήμη, για να ελευθερώσει ένα μέρος της, μέσα από τη διαδικασία <i>συλλογής απορριμμάτων (garbage collection)</i>. Αυτό οδηγεί στην ανάγκη ενός μηχανισμού που θα επιστρέφει δεδομένα απαραίτητα και μετά την κλήση της συνάρτησης. Αυτό γίνεται με την εντολή <span class="courier-code">return</span>.</p>
			<p>Η <span class="courier-code">return</span> μπορεί να δεχθεί καμία, μία ή πολλές τιμές (ή, γενικότερα, αντικείμενα). Για να πραγματοποιηθεί χρήση της <span class="courier-code">return</span>, θα πρέπει να γίνει κατάλληλα και η κλήση της συνάρτησης.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-3</b>: Να γράψετε συνάρτηση που θα υπολογίζει και θα επιστρέφει το άθροισμα τετραγώνων των αριθμών από το 0 μέχρι το 100.</p>
			</blockquote>
			<p class="no-indent">Η Λίστα Κώδικα 10-14 περιλαμβάνει τη συνάρτηση και την απαραίτητη κλήση της.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-14 | Επιστροφή τιμών</figcaption><img src="media/ListaKodika-10-14_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα στη Λίστα Κώδικα 10-14 καλεί τη συνάρτηση<span class="courier-code"> tetragona,</span> στη γραμμή 7. Η συνάρτηση επεξεργάζεται τα στοιχεία της ακολουθίας τιμών που παράγει η <span class="courier-code">range</span>, υπολογίζει το άθροισμα των τετραγώνων τους και το καταχωρεί στη μεταβλητή <span class="courier-code">s</span>. Μέσω της <span class="courier-code">return</span> η τιμή του <span class="courier-code">s</span> επιστρέφει πίσω, στην κλήση της συνάρτησης, στη γραμμή 7 και εκχωρείται στη μεταβλητή <span class="courier-code">sum1</span>. Έτσι, το άθροισμα που υπολογίστηκε μέσα στη συνάρτηση γίνεται διαθέσιμο και στο υπόλοιπο πρόγραμμα. Μετά την κλήση της συνάρτησης στη γραμμή 7, η ποσότητα που υπήρχε στο <span class="courier-code">s</span> παύει να υπάρχει. Έτσι, θα εμφανιστεί:</p>
			<p><span class="courier-code">Το άθροισμα είναι: 338350</span></p>
			<p class="no-indent">Η συνάρτηση μπορεί να επιστρέφει περισσότερες τιμές και η <span class="courier-code">return</span> μπορεί να υπάρχει σε πολλά σημεία μέσα στον κώδικα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-4</b>: Να γράψετε συνάρτηση που θα υπολογίζει και θα επιστρέφει τον μικρότερο και τον μεγαλύτερο από 2 αριθμούς.</p>
			</blockquote>
			<p class="no-indent">Η απάντηση φαίνεται στη Λίστα Κώδικα 10-15 και περιλαμβάνει την κλήση της συνάρτησης και τη χρήση της με διαφορετικούς τρόπους.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-15 | Επιστροφή περισσότερων τιμών</figcaption><img src="media/ListaKodika-10-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Η 1η κλήση της συνάρτησης <span class="courier-code">minmax</span> γίνεται στη γραμμή 7. Μόλις τρέξει η συνάρτηση με τις τιμές που έχουν τα <span class="courier-code">a</span> και <span class="courier-code">b</span>, θα εκτελεστεί η <span class="courier-code">return</span> στη γραμμή 3 και θα τερματιστεί η συνάρτηση εκεί. H <span class="courier-code">return</span> θα επιστρέψει δυο τιμές, με τη μορφή μιας πλειάδας. Έτσι, στη γραμμή 7, τα <span class="courier-code">min1</span> και <span class="courier-code">max1</span> θα πάρουν τις δυο τιμές της πλειάδας που επιστρέφει η συνάρτηση (με τη διαδικασία unpacking). Στην οθόνη θα εμφανιστεί: </p>
			<p><span class="courier-code">Μικρότερος: 5 Μεγαλύτερος: 10</span></p>
			<p class="no-indent">Η 2η κλήση της συνάρτησης γίνεται στη γραμμή 10. Με τον ίδιο τρόπο θα λειτουργήσει η συνάρτηση, αλλά το αποτέλεσμα θα αποδοθεί σε μια νέα πλειάδα στο κύριο πρόγραμμα, την πλειάδα <span class="courier-code">t</span>. Η <span class="courier-code">print</span> επομένως, στη γραμμή 11, θα εμφανίσει:</p>
			<p><span class="courier-code">Σε πλειάδα:(min,max)= (5, 10)</span></p>
			<p class="no-indent">Η 3η κλήση της <span class="courier-code">minmax</span> γίνεται στη γραμμή 13, μέσα από μια άλλη συνάρτηση, την <span class="courier-code">print</span>. Πρώτα θα γίνει εκτέλεση της <span class="courier-code">minmax</span> και το αποτέλεσμα που επιστρέφει (η πλειάδα τιμών των <span class="courier-code">a</span> και <span class="courier-code">b</span>) δίνεται ως τιμή στην <span class="courier-code">print</span>. H <span class="courier-code">print</span> θα εμφανίσει, μαζί με το κείμενο που περιέχει, και την πλειάδα τιμών της <span class="courier-code">minmax</span>. Αυτό φαίνεται και από το αποτέλεσμά της:</p>
			<p><span class="courier-code">Σε πλειάδα μέσα σε άλλη συνάρτηση:(min,max)= (5, 10)</span></p>
			<p class="no-indent">Το γεγονός ότι δεν χρειάζεται να δηλωθεί πουθενά ο τύπος δεδομένων των στοιχείων που επιστρέφει μια συνάρτηση (όπως δεν δηλώνεται τίποτα στην Python!) κάνει δυνατή τη χρήση της με διαφορετικού τύπου δεδομένα. Αυτό φαίνεται από το επόμενο παράδειγμα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-5</b>: Να γράψετε συνάρτηση που θα επεξεργάζεται τα στοιχεία μιας ακολουθίας αριθμών. Θα επιλέγει μόνο τους θετικούς και θα τους καταχωρεί σε λίστα, την οποία και θα επιστρέφει.</p>
			</blockquote>
			<p class="no-indent">Στη Λίστα Κώδικα 10-16 βλέπουμε το περιεχόμενο και μερικές χρήσεις της συνάρτησης.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-16 | Επιστροφή αντικειμένων</figcaption><img src="media/ListaKodika-10-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">shrink</span> επεξεργάζεται ένα επαναληπτικό αντικείμενο <span class="courier-code">x</span> (περισσότερα στοιχεία για τα επαναληπτικά αντικείμενα και τους επαναλήπτες δίνονται στο Κεφάλαιο 11 με τα αντικείμενα). Μέσα στον βρόχο <span class="courier-code">for</span> στις γραμμές 3 έως 5, σαρώνεται το στοιχείο <span class="courier-code">x</span>, επιλέγονται μόνο τα θετικά του στοιχεία και καταχωρούνται σε μια κενή (γραμμή 2) λίστα <span class="courier-code">y</span>. Η λίστα <span class="courier-code">y</span> επιστρέφεται ως τιμή στη <span class="courier-code">return</span> στη γραμμή 6. Μόλις κληθεί για πρώτη φορά η <span class="courier-code">shrink</span>, θα επεξεργαστεί το <span class="courier-code">x</span> που είναι λίστα. Αυτή η λίστα δημιουργήθηκε στη γραμμή 8. Το αντικείμενο <span class="courier-code">x1</span>, που δημιουργείται μετά την επιστροφή της τιμής από τη συνάρτηση, είναι τύπου λίστας. </p>
			<p>Στη συνέχεια ακολουθούν δυο ακόμη κλήσεις της συνάρτησης, αφού όμως το <span class="courier-code">x</span> αλλάξει μορφή και περιεχόμενο. Στη 2η κλήση της η <span class="courier-code">shrink</span> θα επεξεργαστεί μια πλειάδα και στην 3η κλήση θα λειτουργήσει ο κώδικας σε ένα σύνολο. Οι επιστρεφόμενες τιμές της συνάρτησης είναι πάντα λίστες. Και οι τρεις λίστες (<span class="courier-code">x1</span>, <span class="courier-code">x2</span> και <span class="courier-code">x3</span>) δημιουργήθηκαν από τρεις διαφορετικές δομές: λίστα, πλειάδα και σύνολο. Με αυτό τον τρόπο είναι δυνατή η χρήση του ίδιου κώδικα πολλές φορές αλλά και με διαφορετικές, κάθε φορά, δομές. Αυτό το χαρακτηριστικό ονομάζεται πολυμορφισμός και περιγράφεται ολοκληρωμένα στο Κεφάλαιο 11 με τα αντικείμενα. </p>
			<p>Εκτελώντας το πρόγραμμα εμφανίζονται στην οθόνη:</p>
			<p><span class="courier-code">[1, 2, 3, 4] [1, 2, 3] [3, 4]</span></p>
			<p class="no-indent">Για να τρέξει ο κώδικας μέσα σε μια τέτοια συνάρτηση, θα πρέπει οι δομές που θα επεξεργαστεί να υποστηρίζουν τις λειτουργίες που χρησιμοποιεί η συνάρτηση. Για παράδειγμα, η συνάρτηση αυτή δεν θα μπορούσε να επεξεργαστεί δεδομένα μιας συμβολοσειράς:</p>
			<p><span class="courier-code">&gt;&gt;&gt; x=&apos;123455&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x4=shrink()</span></p>
			<p><span class="courier-code">TypeError: unorderable types: str() &gt; int()</span></p>
			<p class="no-indent">γιατί η γραμμή 4 θα εμφάνιζε το πιο πάνω μήνυμα σφάλματος. </p>
			<p>Δεν είναι όμως καλή πρακτική μια συνάρτηση να επεξεργάζεται μόνο δεδομένα που υπάρχουν στο εξωτερικό της περιβάλλον, απλά χρησιμοποιώντας το όνομά τους. Για αυτό τον λόγο υπάρχει μηχανισμός ο οποίος, κάθε φορά που καλείται μια συνάρτηση, στέλνει σ’ αυτήν και το κατάλληλο κάθε φορά είδος και πλήθος δεδομένων. Τα συγκεκριμένα δεδομένα η συνάρτηση θα τα επεξεργαστεί σε τοπικό επίπεδο και θα επιστρέψει το επιθυμητό αποτέλεσμα. Έτσι, ο κώδικάς της θα είναι πιο γενικός, δεν θα αναφέρεται σε συγκεκριμένα καθολικά δεδομένα, αλλά θα λειτουργεί για οποιοδήποτε στοιχείο τής αποσταλεί κατά την κλήση της. Το παραπάνω πρόγραμμα επεξεργάζεται μόνο το στοιχείο <span class="courier-code">x</span>, που μπορεί να έχει διαφορετικές μορφές, αλλά δουλεύει μόνο με αυτό. Αν υπήρχε και κάποιο άλλο αντικείμενο, η επεξεργασία του δεν θα ήταν δυνατή. Αυτό γίνεται με τη χρήση παραμέτρων.</p>
			<p>Η <span class="courier-code">return</span> μπορεί να μην περιλαμβάνει κανένα επιστρεφόμενο στοιχείο ή η κλήση της να μην περιέχει τη λήψη όσων επιστρέφει αυτή. Ακολουθούν μερικές χαρακτηριστικές περιπτώσεις στις Λίστες Κώδικα 10-17, 10-18 και 10-19.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-17 | Xρήση της return 1</figcaption><img src="media/ListaKodika-10-17_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">fun1</span> αλλάζει την τιμή της καθολικής μεταβλητής <span class="courier-code">x</span> και τελειώνει χωρίς να επιστρέψει τίποτα. Η εντολή <span class="courier-code">return</span> θα μπορούσε και να παραλειφθεί. Το πρόγραμμα θα τυπώσει:</p>
			<p><span class="courier-code">20</span></p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-18 | Xρήση της return 2</figcaption><img src="media/ListaKodika-10-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">fun2</span> αλλάζει επίσης την τιμή της καθολικής μεταβλητής <span class="courier-code">x</span> και τερματίζει την εκτέλεσή της χρησιμοποιώντας μια κενή <span class="courier-code">return</span> (που επίσης θα μπορούσε και να παραλειφθεί). Το ενδιαφέρον στην κλήση της συνάρτησης στη γραμμή 6 είναι ότι η μεταβλητή <span class="courier-code">y</span> θα πάρει την τιμή που επιστρέφει η <span class="courier-code">fun2</span>, δηλαδή τίποτα (τιμή <span class="courier-code">None</span>). Αυτό φαίνεται και από το αποτέλεσμα που δίνει η <span class="courier-code">print</span> στην τελευταία γραμμή:</p>
			<p><span class="courier-code">y=None x=20</span></p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-19 | Xρήση της return 3</figcaption><img src="media/ListaKodika-10-19_fmt.png" alt=""/></figure>
			<p class="no-indent">Σε αυτό το τμήμα προγράμματος, γίνονται δυο κλήσεις της <span class="courier-code">fun3</span>. Στην 1η κλήση, στη γραμμή 5 θα εκτελεστεί η συνάρτηση και το επιστρεφόμενο στοιχείο της δεν θα καταχωρηθεί πουθενά. Αν και όχι ιδιαίτερα χρήσιμο, είναι πάντως κάτι που δεν θα δημιουργήσει πρόβλημα στον διερμηνευτή. Αντίθετα, στη 2η κλήση της, η συνάρτηση θα επιστρέψει το αποτέλεσμά της και θα το καταχωρήσει στη μεταβλητή <span class="courier-code">z</span>. Τα εξής αποτελέσματα θα εμφανιστούν στην οθόνη:</p>
			<p><span class="courier-code">z=20 x=10</span></p>
		</section>
		<section role="section" id="ch12se7">
			<h1><span role="label">10.7</span> Παράμετροι</h1>
			<p class="no-indent">Η επικοινωνία ενός υποπρογράμματος με το υπόλοιπο πρόγραμμα γίνεται μέσω των παραμέτρων. Αυτές είναι μεταβλητές ή τιμές που ορίζονται κατά τη δήλωση μιας συνάρτησης και χρησιμοποιούνται κατάλληλα κατά την κλήση της. Η Python διαθέτει αρκετούς τρόπους για τον ορισμό και τη χρήση παραμέτρων.</p>
			<section role="subsection" id="ch12se7ss1">
				<h1><span role="label">10.7.1</span> Παράμετροι θέσης</h1>
				<p class="no-indent">Η πιο απλή περίπτωση είναι να οριστεί μια συγκεκριμένη σειρά μεταβλητών που θα δέχεται η συνάρτηση. Επιλέγεται το πλήθος των στοιχείων που θα δεχθεί η συνάρτηση και δίνεται ένα όνομα για κάθε στοιχείο. Αυτά τα στοιχεία τοποθετούνται, με τη σειρά, μέσα στις παρενθέσεις της επικεφαλίδας του ορισμού της συνάρτησης. Το πρόγραμμα για το Παράδειγμα 10-5 θα μπορούσε να γραφτεί όπως στη Λίστα Κώδικα 10-20.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-20 | Χρήση παραμέτρων – φιλτράρισμα</figcaption><img src="media/ListaKodika-10-20_fmt.png" alt=""/></figure>
				<p class="no-indent">Η δήλωση της παραμέτρου <span class="courier-code">x</span> στην επικεφαλίδα της συνάρτησης <span class="courier-code">shrink</span> σημαίνει ότι κατά την κλήση της θα πρέπει να της δοθεί ένα αντικείμενο, το οποίο θα υπάρχει ως μεταβλητή μέσα στη συνάρτηση κατά τη διάρκεια εκτέλεσής της. Έτσι, η κλήση της μπορεί να περιέχει οποιοδήποτε στοιχείο, όπως τα <span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span>, που είναι μια λίστα, μια πλειάδα και ένα σύνολο αντίστοιχα (γραμμές 8 έως 10). Στην 1η κλήση (γραμμή 11), αποστέλλεται μια πλειάδα (<span class="courier-code">a</span>) μέσα στη συνάρτηση, την τιμή της οποίας λαμβάνει το <span class="courier-code">x</span>. Εκεί, δημιουργείται μια νέα λίστα (<span class="courier-code">y</span>) με τις θετικές τιμές της πλειάδας <span class="courier-code">x</span>. Η λίστα <span class="courier-code">y</span> επιστρέφει μέσω της <span class="courier-code">return</span> πίσω στο κύριο πρόγραμμα (γραμμή 6), στη μεταβλητή <span class="courier-code">a</span>, αφού μετατραπεί πρώτα σε πλειάδα.</p>
				<p>Η 2η κλήση (γραμμή 12) τροφοδοτεί την ίδια συνάρτηση με μια λίστα (<span class="courier-code">b</span>). Αυτή η λίστα θα δοθεί στην παράμετρο <span class="courier-code">x</span> και θα δώσει τις θετικές τιμές της στη νέα λίστα <span class="courier-code">y</span> μέσα στη συνάρτηση. Επιστρέφοντας πίσω στο κύριο πρόγραμμα, μετά τον τερματισμό της συνάρτησης, η λίστα <span class="courier-code">b</span> θα έχει πλέον καινούργιο περιεχόμενο. Στην 3η κλήση (γραμμή 13), η παράμετρος <span class="courier-code">x</span> θα αποκτήσει την τιμή του συνόλου <span class="courier-code">c</span>. Η επιστροφή των αποτελεσμάτων της συνάρτησης γίνεται σε νέα μεταβλητή, τύπου λίστας, τη <span class="courier-code">c2</span>, κρατώντας ανέπαφο το αρχικό σύνολο <span class="courier-code">c</span>. Τα αποτελέσματα που τυπώνει το πρόγραμμα είναι:</p>
				<p><span class="courier-code">(1, 2, 3, 4) [1, 2, 3] [3, 4]</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-6</b>: Να δημιουργήσετε συνάρτηση που θα δέχεται δυο στοιχεία και θα αντιμεταθέτει τις τιμές τους.</p>
				</blockquote>
				<p class="no-indent">Το περιεχόμενο της συνάρτησης, μαζί με κάποιες κλήσεις με διαφορετικά στοιχεία, φαίνεται στη Λίστα Κώδικα 10-21.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-21 | Χρήση παραμέτρων – αντιμετάθεση</figcaption><img src="media/ListaKodika-10-21_fmt.png" alt=""/></figure>
				<p class="no-indent">Οι πρώτες δυο γραμμές περιέχουν τη συνάρτηση <span class="courier-code">swap</span>. Αυτή δέχεται δυο τιμές, <span class="courier-code">x</span> και <span class="courier-code">y</span>, και τις επιστρέφει με ανάποδη σειρά, πρώτα την <span class="courier-code">y</span> και μετά τη <span class="courier-code">x</span>.</p>
				<p>Οι γραμμές 4 έως και 15 περιέχουν δοκιμαστικές κλήσεις της <span class="courier-code">swap</span>. Η 1η κλήση γίνεται στη γραμμή 6. Στέλνονται στη συνάρτηση δυο αριθμητικές τιμές, <span class="courier-code">a</span> και <span class="courier-code">b</span>. Αυτές οι τιμές θα δοθούν στις παραμέτρους <span class="courier-code">x</span> και <span class="courier-code">y</span>. Με την επιστροφή από τη συνάρτηση, οι μεταβλητές <span class="courier-code">a</span> και <span class="courier-code">b</span> θα αποκτήσουν νέο περιεχόμενο. Η μια θα λάβει την τιμή της άλλης. Οι διαδοχικές εντολές <span class="courier-code">print</span> των γραμμών 5 και 7 θα τυπώσουν το αρχικό και το νέο περιεχόμενο αυτών των μεταβλητών:</p>
				<p><span class="courier-code">Αρχικές </span><span class="courier-code">τιμές a= 1 b= 2</span></p>
				<p><span class="courier-code">Τελικές τιμές a= 2 b= 1</span></p>
				<p class="no-indent">Παρόμοιες είναι και οι επόμενες δυο κλήσεις της συνάρτησης, με διαφορετικά αντικείμενα κάθε φορά. Τη μια με τιμές λογικές (<span class="courier-code">True</span>/<span class="courier-code">False</span>) και την άλλη με πλειάδες. Το αποτέλεσμα φαίνεται στην οθόνη μετά την εκτέλεση των εντολών <span class="courier-code">print</span>:</p>
				<p><span class="courier-code">Αρχικές τιμές k= True n= False</span></p>
				<p><span class="courier-code">Τελικές τιμές k= False n= True</span></p>
				<p><span class="courier-code">Αρχικές τιμές t1= (1, 2, 3) t2= (3, 2, 1)</span></p>
				<p><span class="courier-code">Τελικές</span><span class="courier-code"> τιμές t1= (3, 2, 1) t2= (1, 2, 3)</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-7</b>: Να δημιουργήσετε συνάρτηση που θα δέχεται μια λίστα με αριθμούς. Η συνάρτηση θα υπολογίζει τον μικρότερο, τον μεγαλύτερο και το άθροισμα των στοιχείων της λίστας και θα τα επιστρέφει πίσω σε μια πλειάδα (ή σε τρεις ξεχωριστές μεταβλητές).</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί η υλοποίηση της συνάρτησης στη Λίστα Κώδικα 10-22, μαζί με μια δοκιμαστική κλήση της.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-22 | Χρήση παραμέτρων – στοιχεία λίστας</figcaption><img src="media/ListaKodika-10-22_fmt.png" alt=""/></figure>
				<p class="no-indent">Στην 1η κλήση της συνάρτησης, στη γραμμή 8, στέλνεται ως όρισμα η λίστα <span class="courier-code">mylist</span>. Η παράμετρος <span class="courier-code">x</span> της συνάρτησης θα αποκτήσει τις τιμές της λίστας, με τις οποίες θα γίνουν οι υπολογισμοί στις γραμμές 2, 3 και 4. Όλα τα αποτελέσματα (<span class="courier-code">mymin</span>, <span class="courier-code">mymax</span>, <span class="courier-code">s</span>) επιστρέφουν μέσω της <span class="courier-code">return</span> (γραμμή 5) στις μεταβλητές <span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span> (γραμμή 8) και τυπώνονται στην οθόνη (γραμμή 9):</p>
				<p><span class="courier-code">Min=-3 Max=5 Sum=9</span></p>
				<p class="no-indent">Στη 2η κλήση της η συνάρτηση κάνει την ίδια ακριβώς εργασία, αλλά το αποτέλεσμα που επιστρέφει, στη γραμμή 10, καταχωρείται σε μια πλειάδα (<span class="courier-code">mytuple</span>). Αυτό φαίνεται και από το αποτέλεσμα της εντολής <span class="courier-code">print</span> στη γραμμή 11:</p>
				<p><span class="courier-code">(Min,Max,Sum) (-3, 5, 9)</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-8</b>: Να δημιουργήσετε συνάρτηση που θα δέχεται μια λίστα με αριθμούς. Η συνάρτηση θα δημιουργεί δυο νέες λίστες. Η μια θα περιλαμβάνει μόνο τους θετικούς και η άλλη όλους τους υπόλοιπους αριθμούς.</p>
				</blockquote>
				<p class="no-indent">Η μορφή της συνάρτησης φαίνεται στη Λίστα Κώδικα 10-23. Αμέσως μετά ακολουθεί μια δοκιμαστική κλήση της.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-23 | Χρήση παραμέτρων – διαχωρισμός</figcaption><img src="media/ListaKodika-10-23_fmt.png" alt=""/></figure>
				<p class="no-indent">Σε αυτό το πρόγραμμα, η συνάρτηση (γραμμές 1 έως 8) δέχεται μια ακολουθία τιμών μέσω της παραμέτρου της (<span class="courier-code">numbers</span>). Δημιουργεί δυο νέες λίστες, με τα θετικά στοιχεία στη μια (<span class="courier-code">pos</span>) και τα υπόλοιπα στοιχεία στην άλλη (<span class="courier-code">nez</span>), τις οποίες επιστρέφει πίσω (γραμμή 8) στις λίστες <span class="courier-code">list1</span> και <span class="courier-code">list2</span> (γραμμή 11). Το αποτέλεσμα από την κλήση της συνάρτησης είναι:</p>
				<p><span class="courier-code">Θετικά στοιχεία: [3, 5, 2, 6, 4, 7, 4]</span></p>
				<p><span class="courier-code">Αρνητικά στοιχεία: [-1, -5, -3]</span></p>
				<p class="no-indent">Σε αυτό το σημείο θα πρέπει να γίνει διάκριση μεταξύ <i>μεταβαλλόμενων (mutable)</i> και <i>αμετάβλητων (immutable)</i> αντικειμένων που τίθενται ως παράμετροι σε μια συνάρτηση. Γενικά, όταν αλλάζει μια παράμετρος, τότε αυτή αποτελεί ένα νέο αντικείμενο, με <i>τοπική</i> <i>εμβέλεια (local</i><i> scope)</i>, μέσα στη συνάρτηση. Αν αυτή η παράμετρος αλλάξει τιμή, η αλλαγή δεν μεταφέρεται πίσω στο αντικείμενο (όρισμα) με το οποίο κλήθηκε η συνάρτηση. Υπάρχει ωστόσο μια λεπτομέρεια. Αν το αντικείμενο είναι μεταβλητού τύπου (όπως μια λίστα), τότε μπορεί να μεταβληθεί μέσα στη συνάρτηση, και η νέα του μορφή να επιστρέψει πίσω, χωρίς τη χρήση της εντολής <span class="courier-code">return</span>. Αυτό φαίνεται και από το επόμενο παράδειγμα στη Λίστα Κώδικα 10-24.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-24 | Μεταβλητά αντικείμενα</figcaption><img src="media/ListaKodika-10-24_fmt.png" alt=""/></figure>
				<p class="no-indent">Τρεις λίστες (<span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span>) στέλνονται ως παράμετροι στη συνάρτηση <span class="courier-code">mutfun</span> με την κλήση της στη γραμμή 12. Οι τιμές των <span class="courier-code">a</span>, <span class="courier-code">b</span> και <span class="courier-code">c</span> περνάνε στις παραμέτρους <span class="courier-code">x</span>, <span class="courier-code">y</span> και <span class="courier-code">z</span> αντίστοιχα. Η λίστα <span class="courier-code">x</span> παίρνει νέα τιμή (γραμμή 4) και δημιουργείται έτσι ένα νέο, τοπικό, αντικείμενο τύπου λίστας. Η λίστα <span class="courier-code">y</span> τροποποιείται, δέχεται ένα ακόμα στοιχείο (γραμμή 5). Χωρίς να χρησιμοποιηθεί η εντολή <span class="courier-code">return</span>, το <span class="courier-code">y</span>, που έχει πάρει τιμή από το <span class="courier-code">b</span>, επιστρέφει πίσω σ’ αυτό αλλαγμένο. </p>
				<p>Καθώς το <span class="courier-code">z</span> αλλάζει, η αλλαγή περνάει και στο <span class="courier-code">c</span>, αλλά όταν του ανατίθεται νέα τιμή (<span class="courier-code">[]</span> στη γραμμή 6), παύει να συνδέεται με το <span class="courier-code">c</span> και αποτελεί, από αυτό το σημείο και μετά, ξεχωριστό αντικείμενο. Έτσι, στην οθόνη θα τυπωθούν τα αποτελέσματα:</p>
				<p><span class="courier-code">Πριν την κλήση της συνάρτησης</span></p>
				<p><span class="courier-code">a,b</span><span class="courier-code">,c [1, 2] [3, 4] [0, 5]</span></p>
				<p><span class="courier-code">Μέσα στη συνάρτηση</span></p>
				<p><span class="courier-code">x,y,z [] [3, 4, 1] []</span></p>
				<p><span class="courier-code">Μετά την κλήση της συνάρτησης</span></p>
				<p><span class="courier-code">a,</span><span class="courier-code">b,c [1, 2] [3, 4, 1] [0, 5, 1]</span></p>
				<p class="no-indent">όπου το <span class="courier-code">a</span> παραμένει αμετάβλητο, το <span class="courier-code">b</span> έχει πάρει την αλλαγή που έγινε στο <span class="courier-code">y</span> και το <span class="courier-code">z</span> πρόσθεσε μια ακόμα τιμή στο <span class="courier-code">c</span>, πριν αποσυνδεθεί από εκείνο.</p>
				<p>Αυτό συμβαίνει γιατί η κλήση της συνάρτησης και η αποστολή τιμών σε αυτήν γίνονται με βάση τις αναφορές των αντικειμένων που περιέχουν αυτές τις τιμές. Ενώ σε άλλες γλώσσες προγραμματισμού η μεταφορά τιμών γίνεται είτε <i>βάσει των τιμών (pass</i><i> by value)</i>, είτε <i>βάσει των αναφορών (pass by reference)</i> των παραμέτρων, στην Python γίνεται με το «<i>πέρασμα</i>»<i> αντικειμένων (pass by object)</i>, ή αλλιώς των <i>αναφορών των αντικειμένων αυτών (pass by object reference)</i>. Έτσι, αν το αντικείμενο που μεταφέρεται στη συνάρτηση, ως όρισμα στην κλήση της, είναι μεταβλητό, τότε μπορεί να τροποποιηθεί (π.χ. να προστεθούν στοιχεία σε μια λίστα), αλλάζοντας έτσι και το αρχικό. Αν όμως τεθεί σε μια εντολή εκχώρησης, τότε δημιουργείται νέο αντικείμενο και σταματά η «σύνδεσή» του με το αρχικό αντικείμενο από το οποίο προήλθε. Τα δυο, ξεχωριστά πλέον, αντικείμενα αναφέρονται σε ξεχωριστές θέσεις μνήμης όπου κρατείται το περιεχόμενό τους.</p>
				<p>Αυτό είναι επόμενο, αφού κάθε φορά που δημιουργείται νέο αντικείμενο, αποκτά τη δική του αναφορά στη διεύθυνση μνήμης όπου αποθηκεύεται η τιμή του. Έτσι:</p>
				<p><span class="courier-code">&gt;&gt;&gt; a=[1,2]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b=a</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; b.append(3)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a,b</span></p>
				<p><span class="courier-code">([1, 2, 3], [1, 2, 3])</span></p>
				<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> b=[11,12]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; a,b</span></p>
				<p><span class="courier-code">([1, 2, 3], [11, 12])</span></p>
				<p class="no-indent">Στις προηγούμενες εντολές, το <span class="courier-code">b</span> ξεκινά να υπάρχει ως αντίγραφο του <span class="courier-code">a</span>. Αυτό σημαίνει ότι το <span class="courier-code">b</span> αναφέρεται στην ίδια διεύθυνση μνήμης με το <span class="courier-code">a</span>. Η συμπεριφορά αυτή δικαιολογείται πλήρως, αφού οι μεταβλητές στην Python δεν είναι παρά ονόματα (στον χώρο ονομάτων του διερμηνευτή) που παραπέμπουν σε διευθύνσεις μνήμης, όπου πραγματικά βρίσκονται αποθηκευμένα τα δεδομένα. Σε κάθε αλλαγή του περιεχομένου του <span class="courier-code">b</span> αλλάζει και το <span class="courier-code">a</span> και το αντίστροφο, αφού και τα δυο είναι δείκτες στην ίδια διεύθυνση μνήμης (βλ. Κεφάλαιο 2).</p>
			</section>
			<section role="subsection" id="ch12se7ss2">
				<h1><span role="label">10.7.2</span> Ονομαστικές παράμετροι και αρχικές τιμές</h1>
				<p class="no-indent">Στην προηγούμενη περίπτωση, το πέρασμα τιμών γινόταν σύμφωνα με τη σειρά των παραμέτρων. Οι παράμετροι όμως μπορεί να έχουν το δικό τους <i>όνομα (named – keyword arguments)</i> και τις δικές τους <i>αρχικές τιμές (default values)</i>. Πολλές φορές, ειδικά αν οι τιμές είναι πολλές, είναι προτιμότερο να υπάρχει κάτι σαν περιγραφή ή ονομασία για τις παραμέτρους. Έστω ότι δίνεται η συνάρτηση <span class="courier-code">emp</span>, που τυπώνει κάποια στοιχεία των υπαλλήλων μιας εταιρείας, στη Λίστα Κώδικα 10-25.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-25 | Ονομαστικές παράμετροι – υπάλληλοι</figcaption><img src="media/ListaKodika-10-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Η παρακάτω κλήση της συνάρτησης: </p>
				<p><span class="courier-code">emp(name=&apos;Άννα&apos;,age=22,</span><span class="courier-code">salary=800)</span></p>
				<p class="no-indent">είναι προτιμότερη από: </p>
				<p><span class="courier-code">emp(22,&apos;Άννα&apos;,800)</span></p>
				<p class="no-indent">Και οι δυο κλήσεις θα εκτελέσουν τον κώδικα της συνάρτησης εμφανίζοντας:</p>
				<p><span class="courier-code">Η Άννα είναι </span><span class="courier-code">22 χρονών και αμείβεται με 800 €</span></p>
				<p class="no-indent">Στην 1η περίπτωση όμως, είναι πιο ξεκάθαρο το τι ακριβώς αντιπροσωπεύει κάθε τιμή που περνάει μέσα στη συνάρτηση, ενώ στη 2η περίπτωση όχι. Ακόμη, είναι δυνατόν σ‘ αυτή την περίπτωση οι τιμές των ορισμάτων να μη δοθούν με τη σειρά που είναι δηλωμένα μέσα στη συνάρτηση, αφού το όνομά τους παραπέμπει σε ποιες παραμέτρους θα αποδοθούν οι συγκεκριμένες τιμές. </p>
				<p>Μπορεί να γίνει και ανάμειξη των δυο τρόπων, ωστόσο σε αυτή την περίπτωση θα πρέπει πρώτα να δοθούν τιμές σύμφωνα με τη θέση και μετά σύμφωνα με το όνομα.</p>
				<p>Η χρήση παραμέτρων με ονόματα γίνεται και σε ενσωματωμένες εντολές ή συναρτήσεις της Python, όπως η <span class="courier-code">print</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; print(&quot;Γεια&quot;,&quot;Χαρά&quot;,sep=&apos;-&apos;) </span></p>
				<p><span class="courier-code">Γεια-Χαρά</span></p>
				<p class="no-indent">Μια παράμετρος μπορεί να έχει συγκεκριμένη, αρχική τιμή κατά τη δήλωσή της στην επικεφαλίδα μιας συνάρτησης. Αυτό σημαίνει ότι η παράμετρος μπορεί να παραλειφθεί κατά την κλήση της συνάρτησης. Το Παράδειγμα 10-9 περιγράφει τη χρήση αρχικά δηλωμένων τιμών που ενδέχεται να έχει μια παράμετρος.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-9</b>: Να υπολογιστεί σε συνάρτηση, που θα κατασκευάσετε για αυτό τον σκοπό, το εμβαδό τραπεζίου. Ο τύπος υπολογισμού είναι:</p>
				</blockquote>
				<p class="no-indent"><img src="media/pg425.png" />￼</p>
				<p class="no-indent">Να ελεγχθεί η ορθότητα του προγράμματος με τις τιμές: </p>
				<p class="no-indent"><i>βάση<sup>μικρή</sup></i> <span class="math-font">=</span> 3, <i>βάση<sup>μεγάλη</sup></i> <span class="math-font">=</span> 4 και <i>ύψος</i> <span class="math-font">=</span> 10.</p>
				<p class="no-indent">Η Λίστα Κώδικα 10-26 περιέχει τον ορισμό της συνάρτησης και μερικές δοκιμαστικές κλήσεις της.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-26 | Ονομαστικές παράμετροι – ένα εμβαδό</figcaption><img src="media/ListaKodika-10-26_fmt.png" alt=""/></figure>
				<p class="no-indent">Είναι αρκετά ξεκάθαρο το τι ακριβώς κάνει το περιεχόμενο της συνάρτησης. Η συνάρτηση έχει τρεις παραμέτρους, με την τελευταία (την <span class="courier-code">y</span>) να διαθέτει και αρχική τιμή (το <span class="courier-code">10</span>). Αυτό σημαίνει ότι, αν κατά την κλήση της παραλειφθεί το τρίτο όρισμα (που αντιστοιχεί στο <span class="courier-code">y</span>), τότε το <span class="courier-code">y</span> θα έχει την τιμή <span class="courier-code">10</span>. Αυτή η περίπτωση φαίνεται στην κλήση που γίνεται στη γραμμή 5. Σε αυτή την περίπτωση, τα <span class="courier-code">b1</span> και <span class="courier-code">b2</span> αποκτούν τις τιμές <span class="courier-code">3</span> και <span class="courier-code">4</span> αντίστοιχα (σύμφωνα με τη θέση τους), ενώ το <span class="courier-code">y</span>, που δεν δέχεται καμία τιμή κατά την κλήση, θα κρατήσει την εξ ορισμού δηλωμένη τιμή <span class="courier-code">10</span>. </p>
				<p>Όλες οι κλήσεις είναι ισοδύναμες και θα εμφανίσουν το ίδιο αποτέλεσμα, τον αριθμό:</p>
				<p><span class="courier-code">35.0</span></p>
				<p class="no-indent">που είναι το εμβαδό για το τραπέζιο με τα χαρακτηριστικά που δίνονται. Η 1η κλήση μεταφέρει τις τιμές <span class="courier-code">3</span>, <span class="courier-code">4</span> και <span class="courier-code">10</span> στις παραμέτρους <span class="courier-code">b1</span>, <span class="courier-code">b2</span> και <span class="courier-code">y</span> αντίστοιχα, με βάση τη σειρά που δίνονται. Η 2η κλήση δίνει μόνο τις δυο πρώτες τιμές, ενώ η 3η (του <span class="courier-code">y</span>) παραμένει η τιμή <span class="courier-code">10</span>. Η 3η κλήση χρησιμοποιεί τα ονόματα των παραμέτρων, οπότε μπορούν να δοθούν με οποιαδήποτε σειρά θέλουμε. Στην 4η κλήση πρώτα μπαίνουν οι τιμές κατά θέση (οπότε το <span class="courier-code">3</span> δίνεται στο <span class="courier-code">b1</span>) και μετά κατά όνομα (με οποιαδήποτε σειρά).</p>
				<p>Η παρακάτω όμως κλήση θα αποτύχει:</p>
				<p><span class="courier-code">trap(b1=3,4,</span><span class="courier-code">y=10)</span></p>
				<p class="no-indent">εμφανίζοντας το μήνυμα σφάλματος:</p>
				<p><span class="courier-code">SyntaxError: positional argument follows keyword argument</span></p>
				<p class="no-indent">αφού στην κλήση έχει δοθεί πρώτα μια παράμετρος με όνομα και μετά μια παράμετρος θέσης.</p>
				<p>Ιδιαίτερη προσοχή χρειάζεται στη χρήση αρχικών, προκαθορισμένων τιμών στις παραμέτρους. Το πρόγραμμα στη Λίστα Κώδικα 10-27 θα περίμενε κανείς να τυπώσει το μήνυμα “<span class="courier-code">Αντίο</span>”. Ωστόσο, το αποτέλεσμα μπορεί να προκαλέσει έκπληξη.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-27 | Ονομαστικές παράμετροι – χαιρετισμός</figcaption><img src="media/ListaKodika-10-27_fmt.png" alt=""/></figure>
				<p class="no-indent">Μετά την εκτέλεσή του τυπώνεται η φράση “<span class="courier-code">Γεια</span> <span class="courier-code">σου</span>”. Αυτό συμβαίνει γιατί η προκαθορισμένη τιμή (“<span class="courier-code">Γεια</span> <span class="courier-code">σου</span>”) εκχωρείται στην παράμετρο μία μόνο φορά, κατά τον ορισμό και τον έλεγχο της συνάρτησης από τον διερμηνευτή. Μπορεί στη συνέχεια η τιμή της μεταβλητής <span class="courier-code">msg</span> να αλλάζει, αλλά αυτή η αλλαγή δεν επηρεάζει την τιμή της παραμέτρου <span class="courier-code">say</span> που εξακολουθεί να κρατάει την αρχική της τιμή. Την ίδια συμπεριφορά θα έχει και η συνάρτηση <span class="courier-code">func2</span>, που αποτελεί στιγμιότυπο της <span class="courier-code">func1</span> (γραμμή 7), γιατί ο ορισμός της συνάρτησης έχει ήδη γίνει.</p>
				<p>Στην οθόνη λοιπόν τυπώνεται: </p>
				<p><span class="courier-code">Γεια σου</span></p>
				<p><span class="courier-code">Γεια σου</span></p>
			</section>
			<section role="subsection" id="ch12se7ss3">
				<h1><span role="label">10.7.3</span> Πακετάρισμα παραμέτρων</h1>
				<p class="no-indent">Εκτός όμως από την ελευθερία στην τοποθέτηση των παραμέτρων και των αντίστοιχων ορισμάτων κατά την κλήση μιας συνάρτησης, η Python διαθέτει δυο ακόμα μηχανισμούς που κάνουν τη χρήση των συναρτήσεων πιο γενική, ελεύθερη και προσαρμόσιμη σε πολλές και διαφορετικές περιπτώσεις. Το πλήθος των παραμέτρων μπορεί να μην είναι σταθερό και προκαθορισμένο, αλλά να μεταβάλλεται, με δυναμικό τρόπο, σύμφωνα με τις ανάγκες που προκύπτουν κατά την εκτέλεση του προγράμματος.</p>
				<p>Το μεταβλητό πλήθος παραμέτρων μπορεί να χρησιμοποιηθεί σε συνδυασμό με τους προηγούμενους τρόπους μεταφοράς δεδομένων μέσα σε μια συνάρτηση. Υπάρχουν δυο τρόποι με τους οποίους μια συνάρτηση δέχεται άγνωστο πλήθος παραμέτρων. Με χρήση του <i>μονού και του διπλού αστερίσκου (starred </i>ή <i>*args</i> και <i>double starred </i>ή <i>**kwargs arguments/parameters)</i>.</p>
				<p class="no-indent"><span class="bold-italics">Ο αστερίσκος ‘*’</span></p>
				<p class="no-indent">Με τη χρήση του αστερίσκου ‘<span class="courier-code">*</span>’ μπροστά από το όνομα παραμέτρου, μια συνάρτηση μπορεί να δεχθεί σειρά από τιμές, άγνωστη εκ των προτέρων. Η ακολουθία τιμών που αποστέλλεται με αυτό τον τρόπο περνάει στη συνάρτηση με τη μορφή πλειάδας, μεταβλητού και άγνωστου μεγέθους. Η συνάρτηση στη Λίστα Κώδικα 10-28 περιλαμβάνει ένα παράδειγμα αυτής της περίπτωσης.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-28 | Παράμετροι με αστερίσκο – εμφάνιση τιμών</figcaption><img src="media/ListaKodika-10-28_fmt.png" alt=""/></figure>
				<p class="no-indent">Η συνάρτηση απλά τυπώνει τις τιμές που ενσωματώνει η παράμετρος <span class="courier-code">x</span>. Η 1η <span class="courier-code">print</span> (γραμμή 2) τυπώνει την πλειάδα <span class="courier-code">x</span>, ενώ η 2η (γραμμή 3) ξεπακετάρει τις τιμές του <span class="courier-code">x</span> (βλ. Κεφάλαιο 7 σχετικά με τις πλειάδες). Η 1η κλήση της συνάρτησης (γραμμή 5) γίνεται χωρίς να σταλεί σε αυτήν κάποια τιμή, οπότε το <span class="courier-code">x</span> περιέχει μια κενή πλειάδα. Στην οθόνη εμφανίζεται:</p>
				<p><span class="courier-code">()</span></p>
				<p><span class="courier-code">#και μια κενή γραμμή, αφού το x είναι κενό</span></p>
				<p class="no-indent">Στην επόμενη κλήση (γραμμή 6), η συνάρτηση θα λάβει τρεις αριθμητικές τιμές και η παράμετρος <span class="courier-code">x</span> θα περιέχει αυτές τις τιμές. Θα εμφανιστεί:</p>
				<p><span class="courier-code">(1, 2, 3)</span></p>
				<p><span class="courier-code">1 2 3</span></p>
				<p class="no-indent">Η τελευταία κλήση (γραμμή 7) περιλαμβάνει λίστες, κείμενο και αριθμό, ενώ θα μπορούσε να περιέχει οποιοδήποτε αντικείμενο. Σε πραγματικές εφαρμογές, δεν είναι σύνηθες να χρησιμοποιούνται τόσο ανόμοια στοιχεία στην ίδια συνάρτηση, ωστόσο οι δυνατότητες που παρέχει αυτό το πακετάρισμα πολλαπλών τιμών είναι σχεδόν απεριόριστες. Στην οθόνη εμφανίζονται τα παρακάτω στοιχεία:</p>
				<p><span class="courier-code">([0, 1], [2, 3], &apos;1.0&apos;, 1.0)</span></p>
				<p><span class="courier-code">[0, 1] [2, 3] 1.0 1.0</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-10</b>: Συμμετέχουμε σε ομάδα που δημιουργεί ένα νέο παιχνίδι. Το παιχνίδι παίζεται με άγνωστο πλήθος ζαριών. Μας ζητήθηκε να φτιάξουμε συνάρτηση που θα δέχεται το νούμερο από κάθε ζάρι και θα δημιουργεί έναν τυχαίο αριθμό, από το 1 μέχρι το νούμερο που έχει το κάθε ζάρι. Η συνάρτηση θα πρέπει να δέχεται οποιοδήποτε πλήθος ζαριών και να επιστρέφει το άθροισμα όλων των τυχαίων αριθμών.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-29 | Παράμετροι με αστερίσκο – ζάρια</figcaption><img src="media/ListaKodika-10-29_fmt.png" alt=""/></figure>
				<p class="no-indent">Σε μια εκτέλεση του προγράμματος εμφανίστηκε το (τυχαίο) αποτέλεσμα:</p>
				<p><span class="courier-code">2</span></p>
				<p><span class="courier-code">5</span></p>
				<p><span class="courier-code">12</span></p>
				<p class="no-indent">όπου κάθε αριθμός εκφράζει το άθροισμα των τυχαίων αριθμών που δημιούργησε η συνάρτηση, με βάση τις τιμές των ορισμάτων που της δόθηκαν.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-11</b>: Να δημιουργήσετε συνάρτηση η οποία θα δέχεται άγνωστο πλήθος αριθμών και θα επιστρέφει τον μέσο όρο τους.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 10-30 περιλαμβάνει τη δήλωση και κλήση της συνάρτησης.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-30 | Παράμετροι με αστερίσκο – μέσος όρος</figcaption><img src="media/ListaKodika-10-30_fmt.png" alt=""/></figure>
				<p class="no-indent">Γίνονται δυο κλήσεις της συνάρτησης, καθεμιά με διαφορετικό πλήθος ορισμάτων. Σε κάθε περίπτωση όμως, ο κώδικας της συνάρτησης θα μπορεί να επεξεργαστεί τους αριθμούς που δίνονται. Τα αποτελέσματα των δυο κλήσεων που τυπώνονται στην οθόνη είναι:</p>
				<p><span class="courier-code">2.5</span></p>
				<p><span class="courier-code">6.714285714285714</span></p>
				<p class="no-indent">Οι παράμετροι με αστερίσκο μπορεί να συνδυαστούν και με τις προηγούμενες περιπτώσεις παραμέτρων. Αυτό φαίνεται στο επόμενο παράδειγμα.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-12</b>: Να γράψετε συνάρτηση που θα δέχεται το όνομα ενός φοιτητή και τα αντίστοιχα μαθήματα με τον βαθμό του, εμφανίζοντάς τα στην οθόνη.</p>
				</blockquote>
				<p class="no-indent">Η Λίστα Κώδικα 10-31 που ακολουθεί περιέχει την απάντηση.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-31 | Παράμετροι με αστερίσκο – βαθμοί</figcaption><img src="media/ListaKodika-10-31_fmt.png" alt=""/></figure>
				<p class="no-indent">Μόλις γίνει η εκτέλεση του προγράμματος, θα εμφανιστούν τα παρακάτω αποτελέσματα:</p>
				<p><span class="courier-code">Ο/H φοιτητής Γιώργος πήρε</span></p>
				<p><span class="courier-code">C</span></p>
				<p><span class="courier-code">6</span></p>
				<p><span class="courier-code">Python</span></p>
				<p><span class="courier-code">10</span></p>
				<p><span class="courier-code">Ο/H φοιτητής Έφη </span><span class="courier-code">πήρε</span></p>
				<p><span class="courier-code">Αλγόριθμοι</span></p>
				<p><span class="courier-code">8</span></p>
				<p><span class="courier-code">Python</span></p>
				<p><span class="courier-code">9</span></p>
				<p><span class="courier-code">ASP</span></p>
				<p><span class="courier-code">7</span></p>
				<p class="no-indent"><span class="bold-italics">Ο διπλός αστερίσκος ‘**’</span></p>
				<p class="no-indent">Αν στη δήλωση της συνάρτησης, μπροστά από το όνομα της παραμέτρου μπει ένα ‘<span class="courier-code">**</span>’, τότε αυτή γίνεται λεξικό με τα ζεύγη κλειδιών-τιμών που θα προέρχονται από την κλήση της.</p>
				<p>Στη Λίστα Κώδικα 10-32 φαίνεται ένα παράδειγμα χρήσης αυτού του τύπου παραμέτρων.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-32 | Παράμετροι με διπλό αστερίσκο – εμφάνιση τιμών</figcaption><img src="media/ListaKodika-10-32_fmt.png" alt=""/></figure>
				<p class="no-indent">Η κλήση (γραμμή 6) της συνάρτησης γίνεται με ονομαστικά δεδομένα. Αυτά τοποθετούνται στο λεξικό <span class="courier-code">kwargs</span> και μετά μπορούν να χρησιμοποιηθούν με οποιονδήποτε τρόπο χειρισμού ενός λεξικού.</p>
				<p>Το αποτέλεσμα των εντολών <span class="courier-code">print</span> είναι:</p>
				<p><span class="courier-code">{&apos;r&apos;: 5, &apos;π&apos;: 3.14}</span></p>
				<p><span class="courier-code">r = 5</span></p>
				<p><span class="courier-code">π = 3.14</span></p>
				<p class="no-indent">Το Παράδειγμα 10-12 θα μπορούσε να γραφτεί με συνδυασμένη χρήση παραμέτρων, όπως στη Λίστα Κώδικα 10-33.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-33 | Παράμετροι με διπλό αστερίσκο – βαθμοί</figcaption><img src="media/ListaKodika-10-33_fmt.png" alt=""/></figure>
				<p class="no-indent">H <span class="courier-code">for</span> στη γραμμή 3 σαρώνει το λεξικό <span class="courier-code">courses</span> και εμφανίζει τα στοιχεία του. Τα αποτελέσματα που τυπώνονται στην οθόνη είναι:</p>
				<p><span class="courier-code">Ο/H φοιτητής Γιώργος πήρε</span></p>
				<p><span class="courier-code">Μάθημα: Python Βαθμός: 10</span></p>
				<p><span class="courier-code">Μάθημα: C Βαθμός: 6</span></p>
				<p><span class="courier-code">Ο/H φοιτητής Έφη πήρε</span></p>
				<p><span class="courier-code">Μάθημα</span><span class="courier-code">: Αλγόριθμοι Βαθμός: 8</span></p>
				<p><span class="courier-code">Μάθημα: Python Βαθμός: 9</span></p>
				<p><span class="courier-code">Μάθημα: ASP Βαθμός: 7</span></p>
			</section>
		</section>
		<section role="section" id="ch12se8">
			<h1><span role="label">10.8</span> Ειδικές περιπτώσεις συναρτήσεων</h1>
			<section role="subsection" id="ch12se8ss1">
				<h1><span role="label">10.8.1</span> Η συνάρτηση <span class="courier-code">main</span></h1>
				<p class="no-indent">Κάθε βιβλιοθήκη που εισάγεται μέσα σε ένα πρόγραμμα με την εντολή <span class="courier-code">import</span> αποκτά το δικό της όνομα στον χώρο ονομάτων του διερμηνευτή. Κάθε οντότητα έχει το δικό της όνομα. Το όνομα αυτό φαίνεται με τη μέθοδο <span class="courier-code">__name__</span> κάθε αντικειμένου. Για παράδειγμα, δίνοντας την παρακάτω εντολή:</p>
				<p><span class="courier-code">import math</span></p>
				<p class="no-indent">εισάγεται το module <span class="courier-code">math</span> στον διερμηνευτή. Το όνομά του φαίνεται με την εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; math.__name__</span></p>
				<p><span class="courier-code">&apos;math&apos;</span></p>
				<p class="no-indent">Εξ ορισμού, ο χώρος ονομάτων ενός σεναρίου που γράφεται σε κάποιο συντάκτη, ή ο κώδικας που εκτελείται στην κονσόλα της γλώσσας, έχει το όνομα <span class="courier-code">__main__</span>. Δίνοντας την παρακάτω εντολή στην κονσόλα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; __name__</span></p>
				<p class="no-indent">επιστρέφεται το όνομα του τρέχοντος χώρου ονομάτων, που είναι:</p>
				<p><span class="courier-code">&apos;__main__&apos;</span></p>
				<p class="no-indent">Το ίδιο θα εμφανιστεί (<span class="courier-code">__main__</span>) αν, στο τρέχον σενάριο, που είναι ενεργό σε ένα IDE, δοθεί η επόμενη εντολή:</p>
				<p><span class="courier-code">print(__</span><span class="courier-code">name__)</span></p>
				<p class="no-indent">Αυτό το χαρακτηριστικό είναι χρήσιμο, σε κάποιες περιπτώσεις, και μπορεί να χρησιμοποιηθεί ως σημείο εκκίνησης του προγράμματος. Τι σημαίνει αυτό; Κάθε φορά που εκτελείται ένα αρχείο (με επέκταση <span class="courier-code">py</span> στο όνομά του) που περιέχει κώδικα Python, όλες οι εντολές που υπάρχουν σ’ αυτό εκτελούνται από πάνω προς τα κάτω, γραμμή προς γραμμή. Για την καλύτερη οργάνωση του κώδικα, πολύ συχνά, στο τέλος του αρχείου, προστίθενται οι παρακάτω εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-34 | Η συνάρτηση <span class="courier-code">main</span> – εισαγωγή</figcaption><img src="media/ListaKodika-10-34_fmt.png" alt=""/></figure>
				<p class="no-indent">Οι εντολές στη Λίστα Κώδικα 10-34 ξεκινούν με έναν έλεγχο <span class="courier-code">if</span>, όπου ελέγχεται αν εκτελείται κάποιο αρχείο πηγαίου κώδικα και δεν έχει εισαχθεί ως βιβλιοθήκη. Σε αυτή την περίπτωση, ο έλεγχος οδηγεί μέσα στην <span class="courier-code">if</span> και στην κλήση της συνάρτησης <span class="courier-code">main</span>, όπου βρίσκεται ο υπόλοιπος κώδικας του προγράμματος. Αντί του ονόματος <span class="courier-code">main</span> για τη συνάρτηση, θα μπορούσε να χρησιμοποιηθεί οποιοδήποτε άλλο έγκυρο όνομα. Επιλέγεται όμως συνήθως αυτό, για να μοιάζει ο τρόπος εκτέλεσης του προγράμματος με εκείνο που έχει συνηθίσει κάποιος να χρησιμοποιεί στη C, όπου η εκτέλεση του προγράμματος ξεκινάει από τη συνάρτηση <span class="courier-code">main</span>.</p>
				<p>Μόλις εκτελεστεί το πρόγραμμα, στην οθόνη θα εμφανιστεί:</p>
				<p><span class="courier-code">Ακολουθούν οι εντολές του σεναρίου...</span></p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-13</b>: Να γράψετε πρόγραμμα που θα ζητάει έναν αριθμό και θα εμφανίζει όλους τους αριθμούς που τον διαιρούν.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί η Λίστα Κώδικα 10-35 με τις απαραίτητες εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-35 | Η συνάρτηση <span class="courier-code">main</span> – διαιρέτες</figcaption><img src="media/ListaKodika-10-35_fmt.png" alt=""/></figure>
				<p class="no-indent">Η εντολή <span class="courier-code">if</span> θα πρέπει να βρίσκεται στο τέλος και οι συναρτήσεις να έχουν ήδη δηλωθεί πιο πάνω. Αυτό είναι απαραίτητο, γιατί, πριν γίνει η κλήση μιας συνάρτησης, θα πρέπει να είναι ήδη γνωστό το όνομά της από τον διερμηνευτή. Η εκτέλεση ξεκινάει με την <span class="courier-code">if</span> (γραμμή 13), όπου καλείται η <span class="courier-code">main</span>. Ο έλεγχος περνάει στη <span class="courier-code">main</span>, η οποία δέχεται έναν αριθμό, μέσω της <span class="courier-code">input</span> (γραμμή 9). Αμέσως μετά καλείται η συνάρτηση <span class="courier-code">calc</span>, η οποία δέχεται τον αριθμό και δημιουργεί μια λίστα με όλους τους διαιρέτες του αριθμού που δόθηκε. Η λίστα αυτή επιστρέφεται πίσω στη <span class="courier-code">main</span>, όπου γίνεται η εμφάνιση των αριθμών που περιέχει και εκεί τελειώνει η εκτέλεση του προγράμματος. Δοκιμάζοντας μια εκτέλεση του κώδικα με την τιμή 20, στην οθόνη θα εμφανιστούν:</p>
				<p><span class="courier-code">Δώσε έναν</span><span class="courier-code"> αριθμό:20</span></p>
				<p><span class="courier-code">1 2 4 5 10 20</span></p>
			</section>
			<section role="subsection" id="ch12se8ss2">
				<h1><span role="label">10.8.2</span> Το «κλείσιμο»</h1>
				<p class="no-indent">Όπως αναφέρθηκε σε προηγούμενη ενότητα, η Python επιτρέπει τη δημιουργία συναρτήσεων μέσα σε άλλες. Λαμβάνοντας υπόψη το γεγονός ότι ένας τοπικός χώρος ονομάτων, που ενσωματώνει όλες τις μεταβλητές μιας συνάρτησης, χάνει το περιεχόμενό του μετά την εκτέλεση της συνάρτησης, γίνεται εύκολα αντιληπτό το πόσο σημαντική είναι η διαχείριση των δεδομένων πριν, κατά τη διάρκεια και μετά την εκτέλεση μιας συνάρτησης. Οι <i>ένθετες συναρτήσεις (inner </i><i>functions)</i>, εκτός από την καλύτερη οργάνωση του κώδικα σε τμήματα, προσφέρουν μια ακόμα λειτουργία, το λεγόμενο «<i>κλείσιμο</i>» <i>(closure)</i>. Το κλείσιμο, ή ολοκλήρωση, επιτρέπει τη διατήρηση της τιμής μιας συνάρτησης, ακόμα και μετά τον τερματισμό της. Η τιμή αυτή μπορεί να χρησιμοποιηθεί πολλαπλές φορές, σε διαδοχικές κλήσεις. Η Λίστα Κώδικα 10-36 κάνει χρήση αυτής της λειτουργίας.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-36 | Κλείσιμο – υπολογισμός xy</figcaption><img src="media/ListaKodika-10-36_fmt.png" alt=""/></figure>
				<p class="no-indent">Μετά τον ορισμό των ένθετων συναρτήσεων (γραμμές 1 έως 4) ακολουθεί η κλήση τους. Η κλήση της <span class="courier-code">f1</span> (εξωτερικής συνάρτησης, στη γραμμή 6) περιλαμβάνει τιμή για την παράμετρο <span class="courier-code">x</span>. Το αποτέλεσμα της <span class="courier-code">f1</span>, που είναι στην ουσία κλήση της (εσωτερικής) συνάρτησης <span class="courier-code">f</span><span class="courier-code">2</span>, δίνεται στη μεταβλητή <span class="courier-code">f</span>. Η <span class="courier-code">f</span>, αν τυπωθεί με την εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; f</span></p>
				<p class="no-indent">εμφανίζει την πληροφορία: </p>
				<p><span class="courier-code">&lt;function __main__.f1.&lt;locals&gt;.f2&gt;</span></p>
				<p class="no-indent">όπου φαίνεται ότι είναι αντικείμενο τύπου συνάρτησης σχετικό με την <span class="courier-code">f2</span>. Στο εσωτερικό της η <span class="courier-code">f</span> έχει ακόμη πρόσβαση στον χώρο ονομάτων όπου καταχωρήθηκε το <span class="courier-code">3</span>, στην τοπική μεταβλητή <span class="courier-code">x</span>. Έτσι, κάθε κλήση της <span class="courier-code">f</span> με τη συνοδεία μιας ακόμη τιμής, που θα δοθεί στην παράμετρο <span class="courier-code">y</span>, συνεχίζει να χρησιμοποιεί την τιμή <span class="courier-code">x=3</span> και να επιστρέφει σχετικά με αυτήν αποτελέσματα. Από εδώ και πέρα, η <span class="courier-code">f</span> μπορεί να κληθεί πολλές φορές, με διαφορετικές παραμέτρους κάθε φορά (γραμμή 7) και όχι μόνο. Στην εντολή της γραμμής 7, γίνεται χρήση της <span class="courier-code">f</span> με όρισμα το <span class="courier-code">10</span>. Έτσι, καλείται η <span class="courier-code">f2</span>, με την τιμή <span class="courier-code">10</span> να περνάει στην παράμετρο <span class="courier-code">y</span>. Εκεί θα γίνει ο υπολογισμός <span class="courier-code">x**y</span>, όπου το <span class="courier-code">x</span> υπάρχει ήδη μέσα στην <span class="courier-code">f</span>. Η κλήση θα ολοκληρωθεί, με το αποτέλεσμα <span class="courier-code">59049</span> να τυπώνεται στην οθόνη (γιατί <span class="courier-code">3**10=59049</span>).</p>
				<p>Στη συνέχεια, μπορεί να υπάρχουν πολλά αντικείμενα τύπου <span class="courier-code">f1</span>, που να ενσωματώνουν άλλες αρχικές τιμές για το <span class="courier-code">x</span>. Στη γραμμή 8 δημιουργείται μια ακόμη συνάρτηση (η <span class="courier-code">ff</span>), που περιλαμβάνει την τιμή <span class="courier-code">5</span> για το <span class="courier-code">x</span>. Αυτή λειτουργεί αυτόνομα και ανεξάρτητα σε σχέση με το άλλο αντίγραφο (το <span class="courier-code">f</span>) και μπορεί να χρησιμοποιηθούν και οι δυο, χωρίς προβλήματα (γραμμή 9), αφού η καθεμιά τους έχει πρόσβαση σε διαφορετικές πληροφορίες.</p>
				<p>Τα αποτελέσματα που τυπώνονται στην οθόνη είναι:</p>
				<p><span class="courier-code">59049 243</span></p>
				<p><span class="courier-code">125 625 27</span></p>
				<p class="no-indent">Ακολουθεί ένα ακόμη παράδειγμα με τη λειτουργία του κλεισίματος.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-37 | Κλείσιμο – εμφάνιση μηνύματος</figcaption><img src="media/ListaKodika-10-37_fmt.png" alt=""/></figure>
				<p class="no-indent">Με την εκτέλεση του προγράμματος στη Λίστα Κώδικα 10-37, θα εμφανιστεί το μήνυμα:</p>
				<p><span class="courier-code">Άκου κόσμε... Η Python τα... σπάει!</span></p>
			</section>
			<section role="subsection" id="ch12se8ss3">
				<h1><span role="label">10.8.3</span> Ενσωματώνοντας συναρτήσεις </h1>
				<p class="no-indent">Οι συναρτήσεις είναι αντικείμενα πρώτης κλάσης. Αυτό σημαίνει ότι μπορούν να ενσωματωθούν σε άλλες δομές, όπως λίστες, πλειάδες κ.λπ., αλλά και σε συναρτήσεις ως ορίσματα. Το επόμενο παράδειγμα περιγράφει την περίπτωση χρήσης συναρτήσεων ως στοιχείων μιας λίστας.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 10-38 | Ενσωματώνοντας συναρτήσεις</figcaption><img src="media/ListaKodika-10-38_fmt.png" alt=""/></figure>
				<p class="no-indent">Μετά την εισαγωγή της βιβλιοθήκης <span class="courier-code">math</span> (γραμμή 1), δηλώνεται η συνάρτηση <span class="courier-code">f</span> (γραμμή 2). Δέχεται δυο παραμέτρους, από τις οποίες η 2η έχει <i>προκαθορισμένη (default</i><i>)</i> τιμή 3 και επιστρέφει την παράσταση <i>xy</i>. Στη γραμμή 5 δημιουργείται μια νέα λίστα, που περιέχει διαφορετικά είδη συναρτήσεων:</p>
				<ul><li>την ενσωματωμένη συνάρτηση <span class="courier-code">abs</span>, για τον υπολογισμό της απόλυτης τιμής ενός αριθμού,</li>
				<li>τη συνάρτηση <span class="courier-code">sqrt</span> της βιβλιοθήκης <span class="courier-code">math</span>, που υπολογίζει την τετραγωνική ρίζα ενός αριθμού,</li>
				<li>μια <i>συνάρτηση</i><i> οριζόμενη από τον χρήστη (user-defined function),</i> την <span class="courier-code">f</span>, που δέχεται μια ή δυο παραμέτρους και επιστρέφει την παράσταση <i>xy</i> και</li>
				<li>μια ανώνυμη συνάρτηση <span class="courier-code">lambda</span> (περιγράφεται σε επόμενη ενότητα), που υπολογίζει, για έναν αριθμό <span class="courier-code">x</span>, την παράσταση <i>x</i><sup class="superscript CharOverride-1">2</sup>.</li>
				</ul><p class="no-indent">Οι συναρτήσεις τοποθετούνται μέσα στη λίστα χρησιμοποιώντας μόνο τα ονόματά τους. Αυτό σημαίνει ότι καταχωρούνται στη λίστα νέα αντικείμενα τύπου συνάρτησης. Η εμφάνιση του περιεχομένου της λίστας στη γραμμή 6 δείχνει τι ακριβώς περιέχει αυτή. Η κλήση της κάθε συνάρτησης γίνεται με δεικτοδότηση της λίστας (γραμμές 11-19). Για παράδειγμα, γράφοντας την εντολή της γραμμής 13:</p>
				<p><span class="courier-code">&gt;&gt;&gt; myfunctions[0](-2)</span></p>
				<p class="no-indent">παρέχεται πρόσβαση στη συνάρτηση που υπάρχει στην 1η θέση (θέση 0) της λίστας, που είναι η συνάρτηση <span class="courier-code">abs</span>, ενώ η τιμή μέσα στις παρενθέσεις (το <span class="courier-code">-2</span>) θα δοθεί ως τιμή στην παράμετρο που χρειάζεται η συγκεκριμένη συνάρτηση. Έτσι, με την παραπάνω εντολή καλείται η συνάρτηση <span class="courier-code">abs</span> και υπολογίζει την απόλυτη τιμή του αριθμού <span class="courier-code">-2</span>, επιστρέφοντας το αποτέλεσμα <span class="courier-code">2</span> (γραμμή 14).</p>
				<p>Αντίστοιχες είναι και οι κλήσεις στις γραμμές 15, 17 και 19. Όπου χρειάζονται δυο παράμετροι, θα πρέπει να δίνονται στις παρενθέσεις μετά τον δείκτη της λίστας.</p>
				<p>Μια ακόμη χρήση λίστας που περιέχει συναρτήσεις φαίνεται στις γραμμές 21 και 22. Εδώ, καλείται κάθε συνάρτηση με σάρωση της λίστας μέσα από μια δομή <span class="courier-code">for</span>. Οι περιπτώσεις όπου το πλήθος των παραμέτρων είναι διαφορετικό, για κάθε συνάρτηση που υπάρχει στη λίστα, αντιμετωπίζονται εύκολα (όπως στη γραμμή 2), θέτοντας προκαθορισμένες τιμές σε ορισμένες παραμέτρους, ώστε να μπορούν να κληθούν με λιγότερα ορίσματα.</p>
				<p>Οι παράμετροι των συναρτήσεων μπορεί να είναι διάφορα είδη αντικειμένων – ακόμη και άλλες συναρτήσεις. Αυτό είναι ιδιαίτερα χρήσιμο, ειδικά στις περιπτώσεις όπου χρειάζεται να γίνει κατασκευή συνάρτησης η οποία δεν θα εκτελεί πάντα τις ίδιες ενέργειες και δεν θα ενσωματώνει τις ίδιες λειτουργίες. Χάρη στο χαρακτηριστικό αυτό μπορεί να δημιουργηθεί συνάρτηση οι λειτουργίες της οποίας θα καθορίζονται κατά τη διάρκεια εκτέλεσης του προγράμματος. Αυτή η λειτουργία φαίνεται στο παρακάτω παράδειγμα της Λίστας Κώδικα 10-39.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-39 | Συναρτήσεις παράμετροι</figcaption><img src="media/ListaKodika-10-39_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 2 δημιουργείται λίστα με κάποιες συναρτήσεις. Η εκτέλεση του προγράμματος συνεχίζεται με τη γραμμή 13, όπου καλείται η συνάρτηση <span class="courier-code">menu</span>. Αυτή εμφανίζει στην οθόνη τις ονομασίες των διαθέσιμων συναρτήσεων (που βρίσκονται στη λίστα <span class="courier-code">functions</span>). Ο χρήστης θα πρέπει να επιλέξει μια από αυτές δίνοντας τον αύξοντα αριθμό της. Ζητείται επίσης και ένας ακόμη αριθμός, ο οποίος θα αποτελεί το όρισμα της συνάρτησης που έχει επιλέξει. Στη γραμμή 14, καλείται η συνάρτηση <span class="courier-code">calc</span> με ορίσματα τον αριθμό <span class="courier-code">num</span> και τη συνάρτηση που έχει επιλέξει ο χρήστης. Η συνάρτηση ανακτάται από τη λίστα <span class="courier-code">functions</span>. Η <span class="courier-code">calc</span> επιστρέφει το αποτέλεσμα της επιλεγμένης συνάρτησης, η οποία τρέχει στη γραμμή 11. </p>
				<p>Μια δοκιμαστική εκτέλεση του προγράμματος της Λίστας Κώδικα 10-39 φαίνεται στις παρακάτω γραμμές:</p>
				<p><span class="courier-code">Επιλέξτε: </span></p>
				<p><span class="courier-code">0:abs</span></p>
				<p><span class="courier-code">1:log10</span></p>
				<p><span class="courier-code">2:sin</span></p>
				<p><span class="courier-code">3:cos</span></p>
				<p><span class="courier-code"><b>1</b></span></p>
				<p><span class="courier-code">Δώσε και έναν αριθμό:</span><span class="courier-code"><b>100</b></span></p>
				<p><span class="courier-code">Το αποτέλεσμα είναι: 2.0</span></p>
				<p class="no-indent">Ακολουθεί ένα ακόμη παράδειγμα, στη Λίστα Κώδικα 10-40, με τη χρήση συναρτήσεων ως παραμέτρων και επιστρεφόμενων τιμών.</p>
				
				<figure class="lista-kodika">
					<figcaption> <img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-40 | Συναρτήσεις – παράμετροι &amp; ορίσματα</figcaption><img src="media/ListaKodika-10-40_fmt.png" alt=""/></figure>
				<p class="no-indent">Αφού γίνει η εισαγωγή όλου του περιεχομένου της βιβλιοθήκης <span class="courier-code">math</span> στη γραμμή 1, το πρόγραμμα συνεχίζει την εκτέλεσή του με τη γραμμή 7. Ζητείται από τον χρήστη να πληκτρολογήσει το όνομα μιας οποιασδήποτε συνάρτησης της βιβλιοθήκης <span class="courier-code">math</span>. Αυτή η ονομασία καταχωρείται στη μεταβλητή <span class="courier-code">f</span>. Αφού ζητηθεί και ένας ακόμη αριθμός (<span class="courier-code">num</span>), στη γραμμή 8, γίνεται κλήση της συνάρτησης <span class="courier-code">calc</span> (γραμμή 9). Ως ορίσματα τίθενται η ονομασία της συνάρτησης που έχει επιλέξει ο χρήστης, μαζί με τον αριθμό <span class="courier-code">num</span>. Η <span class="courier-code">calc</span> θα επιστρέψει την τιμή της συνάρτησης του χρήστη στη γραμμή 5. Αν δεν μπορεί να γίνει ο υπολογισμός, όπως για παράδειγμα για αρνητικές υπόριζες ποσότητες, τότε επιστρέφει ένα κατάλληλο μήνυμα. Σε κάθε περίπτωση, το αποτέλεσμα της <span class="courier-code">calc</span> επιστρέφεται πίσω στην <span class="courier-code">print</span>, η οποία το τυπώνει στην οθόνη. Ακολουθούν δυο δοκιμαστικές εκτελέσεις του προγράμματος:</p>
				<p><span class="courier-code">Δώσε τη συνάρτηση που θες:</span><span class="courier-code"><b>sqrt</b></span></p>
				<p><span class="courier-code">Δώσε </span><span class="courier-code">έναν αριθμό:</span><span class="courier-code"><b>25</b></span></p>
				<p><span class="courier-code">5.0</span></p>
				<p class="no-indent">Η επόμενη εκτέλεση καλύπτει την περίπτωση που δοθεί αρνητικός αριθμός για τη συνάρτηση <span class="courier-code">sqrt</span>:</p>
				<p><span class="courier-code">Δώσε τη συνάρτηση που θες:</span><span class="courier-code"><b>sqrt</b></span></p>
				<p><span class="courier-code">Δώσε έναν αριθμό:</span><span class="courier-code"><b>-25</b></span></p>
				<p><span class="courier-code">Δεν ορίζεται</span></p>
			</section>
			<section role="subsection" id="ch12se8ss4">
				<h1><span role="label">10.8.4</span> Ανώνυμες συναρτήσεις – συναρτήσεις lambda</h1>
				<p class="no-indent">Ένα διαφορετικό είδος συναρτήσεων που υποστηρίζει η Python είναι οι ανώνυμες συναρτήσεις – συναρτήσεις μιας γραμμής, χωρίς όνομα. Δεν χρειάζεται να οριστούν πρώτα, ώστε να μπορούν να κληθούν αργότερα. Ο ορισμός τους καθορίζει το σημείο στο οποίο θα εκτελεστούν. Η γενική μορφή τους είναι: </p>
				<p><span class="courier-code">lambda παράμετροι : έκφραση</span></p>
				<p class="no-indent">όπου <span class="courier-code">παράμετροι</span> είναι μία ή περισσότερες μεταβλητές που χρειάζονται για τη μεταφορά τιμών στη συνάρτηση, ενώ <span class="courier-code">έκφραση</span> είναι μια οποιαδήποτε εκτελέσιμη λειτουργία. Το αποτέλεσμα που δίνει αυτή η έκφραση θα πρέπει να είναι κατάλληλο με την εντολή στην οποία χρησιμοποιείται. </p>
				<p>Τα χαρακτηριστικά του συνοψίζονται στα παρακάτω:</p>
				<ul><li>Ξεκινούν πάντα με τη λέξη κλειδί <span class="courier-code">lambda</span>.</li>
				<li>Δέχονται παραμέτρους.</li>
				<li>Περιέχουν μόνο μια εκτελέσιμη εντολή (<span class="courier-code">έκφραση</span>).</li>
				<li>Ενσωματώνονται άμεσα σε άλλες εντολές ή συναρτήσεις.</li>
				<li>Δηλώνονται στο σημείο όπου χρησιμοποιούνται.</li>
				<li>Έχουν ισχύ μόνο σε ένα σημείο, εκεί όπου θα εκτελεστούν.</li></ul>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-14</b>: Να γράψετε πρόγραμμα που για μια δοσμένη λίστα <span class="courier-code">l</span>, η οποία περιέχει ακέραιους αριθμούς, θα εμφανίζει:</p>
				</blockquote>
				<p class="arabic-level-2"><span>4.</span>Τα τετράγωνα των αριθμών της λίστας.</p>
				<p class="arabic-level-2"><span>5.</span>Νέα λίστα που θα περιέχει μόνο τους θετικούς αριθμούς.</p>
				<p class="arabic-level-2"><span>6.</span>Νέα λίστα που θα περιέχει μόνο τους θετικούς άρτιους αριθμούς.</p>
				<p class="arabic-level-2"><span>7.</span>Τις τετραγωνικές ρίζες των αριθμών της λίστας <span class="courier-code">l</span> (όπου φυσικά μπορεί να γίνει ο υπολογισμός).</p>
				<p class="no-indent">Ακολουθεί η Λίστα Κώδικα 10-41 με τις απαραίτητες εντολές.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-41 | Ανώνυμες συναρτήσεις</figcaption><img src="media/ListaKodika-10-41_fmt.png" alt=""/></figure>
				<p class="no-indent">Η μεταβλητή <span class="courier-code">f</span> (γραμμή 2) είναι μια συνάρτηση τύπου <span class="courier-code">lambda</span>. Αυτό φαίνεται αν στην κονσόλα δοθεί το όνομά της· εμφανίζει τότε την πληροφορία:</p>
				<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> f</span></p>
				<p><span class="courier-code">&lt;function __main__.&lt;lambda&gt;&gt;</span></p>
				<p class="no-indent">Η μεταβλητή <span class="courier-code">x</span> λειτουργεί ως παράμετρος. Σ’ αυτήν δίνονται οι τιμές του <span class="courier-code">i</span> στη σύνθεση λίστας της γραμμής 4. Η συνάρτηση <span class="courier-code">filter</span> φιλτράρει τα δεδομένα της λίστας <span class="courier-code">l</span> στη γραμμή 7, εφαρμόζοντας μια ανώνυμη συνάρτηση που ελέγχει αν κάθε στοιχείο της λίστας είναι θετικός αριθμός. Παρόμοια λειτουργία έχει και η <span class="courier-code">filter</span> στη γραμμή 10, χρησιμοποιώντας μια λίγο πιο σύνθετη συνάρτηση <span class="courier-code">lambda</span>. </p>
				<p>Η εντολή <span class="courier-code">print</span> στη γραμμή 13 ξεκινά με το φιλτράρισμα της λίστας χρησιμοποιώντας μια συνάρτηση <span class="courier-code">lambda</span>. Το αποτέλεσμά της δίνεται στη συνάρτηση <span class="courier-code">map</span>, όπου εφαρμόζεται σε κάθε στοιχείο η συνάρτηση <span class="courier-code">sqrt</span>. Το αποτέλεσμα, τέλος, της <span class="courier-code">map</span>, με τη βοήθεια του αστερίσκου, ξεπακετάρεται και τυπώνεται στην οθόνη.</p>
				<p class="no-indent">Τα αποτελέσματα που δίνει το πρόγραμμα της Λίστας Κώδικα 10-41 είναι: </p>
				<p><span class="courier-code">[1, 9, 36, 16, 625, 1, 4, 20736]</span></p>
				<p class="no-indent">(για τα τετράγωνα των αριθμών της λίστας),</p>
				<p><span class="courier-code">[3, 6, 25, 1, 144]</span></p>
				<p class="no-indent">(για τους θετικούς αριθμούς της λίστας),</p>
				<p><span class="courier-code">[6, 144]</span></p>
				<p class="no-indent">(για τους θετικούς άρτιους αριθμούς της λίστας) και</p>
				<p><span class="courier-code">1.7320508075688772 2.449489742783178 5.0 1.0 12.0</span></p>
				<p class="no-indent">(για την τετραγωνική ρίζα, μόνο των θετικών αριθμών της λίστας).</p>
				<p>Οι ανώνυμες συναρτήσεις μπορεί να χρησιμοποιηθούν ως ένθετες μέσα σε άλλες συναρτήσεις, με τον ίδιο τρόπο που γίνεται ένα «κλείσιμο». Στη Λίστα Κώδικα 10-42 περιγράφεται αυτή η λειτουργία.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-42 | Ένθετες συναρτήσεις <span class="courier-code">lambda</span></figcaption><img src="media/ListaKodika-10-42_fmt.png" alt=""/></figure>
				<p class="no-indent">Μόλις τρέξει το πρόγραμμα, η <span class="courier-code">g</span> θα γίνει αντίγραφο της <span class="courier-code">f</span>, όπου θα «αποθηκευτεί» η δοσμένη τιμή <span class="courier-code">10</span>. Σε κάθε κλήση της <span class="courier-code">g</span>, το <span class="courier-code">10</span> είναι ήδη γνωστό. Αφού δοθεί στη γραμμή 5 μια νέα τιμή (το <span class="courier-code">5</span>), επιστρέφεται το αποτέλεσμα της έκφρασης που υπάρχει στη συνάρτηση <span class="courier-code">lambda</span>, δηλαδή <span class="courier-code">15</span>. Μόλις ξανακληθεί (γραμμή 6), δίνει νέο αποτέλεσμα (<span class="courier-code">13</span>), με βάση το νέο όρισμα που θα δεχθεί (<span class="courier-code">3</span>).</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-15</b>: Να γράψετε τμήμα προγράμματος που θα ταξινομεί μια δοσμένη λίστα με τα τεμάχια και την αξία των πωλήσεων. Η ταξινόμηση να γίνει σε αύξουσα διάταξη, με βάση την αξία (από τη μικρότερη στη μεγαλύτερη).</p>
				</blockquote>
				<p class="no-indent">Το πρόγραμμα αποτελείται από τις επόμενες δυο γραμμές στη Λίστα Κώδικα 10-43.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-43 | Χρήση ανώνυμων συναρτήσεων</figcaption><img src="media/ListaKodika-10-43_fmt.png" alt=""/></figure>
				<p class="no-indent">Το πρόγραμμα χρησιμοποιεί τη συνάρτηση <span class="courier-code">sorted</span>, που ταξινομεί ένα επαναληπτικό αντικείμενο. Για να γίνει η ταξινόμηση με βάση κάποιο κριτήριο, θα πρέπει να χρησιμοποιηθεί το όρισμα <span class="courier-code">key</span>. Σε αυτό το όρισμα δίνεται η συνάρτηση <span class="courier-code">lambda</span> που καθορίζει το στοιχείο κάθε πλειάδας με βάση το οποίο θα γίνει η ταξινόμηση (<span class="courier-code">value[1]</span>, δηλαδή το 2ο στοιχείο, της θέσης 1, κάθε πλειάδας). Στο τέλος, η <span class="courier-code">print</span> θα εμφανίσει, ξεπακετάροντας (<span class="courier-code">*</span>), το ταξινομημένο περιεχόμενο της λίστας:</p>
				<p><span class="courier-code">(120, 1200) (85, 1600) (55, 2500)</span></p>
				<p class="no-indent">σε αύξουσα διάταξη, σύμφωνα με το 2ο στοιχείο κάθε πλειάδας.</p>
			</section>
		</section>
		<section role="section" id="ch12se9">
			<h1><span role="label">10.9</span> Αναδρομή</h1>
			<p class="no-indent">Μια συνάρτηση μπορεί να κληθεί από οποιοδήποτε σημείο μέσα στον κώδικα, ακόμα και από άλλη συνάρτηση, αρκεί να έχει ήδη οριστεί πριν από την κλήση της. Υπάρχει επίσης η δυνατότητα μια συνάρτηση να καλέσει «τον εαυτό» της. Μπορεί δηλαδή, μέσα στον κώδικά της, να υπάρχουν μία ή περισσότερες εντολές που να καλούν την ίδια τη συνάρτηση, με το όνομά της και τα ορίσματα που δέχεται. Αυτή η διαδικασία ονομάζεται <i>αναδρομή (recursion)</i>, ενώ η συνάρτηση που τη χρησιμοποιεί με την αντίστοιχη κλήση λέγεται <i>αναδρομική (recursive</i><i> function-call)</i>. </p>
			<p>Σε κάθε αναδρομική κλήση μιας συνάρτησης αποστέλλονται όλα τα απαιτούμενα δεδομένα μέσω των παραμέτρων της. Κάποιο όμως ή κάποια από τα δεδομένα θα σταλούν, με κάθε νέα κλήση, κατάλληλα τροποποιημένα. Αυτή η τροποποίηση των στοιχείων θα πρέπει να γίνει με τέτοιο τρόπο, ώστε μέσα από κάθε κλήση να αρχίσει να μειώνεται το μέγεθος των δεδομένων. Η αλλαγή των δεδομένων είναι σημαντική, γιατί θα αποτελέσει το κριτήριο τερματισμού των αναδρομικών κλήσεων. Αφού ξεκινήσει να καλείται αναδρομικά μια συνάρτηση, οι κλήσεις, αν δεν ληφθεί μέριμνα να σταματούν κάτω από ορισμένες συνθήκες, μπορεί να μη σταματήσουν ποτέ. Αυτό στην πράξη, βέβαια, δεν συμβαίνει, αφού κάποια στιγμή, μετά από πολλές κλήσεις, τα δεδομένα θα είναι υπερβολικά πολλά για να χωρέσουν στη μνήμη και ο διερμηνευτής θα τερματίσει τη διαδικασία εμφανίζοντας κάποιο σφάλμα. </p>
			<p>Έτσι, αν οι αναδρομικές κλήσεις συνεχιστούν για πολύ (πόσο πολύ, εξαρτάται από τη φύση του προβλήματος και από τον όγκο των δεδομένων), τότε μπορεί η εκτέλεση του προγράμματος να μην μπορέσει να ολοκληρωθεί. </p>
			<p>Η αναδρομή θα πρέπει κάποια στιγμή να σταματήσει. Είναι απαραίτητος ο ορισμός ενός κριτηρίου που θα καθορίζει τον τερματισμό της. Το κριτήριο αυτό, συνήθως, ελέγχει εάν, μετά τις αλλεπάλληλες κλήσεις της ίδιας συνάρτησης με ολοένα και λιγότερα δεδομένα, έχουν φτάσει τα δεδομένα αυτά σε σημείο που δεν μπορούν να διασπαστούν άλλο. Τότε ξεκινάει η διαδικασία επιστροφής τιμών προς τα πίσω, εκεί από όπου ξεκίνησαν οι κλήσεις. Σε κάθε επιστροφή, θα πρέπει να επιστρέψουν και τα αποτελέσματα της επεξεργασίας δεδομένων που έγιναν στην προηγούμενη κλήση και να συνδυαστούν με τα δεδομένα που υπάρχουν στον τοπικό χώρο ονομάτων. Κάθε φορά που επιστρέφει το πρόγραμμα από μια αναδρομική κλήση στην αμέσως προηγούμενη, ο διερμηνευτής ανασύρει από τη μνήμη όλα τα τοπικά δεδομένα που είχε αποθηκεύσει πριν κάνει την κλήση. Η διαδικασία της αναδρομής γίνεται πιο εύκολα κατανοητή με ένα παράδειγμα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-16</b>: Να γράψετε τμήμα προγράμματος που θα υπολογίζει το άθροισμα των αριθμών μιας λίστας.</p>
			</blockquote>
			<p class="no-indent">Κάτι τέτοιο θα μπορούσε να γίνει εύκολα και γρήγορα με τη χρήση της ενσωματωμένης συνάρτησης <span class="courier-code">sum</span>. Αυτή η λειτουργία φαίνεται στη Λίστα Κώδικα 10-44.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-44 | Υπολογισμός αθροίσματος με συνάρτηση</figcaption><img src="media/ListaKodika-10-44_fmt.png" alt=""/></figure>
			<p class="no-indent">Το αποτέλεσμα που εμφανίζεται στην οθόνη είναι:</p>
			<p><span class="courier-code">15</span></p>
			<p class="no-indent">Ένας άλλος τρόπος, που προσεγγίζει τον τρόπο λειτουργίας παραδοσιακών γλωσσών όπως η C, είναι και αυτός της Λίστας Κώδικα 10-45.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-45 | Υπολογισμός αθροίσματος με δεικτοδότηση</figcaption><img src="media/ListaKodika-10-45_fmt.png" alt=""/></figure>
			<p class="no-indent">ενώ η <span class="courier-code">for</span> της Python μπορεί να διευκολύνει περισσότερο τα πράγματα:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-46 | Υπολογισμός αθροίσματος με αθροιστή</figcaption><img src="media/ListaKodika-10-46_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">s</span> είναι ένας απλός αθροιστής, όπου μέσα του συσσωρεύεται το άθροισμα των στοιχείων της λίστας. Ο αναδρομικός κώδικας για το ίδιο πρόβλημα φαίνεται στη Λίστα Κώδικα 10-47.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-47 | Άθροισμα λίστας με αναδρομή</figcaption><img src="media/ListaKodika-10-47_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα θα εμφανίσει τα παρακάτω αποτελέσματα στην οθόνη:</p>
			<p><span class="courier-code">[1, 3, 4, 7]</span></p>
			<p><span class="courier-code">[3, 4, 7]</span></p>
			<p><span class="courier-code">[4, 7]</span></p>
			<p><span class="courier-code">[7]</span></p>
			<p><span class="courier-code">Το άθροισμα είναι: 15</span></p>
			<p class="no-indent">Ξεκινά η εκτέλεση με τη δημιουργία μιας νέας λίστας (γραμμή 1) και τον ορισμό της συνάρτησης <span class="courier-code">rsum</span> (<i>recursive sum</i>) στη γραμμή 2. Καλείται αρχικά (γραμμή 9) η <span class="courier-code">rsum</span>, ως όρισμα της <span class="courier-code">print</span>. Ο έλεγχος περνάει στη συνάρτηση, ενώ στη γραμμή 7 είναι το σημείο όπου η λίστα σπάει σε μια μικρότερη και αποστέλλεται (χωρίς το 1ο στοιχείο της) ως όρισμα στην <span class="courier-code">rsum</span>. Έτσι, ξεκινάει η αναδρομή. Η διαδικασία των αναδρομικών κλήσεων συνεχίζεται με την αποστολή ολοένα και μικρότερου τμήματος της λίστας. Μόλις μείνει μόνο ένα στοιχείο στη λίστα, η αναδρομή σταματά (γραμμή 4, 3η κλήση) και ξεκινά μια σειρά επιστροφών στο σημείο όπου είχε γίνει καθεμιά από τις αναδρομικές κλήσεις. Κάθε επιστροφή συνοδεύεται με ένα άθροισμα, που έχει υπολογιστεί από την προηγούμενη κλήση, μαζί με το 1ο στοιχείο της λίστας, όπως αυτή είχε δοθεί στην αμέσως προηγούμενη κλήση.</p>
			<p>Μετά την τελευταία επιστροφή, η συνάρτηση <span class="courier-code">rsum</span> ολοκληρώνεται και επιστρέφει στην <span class="courier-code">print</span> το άθροισμα που έχει υπολογιστεί (<span class="courier-code">15</span>) και το οποίο τυπώνεται τελικά στην οθόνη.</p>
			<p>Η διαδικασία φαίνεται στο σχήμα της Εικόνας 10-1.</p>
			<figure class="image" id="img47" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 10-1 | Απεικόνιση αναδρομικής κλήσης της <span class="courier-code">rsum</span></figcaption><img src="media/chapter_10_image_1.jpg" alt=""/></figure>
			<p class="no-indent">Ο έλεγχος στη γραμμή 3 είναι απαραίτητος, ώστε να μπορέσει να σταματήσει η αναδρομική διαδικασία. Αν μείνει ένα στοιχείο στη λίστα, ξεκινάει η αντίστροφη πορεία επιστροφής και άθροισης των στοιχείων της. Αν δεν υπάρχει αυτός ο έλεγχος ως κριτήριο τερματισμού της αναδρομής, τότε το πρόγραμμα δεν θα εκτελεστεί σωστά και θα εμφανιστεί μήνυμα όπως:</p>
			<p><span class="courier-code">RecursionError: maximum recursion </span><span class="courier-code">depth exceeded</span></p>
			<p class="no-indent">Παρόμοιο πρόβλημα μπορεί να προκύψει αν η λίστα είναι πολύ μεγάλη. Επειδή ο διερμηνευτής αποθηκεύει όλα τα δεδομένα της συνάρτησης σε κάθε αναδρομική κλήση στη μνήμη (με τη μορφή <i>στοίβας – stack</i>), ώστε να αποκτήσει πρόσβαση σε αυτά μετά από τις επιστροφές, υπάρχει πιθανότητα η στοίβα να γεμίσει και να προκληθεί σφάλμα <i>υπερχείλισης</i><i> της στοίβας (stack overflow)</i>. Σε κάθε περίπτωση, χρειάζεται ιδιαίτερος χειρισμός και προσοχή, ώστε ο κώδικας της αναδρομής να είναι αποδοτικός και η εκτέλεσή του να γίνεται με ασφάλεια και χωρίς εξαιρέσεις.</p>
			<p>Ακολουθούν μερικά ακόμη παραδείγματα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-17</b>: Να γράψετε συνάρτηση που θα υπολογίζει το άθροισμα των αριθμών από το <span class="courier-code">0</span> μέχρι το <span class="courier-code">n</span>.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-48 | Άθροισμα αριθμών με αναδρομή</figcaption><img src="media/ListaKodika-10-48_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα της Λίστας Κώδικα 10-48 θα εμφανίσει στην οθόνη:</p>
			<p><span class="courier-code">120</span></p>
			<p class="no-indent">Σε κάθε αναδρομική κλήση αποστέλλεται ο προηγούμενος κάθε φορά αριθμός. Η διαδικασία σταματάει όταν ο αριθμός γίνει μηδέν. Κατά την επιστροφή γίνεται προοδευτικά η άθροιση των αριθμών.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-18</b>: Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό <span class="courier-code">n</span> και θα επιστρέφει το πλήθος των ψηφίων του.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-49 | Πλήθος ψηφίων με αναδρομή</figcaption><img src="media/ListaKodika-10-49_fmt.png" alt=""/></figure>
			<p class="no-indent">Για <span class="courier-code">n=234567</span> το πρόγραμμα της Λίστας Κώδικα 10-49 θα εμφανίσει τον αριθμό:</p>
			<p><span class="courier-code">6</span></p>
			<p class="no-indent">που εκφράζει το πλήθος ψηφίων του αριθμού <span class="courier-code">n</span>.</p>
			<p>Πριν από κάθε κλήση ο αριθμός μειώνεται κατά ένα ψηφίο με την ακέραια διαίρεση που γίνεται στη γραμμή 4. Σε κάθε κλήση προστίθεται το <span class="courier-code">n</span> στο αποτέλεσμα που επιστρέφει η συνάρτηση από την αναδρομή.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-19</b>: Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό <i>n</i> και θα επιστρέφει το τελευταίο στοιχείο της ακολουθίας Fibonacci έως το <i>n</i>.</p>
			</blockquote>
			<p class="no-indent">Δίνεται ότι: <i>F</i>0 <span class="math-font">=</span> 0, <i>F</i>1 <span class="math-font">=</span> 1, <i>Fn</i> <span class="math-font">=</span> <i>Fn</i><span class="math-font">−</span>1 <span class="math-font">+</span> <i>Fn</i><span class="math-font">−</span>2</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-50 | Ακολουθία Fibonacci με αναδρομή</figcaption><img src="media/ListaKodika-10-50_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην οθόνη θα τυπωθεί ο αριθμός:</p>
			<img src="media/icon-7_fmt.png" alt=""/>
			<p><span class="courier-code">13&#9;</span><span class="courier60">#η εμφάνιση όλων των όρων αφήνεται ως εξάσκηση</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-20</b>: Να γράψετε συνάρτηση που θα δέχεται μια λίστα αριθμών και θα επιστρέφει το μέγιστο στοιχείο της.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-51 | Εύρεση μεγίστου με αναδρομή</figcaption><img src="media/ListaKodika-10-51_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις εκτελεστεί το πρόγραμμα της Λίστας Κώδικα 10-51, θα εμφανιστεί το μεγαλύτερο στοιχείο της λίστας <span class="courier-code">l</span>:</p>
			<p><span class="courier-code">6</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-21</b>: Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό <i>n</i> και θα επιστρέφει το <i>n</i> παραγοντικό (<i>n</i>!). Το <i>n</i>! ορίζεται ως:</p>
			</blockquote>
			<p class="no-indent"><img src="media/pg445.png" alt=""/></p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-52 | Υπολογισμός n! με αναδρομή</figcaption><img src="media/ListaKodika-10-52_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην οθόνη θα τυπωθεί ο αριθμός:</p>
			<p><span class="courier-code">479001600</span></p>
		</section>
		<section role="section" id="ch12se10">
			<h1><span role="label">10.10</span> Γεννήτριες</h1>
			<p class="no-indent">Μια ειδική κατηγορία συναρτήσεων είναι οι <i>γεννήτριες (generators)</i>. Πρόκειται για συναρτήσεις οι οποίες έχουν όλα τα χαρακτηριστικά που παρουσιάστηκαν στις προηγούμενες ενότητες, αλλά περιέχουν, επιπλέον, το λεκτικό <span class="courier-code">yield</span> σε ένα ή περισσότερα σημεία τους. Η εντολή <span class="courier-code">yield</span> λειτουργεί με παρόμοιο τρόπο όπως η <span class="courier-code">return</span>, σταματά δηλαδή την εκτέλεση της συνάρτησης και επιστρέφει μια ή περισσότερες τιμές. Η βασική διαφορά τους είναι σε ό,τι ακολουθεί μετά την εκτέλεσή τους. Με τη <span class="courier-code">return</span>, η συνάρτηση τερματίζεται οριστικά και ό,τι υπήρχε στον τοπικό χώρο ονομάτων της χάνεται οριστικά. Δεν υπάρχει κανένας τρόπος πρόσβασης στα δεδομένα της μόλις τελειώσει. Στην περίπτωση της εντολής <span class="courier-code">yield</span> όμως, η εκτέλεση «παγώνει», σταματά προσωρινά, και τα δεδομένα της συνάρτησης αποθηκεύονται. Δίνεται έτσι η δυνατότητα, με διάφορους τρόπους, να συνεχιστεί η εκτέλεση των εντολών μέχρι να εντοπιστεί κάποια άλλη εντολή <span class="courier-code">yield</span> ή να τερματιστεί η συνάρτηση οριστικά με ή χωρίς κάποια εντολή <span class="courier-code">return</span>. Με αυτό τον τρόπο, μια συνάρτηση μπορεί να παράγει τα αποτελέσματά της, ένα κάθε φορά και όχι όλα μαζί. Αυτή η δυνατότητα είναι ιδιαίτερα σημαντική στις περιπτώσεις όπου τα δεδομένα που θα πρέπει να παράγει μια συνάρτηση είναι πάρα πολλά ή όταν θα πρέπει να διαχειριστεί συνεχείς ροές δεδομένων σε πραγματικό χρόνο. Τέτοιες περιπτώσεις δεν θα μπορούσε να διαχειριστεί καμία συνάρτηση, αφού, αργά ή γρήγορα, τα δεδομένα θα είναι τόσο πολλά, που θα ξεπερνούν το μέγεθος της φυσικής μνήμης του υπολογιστή. Με τη <span class="courier-code">yield</span>, όμως, μπορεί να γίνει η επεξεργασία δεδομένων σταδιακά, όποτε αυτό χρειάζεται, και να επιστρέφεται ένα αποτέλεσμα κάθε φορά <i>(οκνηρή αποτίμηση – lazy evaluation)</i>.</p>
			<p>Στην πράξη, η εντολή <span class="courier-code">yield</span> δημιουργεί ένα αντικείμενο <i>επαναλήπτη (iterator)</i>. Αυτό έχει την ιδιότητα να επιστρέφει μια τιμή κάθε φορά που καλείται. Τέτοια αντικείμενα μπορεί να δημιουργηθούν από τον χρήστη, αλλά απαιτείται περισσότερος κώδικας, όπου θα πρέπει να οριστούν από την αρχή οι μέθοδοι χειρισμού τους, όπως η <span class="courier-code">__iter__</span> και η <span class="courier-code">__next__</span> (βλ. Κεφάλαιο 11). Με τις γεννήτριες δεν χρειάζεται κάτι τέτοιο, το αντικείμενο κατασκευάζεται όπως μια απλή συνάρτηση και ενσωματώνει μέσα του όλες τις ιδιότητες που έχει ένας επαναλήπτης. Τα επόμενα παραδείγματα περιγράφουν τον τρόπο λειτουργίας της γεννήτριας.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-53 | Απλή γεννήτρια</figcaption><img src="media/ListaKodika-10-53_fmt.png" alt=""/></figure>
			<p class="no-indent">Γράφοντας τη γεννήτρια στον συντάκτη και εκτελώντας το πρόγραμμα, δεν εμφανίζεται τίποτα. Φορτώνεται όμως η γεννήτρια στη μνήμη και είναι έτοιμη να κληθεί. Στη γραμμή 8 δεν καλείται η <span class="courier-code">gen</span> για να εκτελεστεί, αλλά για να δημιουργηθεί ένα νέο αντικείμενο <span class="courier-code">gen</span>, τύπου γεννήτριας. Η <span class="courier-code">gen</span> δεν εκτελείται άμεσα, αλλά είναι προσβάσιμη μέσω της <span class="courier-code">g</span>.</p>
			<p>Ένας τρόπος να κληθεί η συνάρτηση <span class="courier-code">g</span> είναι μέσω της συνάρτησης <span class="courier-code">next</span>. Η <span class="courier-code">next</span> θα ενεργοποιήσει την <span class="courier-code">g</span> μέχρι την επόμενη εντολή <span class="courier-code">yield</span> και θα σταματήσει εκεί. Όποια εντολή υπάρχει πριν τη <span class="courier-code">yield</span> θα εκτελεστεί κανονικά:</p>
			<p><span class="courier-code">&gt;&gt;&gt; next(g)</span></p>
			<p><span class="courier-code">Είσοδος στη Γεννήτρια...</span></p>
			<p><span class="courier-code">&apos;1η παύση&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(</span><span class="courier-code">g)</span></p>
			<p><span class="courier-code">συνέχεια...</span></p>
			<p><span class="courier-code">&apos;2η παύση&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(g)</span></p>
			<p><span class="courier-code">StopIteration</span></p>
			<p class="no-indent">Αυτό φαίνεται και από την 1η κλήση της στη γραμμή 3, όπου, αφού εκτελεστεί η <span class="courier-code">print</span>, θα επιστραφεί στην κονσόλα το όρισμα της <span class="courier-code">yield</span> (<span class="courier-code">&apos;1η παύση&apos;</span>). Μετά την εκτέλεση της τελευταίας <span class="courier-code">yield</span>, κάθε κλήση της <span class="courier-code">g</span> μέσω της <span class="courier-code">next</span> αποτυγχάνει, καθώς ο επαναλήπτης πλέον επιστρέφει σφάλμα <span class="courier-code">StopIteration</span>, για να δηλώσει τον τερματισμό της γεννήτριας, η οποία πλέον δεν μπορεί να χρησιμοποιηθεί άλλο. Δεν γίνεται επανεκκίνηση ή επιστροφή σε προηγούμενη τιμή. Αν πρέπει να χρησιμοποιηθεί ξανά, θα χρειαστεί να οριστεί πάλι από την αρχή με την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; g=gen()</span></p>
			<p class="no-indent">Ένας ακόμη τρόπος να χρησιμοποιηθεί μια γεννήτρια, είναι μέσω της εντολής <span class="courier-code">for</span>. Η <span class="courier-code">for</span>, εκτός από επαναληπτικό αντικείμενο, μπορεί να δεχθεί μια γεννήτρια. Σε κάθε επανάληψη η γεννήτρια θα καθορίσει τις εντολές που θα εκτελεστούν. Εσωτερικά, η <span class="courier-code">for</span> μπορεί να διαχειριστεί το τέλος της γεννήτριας, ώστε να σταματήσει τις επαναλήψεις χωρίς να προκαλέσει την εμφάνιση σφάλματος <span class="courier-code">StopIteration</span>. Το επόμενο παράδειγμα χρησιμοποιεί τη γεννήτρια <span class="courier-code">gen</span>:</p>
			<p><span class="courier-code">g=gen()</span></p>
			<p><span class="courier-code">for i in g:</span></p>
			<p><span class="courier-code">&#9;pass</span></p>
			<p class="no-indent">και εμφανίζει στην οθόνη:</p>
			<p><span class="courier-code">Είσοδος στη Γεννήτρια...</span></p>
			<p><span class="courier-code">συνέχεια...</span></p>
			<p><span class="courier-code">Έξοδος από τη Γεννήτρια</span></p>
			<p class="no-indent">Καλώντας επαναληπτικά τη γεννήτρια <span class="courier-code">g</span>, εκτελείται σε κάθε επανάληψη ο κώδικας που υπάρχει πριν από κάθε εντολή <span class="courier-code">yield</span>. Κάθε επανάληψη δηλαδή είναι ένα τμήμα κώδικα της <span class="courier-code">gen</span> ανάμεσα σε εντολές <span class="courier-code">yield</span>. Η <span class="courier-code">for</span> αντιλαμβάνεται το τέλος της γεννήτριας, καθώς σταματά τις επαναλήψεις μόλις πάρει το μήνυμα <span class="courier-code">StopIteration</span> από τον επαναλήπτη. </p>
			<p>Χρησιμοποιώντας το λεκτικό <span class="courier-code">pass</span>, μπορεί να δηλώνεται η απουσία εντολών μέσα στη <span class="courier-code">for</span>, αλλά στην πράξη ο κώδικας που υπάρχει μέσα στην <span class="courier-code">gen</span> θα τρέξει κανονικά! Γι’ αυτό και εμφανίζονται τα προηγούμενα αποτελέσματα, συνέπεια των εντολών <span class="courier-code">print</span> που υπάρχουν μέσα στην <span class="courier-code">gen</span>. Η <span class="courier-code">g</span> επιστρέφει μέσα στη <span class="courier-code">for</span> όποιο όρισμα υπάρχει στη <span class="courier-code">yield</span> και το καταχωρεί στη βοηθητική μεταβλητή <span class="courier-code">i</span>. Αν χρησιμοποιηθεί η <span class="courier-code">i</span>, θα έχει τις τιμές των εντολών <span class="courier-code">yield</span>. Οι παρακάτω εντολές:</p>
			<p><span class="courier-code">g=gen()</span></p>
			<p><span class="courier-code">for i in g:</span></p>
			<p><span class="courier-code">&#9;print(&apos;i:&apos;,i)</span></p>
			<p class="no-indent">εμφανίζουν στην οθόνη και τις τιμές των ορισμάτων των εντολών <span class="courier-code">yield</span>:</p>
			<p><span class="courier-code">Είσοδος στη Γεννήτρια...</span></p>
			<p><span class="courier-code">i: 1η παύση</span></p>
			<p><span class="courier-code">συνέχεια...</span></p>
			<p><span class="courier-code">i: 2η </span><span class="courier-code">παύση</span></p>
			<p><span class="courier-code">Έξοδος από τη Γεννήτρια</span></p>
			<img src="media/icon-6_fmt.png" alt=""/>
			
			<aside>
				<h1 class="aside-title"><span class="bold-italics">Ο μηχανισμός του επαναλήπτη</span></h1>
				<p>Ο επαναλήπτης είναι ένα αντικείμενο το οποίο κάνει επαναληπτικές κλήσεις σε αντικείμενα, δίνοντας ένα αποτέλεσμα σε κάθε επανάληψη. Αναφέρεται γενικά ως αντικείμενο, γιατί μπορεί να είναι οτιδήποτε, αρκεί στη δήλωσή του να υλοποιεί δυο ειδικές μεθόδους, την <span class="courier-code">__iter__</span> και την <span class="courier-code">__</span><span class="courier-code">next__</span>. Αυτές οι δυο αποτελούν το λεγόμενο, στην Python, <i>πρωτόκολλο επαναλήπτη (Iteration Protocol)</i>. Η ενσωματωμένη συνάρτηση <span class="courier-code">iter</span> μπορεί και δημιουργεί έναν επαναλήπτη από διάφορα επαναληπτικά αντικείμενα, όπως οι λίστες, οι πλειάδες κ.λπ. Αυτό γίνεται εσωτερικά, χρησιμοποιώντας τη μέθοδο <span class="courier-code">__iter__</span> που αυτά περιέχουν. Στην πραγματικότητα, οι λίστες και άλλες δομές καλούνται επαναληπτικά αντικείμενα αν μπορεί να δημιουργείται ένας επαναλήπτης για αυτές. Μια υλοποίηση επαναλήπτη η οποία οδηγεί τις επαναληπτικές κλήσεις πραγματοποιείται με τη χρήση της εντολής <span class="courier-code">for</span>, που παρουσιάστηκε στο Κεφάλαιο 4. Αντίστοιχα παραδείγματα και σχηματική αναπαράσταση δίνονται στο Κεφάλαιο 11, σχετικά με τα αντικείμενα.</p>
				</aside>
			
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-22</b>: Να δημιουργήσετε γεννήτρια που θα επιστρέφει τις <i>n</i> πρώτες δυνάμεις του 2.</p>
			</blockquote>
			<p class="no-indent">Ο ορισμός της συνάρτησης φαίνεται στη Λίστα Κώδικα 10-54.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-54 | Γεννήτρια δυνάμεων</figcaption><img src="media/ListaKodika-10-54_fmt.png" alt=""/></figure>
			<p class="no-indent">Η συνάρτηση της Λίστας Κώδικα 10-54, δέχεται έναν αριθμό <span class="courier-code">n</span> και, επαναληπτικά, επιστρέφει μια μια όλες τις δυνάμεις του <span class="courier-code">2</span>, από το <span class="courier-code">0</span> μέχρι και το <span class="courier-code">n</span>. Αυτό γίνεται μέσω της <span class="courier-code">range</span> που ενσωματώνεται σε μια εντολή <span class="courier-code">for</span>. Για τη χρήση της γεννήτριας <span class="courier-code">n2power</span>, υπάρχουν δυο δυνατότητες. Μπορεί να δημιουργηθεί ένας επαναλήπτης μέσω της εντολής:</p>
			<p><span class="courier-code">f=n2power()</span></p>
			<p class="no-indent">και να γίνει η χρήση του μέσω της συνάρτησης <span class="courier-code">next</span>:</p>
			<p><span class="courier-code">next(f)</span></p>
			<p class="no-indent">Κάτι τέτοιο θα χρησίμευε αν τα ενδιάμεσα αποτελέσματα της γεννήτριας (κάποιες δηλαδή από τις δυνάμεις του 2) χρειάζονται σε διάφορα τμήματα κώδικα, όπου και θα έπρεπε να γίνει η χρήση ενός <span class="courier-code">next</span> σε κάθε κατάλληλο σημείο ξεχωριστά, όπως:</p>
			<p><span class="courier-code">…</span></p>
			<p><span class="courier-code">next(f</span><span class="courier-code">)</span></p>
			<p><span class="courier-code">…</span></p>
			<p><span class="courier-code">next(f)</span></p>
			<p><span class="courier-code">…</span></p>
			<p class="no-indent">Σε αυτή την περίπτωση, θα πρέπει να ληφθεί υπόψη η περίπτωση που ο επαναλήπτης θα έχει τελειώσει τη «δουλειά» του και δεν θα έχει άλλα αποτελέσματα να επιστρέψει, ώστε να μην προκληθεί σφάλμα <span class="courier-code">StopIteration</span>. </p>
			<p class="no-indent">Ο δεύτερος τρόπος είναι να χρησιμοποιηθεί μέσω της εντολής <span class="courier-code">for</span>. Εδώ, δεν χρειάζεται να δηλωθεί ρητά η χρήση ενός επαναλήπτη. Η ίδια η <span class="courier-code">for</span> το αναλαμβάνει αυτό, όπως επίσης και το σταμάτημα των επαναλήψεων μέσω της εξαίρεσης <span class="courier-code">StopIteration</span>. Δίνεται ένα παράδειγμα:</p>
			<p><span class="courier-code">for i,j in enumerate(n2power(5)):</span></p>
			<p><span class="courier-code">&#9;print(&apos;2 εις την &apos;,i,&apos;=&apos;,j)</span></p>
			<p class="no-indent">όπου η συνάρτηση <span class="courier-code">enumerate</span> δημιουργεί και μια αρίθμηση για κάθε αντικείμενο που παράγει η γεννήτρια (<span class="courier-code">i</span>). Οι εντολές αυτές θα εμφανίσουν τα αποτελέσματα:</p>
			<p><span class="courier-code">2 εις την </span><span class="courier-code">0 = 1</span></p>
			<p><span class="courier-code">2 εις την 1 = 2</span></p>
			<p><span class="courier-code">2 εις την 2 = 4</span></p>
			<p><span class="courier-code">2 εις την 3 = 8</span></p>
			<p class="no-indent">Η σημαντικότερη χρησιμότητα μιας γεννήτριας έχει να κάνει με τη δυνατότητα που έχει στο να διαχειρίζεται μεγάλο όγκο δεδομένων. Αν, για παράδειγμα, χρειάζεται να δημιουργηθεί μεγάλη λίστα με αριθμούς, μια κανονική συνάρτηση θα πρέπει να φτιάξει ολόκληρη τη λίστα και να την αποθηκεύσει στον ανάλογο χώρο στη μνήμη. Αντίθετα, η γεννήτρια θα παράγει ένα ένα τα στοιχεία της. Αυτό έχει δυο πλεονεκτήματα. Το πρώτο είναι ότι δεν δεσμεύει χώρο στη μνήμη για ολόκληρη τη λίστα. Το δεύτερο είναι ότι η επεξεργασία των αποτελεσμάτων μπορεί να ξεκινήσει νωρίτερα. Δεν χρειάζεται να περιμένουμε τη δημιουργία ολόκληρης της λίστας, αν το μόνο που απαιτείται είναι ένα από τα στοιχεία της. Δίνονται δυο συναρτήσεις για την παραγωγή μιας λίστας. Η πρώτη (<span class="courier-code">makelist</span>) δημιουργεί και επιστρέφει ολόκληρη τη λίστα αριθμών από το <span class="courier-code">0</span> μέχρι έναν δοσμένο αριθμό <span class="courier-code">n</span>, ενώ η δεύτερη (γεννήτρια, <span class="courier-code">gmakelist</span>) επιστρέφει κάθε αριθμό ξεχωριστά. Οι εντολές φαίνονται στη Λίστα Κώδικα 10-55.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-55 | «Απλές» συναρτήσεις και γεννήτριες συναρτήσεις</figcaption><img src="media/ListaKodika-10-55_fmt.png" alt=""/></figure>
			<p class="no-indent">Αφού γίνει εκτέλεση του σεναρίου και φορτωθούν οι δυο συναρτήσεις στον χώρο ονομάτων του διερμηνευτή, ώστε να είναι προσβάσιμες για κλήσεις, στην κονσόλα δίνονται οι επόμενες εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import sys</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; k=makelist(100_000)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; sys.getsizeof(k)</span></p>
			<p><span class="courier-code">824464</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; f=gmakelist(100_000)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x=next(f)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x</span></p>
			<p><span class="courier-code">0</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; sys.</span><span class="courier-code">getsizeof(x)</span></p>
			<p><span class="courier-code">24</span></p>
			<p class="no-indent">Με τη βοήθεια της ενσωματωμένης βιβλιοθήκης <span class="courier-code">sys</span>, φαίνεται το μέγεθος των δεδομένων που δημιουργεί καθεμιά από τις συναρτήσεις. Το ίδιο μεγάλη είναι και η διαφορά στον χρόνο που απαιτείται ώστε η μια να δημιουργήσει ολόκληρη τη λίστα, σε αντίθεση με την άλλη που παράγει ένα μόνο στοιχείο.</p>
			<section role="subsection" id="ch12se10ss1">
				<h1><span role="label">10.10.1</span> Γεννήτριες εκφράσεις</h1>
				<p class="no-indent">Εκτός από τις γεννήτριες συναρτήσεις, υπάρχουν και οι <i>γεννήτριες εκφράσεις (generator expressions)</i>. Η σύνταξή τους είναι ακριβώς η ίδια με τη <i>σύνθεση </i><i>λίστας (list comprehension)</i>. Το μόνο που αλλάζει είναι ότι χρειάζεται να περιληφθούν μέσα σε παρενθέσεις, και όχι σε αγκύλες. Το αποτέλεσμα που δίνουν είναι το ίδιο με αυτό της γεννήτριας συνάρτησης, μόνο που οι εντολές που μπορούν να χρησιμοποιηθούν είναι περιορισμένες και θα πρέπει να δοθούν σε μία μόνο γραμμή. Η σύνθεση λίστας και η αντίστοιχη γεννήτρια για τη δημιουργία σειράς τιμών, από το <span class="courier-code">0</span> μέχρι έναν αριθμό, θα είχαν τη μορφή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; k=[x for x in range(10)]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; k</span></p>
				<p><span class="courier-code">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; g=(x for x in range(10))</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; for i in g:</span></p>
				<p><span class="courier-code"> &#9;print(i,end=&apos; &apos;)</span></p>
				<p><span class="courier-code">0 1 2 3 4 5 6 7 8 9</span></p>
			</section>
		</section>
		<section role="section" id="ch12se11">
			<h1><span role="label">10.11</span> Διακοσμητές</h1>
			<p class="no-indent">Η συνάρτηση στην Python, όπως παρουσιάστηκε στις προηγούμενες ενότητες, μπορεί να πάρει πολλές μορφές και να χρησιμοποιηθεί σε κάθε σημείο του προγράμματος. Μπορεί να καλέσει τον εαυτό της, να σταλεί ως όρισμα σε άλλες συναρτήσεις ή να ενσωματωθεί σε άλλες δομές. Παρά την πλούσια ποικιλία χρήσεων που διαθέτει η Python για μια συνάρτηση, με τη λειτουργία της <i>διακόσμησης (decoration)</i> προσφέρει μερικές ακόμη δυνατότητες. Η διακόσμηση επιτρέπει σε μια συνάρτηση να λειτουργήσει με διαφορετικούς τρόπους από αυτούς για τους οποίους δημιουργήθηκε, προσθέτοντας δυναμικά χαρακτηριστικά, ιδιότητες και λειτουργίες. Μπορεί μια συνάρτηση να οριστεί για συγκεκριμένη λειτουργία, αλλά να της δοθούν στη συνέχεια επιπλέον λειτουργίες. Λειτουργεί έτσι σαν ένα δώρο, που μπορεί να αλλάξει <i>κουτί (box)</i> και <i>περιτύλιγμα (wrapping)</i>. Αυτό ακριβώς κάνουν οι <i>διακοσμητές (decorators)</i>. Είναι η διαδικασία εμπλουτισμού μιας συνάρτησης με επιπλέον δυνατότητες από όσες η ίδια διαθέτει.</p>
			<p class="blockquote">Οι διακοσμητές είναι στην ουσία ειδικά διαμορφωμένες συναρτήσεις που τροποποιούν τη λειτουργικότητα και τη συμπεριφορά άλλων συναρτήσεων.</p>
			<p class="no-indent">Στο επόμενο παράδειγμα ορίζεται μια συνάρτηση, η <span class="courier-code">say</span>, η οποία απλά εμφανίζει ένα μήνυμα. Λίγο πιο πριν όμως, δημιουργείται μια ακόμα ένθετη δομή συναρτήσεων, η οποία επιτρέπει τη χρήση της <span class="courier-code">say</span> με διαφορετικό τρόπο.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-56 | Διακόσμηση – εμφανίζοντας μήνυμα</figcaption><img src="media/ListaKodika-10-56_fmt.png" alt=""/></figure>
			<p class="no-indent">Αν κληθεί η <span class="courier-code">say</span> σε κάποιο σενάριο, όπως στη γραμμή 8, ή από την κονσόλα, θα έχει το αποτέλεσμα για το οποίο δημιουργήθηκε:</p>
			<p><span class="courier-code">&gt;&gt;&gt; say()</span></p>
			<p><span class="courier-code">&apos;Σου λέω...&apos;</span></p>
			<p class="no-indent">Στέλνοντάς την όμως ως όρισμα στην ένθετη δομή <span class="courier-code">greeting</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; hi=greeting(say)</span></p>
			<p class="no-indent">δημιουργείται ένα αντικείμενο που μοιάζει με το <i>κλείσιμο (closure)</i>, το οποίο περιγράφηκε σε προηγούμενη ενότητα. Πλέον έχει γίνει ένα νέο περιτύλιγμα της <span class="courier-code">say</span> και χρησιμοποιείται σε συνδυασμό με την ένθετη δομή. Η κλήση της γίνεται γράφοντας:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> hi()</span></p>
			<p><span class="courier-code">&apos;Σου λέω... Καλημέρα&apos;</span></p>
			<p class="no-indent">Από το αποτέλεσμα φαίνεται ότι στην αρχική λειτουργία της <span class="courier-code">say</span> προστέθηκε επιπλέον λειτουργικότητα, αφού ο κώδικάς της πλέον ενσωματώθηκε σε μια διαφορετική δομή συναρτήσεων, στην <span class="courier-code">greeting</span>, και στη συνέχεια στη <span class="courier-code">hello</span>.</p>
			<p>Το <i>«κερασάκι» στον… κώδικα (syntactic sugar)</i> είναι η χρήση του χαρακτήρα ‘<span class="courier-code">@</span>’ πριν από τη συνάρτηση που θα διακοσμηθεί.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-57 | Διακόσμηση με τον χαρακτήρα @</figcaption><img src="media/ListaKodika-10-57_fmt.png" alt=""/></figure>
			<p class="no-indent">Έτσι, μπορεί να γίνει απευθείας κλήση της <span class="courier-code">say</span>, κάνοντας χρήση του διακοσμητή της, όπως στη γραμμή 9, ή απλά γράφοντας στην κονσόλα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; say()</span></p>
			<p><span class="courier-code">&apos;Σου λέω... Καλημέρα&apos;</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 10-23</b>: Να δημιουργήσετε συνάρτηση που θα δέχεται δυο αριθμούς <i>x</i> και <i>n</i>, εμφανίζοντας τη <i>n</i>-στή ρίζα του <i>x</i>.</p>
			</blockquote>
			<p class="no-indent">Ο ορισμός της συνάρτησης φαίνεται στη Λίστα Κώδικα 10-58.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-58 | Διακόσμηση – n-στή ρίζα</figcaption><img src="media/ListaKodika-10-58_fmt.png" alt=""/></figure>
			<p class="no-indent">Χωρίς τη χρήση διακοσμητών, η συνάρτηση <span class="courier-code">nthroot</span> υπολογίζει και επιστρέφει τη <span class="courier-code">n</span>-στή ρίζα ενός αριθμού <span class="courier-code">x</span>. Χωρίς να τροποποιηθεί η συνάρτηση, μπορούν και προστίθενται σε αυτήν λειτουργίες όπως η επιστροφή κατάλληλα διαμορφωμένου κειμένου για το αποτέλεσμα, αλλά και για την περίπτωση αδυναμίας εκτέλεσης της συνάρτησης. Ο υπολογισμός γίνεται μέσα στην ένθετη συνάρτηση <span class="courier-code">root</span> στη γραμμή 5. Έτσι, η συνάρτηση μπορεί να κληθεί με διάφορους τρόπους. Μέσα στο πρόγραμμα μπορεί να δοθεί εντολή, όπως αυτή της γραμμής 12 που εμφανίζει:</p>
			<p><span class="courier-code">η 3η ρίζα του 125 είναι:5.0</span></p>
			<p class="no-indent">σε διαμορφωμένο κείμενο μέσω της <span class="courier-code">root</span>. Παρόμοια κλήση μπορεί να γίνει και από την κονσόλα, χωρίς τη χρήση της <span class="courier-code">print</span>, αφού αυτό που επιστρέφει η συνάρτηση φαίνεται αμέσως στην κονσόλα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; nthroot(x=125,n=-3)</span></p>
			<p><span class="courier-code">&apos;η -3η ρίζα</span><span class="courier-code"> του 125 είναι:0.2&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; nthroot(x=625,n=4)</span></p>
			<p><span class="courier-code">&apos;η 4η ρίζα του 625 είναι:5.0&apos;</span></p>
		</section>
		<section role="section" id="ch12se12">
			<h1><span role="label">10.12</span> Βιβλιοθήκες και πακέτα</h1>
			<p class="no-indent">Η Python υλοποιεί την τεχνική του <i>τμηματικού προγραμματισμού (modular programming)</i>, που σχετίζεται με την ανάλυση ενός προβλήματος και τη διάσπαση και διαχωρισμό του σε μικρότερα, απλούστερα και εύκολα διαχειρίσιμα προβλήματα, τα οποία επιλύονται με μικρότερα και ανεξάρτητα υποπρογράμματα. Προσφέρει όλα τα απαραίτητα εργαλεία για την οργάνωση του κώδικα σε μικρότερες, αυτόνομες μονάδες. Έτσι, διαθέτει όλα τα πλεονεκτήματα που αναφέρθηκαν στην αρχή του κεφαλαίου σχετικά με την ανάπτυξη και τη συντήρηση προγραμμάτων.</p>
			<p>Εκτός από τη δυνατότητα δημιουργίας επιμέρους τμημάτων κώδικα, όπως οι συναρτήσεις ή οι κλάσεις αντικειμένων (που περιγράφονται στο Κεφάλαιο 11), η Python προσφέρει έναν ακόμα τρόπο οργάνωσης κώδικα, σε επίπεδο αρχείων, με τις λεγόμενες <i>βιβλιοθήκες</i> ή <i>αρθρώματα (modules)</i> και τα <i>πακέτα (packages</i><i>)</i>. Η συγγραφή και η διατήρηση κώδικα σε αυτόνομες λειτουργικές μονάδες, καθώς και η δυνατότητα οργάνωσής τους, σε μεγαλύτερη κλίμακα, με την ενοποίηση και σύνδεσή τους σε πακέτα με τη μορφή δομών καταλόγων και αρχείων, προσφέρει μεγαλύτερη ευελιξία στην επαναχρησιμοποίηση κώδικα και στην ανεξαρτησία κατασκευής και λειτουργίας του.</p>
			<p>Έτσι, κώδικας που χρειάζεται να χρησιμοποιηθεί σε πολλά προγράμματα μπορεί να τοποθετηθεί σε ένα άρθρωμα και να εισάγεται όπου είναι απαραίτητο. Αν είναι απαραίτητη η σύνδεσή του με άλλα αρθρώματα, με συνδυαστική χρήση τους σε άλλα προγράμματα, τότε μπορούν όλα αυτά να οργανωθούν σε μια ευρύτερη δομή που ονομάζεται πακέτο. Οι λέξεις <i>βιβλιοθήκη</i>, <i>άρθρωμα</i>, <i>λειτουργική μονάδα</i>, <i>ενότητα</i><i> (unit)</i> χρησιμοποιούνται συχνά στις επόμενες ενότητες και αναφέρονται στην περιγραφή ενός module. Στις επόμενες ενότητες γίνεται περιγραφή αυτών των μονάδων κώδικα.</p>
			<section role="subsection" id="ch12se12ss1">
				<h1><span role="label">10.12.1</span> Λειτουργικές μονάδες</h1>
				<p class="no-indent"><i>Μονάδα κώδικα</i><i> (module)</i> είναι ένα αρχείο στον δίσκο του υπολογιστή που περιέχει κώδικα άμεσα διαθέσιμο, για χρήση σε πρόγραμμα γραμμένο σε Python ή στην κονσόλα του διερμηνευτή. Μπορεί να έχει διάφορες μορφές και να προέρχεται από διάφορες πηγές. Έτσι, υπάρχουν μονάδες οι οποίες:</p>
				<ul><li>Κατασκευάζονται από τον <i>χρήστη (user-defined modules)</i> και περιγράφονται σε αυτή την ενότητα.</li>
				<li>Υπάρχουν ήδη, με την εγκατάσταση της Python, ως <i>ενσωματωμένες μονάδες (built-in modules)</i>, η χρήση των οποίων παρουσιάστηκε σε διάφορες ενότητες του βιβλίου. Τέτοιες βιβλιοθήκες κώδικα είναι οι <span class="courier-code">math</span>, <span class="courier-code">fraction</span>, <span class="courier-code">random</span> κ.λπ.</li>
				<li>Υπάρχουν διαθέσιμες σε ιστοχώρους δημιουργών, όπως τα <span class="courier-code">SciPy</span><sup class="superscript CharOverride-1"><span id="footnote-020-backlink"><a href="#footnote-020">74</a></span></sup>, <span class="courier-code">NumPy</span><sup class="superscript CharOverride-1"><span id="footnote-019-backlink"><a href="#footnote-019">75</a></span></sup> κ.λπ. που θα πρέπει να εγκατασταθούν με το δικό τους πρόγραμμα εγκατάστασης. </li>
				<li>Υπάρχουν και διατίθενται σε διάφορα <i>αποθετήρια κώδικα </i><i>(code repositories)</i>, όπως τα PyPi<sup class="superscript CharOverride-1"><span id="footnote-018-backlink"><a href="#footnote-018">76</a></span></sup>, conda repos<sup class="superscript CharOverride-1"><span id="footnote-017-backlink"><a href="#footnote-017">77</a></span></sup>, github<sup class="superscript CharOverride-1"><span id="footnote-016-backlink"><a href="#footnote-016">78</a></span></sup> κ.λπ. Σε αυτές τις περιπτώσεις η μεταφορά και εγκατάστασή τους γίνεται μέσα από αυτοματοποιημένες διαδικασίες, με τη χρήση ειδικών εργαλείων στη γραμμή εντολών. Τέτοια εργαλεία είναι τα <span class="courier-code">pip</span> και <span class="courier-code">conda</span> – ή μέσα από τις δυνατότητες διαχείρισης πακέτων που διαθέτουν γραφικά περιβάλλοντα όπως τα PyCharm, Anaconda, Enthought Canopy κ.ά. Τέτοιες διαδικασίες περιγράφονται στα Κεφάλαια 1 και 2. </li>
				</ul>
				<p class="no-indent">Η μορφή που μπορεί να έχει μια μονάδα είναι κάποια από τις παρακάτω:</p>
				<ul><li><i>Αρχείο πηγαίου κώδικα σε Python. </i>Αρχεία με επέκταση <span class="courier-code">.py</span> στο όνομά τους. Τέτοιες βιβλιοθήκες είναι η <span class="courier-code">random</span>, η <span class="courier-code">fractions</span> κ.ά. Οι βιβλιοθήκες που δημιουργούνται από τον χρήστη και περιγράφονται στην παρούσα ενότητα έχουν αυτή τη μορφή.</li>
				<li><i>Αρχείο αντικείμενο (object file).</i> Αρχεία γραμμένα σε C/C++ ή άλλη γλώσσα τα οποία έχουν μεταγλωττιστεί ώστε να είναι άμεσα διαθέσιμα από τον διερμηνευτή της Python. Τέτοιες μονάδες είναι η <span class="courier-code">math</span> και η <span class="courier-code">sys</span>. Αυτού του είδους τα αρχεία βρίσκονται σε διάφορα σημεία στη δομή φακέλων της εγκατάστασης της γλώσσας και μπορεί να έχουν επέκταση στο όνομά τους <span class="courier-code">dll</span>, <span class="courier-code">so</span>, <span class="courier-code">pyd</span>, <span class="courier-code">sl</span> κ.λπ. Φορτώνονται δυναμικά στο κέλυφος της γλώσσας ή είναι συνδεδεμένα στον διερμηνευτή.</li>
				</ul><p class="no-indent">Για να εμφανιστεί το όνομα του αρχείου μιας μονάδας, μπορεί να κληθεί η μέθοδος <span class="courier-code">__file__</span>. Αυτό φαίνεται στις επόμενες εντολές:<span class="courier-code"> </span></p>
				<p><span class="courier-code">&gt;&gt;&gt; import random</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; random.__file__</span></p>
				<p><span class="courier-code">&apos;C:\\Users\\pc\\AppData\\Local\\Programs\\Python\\Python37\\lib\\random.py&apos;</span></p>
				<p><span class="courier-code">&gt;&gt;&gt;</span></p>
				<p class="no-indent">Για να εμφανιστούν τα ονόματα των ενσωματωμένων μονάδων, χρειάζεται να εκτελεστούν οι επόμενες εντολές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import sys</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; sys.builtin_module_names</span></p>
				<p><span class="courier-code">(&apos;_abc&apos;, &apos;_ast&apos;, &apos;_bisect&apos;, &apos;_blake2&apos;, &apos;_codecs&apos;, &apos;_codecs_cn&apos;, &apos;_codecs_hk&apos;,</span></p>
				<p><span class="courier-code">…</span></p>
				<p><span class="courier-code">&apos;msvcrt&apos;, &apos;nt&apos;, &apos;parser&apos;, &apos;sys&apos;, &apos;time&apos;, &apos;winreg&apos;, &apos;xxsubtype&apos;, &apos;zipimport&apos;, &apos;zlib&apos;)</span></p>
				<p class="no-indent">Για την εμφάνιση μόνο των μονάδων χωρίς το πρόθεμα ‘<span class="courier-code">_</span>‘, μπορεί να δοθεί η παρακάτω σύνθεση λίστας: </p>
				<p><span class="courier-code">&gt;&gt;&gt; print(*[module for module in sys.builtin_module_names if not module.startswith(&apos;_&apos;)])</span></p>
				<p><span class="courier-code">array atexit audioop binascii builtins cmath errno faulthandler gc itertools marshal math mmap msvcrt nt parser sys time winreg xxsubtype zipimport zlib</span></p>
				<p class="no-indent">Στις επόμενες παραγράφους περιγράφεται η δημιουργία και η χρήση μονάδων οι οποίες περιέχουν κώδικα σε Python και αποθηκεύονται σε αρχεία με κατάληξη <span class="courier-code">.py</span>. Μια τέτοια μονάδα μπορεί να περιέχει κώδικα Python σε οποιαδήποτε μορφή. Συνήθως περιλαμβάνεται κώδικας για τον ορισμό συναρτήσεων, κλάσεων αντικειμένων και μεμονωμένες εντολές για τον ορισμό «σταθερών» και τον έλεγχο σωστής λειτουργίας της μονάδας.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 10-24</b>: Να δημιουργήσετε πρόγραμμα με όνομα <span class="courier-code">main.py</span> που θα εμφανίζει ένα μενού επιλογών για τον υπολογισμό του εμβαδού κάποιου γεωμετρικού σχήματος. Ο χρήστης θα επιλέγει ένα σχήμα και θα εισάγει τις απαραίτητες πληροφορίες για τον αντίστοιχο υπολογισμό. Οι υπολογισμοί θα γίνονται σε συναρτήσεις (μια για κάθε σχήμα) και θα τοποθετηθούν σε ξεχωριστή λειτουργική μονάδα με όνομα <span class="courier-code">area.py</span>.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-59 | Module <span class="courier-code">area.py</span></figcaption><img src="media/ListaKodika-10-59_fmt.png" alt=""/></figure>
				<p class="no-indent">Τα στοιχεία που περιλαμβάνει η βιβλιοθήκη <span class="courier-code">area</span> είναι:</p>
				<ul><li>Μια σειρά από συναρτήσεις υπολογισμού του εμβαδού κάποιου σχήματος.</li>
				<li>Μια σταθερή τιμή για το <span class="courier-code">π</span>.</li>
				<li>Εντολές <span class="courier-code">print</span> για έναν υποτυπώδη έλεγχο λειτουργίας.</li>
				<li>Ένα <span class="courier-code">docstring</span> ως τεκμηρίωση της βιβλιοθήκης.</li></ul>
				<p class="no-indent">Αφού δημιουργηθεί το αρχείο πηγαίου κώδικα της βιβλιοθήκης, για να μπορέσει ύστερα να χρησιμοποιηθεί, θα πρέπει πρώτα να προσδιοριστεί αν θα καλείται μόνο από ένα πρόγραμμα (π.χ. το <span class="courier-code">calc.py</span> που φαίνεται στη Λίστα Κώδικα 10-60) ή από οποιοδήποτε πρόγραμμα. Υπάρχουν πολλοί τρόποι που μπορούν να κάνουν μια βιβλιοθήκη διαθέσιμη σε άλλα προγράμματα. </p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-60 | Αρχείο <span class="courier-code">calc.py</span></figcaption><img src="media/ListaKodika-10-60_fmt.png" alt=""/></figure>
				<p class="no-indent"><b>Αν η βιβλιοθήκη πρόκειται να χρησιμοποιηθεί μόνο από ένα </b><b>πρόγραμμα,</b> τότε αρκεί αυτά τα δυο αρχεία να αποθηκευτούν στον ίδιο κατάλογο στον δίσκο. Για την εκτέλεσή τους, αν γίνει μέσα από κάποιο IDE, αρκεί να φορτωθεί το πρόγραμμα στο προγραμματιστικό περιβάλλον και να τρέξει από εκεί. Αν η εκτέλεση του προγράμματος γίνει από τη γραμμή εντολών, τότε θα πρέπει να γίνει μέσα από τον κατάλογο όπου είναι αποθηκευμένα τα αρχεία. Στην τελευταία περίπτωση, θα πρέπει ο ίδιος ο διερμηνευτής να είναι προσβάσιμος από τη γραμμή εντολών, να βρίσκεται δηλαδή η διαδρομή του εκτελέσιμου αρχείου της Python στη μεταβλητή περιβάλλοντος <span class="courier-code">PATH</span>. Πιο αναλυτικά, έχοντας ως παράδειγμα το IDE Spyder, θα πρέπει:</p>
				<ul><li>Να ανοίξει το αρχείο <span class="courier-code">calc.py</span> που περιέχει το πρόγραμμα το οποίο θα καλεί τη βιβλιοθήκη <span class="courier-code">area</span>.</li>
				<li>Από τη γραμμή εργαλείων να επιλέγεται το Run File (F5) και να εκτελείται ο κώδικας.</li>
				<li>Αν χρειάζεται, να γίνονται αλλαγές είτε στο αρχείο <span class="courier-code">calc.py</span> είτε στο αρχείο <span class="courier-code">area.py</span>.</li>
				</ul>
				<p class="no-indent">Αν η εκτέλεση γίνει από τη γραμμή εντολών, θα πρέπει:</p>
				<ul><li>Να ανοίξει ένα παράθυρο εντολών στον φάκελο όπου είναι αποθηκευμένα τα αρχεία <span class="courier-code">calc.py</span> και <span class="courier-code">area.py</span>.</li>
				<li>Να γίνει εκτέλεση του προγράμματος με την εντολή: </li>
				</ul>
				<p><span class="courier-code">c:\Python code\&gt;python calc.py</span></p>
				<p class="no-indent">Αν δεν είναι δυνατός ο εντοπισμός του διερμηνευτή της Python, τότε θα πρέπει η διαδρομή φακέλων όπου βρίσκεται αυτός να προστεθεί στη μεταβλητή περιβάλλοντος <span class="courier-code">PATH</span> ως εξής:</p>
				<p>Από τον <i>πίνακα ελέγχου (Control Panel)/σύστημα (System)/πληροφορίες (Info</i><i>)/πληροφορίες συστήματος (System Info)</i> ή πατώντας W<span class="math-font">+</span><span class="keycaps">Û</span>, εμφανίζεται το παράθυρο της Εικόνας 10-2.</p>
				<figure class="image" id="img48" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-2 | Πληροφορίες συστήματος</figcaption><img src="media/chapter_10_image_2.jpg" alt=""/></figure>
				<p class="no-indent">Επιλέγοντας «Ρυθμίσεις συστήματος για προχωρημένους», εμφανίζεται το παράθυρο της Εικόνας 10-3.</p>
				<figure class="image" id="img49" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-3 | Ιδιότητες συστήματος</figcaption><img src="media/chapter_10_image_3.jpg" alt=""/></figure>
				<p class="no-indent">Από τις «Ιδιότητες συστήματος», επιλέγουμε «Μεταβλητές περιβάλλοντος».</p>
				<figure class="image" id="img50" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-4 | Μεταβλητές περιβάλλοντος</figcaption><img src="media/chapter_10_image_4.jpg" alt=""/></figure>
				<p class="no-indent">Στο παράθυρο της Εικόνας 10-4, επιλέγουμε «Path» και «Επεξεργασία».</p>
				<figure class="image" id="img51" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-5 | Επεξεργασία μεταβλητών περιβάλλοντος</figcaption><img src="media/chapter_10_image_5.jpg" alt=""/></figure>
				<p class="no-indent">Επιλέγουμε «Δημιουργία» και προσθέτουμε την πλήρη διαδρομή του φακέλου εγκατάστασης της Python.</p>
				<p class="no-indent"><b>Αν η βιβλιοθήκη πρέπει</b><b> να είναι διαθέσιμη και από άλλα προγράμματα, </b>τότε θα χρειαστεί να αποθηκευτεί το αρχείο με έναν από τους παρακάτω τρόπους:</p>
				<ul><li>Να οριστεί ο φάκελος “<span class="courier-code">c:/Python code</span>” μέσα στη μεταβλητή <span class="courier-code">PYTHONPATH</span>. Οι διαδρομές που βρίσκονται εκεί ορίζουν πού θα ψάξει να βρει ο διερμηνευτής όλα τα απαραίτητα αρχεία. Αυτή η μεταβλητή αλλάζει είτε μέσα από το IDE που χρησιμοποιείται είτε μέσω της γραμμής εντολών.</li>
				<li>Να αποθηκευτεί η βιβλιοθήκη σε έναν από τους φακέλους που ορίζονται στη μεταβλητή <span class="courier-code">PYTHONPATH</span> ή στον φάκελο όπου έγινε η εγκατάσταση της Python.</li>
				<li>Να οριστεί ο φάκελος της βιβλιοθήκης στη μεταβλητή <span class="courier-code">PYTHONPATH</span>, καθώς θα εκτελεστεί το πρόγραμμα, με τις παρακάτω εντολές:</li>
				</ul>
				<p><span class="courier-code">&gt;&gt;&gt; import sys</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; sys.path.append(r&apos;c:\Python code&apos;)</span></p>
				<p class="no-indent">Για να ελεγχθεί αν η εισαγωγή έγινε σωστά, θα πρέπει να δοθεί στην κονσόλα η εντολή: </p>
				<p><span class="courier-code">&gt;&gt;&gt; sys.path</span></p>
				<p><span class="courier-code">[&apos;C:\\Users\\pc\\test_intel_Python&apos;,</span></p>
				<p><span class="courier-code">…</span></p>
				<p><span class="courier-code"> &apos;C:\\Users\\pc\\Anaconda3\\Python36.zip&apos;,</span></p>
				<p><span class="courier-code">&apos;c:\\Python code&apos;]</span></p>
				<p class="no-indent">η οποία εμφανίζει όλους τους καταλόγους που «βλέπει» ο διερμηνευτής.</p>
				<p class="no-indent">Η ενσωμάτωση μιας βιβλιοθήκης σε πρόγραμμα γίνεται με την εντολή <span class="courier-code">import</span>. Στα παρακάτω παραδείγματα όλες οι κλήσεις γίνονται μέσα στο πρόγραμμα <span class="courier-code">calc.</span><span class="courier-code">py</span>. Όπως αναφέρθηκε στο Κεφάλαιο 2, υπάρχουν διάφορες μορφές που μπορεί να πάρει η <span class="courier-code">import</span>. Ακολουθεί η περιγραφή τους.</p>
				<p class="no-indent"><span class="courier-code"><b>import βιβλιοθήκη</b></span></p>
				<p class="no-indent">Η βασική και πιο απλή μορφή της <span class="courier-code">import</span> –που κάνει διαθέσιμα όλα τα στοιχεία της βιβλιοθήκης <span class="courier-code">area</span> μέσα στο αρχείο <span class="courier-code">calc</span>– είναι:</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-61 | <span class="courier-code">import</span> – παράδειγμα 1</figcaption><img src="media/ListaKodika-10-61_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 3, με τη χρήση της τελείας, γίνεται αναφορά στο όνομα της βιβλιοθήκης και στη σταθερά <span class="courier-code">pi</span>, ενώ στη γραμμή 4 γίνεται κλήση της συνάρτησης <span class="courier-code">square</span>. Σε κάθε περίπτωση, θα πρέπει να αναφερθεί το όνομα της βιβλιοθήκης πριν από την τελεία, καθώς και το όνομα του στοιχείου μετά την τελεία.</p>
				<p class="no-indent"><span class="courier-code"><b>import βιβλιοθήκη as ψευδώνυμο</b></span></p>
				<p class="no-indent">Για λόγους συντομίας ή ευκολίας χρήσης, θα μπορούσε να δοθεί ένα άλλο όνομα στη βιβλιοθήκη για εσωτερική χρήση. Αν δοθεί: </p>
				<p><span class="courier-code">import area as </span><span class="courier-code">a</span></p>
				<p class="no-indent">η πρόσβαση στα στοιχεία της βιβλιοθήκης <span class="courier-code">area</span> θα γίνεται με αυτό το πρόθεμα:</p>
				<p><span class="courier-code">x=a.square(5)</span></p>
				<p><span class="courier-code">print(a.pi)</span></p>
				<p class="no-indent"><span class="courier-code"><b>from βιβλιοθήκη </b></span><span class="courier-code"><b>import στοιχείο</b></span></p>
				<p class="no-indent">Με αυτή την εντολή δεν εισάγονται όλα τα στοιχεία της βιβλιοθήκης, αλλά μόνο αυτό που θα χρησιμοποιηθεί. Η παρακάτω εντολή:</p>
				<p><span class="courier-code">from area import square</span></p>
				<p class="no-indent">κάνει διαθέσιμη τη συνάρτηση <span class="courier-code">square</span>, χωρίς το πρόθεμα <span class="courier-code">area</span>, αλλά μόνο αυτήν και κανένα άλλο στοιχείο της βιβλιοθήκης. Έτσι, από τις επόμενες εντολές: </p>
				<p><span class="courier-code">x=square(5)</span></p>
				<p><span class="courier-code">print(area.pi)</span></p>
				<p class="no-indent">μόνο η 1η θα εκτελεστεί σωστά. Η 2η θα εμφανίσει μήνυμα σφάλματος <span class="courier-code">NameError</span>, αφού δεν έχουν εισαχθεί στο πρόγραμμα με την <span class="courier-code">import</span> όλα τα στοιχεία της βιβλιοθήκης.</p>
				<p class="no-indent"><span class="courier-code"><b>from βιβλιοθήκη import *</b></span></p>
				<p class="no-indent">Με τον αστερίσκο ‘<span class="courier-code">*</span>’ εισάγονται όλα τα στοιχεία της βιβλιοθήκης στον καθολικό χώρο ονομάτων του διερμηνευτή. Αυτό δεν συνίσταται, γιατί μπορεί να προκαλέσει προβλήματα διπλής ονομασίας στοιχείων που υπάρχουν ήδη μέσα στο πρόγραμμα ή σε άλλες βιβλιοθήκες, αφού η αναφορά στα στοιχεία της βιβλιοθήκης γίνεται μόνο με το όνομά τους. Οι παρακάτω εντολές είναι έγκυρες:</p>
				<p><span class="courier-code">from area import *</span></p>
				<p><span class="courier-code">print(pi)</span></p>
				<p><span class="courier-code">print(circle(10))</span></p>
				<p class="no-indent">αρκεί να μην υπάρχει ήδη μέσα στο πρόγραμμα κάποια μεταβλητή με όνομα <span class="courier-code">pi</span> ή κάποια άλλη συνάρτηση με όνομα <span class="courier-code">circle</span>.</p>
				<p class="no-indent"><span class="courier-code"><b>from βιβλιοθήκη import στοιχείο1 as ψευδώνυμο</b></span></p>
				<p class="no-indent">Εισάγονται στο πρόγραμμα μεμονωμένα στοιχεία της βιβλιοθήκης, έχοντας το καθένα το δικό του όνομα:</p>
				<p><span class="courier-code">from area import pi as π, square as sq</span></p>
				<p><span class="courier-code">print(π)</span></p>
				<p><span class="courier-code">print(sq(12))</span></p>
				<p class="no-indent">Στην κονσόλα, αλλά και σε κάποιο πρόγραμμα, μπορούν να δοθούν εντολές για την εμφάνιση πληροφοριών σχετικά με τη βιβλιοθήκη που χρησιμοποιείται. Οι παρακάτω εντολές εμφανίζουν στοιχεία για τη βιβλιοθήκη <span class="courier-code">area</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-62 | <span class="courier-code">import</span> – παράδειγμα 2</figcaption><img src="media/ListaKodika-10-62_fmt.png" alt=""/></figure>
				<p class="no-indent">Η γραμμή 1 εισάγει τις βιβλιοθήκες <span class="courier-code">area</span> και <span class="courier-code">sys</span>. Στη γραμμή 2 εμφανίζεται ο φάκελος στον οποίο βρίσκεται η βιβλιοθήκη <span class="courier-code">area</span>. Στη γραμμή 3 τυπώνεται το περιεχόμενο της μεταβλητής περιβάλλοντος <span class="courier-code">path</span>, ενώ στην τελευταία γραμμή εμφανίζονται τα περιεχόμενα της βιβλιοθήκης <span class="courier-code">area</span>. Το πρόγραμμα θα εμφανίσει: </p>
				<p><span class="courier-code">C:\Python code\</span><span class="courier-code">area.py</span></p>
				<p><span class="courier-code">[&apos;C:\\Python code&apos;, &apos;C:\\Users\\pc\\test_intel_</span><span class="courier-code">Python&apos;, &apos;C:\\Users\\pc\\Anaconda3\\Python36.zip&apos;, &apos;C:\\Users\\ pc</span><span class="courier-code"> \\Anaconda3\\DLLs&apos;, &apos;C:\\Users\</span></p>
				<p><span class="courier-code">…</span></p>
				<p><span class="courier-code">\Users\\pc\\Anaconda3\\lib\\site-packages\\IPython\\extensions&apos;, &apos;C:\\Users\\pc\\.iPython&apos;]</span></p>
				<p><span class="courier-code">[&apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;circle&apos;, &apos;pi&apos;, &apos;rect&apos;, &apos;rect_orh&apos;, &apos;rhombus&apos;, &apos;square&apos;, &apos;trap&apos;, &apos;triangle&apos;]</span></p>
				<p class="no-indent">Μέσα στη βιβλιοθήκη μπορεί να υπάρχουν και εντολές <span class="courier-code">print</span>. Για παράδειγμα, στην <span class="courier-code">area</span> θα μπορούσαν να τοποθετηθούν μια ή περισσότερες εντολές <span class="courier-code">print</span> για τον έλεγχό της, όπως στη Λίστα Κώδικα 10-63.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-63 | Εκτέλεση εντολών σε module</figcaption><img src="media/ListaKodika-10-63_fmt.png" alt=""/></figure>
				<p class="no-indent">Τέτοιες εντολές είναι εύκολο, και σε πολλές περιπτώσεις απαραίτητο, να δοθούν στο εσωτερικό μιας βιβλιοθήκης. Αυτό όμως έχει κάποιες «παρενέργειες» στον κώδικα. Όπως κάθε αρχείο με κώδικα Python, έτσι και οι βιβλιοθήκες μπορούν είτε να κληθούν με μια εντολή <span class="courier-code">import</span>, είτε να εκτελεστούν ως κανονικά προγράμματα σε κάποιο IDE ή στην κονσόλα του διερμηνευτή. Η παραπάνω προσθήκη των εντολών <span class="courier-code">print</span> θα έχει αποτέλεσμα την εμφάνιση πληροφοριών, είτε γίνει εκτέλεση του αρχείου <span class="courier-code">area.py</span> κατευθείαν στον διερμηνευτή:</p>
				<p><span class="courier-code">C:\Python code\&gt;python area.py</span></p>
				<p><span class="courier-code">π = 3.1415926535</span></p>
				<p><span class="courier-code">Αν φαίνεται η τιμή του π, τότε η βιβλιοθήκη είναι ΟΚ!</span></p>
				<p class="no-indent">είτε γίνει εισαγωγή της μέσω της εντολής <span class="courier-code">import</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import area</span></p>
				<p><span class="courier-code">π = 3.1415926535</span></p>
				<p><span class="courier-code">Αν φαίνεται η τιμή του π, τότε η βιβλιοθήκη </span><span class="courier-code">είναι ΟΚ!</span></p>
				<p class="no-indent">Για αυτό τον λόγο, όλες οι εντολές που χρειάζεται να εκτελούνται μόνο όταν εκτελεστεί άμεσα ο κώδικας της βιβλιοθήκης, και όχι μετά από μια εντολή <span class="courier-code">import</span>, θα πρέπει να τοποθετούνται μέσα στην εντολή <span class="courier-code">if</span>, όπως στη Λίστα Κώδικα 10-64.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 10-64 | Η συνάρτηση <span class="courier-code">main</span> σε module</figcaption><img src="media/ListaKodika-10-64_fmt.png" alt=""/></figure>
				<p class="no-indent">Σε κάθε αρχείο που φορτώνεται απευθείας, είτε από τον διερμηνευτή είτε από κάποιο IDE, ο κώδικάς του παίρνει το όνομα ‘<span class="courier-code">__main__</span>’. Όταν όμως ένα αρχείο φορτώνεται μέσω της εντολής <span class="courier-code">import</span>, το όνομα του κώδικα παραμένει ίδιο με το όνομα του αρχείου. Με αυτό τον τρόπο, μόλις γίνει εισαγωγή της <span class="courier-code">area</span> μέσω της <span class="courier-code">import</span>, οι εντολές <span class="courier-code">print</span> δεν θα εκτελεστούν. </p>
				<p>Αμέσως μετά την εντολή <span class="courier-code">import</span>, η βιβλιοθήκη που εισάγεται φορτώνεται στον χώρο ονομάτων με το όνομά της. Αυτή η εισαγωγή γίνεται μόνο μια φορά. Στην πράξη, ο διερμηνευτής δημιουργεί έναν μεταφρασμένο σε <i>δυαδική μορφή</i> αντίστοιχο <i>κώδικα (byte code)</i> της βιβλιοθήκης στον τρέχοντα κατάλογο και τον αποθηκεύει σε ένα αρχείο με επέκταση <span class="courier-code">.pyc</span> (<i>μεταγλωττισμένο αρχείο Python – Python-compiled file</i>). Αυτός ο κώδικας φορτώνεται στη βοηθητική μνήμη (cache) του διερμηνευτή απ’ όπου χρησιμοποιείται όποτε χρειάζεται. Στο παράδειγμα, για τη βιβλιοθήκη <span class="courier-code">area.py</span> που βρίσκεται στον φάκελο <span class="courier-code">c:\Python code\area</span>, δημιουργείται φάκελος με όνομα <span class="courier-code">__pycache__</span> ο οποίος περιέχει το δυαδικό αρχείο <span class="courier-code">area.cPython-37.pyc</span>. Αν γίνουν αλλαγές στη βιβλιοθήκη, θα πρέπει να κλείσει το κέλυφος της γλώσσας και να ξαναφορτωθεί η βιβλιοθήκη.</p>
				<p>Για μεγαλύτερη ευκολία και για την επαναφόρτωση μιας βιβλιοθήκης, υπάρχει το module <span class="courier-code">importlib</span>, που παρέχει τη μέθοδο <span class="courier-code">reload</span>. Αφού φορτώσουν οι παρακάτω εντολές:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import importlib</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; import area</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; importlib.reload(area)</span></p>
				<p><span class="courier-code">&lt;module &apos;area&apos; from &apos;c:\\Python code\\area.py&apos;&gt;</span></p>
				<p class="no-indent">τις βιβλιοθήκες <span class="courier-code">importlib</span> και <span class="courier-code">area</span>, με τη λειτουργία <span class="courier-code">reload</span> ξαναφορτώνεται η βιβλιοθήκη <span class="courier-code">area</span>.</p>
			</section>
			<section role="subsection" id="ch12se12ss2">
				<h1><span role="label">10.12.2</span> Πακέτα</h1>
				<p class="no-indent">Αν μια βιβλιοθήκη περιλαμβάνει περισσότερες από μια λειτουργικές μονάδες, τότε μπορεί να οργανωθεί σε ένα <i>πακέτο (package)</i>. Πακέτο είναι μια ολοκληρωμένη ιεραρχική δομή φακέλων και αρχείων. Στο προηγούμενο παράδειγμα βιβλιοθήκης θα προστεθεί, εκτός από τη μονάδα <span class="courier-code">area</span>, και άλλη μια με όνομα <span class="courier-code">volume</span>. Τα δυο αρχεία θα τοποθετηθούν σε έναν κατάλογο με όνομα <span class="courier-code">geocalc</span>. </p>
				<figure class="image" id="img52" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-6 | Βιβλιοθήκες και πακέτα</figcaption><img src="media/chapter_10_image_6.jpg" alt=""/></figure>
				<p class="no-indent">Έτσι, η βιβλιοθήκη κώδικα θα αποτελείται από το πακέτο <span class="courier-code">geocalc</span>, που περιέχει τα modules <span class="courier-code">area</span> και <span class="courier-code">volume</span>. Η χρήση των <span class="courier-code">area</span> και <span class="courier-code">volume</span> μπορεί να γίνει με την αναφορά του πακέτου και της λειτουργικής μονάδας σε μια εντολή <span class="courier-code">import</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import geocalc.area, geocalc.volume</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(geocalc.area.pi)</span></p>
				<p><span class="courier-code">3.1415926535</span></p>
				<p class="no-indent">Για να μη χρειάζεται να πληκτρολογείται το όνομα του πακέτου μαζί με το όνομα της μονάδας και το όνομα της συνάρτησης, μπορεί να γίνει χρήση της εντολής:</p>
				<p><span class="courier-code">&gt;&gt;&gt; from geocalc import area,volume</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; area.pi</span></p>
				<p><span class="courier-code">3.1415926535</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; area.</span><span class="courier-code">square(5)</span></p>
				<p><span class="courier-code">25</span></p>
				<p class="no-indent">Η επόμενη εντολή <span class="courier-code">import</span>, όμως, έχει το αποτέλεσμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import geocalc</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; geocalc.area.pi</span></p>
				<p><span class="courier-code">AttributeError: module &apos;geocalc&apos; has no attribute &apos;area&apos;</span></p>
				<p class="no-indent">Το παραπάνω σφάλμα εμφανίζεται επειδή δεν αρκεί να γίνει εισαγωγή του ονόματος του πακέτου ώστε να φορτωθούν και να είναι διαθέσιμες και οι λειτουργικές του μονάδες.</p>
				<p>Για αυτό τον σκοπό, μπορεί να χρησιμοποιηθεί ένα βοηθητικό αρχείο με όνομα <span class="courier-code">__init</span><span class="courier-code">__.py</span>. Αυτό είναι ένα απλό αρχείο κειμένου που τοποθετείται στον κατάλογο του πακέτου. </p>
				<figure class="image" id="img53" role="graphic">
					<figcaption>ΕΙΚΟΝΑ 10-7 | Πακέτα με αρχικοποίηση</figcaption><img src="media/chapter_10_image_7.jpg" alt=""/></figure>
				<p class="no-indent">Μέσα σ’ αυτό μπορεί να τοποθετηθεί κώδικας ο οποίος θα τρέχει κάθε φορά που εισάγεται ένα πακέτο. Έστω ότι το περιεχόμενό του είναι:</p>
				<p><span class="courier-code">print(&apos;Το πακέτο &quot;geocalc&quot; φορτώθηκε...&apos;)</span></p>
				<p><span class="courier-code">print(&apos;Όλα τα συστήματα σε πλήρη λειτουργία...&apos;)</span></p>
				<p class="no-indent">Μόλις τρέξει η εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; import geocalc</span></p>
				<p class="no-indent">θα εμφανιστεί το μήνυμα:</p>
				<p><span class="courier-code">Το πακέτο &quot;geocalc&quot; φορτώθηκε...</span></p>
				<p><span class="courier-code">Όλα τα συστήματα σε πλήρη λειτουργία...</span></p>
				<p class="no-indent">Στο αρχείο <span class="courier-code">__init___.py</span>, μπορεί να γίνει και η εισαγωγή των λειτουργικών μονάδων, όπως:</p>
				<p><span class="courier-code">import</span><span class="courier-code"> geocalc.area, geocalc.volume</span></p>
				<p class="no-indent">Άλλος τρόπος που υπάρχει, για να φορτωθούν όλες οι μονάδες ενός πακέτου, είναι μέσα στο αρχείο <span class="courier-code">__init__</span> να δοθεί η εντολή:</p>
				<p><span class="courier-code">__all__=[&apos;</span><span class="courier-code">area&apos;,&apos;volume&apos;]</span></p>
				<p class="no-indent">Από το αρχείο <span class="courier-code">calc</span>, όπου θα γίνει η κλήση του πακέτου, μπορεί να εκτελεστεί η παρακάτω εντολή:</p>
				<p><span class="courier-code">from geocalc import *</span></p>
				<p class="no-indent">Έτσι, οι μονάδες <span class="courier-code">area</span> και <span class="courier-code">volume</span> γίνονται διαθέσιμες και μπορούν να χρησιμοποιηθούν: </p>
				<p><span class="courier-code">&gt;&gt;&gt; area.pi</span></p>
				<p><span class="courier-code">3.1415926535</span></p>
			</section>
		</section>
		<section role="section" id="ch12se13" data-featured="chapter-review">
			<h1><span role="label">10.13</span> Περίληψη</h1>
			<p class="no-indent">Το κεφάλαιο αυτό περιέχει τρόπους οργάνωσης του κώδικα σε ένα πρόγραμμα γραμμένο σε Python· από απλές συναρτήσεις μέχρι λειτουργικές μονάδες και πακέτα αρχείων κώδικα. Παρουσιάστηκαν βασικές λειτουργίες της Python που υλοποιούνται μέσω των συναρτήσεων, όπως:</p>
			<ul><li>Το «κλείσιμο» και οι ένθετες συναρτήσεις, για την προσωρινή αποθήκευση των δεδομένων μιας συνάρτησης.</li>
			<li>Οι αναδρομικές κλήσεις, για την υλοποίηση αναδρομικών αλγορίθμων.</li>
			<li>Οι διακοσμητές, για τον εμπλουτισμό συναρτήσεων με επιπλέον δυνατότητες και λειτουργίες.</li>
			<li>Οι γεννήτριες, που παράγουν αποτελέσματα «κατά παραγγελία», κάθε φορά που χρειάζονται.</li>
			<li>Οι ανώνυμες συναρτήσεις, που μπορούν να ενσωματωθούν σε άλλες εκφράσεις.</li>
			<li>Τέλος, έγινε παρουσίαση του τρόπου εσωτερικής οργάνωσης της μνήμης, για τη διαχείριση των ονομάτων αντικειμένων της Python, μέσα από την κατανόηση της εμβέλειας των μεταβλητών και των πολλαπλών χώρων ονομάτων του διερμηνευτή. </li>
			</ul>
			<p class="no-indent">Μετά την περιγραφή των γεννητριών ολοκληρώθηκε η εικόνα γύρω από τη λειτουργία και άλλων δομών, όπως η <span class="courier-code">for</span> και το πώς υλοποιείται αυτό που ονομάζεται πρωτόκολλο επαναλήπτη στην Python. Το Κεφάλαιο 11 έρχεται να ολοκληρώσει την έννοια του αντικειμένου – τι είναι, πώς λειτουργεί, πώς χρησιμοποιείται, για ποιο λόγο και σε ποιες περιπτώσεις.</p>
			
		</section>
		<section role="section" id="ch12se14" data-featured="chapter-questions">
			<h1><span role="label">10.14</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Για ποιους λόγους είναι απαραίτητη η χρήση συναρτήσεων;</li>
			<li>Η κλήση μιας συνάρτησης γίνεται με χρήση αναφορών ή τιμών;</li>
			<li>Τι είδους τιμές δέχεται μια συνάρτηση; Πόσες μπορεί να είναι αυτές;</li>
			<li>Επιστρέφει τιμές μια συνάρτηση; Τι είδους τιμές; Πόσες μπορεί να είναι αυτές;</li>
			<li>Τι είναι οι ένθετες συναρτήσεις; Ποια είναι η λειτουργία τους;</li>
			<li>Τι είναι η συνάρτηση <span class="courier-code">main</span>; Πώς χρησιμοποιείται και για ποιο λόγο;</li>
			<li>Πώς λειτουργεί το «<i>κλείσιμο</i>»<i> (closure)</i>;</li>
			<li>Τι είναι η αναδρομή; Πώς γίνονται οι αναδρομικές κλήσεις; Ποια προβλήματα μπορεί να δημιουργηθούν; Πώς αντιμετωπίζονται;</li>
			<li>Τι είναι οι διακοσμητές; Σε ποιες περιπτώσεις είναι χρήσιμη η χρήση τους; Πώς χρησιμοποιούνται στην πράξη;</li>
			<li>Τι είναι οι ανώνυμες συναρτήσεις; Πώς χρησιμοποιούνται;</li>
			<li>Τι ονομάζεται χώρος ονομάτων; Ποιους χώρους διαχειρίζεται ο διερμηνευτής;</li>
			<li>Τι ονομάζεται εμβέλεια μεταβλητών;</li>
			<li>Τι είναι οι γεννήτριες συναρτήσεις; Πώς δημιουργούνται; Πώς λειτουργούν; Πώς χρησιμοποιούνται και για ποιο σκοπό; Ποια είναι η διαφορά τους από τις απλές συναρτήσεις;</li>
			<li>Τι μπορεί να περιέχει μια λειτουργική μονάδα; Γιατί είναι συχνά απαραίτητη; Πώς ενσωματώνεται σε ένα πρόγραμμα;</li>
			<li>Πώς δημιουργείται ένα πακέτο βιβλιοθηκών; Ποια δομή πρέπει να έχει; Πώς χρησιμοποιούνται οι λειτουργικές μονάδες που διαθέτει ένα πακέτο;</li></ol>
			
		</section>
		<section role="section" id="ch12se15" data-featured="chapter-assess">
			<h1><span role="label">10.15</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol>
			<li>Να γράψετε συνάρτηση που θα δέχεται ένα όνομα, εμφανίζοντας το μήνυμα «Καλώς όρισες» και το όνομα που δέχθηκε.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται δυο αριθμούς και θα αντιμεταθέτει τις τιμές τους μόνο αν είναι διαφορετικοί μεταξύ τους.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται τρεις αριθμούς και θα επιστρέφει τον μεγαλύτερο και τον μικρότερο από αυτούς.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό και θα επιστρέφει τον αντίθετο και τον αντίστροφό του.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα αριθμών και θα επιστρέφει λίστα με τα προοδευτικά αθροίσματα των αριθμών που δόθηκαν.</li>
			<li>Να γράψετε συνάρτηση που θα εμφανίζει μια δοσμένη λίστα με ανάποδη σειρά, κάνοντας χρήση ανάδρομης.</li>
			<li>Να γράψετε συνάρτηση που θα κάνει διαίρεση δυο αριθμών. Δημιουργήστε διακοσμητή που θα προσθέτει λειτουργίες ελέγχου για τη δυνατότητα πραγματοποίησης της διαίρεσης.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα και έναν αριθμό, επιστρέφοντας το πόσες φορές υπάρχει ο αριθμός στη λίστα, αν υπάρχει. Προσθέστε διακοσμητή για να ελέγχει αν τα στοιχεία της λίστας είναι αριθμοί ή όχι.</li>
			<li>Δημιουργήστε γεννήτρια που θα παράγει τυχαίους αριθμούς από το 1 μέχρι το 49, για ένα τυχερό παιχνίδι, φροντίζοντας να μην επαναλαμβάνεται ο ίδιος αριθμός δυο φορές σε μια «κλήρωση». </li>
			<li>Δημιουργήστε μια λειτουργική μονάδα που θα εμφανίζει «προβλέψεις» για τον καιρό (τυχαία).</li>
			<li>Συμπληρώστε τον κώδικα για τις συναρτήσεις των μονάδων <span class="courier-code">area</span> και <span class="courier-code">volume</span> (για τον υπολογισμό του όγκου διάφορων στερεών).</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια συμβολοσειρά και θα επιστρέφει λεξικό με κλειδιά τους χαρακτήρες του κειμένου και τιμές το πλήθος εμφάνισης κάθε χαρακτήρα.</li>
			<li>Να γράψετε συναρτήσεις που θα υλοποιούν τις λειτουργίες της ένωσης, της τομής και της διαφοράς δυο λιστών.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται δυο λίστες και θα επιστρέφει τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>, αν η μια είναι υποσύνολο της άλλης.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται άγνωστο πλήθος από λίστες με αριθμούς και θα επιστρέφει το άθροισμα των αριθμών κάθε λίστας.</li>
			<li>Υλοποιήστε τον αλγόριθμο της σειριακής αναζήτησης σε συνάρτηση. Πώς μπορεί να καλείται; Τι παραμέτρους θα χρειαστεί; Τι θα μπορούσε να επιστρέφει;</li>
			<li>Τροποποιήστε την προηγούμενη συνάρτηση ώστε να λειτουργεί ως γεννήτρια, όπου θα επιλέγει ο χρήστης να εμφανίζει την επόμενη θέση στην οποία πιθανόν υπάρχει το στοιχείο αναζήτησης.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν ακέραιο αριθμό και θα επιστρέφει τον αντίστοιχό του στο δυαδικό σύστημα. Δημιουργήστε άλλη μια συνάρτηση που να κάνει το αντίθετο. Θα μπορούσε να γίνει μόνο μια συνάρτηση και να κάνει τη μετατροπή ανιχνεύοντας κατάλληλα τι πρέπει να κάνει;</li>
			<li>Να δημιουργήσετε μια λειτουργική μονάδα που θα περιέχει συναρτήσεις για τη μετατροπή ενός αριθμού στο δυαδικό, οκταδικό και δεκαεξαδικό σύστημα αρίθμησης.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει με τη μέθοδο του Ερατοσθένη<sup class="superscript CharOverride-1"><span id="footnote-015-backlink"><a href="#footnote-015">79</a></span></sup> αν ένας αριθμός είναι πρώτος.</li>
			<li>Να γράψετε δυο συναρτήσεις. Η μια θα δέχεται έναν αριθμό και η άλλη θα τοποθετεί αυτό τον αριθμό σε μια λίστα. Η διαδικασία θα γίνεται επαναληπτικά και οι αριθμοί θα τοποθετούνται με τέτοιο τρόπο ώστε η λίστα να παραμένει ταξινομημένη. Δώστε ένα κριτήριο τερματισμού.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα με <i>k</i> αριθμούς και θα επιστρέφει το παρακάτω άθροισμα:
			<p class="no-indent"><i>n</i> <span class="math-font">=</span> <i>dk</i> <span class="math-font">∙</span> 10<i>k</i><span class="math-font">−</span>1 <span class="math-font">+</span> <i>dk</i>−1 <span class="math-font">∙</span> 10<i>k</i><span class="math-font">−</span>2 <span class="math-font">+</span> <span class="math-font">…</span> <span class="math-font">+</span> <i>d</i>2 <span class="math-font">∙</span> 101 <span class="math-font">+</span> <i>d</i>1</p>
			</li>
			<li>Να γράψετε συνάρτηση που θα ελέγχει αν ένας αριθμός είναι άρτιος ή περιττός.</li>
			<li>Να γράψετε συνάρτηση που θα ελέγχει αν ένας αριθμός είναι παλίνδρομος.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται δυο αριθμούς <i>x</i> και <i>y</i> και θα ελέγχει αν η διαίρεσή τους είναι τέλεια.</li>
			<li>Να γράψετε συνάρτηση που θα ελέγχει αν ένας αριθμός είναι τέλειος. Ένας αριθμός <i>x</i> είναι <i>τέλειος (perfect)</i> αν είναι ίσος με το άθροισμα των θετικών διαιρετών του, χωρίς να συμπεριλαμβάνεται σε αυτούς ο ίδιος ο αριθμός <i>x</i>. Για παράδειγμα, το 6 είναι τέλειος αριθμός, αφού για <i>x</i> <span class="math-font">=</span> 6, οι διαιρέτες του είναι το 1, το 2 και το 3 (χωρίς το 6) και ισχύει 1 <span class="math-font">+</span> 2 <span class="math-font">+</span> 3 <span class="math-font">=</span> 6.</li>
			<li>Δημιουργήστε αναδρομική συνάρτηση για την αντιστροφή ενός κειμένου.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό και θα υπολογίζει αν αυτός είναι πρώτος. Ένας <i>πρώτος (prime)</i> αριθμός διαιρείται μόνο με το 1 και τον εαυτό του.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει το γινόμενο των στοιχείων μιας λίστας.</li>
			<li>Να γράψετε συνάρτηση που θα ελέγχει αν ένα κείμενο είναι αναγραμματισμός άλλου.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει τον <i>δείκτη μάζας σώματος (ΔΜΣ – BMI, Body Mass</i><i> Index)</i> και θα εμφανίζει σύντομη περιγραφή για το βάρος του ατόμου μέσω διακοσμητή. Ο τύπος υπολογισμού είναι:
			<p class="no-indent"><img src="media/pg469.png" />￼</p>
			<p class="no-indent">Ο χαρακτηρισμός δίνεται από τις τιμές του ΔΜΣ στον παρακάτω πίνακα.</p>
			
				<table id="table043">
					<tbody>
						<tr>
							<td>
								<p><b>ΔΜΣ</b></p>
							</td>
							<td>
								<p><b>Χαρακτηρισμός</b></p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Μέχρι 18,4</p>
							</td>
							<td>
								<p>ελλιποβαρής</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Από 18,5 μέχρι 24,9</p>
							</td>
							<td>
								<p>φυσιολογικού βάρους</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Από 25 μέχρι 29,9</p>
							</td>
							<td>
								<p>υπέρβαρος</p>
							</td>
						</tr>
						<tr>
							<td>
								<p>Μεγαλύτερο από 30</p>
							</td>
							<td>
								<p>παχύσαρκος</p>
							</td>
						</tr>
					</tbody>
				</table>
			</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται λίστα με θερμοκρασίες σε βαθμούς Κελσίου και θα τις επιστρέφει σε Φαρενάιτ.</li>
			<li>Υπολογίστε τον μέγιστο κοινό διαιρέτη με αναδρομή.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα με αριθμούς και θα επιστρέφει το άθροισμα των περιττών και το γινόμενο των άρτιων.</li>
			<li>Υπολογίστε αναδρομικά την <i>i</i>-στή δύναμη ενός αριθμού. Η συνάρτηση θα δέχεται δύο αριθμούς, τη βάση <i>x</i> και τον εκθέτη <i>i</i>, επιστρέφοντας τη δύναμη <i>xi</i>.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν θετικό αριθμό <i>n</i> και θα υπολογίζει αναδρομικά το άθροισμα <i>n</i> <span class="math-font">+ (</span><i>n</i> <span class="math-font">−</span> 3<span class="math-font">) + (</span><i>n</i> <span class="math-font">−</span> 6<span class="math-font">) + …</span> μέχρι <i>n</i> <span class="math-font">−</span> <i>k</i> <span class="math-font">≤</span> 0.</li>
			<li>Δημιουργήστε ανώνυμη συνάρτηση για μια σύνθεση λίστας που θα φιλτράρει τα δεδομένα της ώστε να περιέχει μόνο θετικούς αριθμούς.</li>
			<li>Δημιουργήστε συνάρτηση που θα δέχεται κείμενο και θα επιστρέφει μόνο τους χαρακτήρες που υπάρχουν μια φορά σε αυτήν.</li>
			<li>Για δοσμένο διάστημα [<i>α</i>, <i>β</i>], εμφανίστε όλους τους άρτιους αριθμούς αναδρομικά.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει τον μεγαλύτερο άρτιο και τον μικρότερο περιττό αριθμό σε δοσμένο διάστημα τιμών.</li>
			<li>Δημιουργήστε διακοσμητή που θα δέχεται κείμενο και θα προσθέτει html tags &lt;p&gt; μετά από κάθε τελεία.</li>
			<li>Υπολογίστε αναδρομικά το άθροισμα των ψηφίων ενός αριθμού.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα με <i>n</i> αριθμούς και θα υπολογίζει τον αρμονικό μέσο τους. Ο <i>αρμονικός μέσος (harmonic mean)</i> δίνεται από τον τύπο:
				<p class="no-indent"><img src="media/pg470a.png" />￼</p>
			<p class="no-indent">όπου <i>xi</i> είναι οι αριθμοί της λίστας.</p>
			</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα με <i>n</i> αριθμούς και θα υπολογίζει τον γεωμετρικό μέσο τους. Ο <i>γεωμετρικός μέσος (geometric mean)</i> δίνεται από τον τύπο:
				<p class="no-indent"><img src="media/pg470b.png" />￼</p>
			<p class="no-indent">όπου <i>xi</i> είναι οι αριθμοί της λίστας.</p>
			</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται τον αριθμό κεφαλών και ποδιών σε μια φάρμα με ζώα, εμφανίζοντας πόσα είναι τα κουνέλια και πόσες οι κότες.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει πόσα φωνήεντα υπάρχουν σε μια φράση.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται δέκα αριθμούς και θα υπολογίζει το διάστημα τιμών όπου ανήκουν κατά απόλυτη τιμή.</li>
			<li>Δημιουργήστε ανώνυμη συνάρτηση για τον υπολογισμό του αθροίσματος των άρτιων αριθμών μιας λίστας.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν τριψήφιο αριθμό και θα εμφανίζει όλους τους πιθανούς συνδυασμούς των ψηφίων του.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται έναν αριθμό <i>x</i> και θα εμφανίζει τις <i>x</i> πρώτες γραμμές ενός τριγώνου Pascal<sup class="superscript CharOverride-1"><span id="footnote-014-backlink"><a href="#footnote-014">80</a></span></sup>.</li>
			<li>Ο τύπος ανατοκισμού ενός ποσού είναι:
			<p class="no-indent"><i>K</i> <span class="math-font">=</span> <i>P</i> <span class="math-font">∙</span> <span class="math-font">(</span>1 <span class="math-font">+</span> <i>r</i><span class="math-font">)</span><sup>n</sup></p>
			<p class="no-indent">Να γράψετε συνάρτηση που θα δέχεται το ποσό (<i>P</i>), το επιτόκιο <i>r</i> και τα χρόνια <i>n</i>, επιστρέφοντας το ποσό που θα προκύψει.</p>
			</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια εντολή ως κείμενο και θα την εκτελεί.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται μια λίστα δυο διαστάσεων, με αριθμούς, και θα επιστρέφει μια λίστα με τριάδες αριθμών, όπου η κάθε τριάδα θα αντιπροσωπεύει τον αριθμό γραμμής, τον αριθμό στήλης και ένα μη μηδενικό στοιχείο της λίστας.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει το πλήθος των ψηφίων ενός αριθμού.</li>
			<li>Να γράψετε συνάρτηση που θα υπολογίζει και θα επιστρέφει τη σταθερά <i>e</i> με τον τύπο:
				<p class="no-indent"><img src="media/pg471.png" />￼</p>
			</li>
			<li>Να γράψετε συνάρτηση που θα ταξινομεί μια λίστα με βάση το μέγεθος ή μήκος των στοιχείων της.</li>
			<li>Να γράψετε συνάρτηση που θα δέχεται ένα λεξικό και ένα κλειδί και θα επιστρέφει την πληροφορία αν στο λεξικό υπάρχει το συγκεκριμένο κλειδί ή όχι.</li>
			<li>Να γράψετε συνάρτηση που να δημιουργεί κωδικούς (password generator). Οι κωδικοί να δημιουργούνται τυχαία ακολουθώντας τους παρακάτω κανόνες:
			<ul><li>Ο κωδικός να έχει μήκος (πλήθος χαρακτήρων) τουλάχιστον 8. Να ερωτάται ο χρήστης, πριν τη δημιουργία κωδικού, τι μήκος επιθυμεί να έχει.</li>
			<li>Ο πρώτος χαρακτήρας του κωδικού πρέπει να είναι γράμμα (πεζό ή κεφαλαίο).</li>
			<li>Ο κωδικός πρέπει να έχει τουλάχιστον έναν χαρακτήρα αριθμό.</li>
			<li>Ο κωδικός πρέπει να έχει τουλάχιστον έναν χαρακτήρα ειδικό σύμβολο. Τα ειδικά σύμβολα που επιτρέπονται είναι: ‘{‘, ‘}’, ‘!’, ‘@’, ‘#’, ‘$’, ‘%’, ‘^’, ‘&amp;’, ‘*’, ‘?’, ‘-’, ‘_’.</li>
			<li>Επιτρέπονται οι αριθμοί και τα γράμματα (πεζά και κεφαλαία).</li>
			</ul>
			</li>
			<li>Να γράψετε κώδικα σε συνάρτηση που να ελέγχει αν ο ΑΦΜ μιας επιχείρησης είναι έγκυρος ή όχι. Ο ΑΦΜ αποτελείται από 9 ψηφία. Στη γενική του μορφή ο ΑΦΜ έχει τα εξής ψηφία:
			<p class="no-indent"><i>α</i><sub class="subscript CharOverride-1">1</sub><i>α</i><sub class="subscript CharOverride-1">2</sub><i>α</i><sub class="subscript CharOverride-1">3</sub><i>α</i><sub class="subscript CharOverride-1">4</sub><i>α</i><sub class="subscript CharOverride-1">5</sub><i>α</i><sub class="subscript CharOverride-1">6</sub><i>α</i><sub class="subscript CharOverride-1">7</sub><i>α</i><sub class="subscript CharOverride-1">8</sub><i>α</i><sub class="subscript CharOverride-1">9</sub></p>
			<p class="no-indent">Ο αλγόριθμος για τον έλεγχο εγκυρότητας ενός ΑΦΜ είναι: </p>
			<p class="no-indent">Υπολόγισε το άθροισμα</p>
			<p class="no-indent"><i>Σ</i> <span class="math-font">= </span>256<i>α</i><sub class="subscript CharOverride-1">1</sub> <span class="math-font">+ </span>128<i>α</i><sub class="subscript CharOverride-1">2</sub> <span class="math-font">+ </span>64<i>α</i><sub class="subscript CharOverride-1">3</sub> <span class="math-font">+ </span>32<i>α</i><sub class="subscript CharOverride-1">4</sub> <span class="math-font">+ </span>16<i>α</i><sub class="subscript CharOverride-1">5</sub> <span class="math-font">+ </span>8<i>α</i><sub class="subscript CharOverride-1">6</sub> <span class="math-font">+ </span>4<i>α</i><sub class="subscript CharOverride-1">7</sub> <span class="math-font">+ </span>2<i>α</i><sub class="subscript CharOverride-1">8</sub></p>
			<p class="no-indent">Υπολόγισε το υπόλοιπο (<i>Υ</i>) της διαίρεσης του <i>Σ</i> με τον αριθμό 11.</p>
			<p class="no-indent">Έλεγξε αν το τελευταίο ψηφίο του <i>Υ</i> ισούται με το τελευταίο ψηφίο (<i>α</i><sub class="subscript CharOverride-1">9</sub>) του ΑΦΜ. Αν ναι, τότε ο ΑΦΜ είναι έγκυρος. Διαφορετικά, δεν είναι έγκυρος.</p>
			<p class="no-indent">Π.χ. Έστω ο ΑΦΜ 078251685. Έχουμε <i>Σ</i> <span class="math-font">=</span> 1600, ενώ το υπόλοιπο της διαίρεσης 1600<span class="math-font">/</span>11 είναι 5. Το υπόλοιπο ισούται με το τελευταίο ψηφίο του ΑΦΜ <i>α</i><sub class="subscript CharOverride-1">9 </sub><span class="math-font">=</span> 5. Άρα, ο ΑΦΜ είναι έγκυρος.</p>
			</li>
		</ol>
		</section>
	</section>
	<section role="chapter" id="ch13">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 11</span> Αντικείμενα</h1>
		<section role="section" id="ch13se1">
			<h1><span role="label">11.1</span> Εισαγωγή</h1>
			<img src="media/chapter_11_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Στο κεφάλαιο αυτό περιγράφεται η έννοια και τα χαρακτηριστικά των αντικειμένων. Γίνεται γνωριμία με τα </i><i>βασικά στοιχεία του αντικειμενοστραφούς προγραμματισμού στην Python και τις τεχνικές που διαθέτει η γλώσσα για τη διαχείριση αντικειμένων. </i><i>Μέσα από παραδείγματα που προοδευτικά προσθέτουν όλο και πιο σύνθετα χαρακτηριστικά στον κώδικα, επιχειρείται η εισαγωγή σε </i><i>νέες προγραμματιστικές τεχνικές. Βασικός σκοπός αυτού του κεφαλαίου είναι να περιγράψει τα συστατικά στοιχεία του </i><i>βασισμένου σε αντικείμενα προγραμματιστικού μοντέλου και τους μηχανισμούς λειτουργίας του. Παρουσιάζονται στοιχεία όπως οι κλάσεις, τα </i><i>αντικείμενα, οι μέθοδοι και οι ιδιότητες, καθώς και οι τεχνικές που είναι απαραίτητες για την ανάπτυξη προγραμμάτων τα οποία ενσωματώνουν </i><i>τέτοιες λειτουργίες. Μαζί όμως με την περιγραφή αυτών των στοιχείων, γίνεται επίσης και η σύνδεσή τους με τα υπόλοιπα δομικά </i><i>στοιχεία της Python που παρουσιάστηκαν στα προηγούμενα κεφάλαια.</i></p>
		</section>
		<section role="section" id="ch13se2">
			<h1><span role="label">11.2</span> Η έννοια του αντικειμένου</h1>
			<p class="no-indent">Από την πρώτη στιγμή που θα ασχοληθεί κάποιος με την Python, ακούει αμέσως και μαθαίνει πολύ γρήγορα ότι</p>
			<p class="blockquote">στην Python όλα είναι αντικείμενα</p>
			<p class="no-indent">Κάθε τιμή, η οποία εμφανίζεται μέσα σε κώδικα στην Python, αποτελεί ένα προγραμματιστικό αντικείμενο που έχει κληρονομήσει ιδιότητες και μεθόδους της κλάσης του. Τι είναι όμως ένα <i>αντικείμενο (object)</i>; Στα προηγούμενα κεφάλαια αναφέρθηκαν έννοιες όπως «αντικείμενο» ή «μέθοδοι», οι οποίες αφορούσαν πολλά και διαφορετικά στοιχεία της γλώσσας. Στην Python όλα τα στοιχεία της παίρνουν τη μορφή ενός αντικειμένου, είτε πρόκειται για μια λίστα είτε για μια συμβολοσειρά ή αριθμό, ή ακόμα και για μια συνάρτηση. </p>
			<p class="blockquote">Αντικείμενο είναι μια οντότητα που ενσωματώνει μέσα της δεδομένα (ιδιότητες) και κώδικα (συμπεριφορά)</p>
			<p>Τα δεδομένα αναπαριστούν τις ιδιότητες που μπορεί να έχει ένα αντικείμενο, καθώς και τα στοιχεία που είναι απαραίτητα ώστε να περιγράφουν τη φύση και τη δομή του. Από την άλλη, ο κώδικας που περιέχει ένα αντικείμενο καθορίζει τη συμπεριφορά του, τις λειτουργίες που αυτό επιτελεί και τους τρόπους που διαχειρίζεται τα δεδομένα του. </p>
			<p>Με τη χρήση αντικειμένων αλλάζει εντελώς η φιλοσοφία σχεδιασμού και υλοποίησης ενός προγράμματος. Στο <i>διαδικαστικό μοντέλο (Procedural Paradigm)</i>, που χρησιμοποιήθηκε στις περισσότερες περιπτώσεις μέχρι τώρα στο βιβλίο, υπήρχε σαφής διάκριση ανάμεσα στα δεδομένα τα οποία αποθηκεύονται σε κάποιες δομές (όπως η λίστα) και στον κώδικα που τα διαχειρίζεται. Το <i>αντικειμενοστραφές μοντέλο (Object-oriented Paradigm)</i> επιβάλλει διαφορετικό χειρισμό αυτών των, διακριτών μέχρι τώρα, στοιχείων. Γι’ αυτό είναι ιδιαίτερα σημαντικό πριν τη συγγραφή κώδικα να προηγηθεί ο κατάλληλος σχεδιασμός και ανάλυση του προβλήματος, ώστε να καθοριστεί το πλέον κατάλληλο μοντέλο υλοποίησης.</p>
			<p>Αυτό είναι απαραίτητο, γιατί δεν είναι πάντα όλες οι τεχνικές κατάλληλες για όλα τα προβλήματα. Η επιλογή των τεχνικών προγραμματισμού που χρησιμοποιούνται κάθε φορά έχει να κάνει με τη φύση του εκάστοτε προβλήματος. Έτσι, για ένα καθαρά υπολογιστικό πρόβλημα, που παραμένει σαφέστατα ορισμένο και με την ίδια μορφή σε κάθε περίπτωση, χωρίς να διαφοροποιείται σημαντικά, θα ήταν άσκοπο να αντιμετωπιστεί με αντικειμενοστραφείς τεχνικές. Πιο κατάλληλες τεχνικές θα μπορούσαν να αναζητηθούν στο <i>συναρτησιακό (functional)</i> ή <i>διαδικαστικό (procedural)</i> κομμάτι της Python. Αντίθετα, αν σκοπός της υλοποίησης είναι η δημιουργία συλλογών κώδικα επίλυσης συναφών προβλημάτων, με πολλαπλές μορφές και ιδιότητες, τότε η πιο κατάλληλη τεχνική προγραμματισμού είναι η αντικειμενοστραφής.</p>
			<p>Ένα από τα παραδείγματα που αναφέρουμε στους μαθητές/φοιτητές μας, όταν μιλάμε πρώτη φορά για έννοιες γύρω από τον αντικειμενοστραφή προγραμματισμό, είναι κάποιο από τα retro arcade παιχνίδια της εποχής μας, όπως το γνωστό Tetris ή το, λιγότερο γνωστό, Pang<sup class="superscript CharOverride-1"><span id="footnote-013-backlink"><a href="#footnote-013">81</a></span></sup>. Στη δεύτερη περίπτωση, για όσους/όσες δεν το γνωρίζουν, το βασικό στοιχείο του παιχνιδιού αφορά τον ήρωα (παίκτη) που</p>
			<figure class="image" id="img54" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 11-1 | Παράδειγμα υλοποίησης προγράμματος με αντικείμενα</figcaption><img src="media/chapter_11_image_1.jpg" alt=""/></figure>
			<p class="no-indent">συλλέγει αντικείμενα και προσπαθεί να αποφύγει και να καταστρέψει μπάλες που κινούνται σε διάφορες κατευθύνσεις.</p>
			<p>Προγραμματιστικά, πώς θα μπορούσε να υλοποιηθεί κάτι τέτοιο; Θα έπρεπε να γραφτεί κώδικας για κάθε πιθανή μπάλα που εμφανίζεται στο παιχνίδι; Κάθε μπάλα έχει τυχαίο χρώμα, μέγεθος, ταχύτητα και άλλες ιδιότητες που θα έπρεπε να διαχειριστεί ο κώδικας. Είναι από τις περιπτώσεις όπου η κωδικοποίηση γίνεται εύκολα με βάση τα αντικείμενα. Γιατί; Γιατί πολύ απλά αρκεί να δημιουργηθεί μια οντότητα, η μπάλα, που θα ενσωματώνει μέσα της κώδικα ο οποίος θα διαχειρίζεται την κίνηση, το μέγεθος, το χρώμα και όλα τα χαρακτηριστικά της. Ορίζοντας αυτή την οντότητα ως κλάση σε μια <i>κατηγοριοποίηση ειδών (classification)</i>, είναι εφικτό στη συνέχεια να δημιουργηθούν αντίγραφά της ή στιγμιότυπα που θα έχουν κάποια από τα χαρακτηριστικά του αρχικού πρωτοτύπου, αλλά και κάποια καινούργια.</p>
			<p>Η χρήση αντικειμένων συντελεί στο να λειτουργήσει ο κώδικας αφαιρετικά. Ακόμα κι αν δεν χρησιμοποιηθούν ρητά, σε ένα πρόγραμμα Python, αντικειμενοστραφείς τεχνικές, η ίδια η γλώσσα λειτουργεί με βάση τα αντικείμενα. Γι’ αυτό και είναι δυνατόν να εκτελεί τις περισσότερες από τις λειτουργίες που, σε άλλες «παραδοσιακές» γλώσσες προγραμματισμού, φαίνονται άλλοτε περίεργες και τις περισσότερες φορές αδύνατες – όπως για παράδειγμα το να ενσωματώνονται σε λίστες συναρτήσεις, που θα δέχονται άγνωστο πλήθος και είδος ορισμάτων. Αυτή είναι και η σημαντικότερη διαφορά της Python από άλλες αντικειμενοστραφείς γλώσσες όπως οι C++, Java, VB Net κ.ά. Εκτός από τη διαφοροποίηση στο συντακτικό κομμάτι της υλοποίησης των τεχνικών, που είναι φυσιολογικό να διαφέρει από γλώσσα σε γλώσσα, είναι η ίδια η φύση της Python –που κινεί τα πάντα γύρω από κάποιο αντικείμενο– αυτό που την ξεχωρίζει από τις υπόλοιπες.</p>
			<p>Τα βασικά στοιχεία στον προγραμματισμό με βάση τα αντικείμενα στην Python περιλαμβάνουν τα παρακάτω:</p>
			<p class="no-indent"><span class="bold-italics">Κλάση (Class)</span></p>
			<p class="no-indent">Είναι το πρωτότυπο σχέδιο, η γενική ιδέα μιας κατηγορίας οντοτήτων με κοινά χαρακτηριστικά. Μοιάζει με το αρχιτεκτονικό σχέδιο, για παράδειγμα, ενός σπιτιού. Περιέχει τα βασικά στοιχεία του «σπιτιού» και πληροφορίες για τη δομή του, αλλά δεν αναφέρεται σε κάποιο ήδη κατασκευασμένο σπίτι. Αντίθετα, χρησιμοποιείται για να δώσει την πληροφορία σ’ αυτό που πρόκειται να κατασκευαστεί.</p>
			<p class="no-indent"><span class="bold-italics">Αντικείμενο (Object)</span></p>
			<p class="no-indent">Είναι η υλοποίηση των σχεδίων που υπάρχουν σε μια κλάση. Σε αναλογία με το προηγούμενο παράδειγμα με τα σπίτια, αντικείμενο είναι ένα συγκεκριμένο σπίτι που δημιουργήθηκε με βάση το προαναφερθέν σχέδιο. Στην ουσία, αντικείμενο είναι ένα <i>στιγμιότυπο (instance)</i> κλάσης, από την οποία παίρνει όλα τα δομικά στοιχεία του, αλλά και τους τρόπους χειρισμού του. Είναι το στοιχείο εκείνο που θα πάρει «σάρκα και οστά», αποκτώντας συγκεκριμένη μορφή μέσα στον κώδικα, ώστε να αναπαραστήσει και να ενσωματώσει μέσα του τα δεδομένα και τις απαραίτητες λειτουργίες τους. Από μια κλάση μπορούν να δημιουργηθούν πολλά αντικείμενα. Κάθε αντικείμενο μπορεί να έχει κοινά ή/και καινούργια χαρακτηριστικά με τα υπόλοιπα αντικείμενα. Στο παράδειγμά μας, θα μπορούσαν να δημιουργηθούν πολλά σπίτια με την ίδια ή παραλλαγμένη μορφή, όπως συμβαίνει και στην πραγματικότητα, για παράδειγμα, σε συγκροτήματα κατοικιών<sup class="superscript CharOverride-1"><span id="footnote-012-backlink"><a href="#footnote-012">82</a></span></sup>.</p>
			<figure class="image" id="img55" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 11-2 | Κλάση και αντικείμενα</figcaption><span class="bold-italics"><img src="media/chapter_11_image_2.jpg" alt=""/></span></figure>
			<p class="no-indent"><span class="bold-italics">Ιδιότητες (Attributes)</span></p>
			<p class="no-indent">Είναι τα δεδομένα που συνοδεύουν και χαρακτηρίζουν ένα αντικείμενο. Μπορεί να έχουν οποιαδήποτε από τις μορφές δεδομένων που υποστηρίζει η Python, όπως λίστα, λεξικό, αριθμοί κ.λπ.</p>
			<p class="no-indent"><span class="bold-italics">Μέθοδοι (Methods)</span></p>
			<p class="no-indent">Είναι οι λειτουργίες που διαθέτει κάθε αντικείμενο. Καθορίζουν τη συμπεριφορά του και διαχειρίζονται τις ιδιότητές του. Μοιάζουν με τις συναρτήσεις, μόνο που είναι δεμένες με τα στοιχεία τα οποία διαθέτει ένα αντικείμενο. Τέτοιες μεθόδους χρησιμοποιούν όλα τα αντικείμενα της Python, όπως για παράδειγμα η λειτουργία <span class="courier-code">append</span> σε μια λίστα, που προσθέτει ένα στοιχείο σ’ αυτά που έχει ήδη.</p>
		</section>
		<section role="section" id="ch13se3">
			<h1><span role="label">11.3</span> Κλάσεις και αντικείμενα</h1>
			<p class="no-indent">Η κλάση είναι το πρώτο δομικό στοιχείο που πρέπει να οριστεί, προτού ξεκινήσει κανείς να γράφει κώδικα με αντικείμενα. Μια κλάση δημιουργείται με την παρακάτω γραμμή:</p>
			<p><span class="courier-code">class όνομαΚλάσης:</span></p>
			<p class="no-indent">Ο ορισμός ξεκινάει με το λεκτικό <span class="courier-code">class</span> και ακολουθεί το όνομα της κλάσης (<span class="courier-code">όνομαΚλάσης)</span> γραμμένο σε <i>πεζοκεφαλαία</i> (<i>camel case</i>, βλ. Κεφάλαιο 2 για τους κανόνες ονοματοδοσίας στην Python).</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 11-1</b>: Να γράψετε πρόγραμμα που θα διαχειρίζεται τις συναλλαγές και τα στοιχεία των πελατών μιας τράπεζας, όπως το όνομα και το υπόλοιπο του λογαριασμού τους. </p>
			</blockquote>
			<p class="no-indent">Σ’ αυτή την περίπτωση, η κλάση που θα απεικονίζει τους πελάτες και θα περιέχει τα στοιχεία τους θα μπορούσε να ήταν αυτή της Λίστας Κώδικα 11-1.</p>
			=
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-1 | Δημιουργία κλάσης</figcaption><img src="media/ListaKodika-11-1_fmt.png" alt=""/></figure>
			<p class="blockquote">Η κλάση Client αντιπροσωπεύει αφηρημένα (abstractly) καθέναν από τους πιθανούς πελάτες της τράπεζας, αλλά δεν είναι κάποιος συγκεκριμένος πελάτης.</p>
			<p class="no-indent">Αυτές οι δυο εντολές είναι αρκετές ώστε να δηλωθεί η κλάση (ή τάξη) πελατών. Βέβαια, δεν περιέχει ακόμα καμία πληροφορία, αλλά είναι έτοιμη για χρήση. Το λεκτικό <span class="courier-code">pass</span> χρησιμοποιείται όπως και αλλού στην Python (σε <span class="courier-code">if</span> ή <span class="courier-code">while</span> εντολές ή σε συναρτήσεις κ.λπ.) και χρησιμεύει στο να ενημερώσει τον διερμηνευτή ότι ακόμα δεν έχει οριστεί καμία λεπτομέρεια υλοποίησης. Μπαίνει αρχικά κατά τη φάση δοκιμών, προτού ξεκινήσει η υλοποίηση της κλάσης, και διαγράφεται καθώς προστίθενται σ’ αυτήν λεπτομέρειες. Μόλις εκτελεστεί το πρόγραμμα, ο διερμηνευτής θα φορτώσει στον χώρο ονομάτων τη νέα κλάση και θα την κάνει διαθέσιμη παντού στο περιβάλλον της Python (είτε στον συντάκτη σεναρίων είτε στη γραμμή εντολών) ώστε να χρησιμοποιηθεί κατάλληλα.</p>
			<p>Ακόμα όμως το σχέδιο (η κλάση) παραμένει εντελώς θεωρητικό. Στην πράξη δεν έχει δημιουργηθεί κάποιος πραγματικός πελάτης. Η κλάση <span class="courier-code">Client</span> δεν έχει ακόμα περιεχόμενο, μόνο υπόσταση. Υπάρχει δηλαδή το σχέδιό της, ο ορισμός της. Αν εκτελεστεί ο κώδικας αυτός, τότε μπορεί να δοθεί στην κονσόλα η εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; Client</span></p>
			<p><span class="courier-code">__main__.Client</span></p>
			<p class="no-indent">που εμφανίζει τον τύπο του λεκτικού <span class="courier-code">Client</span>, ενώ η επόμενη:</p>
			<p><span class="courier-code">&gt;&gt;&gt; issubclass(Client,object)</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">επιβεβαιώνει ότι η κλάση <span class="courier-code">Client</span> είναι μια <i>υποκλάση</i> (<i>subclass</i>, βλ. παρακάτω) της βασικής κλάσης της Python, της κλάσης <span class="courier-code">object</span>.</p>
			<p>Αμέσως μετά τον ορισμό της και την εκτέλεση του κώδικά της, η κλάση <span class="courier-code">Client</span> μπορεί να χρησιμοποιηθεί (είτε μέσα στο πρόγραμμα είτε στην κονσόλα) ως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c1=Client()</span></p>
			<p class="no-indent">Με την εντολή αυτή δημιουργείται ο πρώτος πραγματικός πελάτης. Ο <span class="courier-code">c1</span> είναι ένας από τους πελάτες, τα στοιχεία του οποίου, από εδώ και πέρα, θα μπορεί να επεξεργαστεί το πρόγραμμα. Ακόμη, βέβαια, είναι νωρίς, αφού δεν έχουν οριστεί κάποια χαρακτηριστικά πελατών. Αυτό θα γίνει στη συνέχεια. Προς το παρόν, το μόνο που μπορεί να γίνει είναι να εμφανιστεί στην κονσόλα το τι ακριβώς είναι τα δυο στοιχεία που έχουν δημιουργηθεί:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(c1)</span></p>
			<p><span class="courier-code">&lt;__main__.Client object at 0x0000020AB8B30DA0&gt;</span></p>
			<p class="no-indent">Το <span class="courier-code">c1</span> επομένως είναι ένα αντικείμενο…:</p>
			<p><span class="courier-code">&gt;&gt;&gt; isinstance(c1,Client)</span></p>
			<p><span class="courier-code">True</span></p>
			<p class="no-indent">…ή στιγμιότυπο της κλάσης <span class="courier-code">Client</span>.</p>
			<p>Η εντολή <span class="courier-code">c1=Client()</span> είναι παρόμοια με μια εντολή όπως η <span class="courier-code">mylist=list()</span>, που δημιουργεί ένα νέο, κενό αντικείμενο τύπου λίστας – μόνο που εδώ δημιουργεί ένα νέο αντικείμενο τύπου <span class="courier-code">Client</span>. Περισσότεροι νέοι πελάτες μπορούν να δημιουργηθούν με τον ίδιο τρόπο:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c2=Client()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c3=Client()</span></p>
		</section>
		<section role="section" id="ch13se4">
			<h1><span role="label">11.4</span> Προσθέτοντας ιδιότητες</h1>
			<p class="no-indent">Ένα από τα χαρακτηριστικά που πρέπει να υπάρχει σε κάθε πελάτη είναι το όνομά του. Ο παρακάτω ορισμός (Λίστα Κώδικα 11-2) της κλάσης των πελατών προσθέτει αυτό το χαρακτηριστικό.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-2 | Ιδιότητα κλάσης</figcaption><img src="media/ListaKodika-11-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Η ιδιότητα <span class="courier-code">name</span> είναι απλά μια μεταβλητή τύπου <span class="courier-code">str</span> που παίρνει τιμή μέσα στην κλάση <span class="courier-code">Client</span>. Με την επόμενη εντολή:</p>
			<p><span class="courier-code">c1=Client()</span></p>
			<p class="no-indent">δημιουργείται νέο αντικείμενο πελάτη, που πλέον έχει αποκτήσει και αυτό την ιδιότητα <span class="courier-code">name</span>, την οποία κληρονομεί από την κλάση <span class="courier-code">Client</span>. Έτσι, με την εντολή:</p>
			<p><span class="courier-code">print(c1.name)</span></p>
			<p><span class="courier-code">Ανώνυμος</span></p>
			<p class="no-indent">φαίνεται ότι ο 1ος πελάτης έχει και αυτός το όνομά του. Αυτό είναι ένα από τα χαρακτηριστικά του αντικειμενοστραφούς προγραμματισμού. Όλα τα αντικείμενα κληρονομούν τα στοιχεία της κλάσης από την οποία προήλθαν, όπως ακριβώς μια νέα λίστα έχει όλες τις ιδιότητες κάθε λίστας. Η πρόσβαση στα στοιχεία ενός αντικειμένου γίνεται με τη <i>μέθοδο της τελείας (dot notation)</i>. Μετά το όνομα του αντικειμένου τοποθετείται το σύμβολο ‘.’ και ακολουθεί μια ιδιότητα ή κάποια μέθοδός του (περιγράφεται στη συνέχεια).</p>
			<p>Τι θα συμβεί όμως αν αλλάξει το όνομα (<span class="courier-code">name</span>) του αντικειμένου; Η επόμενη εντολή:</p>
			<p><span class="courier-code">c1.name=&apos;Άννα&apos;</span></p>
			<p class="no-indent">μπορεί και αλλάζει αυτό το χαρακτηριστικό. Αν όμως συγκριθεί με το όνομα που περιέχει η κλάση:</p>
			<p><span class="courier-code">print(c1.name, Client.name)</span></p>
			<p><span class="courier-code">Άννα Ανώνυμος</span></p>
			<p class="no-indent">φαίνεται ότι η αλλαγή του <span class="courier-code">c1</span> δεν επηρέασε την κλάση του. Με παρόμοιο τρόπο μπορεί να αλλάξει η ιδιότητα <span class="courier-code">name</span> της κλάσης:</p>
			<p><span class="courier-code">Client.name=&apos;Κανένας&apos;</span></p>
			<p class="no-indent">Αν δημιουργηθεί νέος πελάτης:</p>
			<p><span class="courier-code">c2.Client()</span></p>
			<p class="no-indent">τότε η ιδιότητα <span class="courier-code">name</span> του 2ου πελάτη θα έχει την καινούργια τιμή της κλάσης:</p>
			<p><span class="courier-code">print(c1.name, Client.name, c2.name)</span></p>
			<p><span class="courier-code">Άννα Κανένας Κανένας</span></p>
			<p class="no-indent">Αντίστοιχα, αν αλλάξει το όνομά του ο 2ος πελάτης, αυτή η αλλαγή θα αφορά μόνο «τη δική του» ιδιότητα:</p>
			<p><span class="courier-code">c2.name=&apos;Πέτρος&apos;</span></p>
			<p><span class="courier-code">print(c1.name, Client.name, c2.name)</span></p>
			<p><span class="courier-code">Άννα Κανένας Πέτρος</span></p>
			<p class="no-indent">Επειδή οι παραπάνω αλλεπάλληλες αλλαγές σε ένα κοινό χαρακτηριστικό προκαλούν σύγχυση, οι ιδιότητες των αντικειμένων δεν ορίζονται στην πράξη με αυτό τον τρόπο. Η μεταβλητή <span class="courier-code">name</span> αποτελεί τη λεγόμενη <i>ιδιότητα της κλάσης (class attribute)</i>. Σκοπός της είναι να αποτελεί μια μεταβλητή που θα υπάρχει στην κλάση και στην οποία θα έχουν πρόσβαση (όχι πάντα άμεση) και τα αντικείμενά της. Τέτοιες ιδιότητες θα αναφερθούν με τη σωστή χρήση τους λίγο αργότερα, σε επόμενη ενότητα.</p>
		</section>
		<section role="section" id="ch13se5">
			<h1><span role="label">11.5</span> Δημιουργώντας μεθόδους – αρχικοποίηση</h1>
			<p class="no-indent">Οι μέθοδοι είναι σαν τις συναρτήσεις, μόνο που θα πρέπει να δηλωθούν μέσα σε μια κλάση. Δέχονται τιμές, με ιδιαίτερο όμως τρόπο, και μπορούν να επιστρέφουν άλλες. Οι μέθοδοι ορίζουν, στην πράξη, τη συμπεριφορά των αντικειμένων. Η επόμενη, νέα, δήλωση της κλάσης <span class="courier-code">Client</span> προσθέτει μια νέα λειτουργία, την αρχικοποίηση ενός αντικειμένου με συγκεκριμένα χαρακτηριστικά (Λίστα Κώδικα 11-3).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-3 | Αρχικοποίηση κλάσης</figcaption><img src="media/ListaKodika-11-3a_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι πιο πάνω γραμμές αποτελούν τον νέο ορισμό της κλάσης <span class="courier-code">Client</span>. Οι επόμενες εντολές μπορούν να δοθούν αμέσως μετά, για να χρησιμοποιήσουν τη νέα κλάση:</p>
			
			<img src="media/ListaKodika-11-3b_fmt.png" alt=""/>
			<p class="no-indent">Έτσι, οι γραμμές 4 και 5 δημιουργούν από έναν νέο πελάτη η καθεμιά. Μόλις εκτελεστεί το πρόγραμμα και δημιουργηθούν οι νέοι πελάτες <span class="courier-code">c1</span> και <span class="courier-code">c2</span>, θα εμφανιστεί στην οθόνη:</p>
			<p><span class="courier-code">Καλώς όρισες νέε πελάτη &lt;__main__.Client object at 0x00020AB9B73320&gt;</span></p>
			<p><span class="courier-code">Καλώς όρισες νέε πελάτη &lt;__main__.Client object at 0x00020AB9B732B0&gt;</span></p>
			<p class="no-indent">Τι ακριβώς συνέβη όμως; Η μέθοδος <span class="courier-code">__init__</span> είναι μια από τις ειδικές μεθόδους που διαθέτει η Python για την <i>κατασκευή</i><i> (construction)</i> και την <i>αρχικοποίηση (initialization)</i> νέων αντικειμένων. <i>Εκτελείται</i> (ή <i>δέχε</i><i>ται κλήση – invoked</i>) αυτόματα με τη δημιουργία κάθε νέου αντικειμένου, στιγμιότυπου μιας κλάσης. Συνήθως δεν περιέχει εντολές <span class="courier-code">print</span> (αυτό έγινε για τις ανάγκες του παραδείγματος), αλλά περιλαμβάνει αρχικοποίηση των μεταβλητών (ιδιοτήτων) του νέου αντικειμένου, δίνοντάς του συγκεκριμένες τιμές, όπως θα φανεί στη συνέχεια.</p>
			<p>Ο τρόπος σύνταξης μιας μεθόδου μοιάζει με αυτόν μιας συνάρτησης. Ξεκινά με το λεκτικό <span class="courier-code">def</span>, για τον <i>ορισμό (definition</i><i>)</i> της μεθόδου, και ακολουθεί το όνομά της, που μπορεί να είναι οποιοδήποτε αποδεκτό όνομα ή κάποιο από τα ονόματα ειδικών μεθόδων της Python που θα παρουσιαστούν στη συνέχεια. Μέσα στις παρενθέσεις τίθενται οι παράμετροι τιμών στις οποίες χρειάζεται να έχει πρόσβαση η μέθοδος. Η προηγούμενη μέθοδος δεν περιλαμβάνει τίποτα άλλο εκτός από την παράμετρο <span class="courier-code">self</span>, η οποία έχει ειδική σημασία και ρόλο μέσα στη μέθοδο και είναι απαραίτητο να υπάρχει. Αναπαριστά την ονομασία του αντικειμένου για το οποίο έγινε η κλήση της μεθόδου. Στο συγκεκριμένο παράδειγμα, η <span class="courier-code">self</span> αναφέρεται στο αντικείμενο <span class="courier-code">c1</span>, όταν εκτελεστεί η εντολή 4, και στο αντικείμενο <span class="courier-code">c2</span>, όταν εκτελεστεί η εντολή 5.</p>
			<p>Η παρακάτω μορφή της μεθόδου <span class="courier-code">__init__</span> (Λίστα Κώδικα 11-4) είναι συνήθως αυτή που χρησιμοποιείται στην πράξη και προσθέτει συγκεκριμένες ιδιότητες σε κάθε νέο αντικείμενο. Έτσι, σιγά σιγά τα αντικείμενα πελατών αποκτούν νέες ιδιότητες και γίνονται όλο και πιο σύνθετα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-4 | Αρχικοποίηση αντικειμένων με τη μέθοδο <span class="courier-code">__init__</span></figcaption><img src="media/ListaKodika-11-4_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι γραμμές 1 έως 4 αποτελούν τον ορισμό της κλάσης και χρησιμοποιούνται από τις επόμενες εντολές για τη δημιουργία νέων αντικειμένων και την επεξεργασία τους.</p>
			<p>Οι υπόλοιπες εντολές, στις γραμμές 5 έως 9, παρουσιάζουν μερικούς τρόπους χρήσης της κλάσης <span class="courier-code">Client</span>. Θα μπορούσαν να δοθούν είτε αμέσως μετά τον ορισμό της κλάσης, όπως στην προηγούμενη λίστα, στο ίδιο αρχείο πηγαίου κώδικα, είτε στη γραμμή εντολών του διερμηνευτή.</p>
			<p>Η νέα μορφή της μεθόδου <span class="courier-code">__init__</span> περιλαμβάνει δυο νέα χαρακτηριστικά που συνοδεύουν κάθε νέο αντικείμενο πελάτη, το όνομα (<span class="courier-code">name</span>) και το υπόλοιπο (<span class="courier-code">balance</span>) που διαθέτει αυτός στην τράπεζα. Η δημιουργία νέου πελάτη έχει αλλάξει επίσης. Στη γραμμή 5 δημιουργείται ένας νέος πελάτης. Μέσα στις παρενθέσεις δίνονται οι ιδιότητες που θα έχει το νέο αντικείμενο (‘<span class="courier-code">Άν</span><span class="courier-code">να&apos;</span> και <span class="courier-code">500</span>). Αυτές οι τιμές μεταφέρονται στη μέθοδο <span class="courier-code">__init__</span> (γραμμή 2) και καταχωρούνται (γραμμές 3 και 4) στις ιδιότητες <span class="courier-code">name</span> και <span class="courier-code">balance</span> αντίστοιχα. Έτσι, η εντολή <span class="courier-code">print</span> στη γραμμή 7 θα τυπώσει τις δυο αυτές ιδιότητες του αντικειμένου <span class="courier-code">c1</span>:</p>
			<p><span class="courier-code">Άννα 500</span></p>
			<p class="no-indent">Στη γραμμή 6 ξανακαλείται η <span class="courier-code">__init__</span> για τη δημιουργία νέου αντικειμένου, του <span class="courier-code">c2</span>, αυτή τη φορά με ένα μόνο όρισμα, το όνομα του νέου πελάτη. Αυτό μπορεί να γίνει γιατί η <span class="courier-code">__init__</span> διαθέτει <i>αρχική</i><i> τιμή (default)</i> για την παράμετρο <span class="courier-code">balance</span> (ίση με <span class="courier-code">0</span>), οπότε μπορεί να παραλειφθεί κατά την κλήση της. Η χρήση αρχικών τιμών σε παραμέτρους έχει παρουσιαστεί ήδη στο Κεφάλαιο 10 με τις συναρτήσεις.</p>
			<p>Οι ονομασίες των παραμέτρων <span class="courier-code">name</span> και <span class="courier-code">balance</span> δεν είναι υποχρεωτικά ίδιες με την ονομασία των ιδιοτήτων του αντικειμένου. Για παράδειγμα, τα ονόματά τους θα μπορούσαν να είναι <span class="courier-code">x</span> και <span class="courier-code">y</span>. Έτσι όμως οι εντολές στις γραμμές 3 και 4 θα ήταν:</p>
			<p><span class="courier-code">self.name=x</span></p>
			<p><span class="courier-code">self.balance=y</span></p>
			<p class="no-indent">Το «περίεργο» σ’ αυτή την έμμεση κλήση της <span class="courier-code">__init__</span> είναι ότι ο αριθμός των παραμέτρων στον ορισμό της (γραμμή 2) δεν ταιριάζει με το πλήθος των τιμών που της αποστέλλονται (γραμμές 5 και 6). Αυτό συμβαίνει γιατί η παράμετρος <span class="courier-code">self</span> υπάρχει υποχρεωτικά στη δήλωση της μεθόδου και ανεξάρτητα από τις υπόλοιπες τιμές, ενώ τίθεται πρώτη στη λίστα παραμέτρων.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Η ονομασία <span class="courier-code">self</span> δεν είναι υποχρεωτική. Αντί αυτού του ονόματος θα μπορούσε να χρησιμοποιηθεί οποιοδήποτε άλλο έγκυρο όνομα της γλώσσας. Κατά σύμβαση όμως είναι αυτό που χρησιμοποιείται συνήθως από όλους στην Python. Όταν διαβάζει κανείς τον κώδικα ενός προγράμματος που έχει γράψει κάποιος άλλος, το λεκτικό <span class="courier-code">self</span> είναι αυτό που περιμένει να βρει στον ορισμό των ιδιοτήτων ενός αντικειμένου. Αυτή η ονομασία μοιάζει με την ονομασία <span class="courier-code">this</span> που χρησιμοποιούν άλλες γλώσσες, όπως η Java.</p>
			</aside>
			<p class="no-indent">Η εντολή <span class="courier-code">for</span> στη γραμμή 8 δέχεται τα δυο αντικείμενα (με τη μορφή λίστας) και εμφανίζει τις ιδιότητές τους (γραμμή 9) στην οθόνη:</p>
			<p><span class="courier-code">Πελάτης:Άννα,Υπόλοιπο:500</span></p>
			<p><span class="courier-code">Πελάτης:Πέτρος,Υπόλοιπο:0</span></p>
			<p class="no-indent">Αυτό το χαρακτηριστικό, όπου μια εντολή, όπως η <span class="courier-code">for</span>, έχει πρόσβαση σε πληροφορίες διαφορετικών αντικειμένων, είναι ένα ακόμα βασικό χαρακτηριστικό του προγραμματισμού με αντικείμενα, ονομάζεται πολυμορφισμός και θα περιγραφεί αναλυτικά στη συνέχεια του κεφαλαίου.</p>
		</section>
		<section role="section" id="ch13se6">
			<h1><span role="label">11.6</span> Πώς χρησιμοποιείται μια κλάση</h1>
			<p class="no-indent">Αφού ολοκληρωθεί ο ορισμός της, η κλάση μπορεί να χρησιμοποιηθεί με διάφορους τρόπους. Μπορεί να γίνει χρήση της μέσα στο ίδιο αρχείο πηγαίου κώδικα όπου δημιουργήθηκε (όπως στο προηγούμενο παράδειγμα), αλλά και σε άλλα προγράμματα που βρίσκονται σε άλλα αρχεία ή στην κονσόλα του διερμηνευτή.</p>
			<p>Έστω ότι ο ορισμός της κλάσης <span class="courier-code">Client</span> αποθηκεύεται στο αρχείο <span class="courier-code">bank.py</span> (Λίστα Κώδικα 11-5).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-5 | Περιεχόμενα αρχείου <span class="courier-code">bank.py</span> με τον ορισμό της κλάσης <span class="courier-code">client</span></figcaption><img src="media/ListaKodika-11-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Για να μπορέσει να γίνει χρήση της κλάσης <span class="courier-code">Client</span> από ένα άλλο πρόγραμμα (π.χ. στο αρχείο <span class="courier-code">bank</span><span class="courier-code">_clients.py</span> που βρίσκεται στον ίδιο κατάλογο με το αρχείο <span class="courier-code">bank.py</span>), θα πρέπει να προηγηθεί εισαγωγή του αρχείου <span class="courier-code">bank.py</span> με την εντολή <span class="courier-code">import</span>, όπως φαίνεται στη Λίστα Κώδικα 11-6<span class="courier-code">.</span></p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-6 | Περιεχόμενα αρχείου <span class="courier-code">bank_clients.py</span> και χρήση της κλάσης <span class="courier-code">client</span></figcaption><img src="media/ListaKodika-11-6_fmt.png" alt=""/></figure>
			<p class="no-indent">Σ’ αυτή την περίπτωση το όνομα της βιβλιοθήκης <span class="courier-code">bank</span>, που δεν είναι παρά το αρχείο πηγαίου κώδικα το οποίο περιέχει τον ορισμό της κλάσης, θα πρέπει να προηγείται του ονόματος της κλάσης και να συνδέονται αυτά τα στοιχεία με τον χαρακτήρα της τελείας (‘<span class="courier-code">.</span>’):</p>
			<p><span class="courier-code">bank.Client</span></p>
			<p class="no-indent">Το ίδιο ακριβώς θα μπορούσε να γίνει και από την κονσόλα:</p>
			<p><span class="courier-code">&gt;&gt;&gt;</span><span class="courier-code"> import bank</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1=bank.Client(&apos;Άννα&apos;,500)</span></p>
		</section>
		<section role="section" id="ch13se7">
			<h1><span role="label">11.7</span> Μέθοδοι οριζόμενες από τον χρήστη</h1>
			<p class="no-indent">Για τις δραστηριότητες των πελατών και την παρακολούθηση των συναλλαγών τους (αναλήψεις και καταθέσεις χρημάτων), θα χρειαστεί να δημιουργηθούν κατάλληλες μέθοδοι. Για παράδειγμα, όταν γίνεται μια κατάθεση, θα πρέπει να ενημερώνεται το υπόλοιπο των καταθέσεων του πελάτη. Για την ενημέρωση χρειάζεται να γραφτεί κώδικας που θα τροποποιεί ένα από τα δεδομένα του αντικειμένου του πελάτη. Σ’ αυτή την περίπτωση, μπορεί να γίνει μια μέθοδος με την οποία θα αλλάζει το υπόλοιπο μετά από κάθε κατάθεση του πελάτη. Ο πελάτης όμως θα έχει πρόσβαση μόνο στο δικό του υπόλοιπο, όχι στο υπόλοιπο άλλων πελατών. Η Λίστα Κώδικα 11-7 περιλαμβάνει την καινούργια μέθοδο.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-7 | Μέθοδοι – καταθέσεις</figcaption><img src="media/ListaKodika-11-7a_fmt.png" alt=""/></figure>
			<p class="no-indent">Η νέα μέθοδος δέχεται, εκτός από το όνομα του αντικειμένου στο οποίο αναφέρεται (<span class="courier-code">self</span>), το ποσό της κατάθεσης (<span class="courier-code">amount</span>) που θα προστεθεί στο υπόλοιπο του πελάτη. Η συνάρτηση <span class="courier-code">abs</span> δόθηκε ώστε να μην υπάρχει πρόβλημα σε περίπτωση που δοθεί αρνητικό ποσό.</p>
			<p>Με την έκφραση <span class="courier-code">self</span>.<span class="courier-code">balance</span>, η μέθοδος έχει πρόσβαση στην ιδιότητα <span class="courier-code">balance</span>, οποιουδήποτε αντικειμένου πελάτη, την οποία και ενημερώνει. Η χρήση της νέας μεθόδου φαίνεται στο επόμενο τμήμα προγράμματος.</p>
			
			<img src="media/ListaKodika-11-7b_fmt.png" alt=""/>
			<p class="no-indent">Στις γραμμές 1 και 3 δημιουργούνται δυο νέα αντικείμενα τύπου <span class="courier-code">Client</span>, δυο δηλαδή νέοι πελάτες, οι <span class="courier-code">c1</span> και <span class="courier-code">c2</span>, με υπόλοιπα λογαριασμών <span class="courier-code">100</span> και <span class="courier-code">200</span> αντίστοιχα. Στις γραμμές 2 και 4 γίνονται δυο κινήσεις, μια για κάθε πελάτη, που αφορούν κατάθεση 50€ και 100€ αντίστοιχα. Εδώ γίνεται και η κλήση της μεθόδου <span class="courier-code">deposit</span>. Το σημαντικό είναι ότι δεν χρειάστηκε να προγραμματιστεί ξεχωριστά για κάθε πελάτη αυτή η λειτουργία. Υπάρχει μόνο μια φορά, μέσα στην κλάση <span class="courier-code">Client</span>, την οποία κληρονομούν και αποκτούν όλοι οι πελάτες. Στη γραμμή 5 εμφανίζονται τα νέα υπόλοιπα των πελατών. Για τον σκοπό αυτό χρησιμοποιείται το όνομα του αντικειμένου, η τελεία και το όνομα της ιδιότητας. Τα αποτελέσματα της εντολής είναι:</p>
			<p><span class="courier-code">150 300</span></p>
			<p class="no-indent">Η επόμενη μέθοδος που πρέπει να δημιουργηθεί διαχειρίζεται τις <i>αναλήψεις (withdrawals)</i> των πελατών. Σε αυτή την περίπτωση όμως θα πρέπει να υπάρχει και έλεγχος για το αν μπορεί να πραγματοποιηθεί η συγκεκριμένη κίνηση. Αυτό εξαρτάται κάθε φορά από το διαθέσιμο υπόλοιπο (<span class="courier-code">balance</span>) του λογαριασμού. Ο τρόπος σύνταξης της νέας μεθόδου είναι παρόμοιος με της <span class="courier-code">deposit</span>.</p>

			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-8 | Μέθοδοι – αναλήψεις</figcaption><img src="media/ListaKodika-11-8a_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μέθοδος δέχεται το ποσό ανάληψης (<span class="courier-code">amount</span>). Το στιγμιότυπο αντικειμένου πελάτη (<span class="courier-code">self</span>) εξακολουθεί να είναι απαραίτητο στη λίστα παραμέτρων, αφού χρειάζεται να δοθεί πρόσβαση σε στοιχεία του πελάτη (<span class="courier-code">self</span>.<span class="courier-code">balance</span>). Στη γραμμή 10 γίνεται ο απαραίτητος έλεγχος για το αν το υπόλοιπο (<span class="courier-code">balance</span>) επαρκεί (είναι μεγαλύτερο ή ίσο από το ποσό ανάληψης). Αν δεν ισχύει αυτό, η μέθοδος σταματά τη συναλλαγή εδώ, εμφανίζοντας (γραμμή 14) ένα κατάλληλο μήνυμα. Διαφορετικά, η κίνηση ολοκληρώνεται αφαιρώντας το ποσό ανάληψης (<span class="courier-code">amount</span>) από το διαθέσιμο υπόλοιπο. Στο σημείο αυτό θα πρέπει να εκτελεστεί πάλι ο νέος κώδικας και να φορτωθεί στον χώρο ονομάτων του διερμηνευτή ο νέος ορισμός του αντικειμένου, ώστε στον συντάκτη ή στην κονσόλα να μπορούν να γίνουν οι απαραίτητες δοκιμές.</p>
			<img src="media/icon-2_fmt.png" alt=""/>
			<img src="media/ListaKodika-11-8b_fmt.png" alt=""/>
			<p class="no-indent">Στην περίπτωση του πελάτη <span class="courier-code">c1</span>, η ανάληψη ολοκληρώνεται επιτυχώς και εμφανίζεται το νέο υπόλοιπο. Αντίθετα, ο <span class="courier-code">c2</span> δεν μπορεί να ολοκληρώσει την ανάληψη αφού το υπόλοιπό του δεν είναι αρκετό.</p>
		</section>
		<section role="section" id="ch13se8">
			<h1><span role="label">11.8</span> Ιδιότητες κλάσης</h1>
			<p class="no-indent">Συχνά είναι αναγκαίο διαφορετικά αντικείμενα να έχουν πρόσβαση στην ίδια πληροφορία, ώστε να μπορούν όχι μόνο να τη «βλέπουν», αλλά και να την τροποποιούν. Οι <i>ιδιότητες κλάσης (class attributes)</i> έχουν αυτή την ικανότητα. Είναι μεταβλητές που δηλώνονται έξω και πριν από κάθε μέθοδο, αλλά μέσα στην κλάση. Στο προηγούμενο παράδειγμα, θα προστεθούν δυο τέτοιες μεταβλητές. Η μια θα αφορά το συνολικό ποσό όλων των καταθέσεων, ενώ η άλλη θα περιλαμβάνει μια λίστα με τα ονόματα όλων των πελατών. Ο κώδικας φαίνεται στη Λίστα Κώδικα 11-9.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-9 | Ιδιότητες κλάσης</figcaption><img src="media/ListaKodika-11-9_fmt.png" alt=""/></figure>
			<p class="no-indent">Ο ορισμός των νέων ιδιοτήτων είναι έτοιμος (γραμμές 2 και 3). Έχει δοθεί μάλιστα μια αρχική τιμή στο καθένα. Ο τρόπος πρόσβασης ωστόσο, που θα έχουν τα αντικείμενα σε αυτές τις ιδιότητες, θέλει προσοχή. Όπως παρουσιάστηκε σε προηγούμενη ενότητα, τα παραπάνω χαρακτηριστικά είναι κοινά σε κάθε αντικείμενο της κλάσης, αλλά ταυτόχρονα μπορεί και να αποκτήσουν τοπικό χαρακτήρα, ώστε ένα αντικείμενο να διαθέτει τη δική του «εκδοχή» του χαρακτηριστικού. Για τον σκοπό αυτό, και για να μην επαναλαμβάνεται ο ίδιος κώδικας σε διαφορετικά σημεία της κλάσης, θα δημιουργηθεί μια κατάλληλη μέθοδος για την ενημέρωση του γενικού συνόλου. Ακολουθεί η νέα υλοποίηση της κλάσης:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-10 | Χειρισμός ιδιοτήτων κλάσης</figcaption><img src="media/ListaKodika-11-10_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 24 ορίζεται μια νέα μέθοδος, η <span class="courier-code">transaction</span>, που δέχεται το ποσό (ανάληψης ή κατάθεσης – <span class="courier-code">amount</span>) και πραγματοποιεί την ενημέρωση του γενικού συνόλου (<span class="courier-code">total</span>). Η μέθοδος αυτή καλείται στις γραμμές 7, 15 και 22, κάθε φορά δηλαδή που ενημερώνεται το υπόλοιπο ενός πελάτη. Στη γραμμή 15 το ποσό μπαίνει με αρνητικό πρόσημο ώστε να αφαιρεθεί το ποσό της ανάληψης από το συνολικό ποσό.</p>
			<p>Η γραμμή 25 της μεθόδου <span class="courier-code">transaction</span> πραγματοποιεί την ενημέρωση της ιδιότητας της κλάσης <span class="courier-code">total</span> με έναν ιδιαίτερο τρόπο:</p>
			<p><span class="courier-code">self.__class__.total+=amount</span></p>
			<p class="no-indent">Η εντολή αυτή κάνει χρήση της <span class="courier-code">total</span> σε επίπεδο κλάσης (<span class="courier-code">__class__</span>) του στιγμιότυπου (<span class="courier-code">self</span>). Η κλήση της θα μπορούσε να γίνει βάζοντας το όνομα της κλάσης:</p>
			<p><span class="courier-code">Client.total+=</span><span class="courier-code">amount</span></p>
			<p class="no-indent">Κάτι τέτοιο όμως ίσως δυσκόλευε τυχόν μελλοντικές προσπάθειες ενημέρωσης ή αλλαγής του κώδικα. Αν για κάποιο λόγο αλλάξει το όνομα της κλάσης, θα πρέπει να αλλάξει παντού οποιαδήποτε αναφορά σε αυτό. Με τη χρήση της ειδικής μεθόδου <span class="courier-code">__class__</span> , σε συνδυασμό με το όνομα <span class="courier-code">self</span>, η Python γνωρίζει ότι επιχειρείται πρόσβαση σε ένα χαρακτηριστικό της κλάσης.</p>
			<p>Στις γραμμές 9, 14 και 21 πραγματοποιείται ενημέρωση της λίστας συναλλαγών (<span class="courier-code">transactions</span>) κατά την κατάθεση ή ανάληψη. Η πρόσβαση γίνεται με παρόμοιο τρόπο με την <span class="courier-code">total</span>, μόνο που εδώ η μεταβλητή κλάσης είναι λίστα. Σε αυτή τη λίστα προστίθεται μια πλειάδα που περιέχει τη λέξη “<span class="courier-code">Χρέωση</span>” ή “<span class="courier-code">Πίστωση</span>”, το όνομα του πελάτη και το ποσό που κινήθηκε. </p>
		</section>
		<section role="section" id="ch13se9">
			<h1><span role="label">11.9</span> Στατικές μέθοδοι</h1>
			<p class="no-indent">Στη Λίστα Κώδικα 11-11 περιλαμβάνονται δυο ακόμη μέθοδοι.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-11 | Στατικές μέθοδοι</figcaption><img src="media/ListaKodika-11-11_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μέθοδος <span class="courier-code">showclients</span> δεν διαθέτει καμία παράμετρο στη δήλωσή της. Αμέσως πριν από αυτήν υπάρχει ο διακοσμητής ‘<span class="courier-code">@</span>’<sup class="superscript CharOverride-1"><span id="footnote-011-backlink"><a href="#footnote-011">83</a></span></sup> που ορίζει ότι η μέθοδος θα είναι στατική, δεν θα έχει δηλαδή πρόσβαση στα στοιχεία κάποιου αντικειμένου και δεν θα κάνει τροποποιήσεις στα δεδομένα. Η μέθοδος επιστρέφει, σε μορφοποιημένη συμβολοσειρά, μια λίστα με τα ονόματα των πελατών. Αυτή η λίστα προέρχεται από τα στοιχεία των συναλλαγών.</p>
			<p>Σαρώνεται η λίστα με τις συναλλαγές, δημιουργείται λίστα με το όνομα πελάτη κάθε συναλλαγής, γίνεται σύνολο για να διαγραφούν πολλαπλές τιμές και επιστρέφεται η τελική λίστα με τα ονόματα. Η κλήση της γίνεται με την εντολή:</p>
			<p><span class="courier-code">Client</span><span class="courier-code">.showclients()</span></p>
			<p class="no-indent">Μια ακόμη μέθοδος δημιουργήθηκε και περιλαμβάνει την εμφάνιση όλων των συναλλαγών που πραγματοποιήθηκαν από έναν πελάτη. Η μέθοδος <span class="courier-code">showtrans</span> καλείται από κάθε στιγμιότυπο αντικειμένου:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;Άκης&apos;</span><span class="courier-code">,100)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1.deposit(100)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1.withdrawal(150)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1.showtrans()</span></p>
			<p><span class="courier-code">Κινήσεις που έκανε ο πελάτης Άκης:</span></p>
			<p><span class="courier-code">[(&apos;Πίστωση&apos;, 100), (&apos;Πίστωση&apos;, 100), (&apos;Χρέωση&apos;, -150)]</span></p>
			<p class="no-indent">και εμφανίζει όλες τις συναλλαγές του συγκεκριμένου πελάτη. Στον κώδικα που περιέχει περιλαμβάνεται μια σύνθεση λίστας η οποία φιλτράρει, με βάση το όνομα του πελάτη, τις τιμές της λίστας συναλλαγών (<span class="courier-code">transactions</span>) και επιστρέφει λίστα με τα στοιχεία των συναλλαγών που περιέχουν τα λεκτικά <span class="courier-code">&apos;Χρέωση&apos;</span> και <span class="courier-code">&apos;Πίστωση&apos;</span>, καθώς και το ποσό της συναλλαγής.</p>
		</section>
		<section role="section" id="ch13se10">
			<h1><span role="label">11.10</span> Μέθοδοι κλάσης</h1>
			<p class="no-indent">Οι μέθοδοι κλάσης χρησιμοποιούνται στις περιπτώσεις που χρειάζεται να γίνουν κάποιες ενέργειες από την ίδια την κλάση, χωρίς να είναι απαραίτητο να υπάρχει κάποιο στιγμιότυπό τους. Μπορούν να κληθούν πριν καν ξεκινήσουν να υπάρχουν τα αντικείμενα της κλάσης. Το χαρακτηριστικό αυτών των μεθόδων είναι ότι η πρώτη παράμετρος που δέχονται στον ορισμό τους είναι η κλάση στην οποία ανήκουν. Αυτή η ονομασία συνήθως είναι η <span class="courier-code">cls</span>, όχι όμως υποχρεωτικά.</p>
			<p>Το επόμενο παράδειγμα (Λίστα Κώδικα 11-12) περιλαμβάνει μια μέθοδο υπολογισμού του πλήθους συναλλαγών που έχουν γίνει έως τώρα, καθώς και μια με τον ρόλο ενός δευτερεύοντος κατασκευαστή στιγμιότυπων.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-12 | Μέθοδοι κλάσης</figcaption><img src="media/ListaKodika-11-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Η νέα μέθοδος <span class="courier-code">numtrans</span> μπορεί να κληθεί με την παρακάτω εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; Client.numtrans()</span></p>
			<p class="no-indent">και θα εμφανίσει το πλήθος των συναλλαγών, δηλαδή το πλήθος των καταχωρίσεων στη λίστα <span class="courier-code">transactions</span>:</p>
			<p><span class="courier-code">Έγιναν 3 συναλλαγές</span></p>
			<p class="no-indent">Σε αρκετές περιπτώσεις είναι απαραίτητο να μπορεί να δημιουργείται ένα αντικείμενο κλάσης μέσα από λειτουργίες της ίδιας της κλάσης. Για παράδειγμα, ένα αντικείμενο πελάτη θα μπορούσε να δημιουργηθεί όχι μόνο μέσω του κατασκευαστή __<span class="courier-code">init</span>__ αλλά και από μια μέθοδο κλάσης που μπορεί να λειτουργήσει ως <i>κατασκευαστής (constructor)</i>, αν επιστρέψει αντικείμενο της κλάσης με την οποία κλήθηκε. Αυτό είναι ιδιαίτερα χρήσιμο όταν χρειάζεται να παρακαμφθεί η κανονική διαδικασία παραγωγής αντικειμένων μέσω της μεθόδου __<span class="courier-code">init</span>__. Η δεύτερη μέθοδος, <span class="courier-code">noname</span>, υλοποιεί αυτή τη λειτουργία: </p>
			<p><span class="courier-code">&gt;&gt;&gt; c0=Client.noname()</span></p>
			<p class="no-indent">Το νέο αντικείμενο <span class="courier-code">c0</span> είναι τύπου <span class="courier-code">Client</span>, δημιουργημένο όμως από τη μέθοδο <span class="courier-code">noname</span> της κλάσης <span class="courier-code">Client</span>. Η <span class="courier-code">return</span>, στη γραμμή 11, επιστρέφει:</p>
			<p><span class="courier-code">cls(&apos;&apos;,0)</span></p>
			<p class="no-indent">και καταχωρεί το νέο αντικείμενο στο <span class="courier-code">c0</span>, όπως θα γινόταν κανονικά:</p>
			<p><span class="courier-code">c0=Client(&apos;&apos;,0)</span>.</p>
		</section>
		<section role="section" id="ch13se11">
			<h1><span role="label">11.11</span> Ειδικές μέθοδοι</h1>
			<p class="no-indent">Όπως αναφέρθηκε στην αρχή, η Python έχει μια σειρά από <i>ειδικές μεθόδους (special methods)</i>, που συχνά φέρουν το προσωνύμιο «<i>μαγικές</i>». Αυτές οι μέθοδοι προσθέτουν ειδικά χαρακτηριστικά σε ένα αντικείμενο και χρησιμοποιούνται για συγκεκριμένο κάθε φορά σκοπό. Ορίζοντάς τες, η γλώσσα θα χρησιμοποιήσει τις λειτουργίες αυτές κατάλληλα, όταν χρειαστεί. Για παράδειγμα, αν οριστεί η μέθοδος __<span class="courier-code">str</span>__ για ένα αντικείμενο, ό,τι οριστεί σ’ αυτήν θα χρησιμοποιείται κάθε φορά που θα τυπώνεται το αντικείμενο μέσω της εντολής <span class="courier-code">print</span>. Χωρίς αυτή τη μέθοδο, αν γίνει χρήση της <span class="courier-code">print</span> με ένα αντικείμενο, θα εμφανιστεί μήνυμα που θα περιέχει τις γενικές πληροφορίες του:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;Άννα&apos;</span><span class="courier-code">)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(c1)</span></p>
			<p><span class="courier-code">&lt;__main__.Client object at 0x0000020AB9B7E780&gt;</span></p>
			<p class="no-indent">Όπως φαίνεται από το αποτέλεσμα, οι πληροφορίες που εμφανίζονται αφορούν, γενικά, το είδος του αντικειμένου <span class="courier-code">c1</span> και τίποτα περισσότερο. Θα φαινόταν όμως πιο χρήσιμο, αν μέσω της <span class="courier-code">print</span> εμφανίζονταν περισσότερα και πιο κατανοητά χαρακτηριστικά του αντικειμένου <span class="courier-code">c1</span>, όπως το όνομα του πελάτη, το υπόλοιπό του κ.λπ. Αυτό γίνεται με την υλοποίηση της μεθόδου __<span class="courier-code">str</span>__ μέσα στον ορισμό της κλάσης <span class="courier-code">Client</span> (Λίστα Κώδικα 11-13).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-13 | Ειδικές μέθοδοι – <span class="courier-code">str</span></figcaption><img src="media/ListaKodika-11-13_fmt.png" alt=""/></figure>
			<p class="no-indent">Με αυτό τον τρόπο η Python ξέρει πλέον, κάθε φορά που τυπώνεται ένα αντικείμενο όπως το <span class="courier-code">c1</span>, μέσω της <span class="courier-code">print</span>, τι ακριβώς να τυπώσει στην οθόνη:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;Άννα&apos;,500)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c2=Client(&apos;Χαρά&apos;,300)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; print(c1)</span></p>
			<p><span class="courier-code">Πελάτης</span><span class="courier-code">: Άννα,υπόλοιπο:500</span></p>
			<p><span class="courier-code">Ένα αντικείμενο τύπου:&lt;class &apos;__main__.Client&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt;&gt; str(c2)</span></p>
			<p><span class="courier-code">Πελάτης</span><span class="courier-code">: Χαρά,υπόλοιπο:300</span></p>
			<p><span class="courier-code">Ένα αντικείμενο τύπου:&lt;class &apos;__main__.Client&apos;</span></p>
			<p class="no-indent">Δεν χρειάζεται να δηλωθεί κάτι περισσότερο. Ο διερμηνευτής γνωρίζει τι πρέπει να κάνει και πώς να χρησιμοποιήσει τις πληροφορίες που έχουν δηλωθεί στην __<span class="courier-code">str</span>__. Αρκεί να της δοθεί αυτή η πληροφορία στο τμήμα <span class="courier-code">return</span>, οπότε θα την επιστρέφει κάθε φορά που θα τίθεται το αντικείμενο ως όρισμα στην εντολή <span class="courier-code">print</span> ή τη συνάρτηση <span class="courier-code">str</span>. Εκτός από τις μεθόδους που αναφέρθηκαν μέχρι τώρα, η Python προσφέρει τη δυνατότητα χρήσης και άλλων ειδικών μεθόδων. Η αναγνώρισή τους γίνεται εύκολα από τη <i>διπλή</i> <i>υπογράμμιση (double underscore</i><sup class="superscript CharOverride-1"><span id="footnote-010-backlink"><a href="#footnote-010">84</a></span></sup><i>)</i> πριν και μετά το όνομά τους.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			
			<p>Με τις ειδικές μεθόδους ο προγραμματιστής μπορεί να επικοινωνήσει και να κάνει χρήση του μοντέλου που ονομάζεται <i>μοντέλο</i><i> δεδομένων της Python (Python Data Model)</i>, ώστε να εκμεταλλευτεί ενσωματωμένες δομές όπως λίστες, λεξικά κ.λπ. και τις αντίστοιχες ιδιότητές τους, προσαρμόζοντάς τες στις ανάγκες του. Με αυτό τον τρόπο οι ειδικές μέθοδοι προσφέρουν τη σύνδεση των προγραμμάτων με το <i>περιβάλλον διεπαφής της γλώσσας (API – Applicati</i><i>on Programming Interface)</i>.</p>
			<p class="aside-end"><span>[aside-end]</span> </p>
			<p class="no-indent">Μέχρι τώρα τα αντικείμενα τύπου <span class="courier-code">Client</span> έχουν κάποιες ιδιότητες (<span class="courier-code">name</span>, <span class="courier-code">balance</span>) και συγκεκριμένη συμπεριφορά (<span class="courier-code">showtrans</span>, <span class="courier-code">deposit</span> κ.λπ.) ώστε να εκτελούν κατάλληλες λειτουργίες. Δεν διαθέτουν όμως χαρακτηριστικά που έχουν άλλες δομές, όπως οι λίστες ή οι αριθμοί. Για παράδειγμα, οι παρακάτω εντολές θα αποτύχουν:</p>
			<p><span class="courier-code">&gt;&gt;&gt; c1()</span></p>
			<p><span class="courier-code">TypeError: &apos;Client&apos; object is</span><span class="courier-code"> not callable</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1+50</span></p>
			<p><span class="courier-code">TypeError: unsupported operand type(s) for +: &apos;Client&apos; and &apos;int&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1[1]</span></p>
			<p><span class="courier-code">TypeError: &apos;Client&apos; object does not support indexing</span></p>
			<p class="no-indent">κάτι αναμενόμενο, γιατί τέτοιου είδους χαρακτηριστικά δεν έχουν ενσωματωθεί στην κλάση <span class="courier-code">Client</span>. Μπορούν όμως να δημιουργηθούν με την υλοποίηση κατάλληλων ειδικών μεθόδων. Τα πρόσθετα αυτά χαρακτηριστικά φαίνονται στη Λίστα Κώδικα 11-14.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-14 | Ειδικές μέθοδοι – <span class="courier-code">len,call,getitem</span> κ.λπ.</figcaption><img src="media/ListaKodika-11-14_fmt.png" alt=""/></figure>
			<section role="subsection" id="ch13se11ss1">
				<h1><span role="label">11.11.1</span> Η μέθοδος <span class="courier-code">__repr__</span></h1>
				<p class="no-indent">Η μέθοδος __<span class="courier-code">repr</span>__ χρησιμοποιείται για τη «φυσική» αναπαράσταση του αντικειμένου. Κάθε φορά που δίνεται στην κονσόλα το όνομα ενός αντικειμένου, γίνεται χρήση αυτής της μεθόδου:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;Χάρης&apos;,300)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; </span><span class="courier-code">c1</span></p>
				<p><span class="courier-code">Αντικείμενο Client-Πελάτης Χάρης</span></p>
				<p class="no-indent">Η χρήση του ονόματος του αντικειμένου στην κονσόλα εμφανίζει ό,τι επιστρέφει η μέθοδος __<span class="courier-code">repr</span>__. Αν δεν έχει οριστεί η μέθοδος __<span class="courier-code">str</span>__, τότε η <span class="courier-code">print</span> χρησιμοποιεί τη __<span class="courier-code">repr</span>__.</p>
			</section>
			<section role="subsection" id="ch13se11ss2">
				<h1><span role="label">11.11.2</span> Η μέθοδος <span class="courier-code">__len__</span></h1>
				<p class="no-indent">Η μέθοδος __<span class="courier-code">len</span>__, μέσω της <span class="courier-code">return</span> που περιλαμβάνει, χρησιμοποιείται πλέον κανονικά, όπως και σε άλλα αντικείμενα. Η συγκεκριμένη υλοποίηση της μεθόδου επιστρέφει το πλήθος των συναλλαγών ενός συγκεκριμένου πελάτη:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1.deposit(100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1.</span><span class="courier-code">withdrawal(50)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; len(c1)#προσμετρά και την αρχική κατάθεση</span></p>
				<p><span class="courier-code">3</span></p>
				<p class="no-indent">Η __<span class="courier-code">len</span>__ χρησιμοποιεί τη μέθοδο <span class="courier-code">gettrans</span>, που δημιουργεί λίστα με τις συναλλαγές ενός πελάτη και επιστρέφει ως αποτέλεσμα το μέγεθός της. Το αποτέλεσμα <span class="courier-code">3</span> προέκυψε από το μέγεθος (μήκος) αυτής της λίστας.</p>
			</section>
			<section role="subsection" id="ch13se11ss3">
				<h1><span role="label">11.11.3</span> Η μέθοδος <span class="courier-code">__call__</span></h1>
				<p class="no-indent">Η μέθοδος __<span class="courier-code">call</span>__ δίνει τη δυνατότητα σε ένα αντικείμενο να μπορεί να <i>καλείται (callable)</i> με το όνομά του και με παρενθέσεις. Η μέθοδος, έτσι όπως δημιουργήθηκε στη Λίστα Κώδικα 11-14, επιστρέφει, σε κάθε κλήση ενός αντικειμένου τύπου πελάτη, τις συναλλαγές που έχει κάνει. Για τη σύνθεση της λίστας με τις συναλλαγές, χρησιμοποιείται μια βοηθητική μέθοδος, η <span class="courier-code">gettrans</span>. Τα αντικείμενα τύπου <span class="courier-code">Client</span> μπορούν να χρησιμοποιηθούν ως:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1()</span></p>
				<p><span class="courier-code">[(&apos;Πίστωση&apos;</span><span class="courier-code">, 300), (&apos;Πίστωση&apos;, 100), (&apos;Χρέωση&apos;, -50)]</span></p>
				<p class="no-indent">Όταν η __<span class="courier-code">call</span>__ επιστρέφει επαναληπτικό αντικείμενο, όπως η λίστα, τότε μπορεί να συμμετέχει και σε εντολές όπως η <span class="courier-code">for</span>:</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-15 | Μέθοδος <span class="courier-code">call</span></figcaption><img src="media/ListaKodika-11-15_fmt.png" alt=""/></figure>
				<p class="no-indent">τυπώνοντας όλες τις συναλλαγές του πελάτη <span class="courier-code">c1</span>:</p>
				<p><span class="courier-code">(&apos;Πίστωση&apos;, 300)</span></p>
				<p><span class="courier-code">(&apos;Πίστωση&apos;, 100)</span></p>
				<p><span class="courier-code">(&apos;Χρέωση&apos;, -50)]</span></p>
			</section>
			<section role="subsection" id="ch13se11ss4">
				<h1><span role="label">11.11.4</span> Η μέθοδος <span class="courier-code">__</span><span class="courier-code">getitem__</span></h1>
				<p class="no-indent">Ένα αντικείμενο που υλοποιεί τη συγκεκριμένη μέθοδο αποκτά την ιδιότητα του επαναληπτικού αντικειμένου. Με την προσθήκη μιας παραμέτρου, όπως η <span class="courier-code">pos</span>, και τη χρήση της σε αγκύλες, το αντικείμενο μπορεί να δεικτοδοτηθεί όπως μια λίστα ή συμβολοσειρά:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1[1]</span></p>
				<p><span class="courier-code">(&apos;Χρέωση&apos;, 100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1[-1]</span></p>
				<p><span class="courier-code">(&apos;Χρέωση&apos;, -50)</span></p>
			</section>
			<section role="subsection" id="ch13se11ss5">
				<h1><span role="label">11.11.5</span> Η μέθοδος <span class="courier-code">__setitem__</span></h1>
				<p class="no-indent">Με παρόμοιο τρόπο λειτουργεί και η μέθοδος __<span class="courier-code">setitem</span>__. Δέχεται δυο παραμέτρους, μια για τη θέση και μια για την τιμή, ενώ κάνει δυνατή την αλλαγή στοιχείων του αντικειμένου με βάση τη θέση τους. Στο παράδειγμα ενημερώνεται η λίστα <span class="courier-code">transactions</span>, αλλάζοντας μια συγκεκριμένη καταχώριση που αφορά έναν πελάτη:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1[0]=(&apos;Πίστωση&apos;, &apos;Χάρης&apos;, </span><span class="courier-code">500)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1()</span></p>
				<p><span class="courier-code">[</span><span class="courier-code"><b>(&apos;Πίστωση&apos;, 500)</b></span><span class="courier-code">, (&apos;Πίστωση&apos;, 100), (&apos;Χρέωση&apos;, -50)]</span></p>
			</section>
		</section>
		<section role="section" id="ch13se12">
			<h1><span role="label">11.12</span> Υπερφόρτωση τελεστών</h1>
			<p class="no-indent">Οι τελεστές της Python που παρουσιάστηκαν σε προηγούμενα κεφάλαια είναι υπεύθυνοι για την πραγματοποίηση πράξεων, ελέγχων ή λειτουργιών σε συγκεκριμένους τύπους δεδομένων. Τι συμβαίνει όμως με τα αντικείμενα που ορίζονται από τον χρήστη; Τι είδους λειτουργίες μπορούν να γίνουν; Η απάντηση είναι – όλες: Αρκεί να οριστεί κατάλληλα κάθε λειτουργία. Τη δυνατότητα αυτή την έχουν τα αντικείμενα μέσα από επιπλέον ειδικές μεθόδους που διαθέτει η γλώσσα. Αν και οι παρακάτω εντολές αρχικά αποτυγχάνουν:</p>
			<p><span class="courier-code">c1=Client(&apos;Χαρά&apos;,100)</span></p>
			<p><span class="courier-code">c2=Client(&apos;Πέτρος&apos;,300)</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1+100</span></p>
			<p><span class="courier-code">TypeError: unsupported operand type(s) for +: &apos;Client&apos; and &apos;int&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; c1&gt;c2</span></p>
			<p><span class="courier-code">TypeError: &apos;&gt;&apos; not supported between instances of &apos;Client&apos; and &apos;Client&apos;</span></p>
			<p class="no-indent">με τη χρήση των επόμενων ειδικών μεθόδων, όλες αυτές οι περιπτώσεις μπορούν να αντιμετωπιστούν με επιτυχία.</p>
			<p>Πιο αναλυτικά, χρησιμοποιώντας ορισμένες από αυτές τις μεθόδους, ένα αντικείμενο μπορεί να υπερφορτώνει κάποιον τελεστή, ώστε για τη δική του περίπτωση να επιτελεί άλλη λειτουργία. Αυτό ακριβώς κάνει και η ίδια η γλώσσα Python όταν χρησιμοποιεί τον ίδιο τελεστή για διαφορετικά αντικείμενα:</p>
			<p><span class="courier-code">&gt;&gt;&gt; 1+1</span></p>
			<p><span class="courier-code">2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; &apos;α&apos;+&apos;β&apos;</span></p>
			<p><span class="courier-code">&apos;αβ&apos;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; [1,2]+[3,4]</span></p>
			<p><span class="courier-code">[1,2,3,4]</span></p>
			<p class="no-indent">Όπως φαίνεται και από τα παραδείγματα, ο ίδιος τελεστής, το ‘<span class="courier-code">+</span>’, χρησιμοποιείται με διαφορετικό τρόπο σε διαφορετικά είδη αντικειμένων.</p>
			<p>Στον Πίνακα 11-1 παρουσιάζονται οι ειδικές μέθοδοι της γλώσσας για τον χειρισμό τελεστών.</p>
			<figure role="table" id="tb28">
				<figcaption><span role="label">Πίνακας 11-1</span> | Υπερφόρτωση αριθμητικών τελεστών</figcaption>
				<table id="table044">
					<tbody>
						<tr>
							
								<th>Τελεστής</th>
							
							
								<th>Σύνταξη</th>
							
							
								<th>Λειτουργία</th>
							
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">+</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__add__(self, other)</span></p>
							</td>
							<td>
								<p>Άθροισμα</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">-</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__sub__(self, other)</span></p>
							</td>
							<td>
								<p>Αφαίρεση</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">*</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__mul__(self, other)</span></p>
							</td>
							<td>
								<p>Πολλαπλασιασμός</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">//</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__floordiv__(self, other)</span></p>
							</td>
							<td>
								<p>Ακέραια διαίρεση</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">/</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__truediv__(self, other)</span></p>
							</td>
							<td>
								<p>Πραγματική διαίρεση</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">%</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__mod__(self, other)</span></p>
							</td>
							<td>
								<p>Υπόλοιπο διαίρεσης</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">**</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.</span><span class="courier-code">__pow__(self, other[, modulo])</span></p>
							</td>
							<td>
								<p>Δύναμη</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&lt;&lt;</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__lshift__(self, other)</span></p>
							</td>
							<td>
								<p>Ολίσθηση αριστερά</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&gt;&gt;</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__rshift__(self, other)</span></p>
							</td>
							<td>
								<p>Ολίσθηση δεξιά</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&amp;</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__and__(self, other)</span></p>
							</td>
							<td>
								<p>Τελεστής and</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">^</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__xor__(self, other)</span></p>
							</td>
							<td>
								<p>Τελεστής xor</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">|</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__or__(self, other)</span></p>
							</td>
							<td>
								<p>Τελεστής or</p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Ο Πίνακας 11-2 περιέχει τις ειδικές μεθόδους συγκρίσεων.</p>
			<figure role="table" id="tb29">
				<figcaption><span role="label">Πίνακας 11-2</span> | Υπερφόρτωση συγκριτικών τελεστών</figcaption>
				<table id="table045">
					<tbody>
						<tr>
							
								<th>Τελεστής</th>
							
							
								<th>Σύνταξη</th>
							
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&lt;</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__lt__(self, other)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&lt;=</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__le__(self, other)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">==</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__eq__(self, other)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">!=</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__ne__(self, other)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&gt;=</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__ge__(self, other)</span></p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">&gt;</span></p>
							</td>
							<td>
								<p><span class="courier-code">object.__gt__(self, other)</span></p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Ακολουθούν για τις ανάγκες του παραδείγματος ενδεικτικές υλοποιήσεις υπερφόρτωσης κάποιων τελεστών με τους πελάτες της τράπεζας και την κλάση <span class="courier-code">Client</span>.</p>
			<section role="subsection" id="ch13se12ss1">
				<h1><span role="label">11.12.1</span> Η μέθοδος <span class="courier-code">__add__</span></h1>
				<p class="no-indent">Η μέθοδος __<span class="courier-code">add</span>__ τροποποιεί τη χρήση του τελεστή ‘<span class="courier-code">+</span>’. Το πρώτο που θα πρέπει να αποφασιστεί είναι ποιο χαρακτηριστικό της κλάσης χρειάζεται να χρησιμοποιηθεί, ώστε να υλοποιηθεί η πρόσθεση με το σύμβολο ‘<span class="courier-code">+</span>’. Μια λογική επιλογή θα ήταν το υπόλοιπο λογαριασμού του πελάτη. Έχοντας αυτό ως στόχο, η μέθοδος θα πάρει τη μορφή η οποία παρουσιάζεται στη Λίστα Κώδικα 11-16.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-16 | Υπερφόρτωση τελεστών – άθροισμα</figcaption><img src="media/ListaKodika-11-16_fmt.png" alt=""/></figure>
				<p class="no-indent">Η κωδικοποίηση είναι σχετικά απλή. Η μέθοδος δέχεται δυο ορίσματα: το αντικείμενο για το οποίο καλείται η μέθοδος (<span class="courier-code">self</span>) και κάποιο άλλο αντικείμενο (<span class="courier-code">other</span>). Με την υπόθεση ότι και τα δυο είναι αντικείμενα τύπου <span class="courier-code">Client</span>, η μέθοδος θα επιστρέψει το άθροισμα του χαρακτηριστικού <span class="courier-code">balance</span> των δυο αντικειμένων. Έτσι, μπορεί να τεθεί η παρακάτω εντολή άθροισης:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;A&apos;,100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c2=Client(&apos;B&apos;,200)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1+c2</span></p>
				<p><span class="courier-code">300</span></p>
				<p class="no-indent">Ο αριθμός <span class="courier-code">300</span> που επιστρέφεται ως αποτέλεσμα είναι το άθροισμα υπολοίπων των δυο αντικειμένων. Μπορεί να γίνει πρόσθεση με κάποιον αριθμό; Ναι, αρκεί να προηγηθεί μια μικρή τροποποίηση στον κώδικα της μεθόδου:</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-17 | Υπερφόρτωση τελεστών – γενικό άθροισμα</figcaption><img src="media/ListaKodika-11-17_fmt.png" alt=""/></figure>
				<p class="no-indent">Με αυτό τον ορισμό της __<span class="courier-code">add</span>__ μπορεί πλέον να γίνουν οι πιο κάτω πράξεις:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1+c</span><span class="courier-code">2</span></p>
				<p><span class="courier-code">300</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1+100</span></p>
				<p><span class="courier-code">200</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1+c2+100</span></p>
				<p><span class="courier-code">400</span></p>
				<p class="no-indent">Εκτός από τη μέθοδο __<span class="courier-code">add</span>__ μπορεί να χρησιμοποιηθεί και η μέθοδος __<span class="courier-code">radd</span>__ (<i>reversed add</i>), που αντιμετωπίζει την αντιστροφή των όρων ενός αθροίσματος.</p>
			</section>
			<section role="subsection" id="ch13se12ss2">
				<h1><span role="label">11.12.2</span> Η μέθοδος <span class="courier-code">__</span><span class="courier-code">eq__</span></h1>
				<p class="no-indent">Με τη μέθοδο αυτή γίνεται έλεγχος ισότητας. Στην περίπτωση της κλάσης <span class="courier-code">Client</span> θα μπορούσε να χρησιμοποιηθεί οποιοδήποτε χαρακτηριστικό της: Το όνομα (<span class="courier-code">name</span>), για να ελεγχθεί αν δυο πελάτες υπάρχουν δυο φορές ώστε να εντοπιστούν διπλοεγγραφές, αλλά και το υπόλοιπο (<span class="courier-code">balance</span>), για να συγκριθεί το υπόλοιπο δυο πελατών. Η παρακάτω κωδικοποίηση χρησιμοποιεί το υπόλοιπο λογαριασμού.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-18 | Υπερφορτωση τελεστων – έλεγχος ισότητας</figcaption><img src="media/ListaKodika-11-18_fmt.png" alt=""/></figure>
				<p class="no-indent">Με την ίδια λογική που χρησιμοποιήθηκε και στην <span class="courier-code">__add__</span>, το όρισμα <span class="courier-code">self</span> είναι το αντικείμενο πελάτης για το οποίο έγινε η κλήση της μεθόδου, ενώ το <span class="courier-code">other</span> είναι κάποιος άλλος πελάτης. Η <span class="courier-code">return</span> θα επιστρέψει την τιμή <span class="courier-code">True</span> ή <span class="courier-code">False</span>, αν το χαρακτηριστικό <span class="courier-code">balance</span> των δυο αντικειμένων είναι ίδιο:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1=Client(&apos;A&apos;,100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c2=Client(&apos;B&apos;,200)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c3=Client(&apos;C&apos;,100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1==c2</span></p>
				<p><span class="courier-code">False</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1==c3</span></p>
				<p><span class="courier-code">True</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c2.withdrawal(100)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1==c3==c2</span></p>
				<p><span class="courier-code">True</span></p>
				<p class="no-indent">Όπως φαίνεται και από τις παραπάνω δοκιμές, είναι δυνατή και η σύνθετη χρήση του τελεστή ‘<span class="courier-code">==</span>’ τον οποίο υπερφορτώνει η __<span class="courier-code">eq</span>__ για τον έλεγχο πολλαπλών ισοτήτων. Ως αποτέλεσμα μπορεί να επιστραφεί και κάποια άλλη τιμή, εκτός από τα <span class="courier-code">True</span> ή <span class="courier-code">False</span>. Η παρακάτω υλοποίηση της μεθόδου επιστρέφει μια φράση (Λίστα Κώδικα 11-19).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-19 | Υπερφόρτωση τελεστών – έλεγχος με μήνυμα</figcaption><img src="media/ListaKodika-11-19_fmt.png" alt=""/></figure>
				<p class="no-indent">Γίνεται η σύγκριση στη γραμμή 6 αν τα ποσά των δυο αντικειμένων είναι ίδια. Το αποτέλεσμα που προκύπτει είναι <span class="courier-code">True</span> (1) ή <span class="courier-code">False</span> (0) και τίθεται ως τιμή δείκτη στη λίστα <span class="courier-code">same</span>, επιστρέφοντας το στοιχείο στην αντίστοιχη θέση.</p>
				<p>Για τους πελάτες <span class="courier-code">c1</span> και <span class="courier-code">c3</span>, η σύγκριση <span class="courier-code">c1==c3</span> θα επέστρεφε το μήνυμα:</p>
				<p>Ναι, έχουν ίδιο υπόλοιπο</p>
			</section>
			<section role="subsection" id="ch13se12ss3">
				<h1><span role="label">11.12.3</span> Η μέθοδος <span class="courier-code">__lt__</span></h1>
				<p class="no-indent">Η συγκεκριμένη μέθοδος δίνει τη δυνατότητα σε ένα αντικείμενο να διαθέτει μηχανισμό σύγκρισης της μορφής ‘<span class="courier-code">&lt;</span>’ (<i>μικρότερο από – less than</i>) μεταξύ αντικειμένων ίδιου τύπου. Το κριτήριο μπορεί να είναι οτιδήποτε, αλλά στο συγκεκριμένο παράδειγμα έγινε επιλογή του υπολοίπου του πελάτη. Η υλοποίηση μπορεί να πάρει τη μορφή η οποία παρουσιάζεται στη Λίστα Κώδικα 11-20.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-20 | Υπερφόρτωση τελεστών – σύγκριση</figcaption><img src="media/ListaKodika-11-20_fmt.png" alt=""/></figure>
				<p class="no-indent">Όπως φαίνεται από τη γραμμή 4, η μέθοδος επιστρέφει ένα λογικό αποτέλεσμα (<span class="courier-code">True</span> ή <span class="courier-code">False</span>) ανάλογα με το μέγεθος των υπολοίπων των δυο πελατών.</p>
				<p>Η χρήση της μεθόδου __<span class="courier-code">lt</span>__ γίνεται με απλό τρόπο μέσα σε ένα πρόγραμμα, όπως αυτό παρουσιάζεται στη Λίστα Κώδικα 11-21:</p>
				=
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-21 | Υπερφόρτωση τελεστών – συγκρίσεις</figcaption><img src="media/ListaKodika-11-21_fmt.png" alt=""/></figure>
				<p class="no-indent">το οποίο θα εμφανίσει το μήνυμα:</p>
				<p><span class="courier-code">O πελάτης Α έχει μικρότερο υπόλοιπο</span></p>
				<p class="no-indent">Τι γίνεται όμως στην περίπτωση των υπόλοιπων τύπων συγκρίσεων; Η μέθοδος __<span class="courier-code">lt</span>__ καλύπτει μόνο τη σύγκριση <span class="courier-code">&apos;&lt;&apos;</span>. Η παρακάτω εντολή δεν θα μπορεί να εκτελεστεί σωστά:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1&gt;=c2</span></p>
				<p><span class="courier-code">TypeError: &apos;&gt;=&apos; not supported between instances of &apos;Client&apos; and &apos;Client&apos;</span></p>
				<p class="no-indent">Για την ενσωμάτωση και των υπόλοιπων συγκρίσεων (<span class="courier-code">&gt;, &gt;=, &lt;=</span> κ.λπ.) θα έπρεπε να υλοποιηθούν και οι αντίστοιχες ειδικές μέθοδοι <span class="courier-code">(__gt__</span>, <span class="courier-code">__ge__</span> κ.λπ.). Η λύση σ’ αυτό το πρόβλημα έρχεται από τη βιβλιοθήκη <span class="courier-code">functools</span>, που μπορεί να διακοσμήσει την κλάση <span class="courier-code">Client</span>, ώστε να την εμπλουτίσει με τις υπόλοιπες λειτουργίες που λείπουν. Ο παρακάτω ορισμός (Λίστα Κώδικα 11-22) ενσωματώνει το εργαλείο αυτό.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-22 | Γενίκευση υπερφόρτωσης</figcaption><img src="media/ListaKodika-11-22_fmt.png" alt=""/></figure>
				<p class="no-indent">Ο διακοσμητής <span class="courier-code">@total_ordering</span> μπαίνει πριν από τον ορισμό της κλάσης <span class="courier-code">Client</span> στη γραμμή 2. Με αυτό τον τρόπο μπορούν να γίνουν συγκρίσεις κάθε είδους:</p>
				<p><span class="courier-code">&gt;&gt;&gt; c1&gt;c2 &#9;</span><span class="courier60"># με βάση τις τελευταίες τιμές των c1 και </span><span class="courier60">c2</span></p>
				<p><span class="courier-code">False&#9;&#9;</span><span class="courier60"># εμφανίζεται το αποτέλεσμα της __lt__</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1.deposit(200)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; c1&lt;=c2&#9;</span><span class="courier60"># εμφανίζεται το αποτέλεσμα της __eq__</span></p>
				<p><span class="courier-code">Ναι, έχουν ίδιο υπόλοιπο</span></p>
				<p class="no-indent">Η Λίστα Κώδικα 11-23 περιέχει ολόκληρο τον ορισμό της κλάσης <span class="courier-code">Client</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-23 | Ορισμός κλάσης <span class="courier-code">client</span></figcaption><img src="media/ListaKodika-11-23_fmt.png" alt=""/></figure>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 11-2</b>: Να δημιουργηθεί κλάση για την αναπαράσταση σημείων στο επίπεδο με τη μορφή (x,y) και:</p>
				</blockquote>
				<p class="arabic-level-2"><span>1.</span>Να οριστεί το άθροισμα σημείων ως το άθροισμα των συντεταγμένων τους, καθώς και να γίνει η απόδοσή του σε νέο αντικείμενο του ίδιου τύπου. </p>
				<p class="arabic-level-2"><span>2.</span>Να γίνει τροποποίηση της μεθόδου ώστε να μπορεί να προστεθεί σε κάποιο σημείο μια πλειάδα συντεταγμένων της μορφής (x,y). </p>
				<p class="arabic-level-2"><span>3.</span>Να προστεθεί η λειτουργία υπολογισμού της απόστασης μεταξύ δυο δοσμένων σημείων με βάση τον τύπο: </p>
				<p><img src="media/pg500.png" /></p>
				<p class="arabic-level-2"><span>4.</span>Να μορφοποιηθεί κατάλληλα η εμφάνιση των αντικειμένων στην οθόνη.</p>
				<p class="no-indent">Η νέα κλάση <span class="courier-code">Point</span> θα έχει την παρακάτω μορφή (Λίστα Κώδικα 11-24) και θα περιλαμβάνει πληροφορίες για τις συντεταγμένες <span class="courier-code">x</span> και <span class="courier-code">y</span> οποιουδήποτε σημείου στο επίπεδο.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-24 | Σημεία στο επίπεδο</figcaption><img src="media/ListaKodika-11-24_fmt.png" alt=""/></figure>
				<p class="no-indent">Η χρησιμοποίηση της κλάσης <span class="courier-code">Point</span> γίνεται στις γραμμές 18-23. Με την εκτέλεση του πιο πάνω σεναρίου θα εμφανιστούν στην οθόνη:</p>
				<p><span class="courier-code">Σημείο: (1,2),Σημείο: (0,5),Σημείο: (0,0)</span></p>
				<p><span class="courier-code">Σημείο</span><span class="courier-code">: (1,7)</span></p>
				<p><span class="courier-code">&apos;Απόσταση Σημείων 3.1622776601683795&apos;</span></p>
				<p class="no-indent">Η πρόσθετη λειτουργία της πρόσθεσης σημείου με οποιαδήποτε πλειάδα συντεταγμένων υλοποιείται στη Λίστα Κώδικα 11-25.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-25 | Υπερφόρτωση τελεστή πρόσθεσης</figcaption><img src="media/ListaKodika-11-25_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 3 δημιουργείται νέα πλειάδα (<span class="courier-code">p</span>) δύο στοιχείων, όπου κάθε στοιχείο προκύπτει από το άθροισμα των συντεταγμένων (<span class="courier-code">self.x</span>, <span class="courier-code">self.y</span>) με τα στοιχεία της πλειάδας <span class="courier-code">other</span>. Αν το <span class="courier-code">other</span> είναι πλειάδα, επιστρέφεται το νέο σημείο ως αντικείμενο <span class="courier-code">Point</span>, στη γραμμή 4. Το στοιχείο <span class="courier-code">*p</span> χρειάζεται, ώστε να επιστραφούν οι συντεταγμένες ως δύο διαφορετικοί αριθμοί και όχι ως πλειάδα. </p>
				<p>Έτσι, αν δοθεί στα αντικείμενα του προηγούμενου παραδείγματος η επόμενη εντολή:</p>
				<p><span class="courier-code">&gt;&gt;&gt; print(p1+(0,5))</span></p>
				<p class="no-indent">θα εμφανιστεί στην οθόνη: </p>
				<p><span class="courier-code">Σημείο: (1,7)</span></p>
			</section>
		</section>
		<section role="section" id="ch13se13">
			<h1><span role="label">11.13</span> Πρωτόκολλο επαναλήπτη</h1>
			<p class="no-indent">Σε πάρα πολλά σημεία, στις γραμμές που διαβάζετε και για διαφορετικό ίσως σκοπό κάθε φορά, χρησιμοποιήθηκαν εντολές όπως:</p>
			<p><span class="courier-code">&gt;&gt;&gt; sum([1,2,3])</span></p>
			<p><span class="courier-code">6</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; list(&apos;python&apos;)</span></p>
			<p><span class="courier-code">[&apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;]</span></p>
			<p class="no-indent">που εμφανίζουν, άμεσα, αποτελέσματα τα οποία σε άλλες γλώσσες, όπως η C, θα απαιτούσαν πολύπλοκες και επαναληπτικές δομές. Αυτές οι λειτουργίες συχνά αναφέρθηκε ότι δημιουργούν ή δέχονται επαναληπτικά αντικείμενα. <i>Επαναληπτικά αντικείμενα (iterable objects) </i>είναι αυτά που μπορεί κάποιος να έχει πρόσβαση στα στοιχεία τους μέσα από επαναληπτικές δομές. </p>
			<p>Στο Κεφάλαιο 10 παρουσιάστηκε ένας τρόπος δημιουργίας επαναληπτικών αντικειμένων με τη μορφή <i>γεννητριών συναρτήσεων (generators)</i>, που βοηθούν στην παραγωγή τιμών και στην ενσωμάτωσή τους σε εντολές <span class="courier-code">for</span>. Σε προηγούμενη ενότητα παρουσιάστηκε ένας ακόμη τρόπος επαναληπτικής χρήσης των αντικειμένων μιας κλάσης, με τη μέθοδο __<span class="courier-code">getitem</span>__, που προσανατολίζεται όμως κυρίως στη δυνατότητα δεικτοδότησης ενός αντικειμένου. Το ίδιο εύκολα όμως μπορεί κάθε αντικείμενο να ενσωματώσει τη λειτουργία ενός επαναληπτικού αντικειμένου, με την υλοποίηση των κατάλληλων ειδικών μεθόδων της Python. Έτσι, εύκολα υλοποιείται αυτό που ονομάζεται <i>πρωτόκολλο επαναλήπτη (iterator protocol)</i>.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			<aside>
			<p>Το πρωτόκολλο επαναλήπτη είναι ο μηχανισμός της Python που επιτρέπει την πρόσβαση σε επαναληπτικά αντικείμενα μέσω ενός ειδικού αντικειμένου που ονομάζεται <i>επαναλήπτης (iterator</i><i>)</i>.</p>
			<p>Μια πιο αφηρημένη θεώρηση του επαναλήπτη είναι ότι επιτρέπει τη δημιουργία ενός κοινού περιβάλλοντος διεπαφής με αντικείμενο που περιέχει <i>ακολουθία (sequence)</i> στοιχείων, ώστε να επιτρέπεται η πρόσβαση σ’ αυτά χωρίς να υπάρχει πληροφόρηση για την εσωτερική δομή και λειτουργία τους, κρατώντας αυτά τα χαρακτηριστικά εντελώς ανεξάρτητα.</p>
			</aside>
			<p class="no-indent">Γενικά, ισχύει ότι κάθε αντικείμενο θεωρείται επαναληπτικός τύπος δομής δεδομένων όταν μπορεί να επιστρέφει μια τιμή κάθε φορά που καλείται, ή μία μία τις τιμές του. Αυτό σημαίνει ότι μπορεί να χρησιμοποιηθεί σε μια επαναληπτική δομή, όπου σε κάθε επανάληψη θα αποδίδει διαδοχικά καθεμιά από τις τιμές του. Τέτοιες επαναληπτικές δομές μπορεί να είναι μια εντολή <span class="courier-code">for</span>, μια έκφραση σύνθεσης ή κάποια συνάρτηση που δέχεται επαναληπτικό όρισμα.</p>
			<p>Ο τρόπος που θα γίνει αυτή η απόδοση τιμής εξαρτάται από τη δομή του επαναληπτικού αντικειμένου, τον εσωτερικό τρόπο οργάνωσης που διαθέτει και τον μηχανισμό λειτουργίας του. Για παράδειγμα, μια λίστα θα αρχίσει να επιστρέφει τις τιμές της από την αρχή της, το 1ο στοιχείο στη θέση 0, προχωρώντας σε κάθε επανάληψη στο επόμενο στοιχείο της, μέχρι να εντοπίσει το τέλος της.</p>
			<p>Η σάρωση επομένως τέτοιας δομής (όπως και της πλειάδας ή της συμβολοσειράς) γίνεται σειριακά. Αντίθετα, σε μη διατεταγμένες δομές όπως τα σύνολα ή τα λεξικά, όπου η αποθήκευση των στοιχείων τους γίνεται μέσω <i>μηχανισμών κατακερματισμού (hashing)</i>, η σειρά σάρωσης και απόδοσης τιμών είναι <i>άγνωστη (arbitrary)</i> και, σχεδόν πάντα, αδιάφορη, καθώς δεν (πρέπει να) επηρεάζει το τελικό αποτέλεσμα.</p>
			<p>Κάθε δομή <i>ακολουθίας (sequence)</i>, όπως η λίστα ή, γενικά, ένα αντικείμενο που διαθέτει μέθοδο __<span class="courier-code">getitem</span>__ για δεικτοδότηση ή μέθοδο __iter__, είναι <i>επαναληπτικό αντικείμενο (iterable)</i> και μπορεί να παρέχει έναν μηχανισμό που ονομάζεται, όπως είδαμε, <i>επαναλήπτης </i><i>(iterator)</i><sup class="superscript CharOverride-1"><span id="footnote-009-backlink"><a href="#footnote-009">85</a></span></sup>. Ο επαναλήπτης, στην πράξη, είναι αντικείμενο που διαθέτει μια ειδική μέθοδο, τη <span class="courier-code">__next__</span>. Αυτή η μέθοδος καθιστά διαθέσιμα τα στοιχεία της επαναληπτικής δομής ένα ένα κάθε φορά. Όταν αυτά τελειώσουν, ο επαναλήπτης προκαλεί την εξαίρεση <span class="courier-code">StopIteration</span>.</p>
			<p>Εκτός από τα παραπάνω υπάρχει η <i>ενσωματωμένη (built-in) συνάρτηση</i> <span class="courier-code">iter</span>, που δέχεται ένα αντικείμενο με συλλογή δεδομένων (όπως ένα σύνολο) ή δομή ακολουθίας (όπως μια λίστα). Όταν κληθεί η <span class="courier-code">iter</span>, θα επιστρέψει ως αποτέλεσμα έναν επαναλήπτη ή μια εξαίρεση <span class="courier-code">TypeError</span>, αν το αντικείμενο που δέχθηκε δεν είναι επαναληπτικό.</p>
			<p>Η συνάρτηση <span class="courier-code">iter</span> μπορεί να κληθεί απευθείας με επαναληπτικό αντικείμενο και να δημιουργήσει έναν επαναλήπτη:</p>
			<p><span class="courier-code">&gt;&gt;&gt; myiter=iter([1,2,3])</span></p>
			<p class="no-indent">Η μεταβλητή <span class="courier-code">myiter</span> είναι επαναλήπτης. Δίνοντας την εντολή:</p>
			<p><span class="courier-code">&gt;&gt;&gt; type(myiter)</span></p>
			<p><span class="courier-code">&lt;list_iterator object at 0x000001842050A438&gt;</span></p>
			<p class="no-indent">αυτό το αντικείμενο διαθέτει μια κατάλληλη μέθοδο, τη <span class="courier-code">__next__</span>, για την ανά στοιχείο σάρωση της παραπάνω λίστας. Παρόμοια είναι και η λειτουργία της ενσωματωμένης συνάρτησης <span class="courier-code">next</span>, η οποία, με κάθε κλήση της, προκαλεί την προσπέλαση του επόμενου στοιχείου που χειρίζεται ο αντίστοιχος επαναλήπτης, καλώντας, εσωτερικά, τη μέθοδο <span class="courier-code">__next__ </span>που αυτός διαθέτει. Οι παρακάτω εντολές χρησιμοποιούν τη συνάρτηση <span class="courier-code">next</span>, για τη σάρωση των στοιχείων της λίστας:</p>
			<p><span class="courier-code">&gt;&gt;&gt; next(myiter)</span></p>
			<p><span class="courier-code">1</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(myiter)</span></p>
			<p><span class="courier-code">2</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(myiter)</span></p>
			<p><span class="courier-code">3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; next(myiter)</span></p>
			<p><span class="courier-code">StopIteration</span></p>
			<p class="no-indent">Μόλις τα στοιχεία της ακολουθίας τελειώσουν, ο επαναλήπτης επιστρέφει σφάλμα <span class="courier-code">StopIteration</span>. Σ’ αυτό το σημείο, ο επαναλήπτης έχει τελειώσει την εργασία του και δεν μπορεί να χρησιμοποιηθεί άλλο. Αν χρειαστεί να σαρώσει την ίδια λίστα ξανά, θα πρέπει να δημιουργηθεί από την αρχή. Ένα ακόμη στοιχείο που θα πρέπει να έχουμε υπόψη μας είναι ότι ο επαναλήπτης (στην ουσία, η μέθοδος <span class="courier-code">__next__</span> που διαθέτει) μας δίνει πρόσβαση στο επόμενο στοιχείο της ακολουθίας που χειρίζεται, αλλά όχι στο προηγούμενο.</p>
			<p>Ο μηχανισμός λειτουργίας της <span class="courier-code">for</span> κάνει εσωτερικά, χωρίς να αποκαλύπτει τις λεπτομέρειες υλοποίησής του, αυτήν ακριβώς την εργασία<sup class="superscript CharOverride-1"><span id="footnote-008-backlink"><a href="#footnote-008">86</a></span></sup>. Μια εντολή της μορφής:</p>
			<p><span class="courier-code">for στοιχείο in επαναληπτική δομή:</span></p>
			<p class="no-indent">καλεί την <span class="courier-code">iter</span> για αυτή τη δομή, δημιουργώντας έναν επαναλήπτη <i>άμεσα (on the fly) </i>που δεν είναι ορατός στον χρήστη. Ο επαναλήπτης χειρίζεται μια μέθοδο <span class="courier-code">next</span>, η οποία καλείται κάθε φορά που ξεκινά μια επανάληψη και συνεχίζει τις επαναλήψεις μέχρι να προκαλέσει μια εξαίρεση <span class="courier-code">StopIteration</span>, οπότε και τερματίζει.</p>
			<p>Η λειτουργία του μοντέλου επαναλήπτη επιτρέπει τον χειρισμό δομών, όπως τα σύνολα, που δεν είναι προσβάσιμες με κάποιου είδους δεικτοδότηση.</p>
			<p>Για την καλύτερη κατανόηση του μοντέλου αυτού, στο επόμενο παράδειγμα, κατασκευάζεται η κλάση <span class="courier-code">infrange </span>(Λίστα Κώδικα 11-26), η οποία υλοποιεί τις κατάλληλες μεθόδους (<span class="courier-code">__iter__</span> και <span class="courier-code">__next__</span>) για να μπορεί να λειτουργήσει κάθε στιγμιότυπό της ως επαναλήπτης.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-26 | Ατέρμων επαναλήπτης</figcaption><img src="media/ListaKodika-11-26a_fmt.png" alt=""/></figure>
			<p class="no-indent">Το επαναληπτικό αντικείμενο που δημιουργείται μπορεί να κληθεί με πολλούς τρόπους. Η συγκεκριμένη υλοποίηση κατασκευάζει έναν <i>επαναλήπτη με άπειρες τιμές (infinite iterator</i><i>)</i>. Κάθε φορά οδηγεί στη δημιουργία νέας τιμής και συνεχίζει να το κάνει αυτό για πάντα. Η χρήση του σε μια δομή <span class="courier-code">for</span> μπορεί να είναι η παρακάτω:</p>
			
			<img src="media/ListaKodika-11-26b_fmt.png" alt=""/>
			<p class="no-indent">που θα τυπώσει στην οθόνη:</p>
			<p><span class="courier-code">0,1,2,3,4,5,6,7,8,9,10,</span></p>
			<p class="no-indent">και: </p>
			<p><span class="courier-code">-1,-0.5,0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,</span></p>
			<p class="no-indent">Αυτή η μορφή μοιάζει με τον τρόπο που λειτουργεί μια εντολή <span class="courier-code">while</span> <span class="courier-code">True</span>, μόνο που επιπλέον δίνει πρόσβαση στα στοιχεία ενός επαναληπτικού αντικειμένου. Στη συγκεκριμένη περίπτωση απλά παράγεται ένας αριθμός, ενώ σε άλλες περιπτώσεις θα μπορούσε να είναι τα στοιχεία μιας λίστας, ενός συνόλου κ.λπ. Αυτό αφήνεται ως άσκηση για τον αναγνώστη.</p>
			<p>Τις περισσότερες φορές το επαναληπτικό αντικείμενο πρέπει να διαθέτει ένα <i>κριτήριο τερματισμού</i>, ώστε να μπορεί μετά από κάποιον αριθμό επαναλήψεων να σταματήσει. Η παρακάτω μορφή επαναλήπτη (Λίστα Κώδικα 11-27) προσθέτει μερικά ακόμη στοιχεία στο προηγούμενο παράδειγμα. Η νέα λειτουργία είναι ακριβώς ίδια με τη συνάρτηση <span class="courier-code">range</span>.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-27 | Επαναλήπτης <span class="courier-code">nrange</span></figcaption><img src="media/ListaKodika-11-27a_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 11 προσδιορίζεται το κριτήριο τερματισμού. Το επόμενο πρόγραμμα χρησιμοποιεί αντικείμενα τύπου <span class="courier-code">nrange</span> στην πράξη.</p>
			
			<img src="media/ListaKodika-11-27b_fmt.png" alt=""/>
			<p class="no-indent">Μόλις εκτελεστεί το παραπάνω πρόγραμμα, θα εμφανιστούν στην οθόνη τα πιο κάτω αποτελέσματα:</p>
			<p><span class="courier-code">0 1 2 3 4 5 6 7 8 9 </span></p>
			<p><span class="courier-code">-1 -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 </span></p>
			<p><span class="courier-code">0 1 2 3 4 </span></p>
			<p><span class="courier-code">[0, 1, 2, 3, 4]</span></p>
			<p><span class="courier-code">5050</span></p>
			<p><span class="courier-code">(0, 1, 2, 3, 4)</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 11-3</b>: Να δημιουργηθεί κλάση αντικειμένων που θα δέχεται δυο αριθμούς <i>a</i> και <i>b</i> και θα επιστρέφει τις δυνάμεις του 2 από το 2<sup class="superscript CharOverride-1">a</sup> μέχρι το 2<sup class="superscript CharOverride-1">b</sup>.</p>
			</blockquote>
			<p class="no-indent">Ακολουθεί η απάντηση στη Λίστα Κώδικα 11-28:</p>
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-28 | Κλάση για τις δυνάμεις του 2</figcaption><img src="media/ListaKodika-11-28a_fmt.png" alt=""/></figure>
			<p class="no-indent">και μια δοκιμαστική εκτέλεσή του:</p>
			<img src="media/ListaKodika-11-28b_fmt.png" alt=""/>
			<p class="no-indent">εμφανίζοντας τα παρακάτω αποτελέσματα:</p>
			<p><span class="courier-code">1 2 4 8 16 32 64 128 256</span></p>
			<p class="no-indent">Το αντικείμενο <span class="courier-code">p1</span> είναι επαναλήπτης και επαναληπτικό αντικείμενο. Αυτό φαίνεται και από τις παρακάτω εντολές στην κονσόλα, που χρησιμοποιούν τη βιβλιοθήκη <span class="courier-code">collections.abc</span>:</p>
			<p><span class="courier-code">&gt;&gt;&gt; import collections.abc</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; iter(p</span><span class="courier-code">1) is p1&#9;#Το p1 είναι επαναλήπτης</span></p>
			<p><span class="courier-code">True&#9;&#9;</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; isinstance(p1,collections.abc.Iterator)</span></p>
			<p><span class="courier-code">True&#9;&#9;#Το </span><span class="courier-code">p1 είναι στιγμιότυπο τύπου Iterator</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; isinstance(p1,collections.abc.Iterable)</span></p>
			<p><span class="courier-code">True&#9;&#9;#Το p1 είναι επίσης και Iterable</span></p>
			<p class="no-indent">Συνοψίζοντας, το σχήμα<sup class="superscript CharOverride-1"><span id="footnote-007-backlink"><a href="#footnote-007">87</a></span></sup> στην Εικόνα 11-3 αναπαριστά τον τρόπο που συνδέονται διάφορα αντικείμενα της Python με αυτό που ονομάζεται επαναλήπτης.</p>
			<figure class="image" id="img56" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 11-3 | Σχηματική αναπαράσταση επαναλήπτη</figcaption><img src="media/chapter_11_image_3.jpg" alt=""/></figure>
		</section>
		<section role="section" id="ch13se14">
			<h1><span role="label">11.14</span> Κληρονομικότητα</h1>
			<p class="no-indent">Το πιο σημαντικό χαρακτηριστικό του αντικειμενοστραφούς προγραμματισμού είναι η <i>κληρονομικότητα </i><i>(inheritance)</i>. Η σχεδίαση ενός προγράμματος ξεκινάει από τη γενικότερη θεώρηση του δοσμένου προβλήματος ως συνόλου από οντότητες, τις σχέσεις μεταξύ τους και την ιεραρχική δομή που τις χαρακτηρίζει. Στόχος είναι πρωταρχικά να γίνει η διάκριση των ξεχωριστών οντοτήτων που υπάρχουν και η <i>κατηγοριοποίησή τους (classification)</i> σε κλάσεις ή τάξεις. Μια κλάση θα περιλαμβάνει στοιχεία με ίδιες ιδιότητες. Αυτές οι ιδιότητες μπορεί να υπάρχουν όμως και σε άλλες υποκατηγορίες της. Έτσι, τις περισσότερες φορές είναι αναγκαίο να δημιουργηθούν παράγωγες ή εξαρτημένες υποομάδες από μια αρχική, κύρια ομάδα. <i>Βασικές κλάσεις (base classes)</i> –που θα περιέχουν άλλες <i>υποκλάσεις (subclasses</i><i>)</i> οι οποίες, με τη σειρά τους, ίσως περιέχουν άλλες (κ.ο.κ.)– μπορεί να κατασκευαστούν, όπως γίνεται σε πολλές μορφές της ζωής γύρω μας. Αυτή η μορφή οργάνωσης των αντικειμένων σε ένα πρόγραμμα γίνεται για την ιεραρχική σχεδίαση, όχι μόνο της επίλυσης του προβλήματος, όπως επιζητείται στον διαδικαστικό προγραμματισμό, αλλά και της διαχείρισης και απεικόνισης της πραγματικότητας αναφορικά με τα δεδομένα και τις λειτουργίες που υπάρχουν σ’ αυτήν.</p>
			<p>Σχεδιάζοντας, για παράδειγμα, τον κώδικα για ένα πρόβλημα που αφορά κάποια εταιρεία εμπορίας οχημάτων, μπορούμε να δημιουργήσουμε αντικείμενα για διάφορες κατηγορίες οχημάτων που εμπορεύεται η εταιρεία, όπως φορτηγά, αυτοκίνητα, μηχανές κ.λπ. Κάθε κατηγορία θα μπορούσε, πολύ απλά, να αφορά μια ξεχωριστή κλάση και για κάθε όχημα να δημιουργείται το αντίστοιχο αντικείμενο της κατάλληλης κλάσης. Τα προβλήματα ξεκινούν όμως από το ότι αρκετές από τις πληροφορίες των διαφορετικών κατηγοριών οχημάτων είναι κοινές και υπάρχουν σε όλες, ενώ κάποια στοιχεία χρειάζεται να είναι κοινά και διαμοιραζόμενα, ώστε οι κλάσεις μεταξύ τους να μπορούν να μοιράζονται δεδομένα και λειτουργίες, να συνδέονται και να επικοινωνούν μεταξύ τους. </p>
			<p>Επίσης, κάποιες πληροφορίες θα πρέπει να ανήκουν αποκλειστικά και μόνο σε μια κατηγορία και να διατηρούνται, με ασφάλεια, ανέπαφα. Το συγκεκριμένο χαρακτηριστικό της ασφάλειας και ιδιωτικότητας των αντικειμένων περιγράφεται σε επόμενη ενότητα και αφορά θέματα σχετικά με αυτό που ονομάζεται <i>ενθυλάκωση (encapsulation)</i>, αποτελώντας ένα ακόμη χαρακτηριστικό του αντικειμενοστραφούς προγραμματισμού – μαζί με τον πολυμορφισμό που ήδη παρουσιάστηκε για άλλα στοιχεία της Python και αναφέρεται ξεχωριστά σε επόμενη ενότητα.</p>
			<p>Στο παράδειγμα, στοιχεία όπως μάρκα, μοντέλο, έτος κατασκευής, τιμή πώλησης, κυβισμός, στοιχεία πελάτη κ.λπ. αποτελούν κοινά χαρακτηριστικά για όλες τις κατηγορίες οχημάτων. Κάθε κατηγορία έχει όμως και τα δικά της χαρακτηριστικά, όπως:</p>
			<ul><li>Αυτοκίνητα: αριθμός θυρών, ηλιοροφή, τύπος (sedan, station wagon κ.λπ.)</li>
			<li>Φορτηγά: βάρος (ωφέλιμο, μεικτό), τύπος φορτηγού</li>
			</ul><p class="no-indent">Στην υλοποίηση αυτών των κλάσεων θα χρειαστεί για τα κοινά στοιχεία τους να επαναληφθεί πολλές φορές το ίδιο τμήμα κώδικα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-29 | Κλάσεις οχημάτων</figcaption><img src="media/ListaKodika-11-29_fmt.png" alt=""/></figure>
			<p class="no-indent">Αν τρέξουμε το πρόγραμμα, θα εμφανιστούν στην οθόνη τα παρακάτω:</p>
			<p><span class="courier-code">***</span><span class="courier-code">Πληροφορίες***</span></p>
			<p><span class="courier-code">Μοντέλο:Polo</span></p>
			<p><span class="courier-code">Έτος κατασκευής:2016</span></p>
			<p><span class="courier-code">Τιμή:12000</span></p>
			<p><span class="courier-code">Αρ.Θυρών:5</span></p>
			<p><span class="courier-code">***Πληροφορίες***</span></p>
			<p><span class="courier-code">Μοντέλο:Ford</span></p>
			<p><span class="courier-code">Έτος κατασκευής</span><span class="courier-code">:2015</span></p>
			<p><span class="courier-code">Τιμή:18000</span></p>
			<p><span class="courier-code">Βάρος:3000</span></p>
			<p class="no-indent">Γι’ αυτό είναι προτιμότερο να αλλάξει ο σχεδιασμός και να δημιουργηθεί μια <i>υπερκλάση (</i><i>superclass)</i>, που θα περιέχει τα κοινά στοιχεία κάθε οχήματος και θα μπορεί να τα «περνάει» στις υπόλοιπες υποκλάσεις της. Η υπερκλάση όχημα (<span class="courier-code">Vehicle</span>) θα μπορεί να είναι η κύρια κλάση, ενώ οι άλλες δύο (<span class="courier-code">Car</span> και <span class="courier-code">Truck</span>) θα βασίζονται σε αυτήν για να πάρουν χαρακτηριστικά της ή να προσθέσουν καινούργια. Έτσι, η κλάση <span class="courier-code">Vehicle</span> θα κληρονομεί τα χαρακτηριστικά της στις άλλες υποκλάσεις της.</p>
			<p>Τέτοιες ομάδες κλάσεων λειτουργούν όπως και τα στοιχεία του φυσικού κόσμου γύρω μας, όπου ένας γονέας κληρονομεί κάποια από τα χαρακτηριστικά του στα παιδιά του. Τα παιδιά αποκτούν ορισμένα μόνο από τα χαρακτηριστικά αυτά, κάποια όμως διαθέτουν και άλλα, νέα, δικά τους ιδιαίτερα γνωρίσματα. Η αρχική κλάση ονομάζεται <i>βασική, κύρια, αρχική, γονέας </i>ή<i> υπερκλάση (parent, super </i>ή<i> base class)</i>, ενώ οι κλάσεις στις οποίες κληρονομεί τα χαρακτηριστικά της ονομάζονται <i>παιδιά </i>ή<i> υποκλάσεις (children </i>ή<i> subclasses</i><i>)</i>.</p>
			<p>Η υλοποίησή τους είναι απλή. Πρώτα ορίζεται η βασική και μετά οι υποκλάσεις της. Κάθε υποκλάση πρέπει να περιλαμβάνει την κλάση γονέα στις παρενθέσεις μετά το όνομά της:</p>
			<p><span class="courier-code">class βασική:</span></p>
			<p><span class="courier-code">&#9;#ορισμός της κλάσης</span></p>
			<p><span class="courier-code">class υποκλάση1(βασική</span><span class="courier-code">):</span></p>
			<p><span class="courier-code">&#9;#ορισμός της κλάσης</span></p>
			<p><span class="courier-code">class υποκλάση2(βασική):</span></p>
			<p><span class="courier-code">&#9;#ορισμός της κλάσης</span></p>
			<p class="no-indent">Στο παράδειγμα οι κλάσεις θα έχουν τη μορφή της Λίστας Κώδικα 11-30.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-30 | Υπερκλάση <span class="courier-code">vehicle</span></figcaption><img src="media/ListaKodika-11-30a_fmt.png" alt=""/></figure>
			<p class="no-indent">Στην καινούργια μορφή των κλάσεων, ορίζεται ως βασική κλάση η <span class="courier-code">Vehicle</span>, που περιέχει στοιχεία κοινά για κάθε τύπο οχήματος.</p>
			<p>Η <span class="courier-code">__</span><span class="courier-code">init__</span> μέθοδος της <span class="courier-code">Vehicle</span> περιέχει την αρχικοποίηση όσων στοιχείων είναι κοινά για κάθε όχημα. Οι δυο υποκλάσεις, <span class="courier-code">Car</span> και <span class="courier-code">Truck</span>, δηλώνονται ως υποκλάσεις της <span class="courier-code">Vehicle</span> βάζοντας το όνομά της στον ορισμό τους στις γραμμές 13 και 22. Διαθέτουν και αυτές τη δική τους μέθοδο αρχικοποίησης για όσα δεδομένα δεν είναι κοινά, με την επιπλέον διαφορά ότι μέσα σ’ αυτές καλούν τη μέθοδο <span class="courier-code">__init__</span> της υπερκλάσης (<span class="courier-code">super</span>) στις γραμμές 15 και 24, ώστε να δοθούν τιμές και στα κοινά χαρακτηριστικά.</p>
			<p>Έτσι, ο κώδικας της <span class="courier-code">Vehicle</span> μπορεί να χρησιμοποιείται σε κάθε υποκλάση, ενώ καθεμιά από αυτές μπορεί να προσθέτει τα δικά της στοιχεία. Η δημιουργία ίδιας μεθόδου σε κλάσεις και υποκλάσεις ίσως αρχικά προκαλεί σύγχυση, αλλά βοηθάει στο να <i>επεκταθούν (extend)</i> οι λειτουργίες της υπερκλάσης με επιπλέον χαρακτηριστικά. Όταν δημιουργείται νέο αντικείμενο, ο διερμηνευτής γνωρίζει ποια <span class="courier-code">__init__</span> θα καλέσει: αυτήν που βρίσκεται στον χώρο ονομάτων του νέου αντικειμένου.</p>
			<p>Παρόμοια είναι και η λειτουργία της μεθόδου <span class="courier-code">info</span> με την οποία επεκτείνεται η αντίστοιχη λειτουργία της <span class="courier-code">Vehicle</span>. Η νέα μέθοδος μπορεί να χρησιμοποιηθεί σε κάθε τύπο οχήματος. Ο διερμηνευτής γνωρίζει ποια από τις μεθόδους <span class="courier-code">info</span> να καλέσει σε κάθε περίπτωση.</p>
			<p>Ακολουθεί ένα δοκιμαστικό σενάριο:</p>
			
			<img src="media/ListaKodika-11-30b_fmt.png" alt=""/>
			<p class="no-indent">με τα αντίστοιχα αποτελέσματα:</p>
			<p><span class="courier-code">***Πληροφορίες***</span></p>
			<p><span class="courier-code">Μοντέλο:Polo</span></p>
			<p><span class="courier-code">Έτος κατασκευής:2016</span></p>
			<p><span class="courier-code">Τιμή:12000</span></p>
			<p><span class="courier-code">Αρ.Θυρών:5</span></p>
			<p><span class="courier-code">***Πληροφορίες***</span></p>
			<p><span class="courier-code">Μοντέλο:Ford</span></p>
			<p><span class="courier-code">Έτος κατασκευής:2015</span></p>
			<p><span class="courier-code">Τιμή</span><span class="courier-code">:18000</span></p>
			<p><span class="courier-code">Βάρος:3000</span></p>
			<p class="no-indent">Οι υποκλάσεις μπορεί να περιέχουν καινούργια στοιχεία που δεν υπάρχουν στην υπερκλάση τους. Έστω ότι η εταιρεία προσφέρει 10% έκπτωση στην τιμή πώλησης των αυτοκινήτων σε περίπτωση απόσυρσης του παλαιού αυτοκινήτου του αγοραστή. Η έκπτωση ισχύει μόνο για τα επιβατικά αυτοκίνητα και όχι για τα φορτηγά. Η νέα αυτή λειτουργία θα ενσωματωθεί μόνο στην κλάση <span class="courier-code">Car</span> και επομένως θα μπορεί να κληθεί μόνο για τα αντικείμενα τύπου <span class="courier-code">Car</span>. </p>
			<p>Μια ακόμη λειτουργία που θα προστεθεί στα αντικείμενα του παραδείγματος είναι η έκδοση τιμολογίου αγοράς. Για τα αυτοκίνητα θα υπάρχει επιβάρυνση 24% φόρου πάνω στην τιμή, σε αντίθεση με τα φορτηγά που η τελική τιμή είναι και η αρχικά ορισμένη. Παρότι η περίπτωση αυτή είναι κοινή για όλα τα οχήματα, ο τρόπος υπολογισμού του τελικού ποσού θα είναι διαφορετικός στα αντικείμενα τύπου <span class="courier-code">Car</span>. </p>
			<p>Στη Λίστα Κώδικα 11-31 έχουν προστεθεί δυο νέες μέθοδοι για την τιμολόγηση των οχημάτων (<span class="courier-code">invoice</span> και <span class="courier-code">recall</span>).</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-31 | Υπέρβαση &amp; επέκταση μεθόδων</figcaption><img src="media/ListaKodika-11-31_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μέθοδος <span class="courier-code">invoice</span> έχει δηλωθεί μόνο σε δυο κλάσεις: στην υπερκλάση <span class="courier-code">Vehicle</span> και στην υποκλάση <span class="courier-code">Car</span>. Η υποκλάση <span class="courier-code">Truck</span> δεν τη χρειάζεται, γιατί την κληρονομεί από τη <span class="courier-code">Vehicle</span> και έτσι μπορεί να τη χρησιμοποιεί. Η κλάση <span class="courier-code">Car</span> διαθέτει τη δική της εκδοχή της μεθόδου <span class="courier-code">invoice</span>. Με αυτή την προσθήκη γίνεται <i>υπέρβαση (override)</i> της μεθόδου <span class="courier-code">invoice</span> της <span class="courier-code">Vehicle</span>, προσθέτοντας ένα ακόμα χαρακτηριστικό πολυμορφικότητας στα αντικείμενα του παραδείγματος. Με αυτό τον τρόπο η εντολή της γραμμής 51 στη Λίστα Κώδικα 11-32 θα λειτουργήσει σε διαφορετικά τμήματα κώδικα.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-32 | Χρήση κλάσης <span class="courier-code">vehicle</span></figcaption><img src="media/ListaKodika-11-32_fmt.png" alt=""/></figure>
			<p class="no-indent">Η <span class="courier-code">for</span> στη γραμμή 49, στην 1η επανάληψη, θα εκτελέσει την <span class="courier-code">invoice</span> του <span class="courier-code">Car</span> και, στη 2η επανάληψη, την <span class="courier-code">invoice</span> της <span class="courier-code">Vehicle</span>, δίνοντας τα αντίστοιχα αποτελέσματα. Στις γραμμές 45 και 46, τυπώνεται η τιμή του συγκεκριμένου αυτοκινήτου χωρίς –αλλά και με– απόσυρση. Στις γραμμές 47 και 48 τυπώνονται τα ποσά των δυο οχημάτων με τη χρήση των διαφορετικών μεθόδων <span class="courier-code">invoice</span>. Η <span class="courier-code">for</span> στη γραμμή 49 τυπώνει τα στοιχεία των δυο οχημάτων. Τα αποτελέσματα των παραπάνω εντολών είναι:</p>
			<p><span class="courier-code">Polo:Χωρίς απόσυρση</span></p>
			<p><span class="courier-code">Δεν έχει έκπτωση:0</span></p>
			<p><span class="courier-code">Αρχική τιμή: 12,000-Τελική τιμή</span><span class="courier-code">:12,000.0</span></p>
			<p><span class="courier-code">Polo:Με απόσυρση</span></p>
			<p><span class="courier-code">Η έκπτωση είναι:1200.0</span></p>
			<p><span class="courier-code">Αρχική τιμή: 12,000-Τελική τιμή:10,800.0</span></p>
			<p><span class="courier-code">Polo</span></p>
			<p><span class="courier-code">Ποσό τιμολογίου:14880.0</span></p>
			<p><span class="courier-code">Ford</span></p>
			<p><span class="courier-code">Ποσό τιμολογίου:18000</span></p>
		</section>
		<section role="section" id="ch13se15">
			<h1><span role="label">11.15</span> Ενθυλάκωση και ιδιωτικότητα</h1>
			<p class="no-indent">Με βάση όσα παρουσιάστηκαν μέχρι τώρα, είναι γνωστό ότι μια κλάση αποτελεί ολοκληρωμένη οντότητα στοιχείων, συνήθως του φυσικού κόσμου, που ενσωματώνει μέσα της χαρακτηριστικά και λειτουργίες με τη μορφή ιδιοτήτων και μεθόδων αντίστοιχα. Πολλές φορές κάποια από αυτά τα στοιχεία θα πρέπει να προστατευτούν κατά τη χρήση τους, ώστε είτε να παραμείνουν κρυμμένα, είτε να περιοριστεί η πρόσβαση σ’ αυτά, είτε να διασφαλίζεται η ελεγχόμενη πρόσβαση. Κάτι τέτοιο μπορεί να γίνει για πολλούς λόγους. Κάποια χαρακτηριστικά μπορεί να είναι κρίσιμα για τη σωστή λειτουργία του αντικειμένου και να χρειάζεται να μην υπάρχει άμεση πρόσβαση σ’ αυτά, για την αποτροπή λανθασμένων χειρισμών, αλλαγών ή τροποποιήσεών τους. Σε κάποιες άλλες περιπτώσεις, θα πρέπει, πριν αλλάξει κάποιο χαρακτηριστικό του αντικειμένου, να προηγηθεί <i>έλεγχος εγκυρότητας των δεδομένων (validity check)</i>, όπως για παράδειγμα η τιμή ενός προϊόντος να μην είναι αρνητικός αριθμός.</p>
			<p>Δυο από τα χαρακτηριστικά που πρέπει να έχουν τα αντικείμενα είναι η <i>αφαιρετική ικανότητα </i><i>(abstraction)</i> απόκρυψης των λεπτομερειών υλοποίησης και η δυνατότητα ενσωμάτωσης στο εσωτερικό τους όλων των δεδομένων και των διαδικασιών που περιέχουν. Αυτό το χαρακτηριστικό ονομάζεται <i>ενθυλάκωση (encapsulation)</i>. Τέτοια χαρακτηριστικά άλλες αντικειμενοστραφείς γλώσσες προγραμματισμού, όπως η Java, τα υλοποιούν με τη δυνατότητα να χαρακτηρίζουν τα στοιχεία τους ως <i>ιδιωτικά (private)</i> ή <i>προστατευμένα (protected)</i> και να παρέχουν <i>λειτουργίες (getters-</i><i>setters)</i> με βάση τις οποίες πραγματοποιείται η πρόσβαση (ανάγνωση-εγγραφή) στις ιδιότητες των αντικειμένων. Αυτοί οι ορισμοί γίνονται με τη χρήση συγκεκριμένων λεκτικών ή μεθόδων της γλώσσας. Από την άλλη μεριά, η Python διαθέτει έναν πολύ διαφορετικό μηχανισμό για την ασφάλεια των δεδομένων.</p>
			<p>Παίρνοντας τα πράγματα από την αρχή, το σημαντικό στοιχείο της Python είναι ότι δεν υποστηρίζει τον ορισμό ιδιωτικών στοιχείων στα αντικείμενα. Η έλλειψη δομών ή λεκτικών όρων για την ιδιωτικότητα των δεδομένων, ωστόσο, δεν αποτελεί περιοριστικό παράγοντα, αφού έμμεσα, και με ιδιαίτερο τρόπο, μπορεί κάτι τέτοιο να υλοποιηθεί. Η απόκρυψη λεπτομερειών και η αποτροπή πρόσβασης σε χαρακτηριστικά μιας κλάσης γίνεται μέσα από την ονομασία των στοιχείων. Διακρίνονται οι επόμενες περιπτώσεις.</p>
			<section role="subsection" id="ch13se15ss1">
				<h1><span role="label">11.15.1</span> Δημόσια χαρακτηριστικά</h1>
				<p class="no-indent">Κάθε χαρακτηριστικό μπορεί να πάρει οποιοδήποτε όνομα, αρκεί το όνομα να μην ανήκει στο σύνολο των δεσμευμένων λέξεων της Python (βλ. Κεφάλαιο 2). Οι κανόνες ονοματοδοσίας προτείνουν οι ονομασίες να είναι με πεζά γράμματα. Επίσης, δεν πρέπει να ξεκινούν και να τελειώνουν με διπλή υπογράμμιση, γιατί τη συγκεκριμένη μορφή έχουν οι ειδικές μέθοδοι της Python. Με αυτό τον τρόπο και μέσα από την ονομασία τους, οι ιδιότητες είναι δημόσιες και προσβάσιμες μέσα και έξω από τον κώδικα ορισμού της κλάσης όπου ανήκουν. Ένα παράδειγμα είναι η παρακάτω Λίστα Κώδικα.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-33 | Δημόσια χαρακτηριστικά</figcaption><img src="media/ListaKodika-11-33_fmt.png" alt=""/></figure>
				<p class="no-indent">Τελειώνοντας το πιο πάνω εσωτερικό κομμάτι ορισμού της κλάσης <span class="courier-code">employee</span>, τα χαρακτηριστικά που περιέχει αυτή είναι άμεσα διαθέσιμα και ελεύθερα προσβάσιμα σε οποιοδήποτε σημείο μέσα στο πρόγραμμα. Αν εκτελεστεί το συγκεκριμένο κομμάτι κώδικα, από την κονσόλα μπορούν να δοθούν οι παρακάτω εντολές, χωρίς να υπάρχει κάποιος περιορισμός:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em1=Employee(&apos;A&apos;,1000)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(em1.name,em1.salary)</span></p>
				<p><span class="courier-code">A 1000</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; em1.salary=-1000</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(em1.name,em1.salary)</span></p>
				<p><span class="courier-code">A -1000</span></p>
				<p class="no-indent">Η άμεση και ελεύθερη πρόσβαση σε κάθε πληροφορία μπορεί να προκαλέσει αλλοίωση ή και απώλεια δεδομένων. Στο προηγούμενο παράδειγμα, σαφώς και θα έπρεπε να μην επιτρέπεται να αλλάξει ο μισθός άμεσα και χωρίς προηγούμενο έλεγχο. Οι επόμενες ενότητες περιγράφουν πώς μπορεί να αποφευχθεί κάτι τέτοιο.</p>
			</section>
			<section role="subsection" id="ch13se15ss2">
				<h1><span role="label">11.15.2</span> Κρίσιμες πληροφορίες</h1>
				<p class="no-indent">Κατά σύμβαση, και όχι ως κάποιο τυπικό στοιχείο της γλώσσας, ένα χαρακτηριστικό που θεωρείται σημαντικό για την εσωτερική λειτουργία μιας κλάσης, και που πρέπει να αποφεύγεται η χρήση του έξω από αυτήν, δηλώνεται βάζοντας στην αρχή του ονόματός του έναν χαρακτήρα υπογράμμισης ‘<span class="courier-code">_</span>’. Η παρακάτω δήλωση μιας κλάσης περιέχει ιδιότητα (<span class="courier-code">salary</span>) με αυτό τον χαρακτήρα.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-34 | Ευαίσθητες πληροφορίες</figcaption><img src="media/ListaKodika-11-34_fmt.png" alt=""/></figure>
				<p class="no-indent">Ο τρόπος αυτός δεν αποτελεί ουσιαστική προστασία της ιδιωτικότητας του αντικειμένου, γιατί εξακολουθεί να είναι ορατό σε όλο το πρόγραμμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em1=Employee(&apos;A&apos;,1000)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; em1._salary=0</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; em1._salary</span></p>
				<p><span class="courier-code">0</span></p>
				<p class="no-indent">Με την παραπάνω πρακτική δεν τίθεται κάποιος περιορισμός στη χρήση του, παρά μόνο μια ειδοποίηση σε αυτόν που θα το χρησιμοποιήσει, ώστε να γνωρίζει ότι η συγκεκριμένη πληροφορία είναι σημαντική.</p>
			</section>
			<section role="subsection" id="ch13se15ss3">
				<h1><span role="label">11.15.3</span> Ιδιωτικά χαρακτηριστικά</h1>
				<p class="no-indent">Με το πρόβλημα της μη ελεγχόμενης πρόσβασης σε ευαίσθητες πληροφορίες να εξακολουθεί να υπάρχει, και χωρίς να στηρίζεται ο δημιουργός της κλάσης στην καλή πίστη και διάθεση αυτού που τη χρησιμοποιεί, η Python προσφέρει μια καλύτερη μέθοδο προστασίας. Πάλι όμως, η προστασία έρχεται μέσα από την ειδική ονομασία του χαρακτηριστικού. Σε αυτή την περίπτωση, βάζοντας μπροστά από το όνομα του στοιχείου <span class="courier-code">salary</span> μια διπλή υπογράμμιση (__<span class="courier-code">salary</span>), το συγκεκριμένο στοιχείο παύει να είναι ορατό έξω από την κλάση στην οποία δημιουργήθηκε.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-35 | Ιδιωτικά χαρακτηριστικά</figcaption><img src="media/ListaKodika-11-35_fmt.png" alt=""/></figure>
				<p class="no-indent">Οι παρακάτω εντολές στην κονσόλα θα αποτύχουν:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em1=Employee(&apos;A&apos;,1000)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(em1.__salary)</span></p>
				<p><span class="courier-code">AttributeError: &apos;Employee&apos; object has no attribute &apos;__salary&apos;</span></p>
				<p class="no-indent">Έτσι, το στοιχείο <span class="courier-code">__salary</span> είναι προστατευμένο από μη εξουσιοδοτημένη πρόσβαση. Παρ’ όλα αυτά όμως, το στοιχείο μπορεί πάλι να χρησιμοποιηθεί – με λίγο όμως… περίεργο τρόπο:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em1._Employee</span><span class="courier-code">__salary=-1000</span></p>
				<p class="no-indent">Αν προστεθεί το πρόθεμα <span class="courier-code">_Ονομακλασης_ _ονομαστοιχειου</span>, τότε το χαρακτηριστικό μπορεί να εμφανιστεί ή να αλλάξει.</p>
				<p>Αυτή η μέθοδος, που δεν είναι ακριβώς προστασία, αλλά περισσότερο αποτροπή της απευθείας χρήσης του στοιχείου, ονομάζεται <i>παραμόρφωση ονόματος (name mangling)</i>. Σκοπός της είναι να αποθαρρύνει (και να αποτρέψει κάποιον από) την απευθείας ή κατά λάθος πρόσβαση σε «ιδιωτικά» στοιχεία.</p>
				<p>Για την ουσιαστική προστασία μιας τιμής, θα πρέπει ο πιο πάνω τρόπος ονοματοδοσίας να συνοδεύεται και από κατάλληλες λειτουργίες ελέγχου, που έρχονται στην Python με τη μορφή <i>διακοσμητών (decorators)</i>. Στη Λίστα Κώδικα 11-36 προστίθενται δυο μέθοδοι, με ειδική διακόσμηση για τον έλεγχο πρόσβασης στην ιδιότητα <span class="courier-code">salary</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-36 | Ελεγχόμενη πρόσβαση</figcaption><img src="media/ListaKodika-11-36_fmt.png" alt=""/></figure>
				<p class="no-indent">Αφού δημιουργηθεί ένα στιγμιότυπο υπαλλήλου:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em</span><span class="courier-code">1=Employee(&apos;A&apos;,1000)</span></p>
				<p class="no-indent">η εμφάνιση της πληροφορίας <span class="courier-code">salary</span> γίνεται «υποχρεωτικά» μέσω της ιδιότητας <span class="courier-code">property</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; print(em1.salary)</span></p>
				<p><span class="courier-code">Ο μισθός είναι:</span></p>
				<p><span class="courier-code">1000</span></p>
				<p class="no-indent">Ο διερμηνευτής καλεί «αθόρυβα» τη μέθοδο <span class="courier-code">salary</span>, που έχει τη διακόσμηση <span class="courier-code">property</span>, απ’ όπου εμφανίζεται ο μισθός. Αν χρειαστεί να αλλάξει ο μισθός, αλλάζει μέσω της μεθόδου <span class="courier-code">salary</span> με τη διακόσμηση <span class="courier-code">@salary.setter</span>:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em</span><span class="courier-code">1.salary=1100</span></p>
				<p><span class="courier-code">Μισθός:1100</span></p>
				<p class="no-indent">Έτσι, η αλλαγή των προστατευμένων στοιχείων δεν γίνεται άμεσα, αλλά με ασφάλεια μέσω κάποιου μηχανισμού ελέγχου. Λάθη στην εισαγωγή στοιχείων μπορούν με αυτό τον τρόπο να αποφευχθούν:</p>
				<p><span class="courier-code">&gt;&gt;&gt; em1.salary=-1200</span></p>
				<p><span class="courier-code">Δώσατε λάθος στοιχεία!</span></p>
				<p><span class="courier-code">Μισθός:1100</span></p>
				<p class="no-indent"><b>ΣΗΜΕΙΩΣΗ</b>: τα ονόματα των δυο μεθόδων θα πρέπει να είναι τα ίδια. Η Python ξέρει πότε και πώς να τα χρησιμοποιήσει κάθε φορά.</p>
			</section>
		</section>
		<section role="section" id="ch13se16">
			<h1><span role="label">11.16</span> Επικοινωνία αντικειμένων</h1>
			<p class="no-indent">Ένα αντικείμενο μπορεί να χρησιμοποιηθεί ως όρισμα σε μια μέθοδο. Χαρακτηριστικό παράδειγμα είναι η χρήση του λεκτικού <span class="courier-code">self</span> ή <span class="courier-code">other</span> σε κάποιες μεθόδους. Με αυτό τον τρόπο μπορεί να γίνει επικοινωνία μεταξύ αντικειμένων ή κλάσεων. Στο επόμενο παράδειγμα δίνονται στη Λίστα Κώδικα 11-37 δυο κλάσεις, όπου η μια μπορεί να καλέσει μεθόδους της άλλης.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-37 | Επικοινωνία αντικειμένων</figcaption><img src="media/ListaKodika-11-37_fmt.png" alt=""/></figure>
			<p class="no-indent">Γράφοντας τις παρακάτω εντολές:</p>
			<p><span class="courier-code">&gt;&gt;&gt; kalos=Hero()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; kakos=Vilain()</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; kalos.hit(kakos)</span></p>
			<p><span class="courier-code">Hero</span><span class="courier-code">: Επίθεση...</span></p>
			<p><span class="courier-code">Vilain:Αυτό πόνεσε</span></p>
			<p class="no-indent">ο παραπάνω κώδικας μπορεί να χρησιμοποιηθεί και σαν ένα απλό παιχνίδι, με μια υλοποίηση όπως αυτή της Λίστας Κώδικα 11-38.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-38 | Ένα απλό παιχνίδι</figcaption><img src="media/ListaKodika-11-38_fmt.png" alt=""/></figure>
			<p class="no-indent">Όλος ο κώδικας βρίσκεται σε μια υπερκλάση μόνο. Αυτή κληρονομεί όλα τα στοιχεία της στις δυο υποκλάσεις, οι οποίες με τυχαίο τρόπο θα αναλάβουν να «αναμετρηθούν» μεταξύ τους. </p>
			<p>Η μάχη; Αμφίρροπη…</p>
			<p><b>ΣΗΜΕΙΩΣΗ</b>: Το πώς ακριβώς λειτουργεί το πρόγραμμα, αφήνεται στον αναγνώστη ως άσκηση…</p>
		</section>
		<section role="section" id="ch13se17">
			<h1><span role="label">11.17</span> Πολυμορφισμός… παντού</h1>
			<p class="no-indent">Το χαρακτηριστικό της πολυμορφικότητας το συναντάμε παντού στην Python. Είναι η ικανότητα ενός στοιχείου να αλλάζει τρόπο λειτουργίας, ανάλογα με την περίπτωση. Αυτό δίνει τη δυνατότητα να γράφουμε κώδικα που θα λειτουργεί για πολλές μορφές δεδομένων, ελαχιστοποιώντας και τον χρόνο συγγραφής πηγαίου κώδικα, αλλά και τον αριθμό των απαραίτητων εντολών. Υπάρχει σε ενσωματωμένες συναρτήσεις όπως η <span class="courier-code">len</span>, η <span class="courier-code">sum</span> κ.λπ.:</p>
			<p><span class="courier-code">&gt;&gt;&gt; len(&apos;Python&apos;)</span></p>
			<p><span class="courier-code">6</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; len([&apos;Python&apos;,&apos;C&apos;,&apos;Java&apos;])</span></p>
			<p><span class="courier-code">3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; len((3,2,1))</span></p>
			<p><span class="courier-code">3</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; sum([1,2,3])</span></p>
			<p><span class="courier-code">6</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; x,y,z=[1,2,3]</span></p>
			<p><span class="courier-code">&gt;&gt;&gt; sum((x,y,z))</span></p>
			<p><span class="courier-code">6</span></p>
			<p class="no-indent">Ο πολυμορφισμός λειτουργεί με δομές της γλώσσας όπως η <span class="courier-code">for</span> και οι συναρτήσεις. Στη Λίστα Κώδικα 11-39, για δυο διαφορετικές κλάσεις χρησιμοποιείται μια <span class="courier-code">for</span> και μια συνάρτηση.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-39 | Πολυμορφισμός κλάσεων</figcaption><img src="media/ListaKodika-11-39_fmt.png" alt=""/></figure>
			<p class="no-indent">Το δοκιμαστικό σενάριο στις γραμμές 17 έως 24 δημιουργεί δυο αντικείμενα από τις δυο αυτές διαφορετικές κλάσεις. Τα αντικείμενα τοποθετούνται σε λίστα και η εντολή <span class="courier-code">for</span> χρησιμοποιεί τις ιδιότητες και τη μέθοδο που έχουν, με ενιαίο και κοινό τρόπο και για τις δυο κλάσεις. Τα αποτελέσματα θα είναι:</p>
			<p><span class="courier-code">Μοντέλο:Primera</span></p>
			<p><span class="courier-code">Προέλευση:Ιαπωνία</span></p>
			<p><span class="courier-code">&lt;__main__.nissan </span><span class="courier-code">object at 0x0000020AB9CCDE80&gt;</span></p>
			<p><span class="courier-code">Primera Ιαπωνία</span></p>
			<p><span class="courier-code">Μοντέλο:Polo</span></p>
			<p><span class="courier-code">Προέλευση:Γερμανία</span></p>
			<p><span class="courier-code">&lt;__main__.wv object at 0x0000020AB9CCDDD8&gt;</span></p>
			<p><span class="courier-code">Polo</span></p>
			<p class="no-indent">Τα δυο αυτά αντικείμενα μπορούν να σταλούν και ως ορίσματα σε συνάρτηση, όπως φαίνεται στη Λίστα Κώδικα 11-40.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-40 | Πολυμορφισμός σε συναρτήσεις</figcaption><img src="media/ListaKodika-11-40_fmt.png" alt=""/></figure>
			<p class="no-indent">Η εκτέλεση εμφανίζει: </p>
			<p><span class="courier-code">Primera Ιαπωνία</span></p>
			<p><span class="courier-code">&lt;__main__.nissan object at 0x0000020AB9CE9438&gt;</span></p>
			<p><span class="courier-code">Polo </span></p>
			<p><span class="courier-code">&lt;__main__.wv object at 0x0000020AB9CE9390&gt;</span></p>
			<p class="no-indent">Φυσικά, η έννοια του πολυμορφισμού υπάρχει και στην εν γένει λειτουργία των αντικειμένων.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-41 | Πολυμορφισμός σε υποκλάσεις</figcaption><img src="media/ListaKodika-11-41_fmt.png" alt=""/></figure>
			<p class="no-indent">Η μια υποκλάση (<span class="courier-code">Eagle</span>) κληρονομεί τη μέθοδο <span class="courier-code">isflying</span>, ενώ η άλλη (<span class="courier-code">Chicken</span>) κάνει υπέρβαση της μεθόδου κρατώντας τη δική της. Τα αποτελέσματα φαίνονται στην οθόνη:</p>
			<p><span class="courier-code">Είναι πτηνό και πετάει... </span></p>
			<p class="no-indent">για το αντικείμενο της κλάσης <span class="courier-code">Eagle</span>, και:<span class="courier-code"> </span></p>
			<p><span class="courier-code">Ανήκει στα πτηνά αλλά δεν πετάει </span></p>
			<p class="no-indent">για το αντικείμενο τύπου <span class="courier-code">Chicken.</span></p>
		</section>
		<section role="section" id="ch13se18">
			<h1><span role="label">11.18</span> Πολλαπλή κληρονομικότητα</h1>
			<p class="no-indent">Στις προηγούμενες ενότητες αναφέρθηκε η δυνατότητα να δημιουργηθούν κλάσεις που θα βασίζονται και θα αποκτούν χαρακτηριστικά από άλλη κλάση. Αυτή η κληρονομικότητα μπορεί να αποκτήσει πιο σύνθετο χαρακτήρα αν επεκταθεί με διάφορους τρόπους. Η πολλαπλή κληρονομικότητα εμφανίζεται όταν μια κλάση κληρονομεί χαρακτηριστικά και ιδιότητες από περισσότερες της μίας κλάσεις. Κάθε κλάση γονέας θα πρέπει να τεθεί ως όρισμα μέσα στις παρενθέσεις της δήλωσής της, η μια μετά την άλλη, χωρισμένες με ‘<span class="courier-code">,</span>’. Αυτού του είδους οι σχέσεις φαίνονται στο σχήμα της Εικόνας 11-4.</p>
			<figure class="image" id="img57" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 11-4 | Σχηματική αναπαράσταση πολλαπλής κληρονομικότητας</figcaption><img src="media/chapter_11_image_4.jpg" alt=""/></figure>
			<p class="no-indent">Ο παρακάτω κώδικας (Λίστα Κώδικα 11-42) παρουσιάζει μια απλή υλοποίηση αυτής της μορφής κληρονομικότητας:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-42 | Πολλαπλή κληρονομικότητα</figcaption><img src="media/ListaKodika-11-42_fmt.png" alt=""/></figure>
			<p class="no-indent">εμφανίζοντας τα παρακάτω:</p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">False</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">False</span></p>
			<p class="no-indent">Η πολυεπίπεδη κληρονομικότητα παρουσιάζεται αν μια κλάση κληρονομεί τα στοιχεία της σε μια άλλη, που και αυτή με τη σειρά της κληρονομεί τα δικά της σε μια άλλη κ.ο.κ. Η μορφή αυτή φαίνεται στο σχήμα της Εικόνας 11-5.</p>
			<figure class="image" id="img58" role="graphic">
				<figcaption>ΕΙΚΟΝΑ 11-5 | Σχηματική αναπαράσταση πολυεπίπεδης κληρονομικότητας</figcaption><img src="media/chapter_11_image_5.jpg" alt=""/></figure>
			<p class="no-indent">Αυτή η κληρονομικότητα φαίνεται στη Λίστα Κώδικα 11-43.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 11-43 | Πολυεπίπεδη κληρονομικότητα</figcaption><img src="media/ListaKodika-11-43_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη συγκεκριμένη περίπτωση, η κλάση <span class="courier-code">C</span> είναι υποκλάση της <span class="courier-code">B</span> και της <span class="courier-code">A</span>. Αυτό φαίνεται και από τα αποτελέσματα των εντολών στις γραμμές 8 έως 10:</p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">True</span></p>
			<p><span class="courier-code">True</span></p>
		</section>
		<section role="section" id="ch13se19" data-featured="chapter-review">
			<h1><span role="label">11.19</span> Περίληψη</h1>
			<p class="no-indent">Κεντρικό στοιχείο της Python είναι ο χειρισμός αντικειμένων. Στο κεφάλαιο αυτό παρουσιάστηκαν οι βασικές αρχές και τα χαρακτηριστικά του προγραμματισμού με προσανατολισμό στα αντικείμενα, καθώς και του τρόπου που υλοποιείται αυτό το προγραμματιστικό υπόδειγμα στην Python. Έγινε σύνδεση όσων αναφέρθηκαν σε προηγούμενα κεφάλαια με τη δημιουργία και τη χρήση αντικειμένων οριζόμενων από τον χρήστη. </p>
			<p>Με την κατανόηση των μηχανισμών της γλώσσας για τη λειτουργία των κλάσεων, θα μπορεί κανείς να σχεδιάσει και να κωδικοποιήσει την επίλυση πραγματικών προβλημάτων χρησιμοποιώντας τα χαρακτηριστικά της κληρονομικότητας, του πολυμορφισμού και της ενθυλάκωσης. Δόθηκε η περιγραφή στοιχείων σχετικών με τη διαχείριση ιδιοτήτων και συμπεριφορών μέσα από την κατασκευή ειδικών μεθόδων και διακοσμητών της γλώσσας.</p>
			
		</section>
		<section role="section" id="ch13se20" data-featured="chapter-questions">
			<h1><span role="label">11.20</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Τι είναι ο αντικειμενοστραφής προγραμματισμός; Ποιες είναι οι βασικές αρχές του;</li>
			<li>Ποιες είναι οι διαφορές του από το διαδικαστικό μοντέλο προγραμματισμού;</li>
			<li>Ποια είναι τα βασικά στοιχεία και χαρακτηριστικά που πρέπει να έχει ένα πρόγραμμα το οποίο χρησιμοποιεί τεχνικές προσανατολισμένες στα αντικείμενα;</li>
			<li>Τι είναι κλάση; Ποια η σχέση της με τα αντικείμενα;</li>
			<li>Πώς δημιουργείται μια κλάση; </li>
			<li>Πώς δημιουργείται ένα αντικείμενο;</li>
			<li>Τι είναι μέθοδος, πώς δημιουργείται και ποιο σκοπό εξυπηρετεί;</li>
			<li>Τι είναι η αρχικοποίηση αντικειμένων και πώς επιτυγχάνεται;</li>
			<li>Τι είναι οι ιδιότητες; Ποια μορφή μπορεί να έχουν;</li>
			<li>Ποιες είναι οι λειτουργίες και οι διαφορές των στατικών μεθόδων, των μεθόδων κλάσης, των ειδικών μεθόδων και των μεθόδων που ορίζονται από τον χρήστη;</li>
			<li>Τι είναι η υπερφόρτωση τελεστών; Πώς πραγματοποιείται; Για ποιες λειτουργίες είναι απαραίτητη;</li>
			<li>Τι είναι ο επαναλήπτης; Ποια είναι η λειτουργία του; Πού χρησιμοποιείται; Πώς δημιουργείται;</li>
			<li>Πώς επιτυγχάνεται η κληρονομικότητα στην Python;</li>
			<li>Τι περιλαμβάνει το χαρακτηριστικό της ενθυλάκωσης;</li>
			<li>Πώς εξασφαλίζεται η ιδιωτικότητα των χαρακτηριστικών ενός αντικειμένου;</li>
			<li>Πώς επικοινωνούν τα αντικείμενα μεταξύ τους;</li>
			<li>Ποια είναι τα χαρακτηριστικά του πολυμορφισμού στην Python; Πώς τα χρησιμοποιεί η γλώσσα και σε ποιες περιπτώσεις;</li>
			<li>Τι είναι η πολλαπλή και η πολυεπίπεδη κληρονομικότητα; Υποστηρίζονται από την Python; Αν ναι, με ποιον τρόπο;</li></ol>
			
		</section>
		<section role="section" id="ch13se21" data-featured="chapter-assess">
			<h1><span role="label">11.21</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol><li>Δημιουργήστε μια βασική κλάση για τον ορισμό των στοιχείων ενός σχήματος και δυο υποκλάσεις για έναν κύκλο και ένα ορθογώνιο. Υλοποιήστε κατάλληλες μεθόδους για τον υπολογισμό του εμβαδού των δυο σχημάτων.</li>
			<li>Δημιουργήστε κλάση <span class="courier-code">vector</span> που θα υλοποιεί βασικές πράξεις διανυσμάτων.</li>
			<li>Σχεδιάστε σύστημα κλάσεων για ένα κατάστημα κατοικιδίων (pet shop). Ποιες κλάσεις θα ήταν απαραίτητες; Ποια χαρακτηριστικά χρειάζεται να έχουν; Τι λειτουργίες πρέπει να ενσωματώνουν;</li>
			<li>Δημιουργήστε κλάση αντικειμένων λίστας που θα περιέχει τις λειτουργίες της ένωσης και της τομής συνόλων.</li>
			<li>Σε ένα σχολείο υπάρχουν καθηγητές και μαθητές. Να δημιουργηθούν κλάσεις που θα διαχειρίζονται πληροφορίες κοινές και ατομικές για κάθε αντικείμενο, καθώς και μέθοδοι εμφάνισης των στοιχείων αυτών.</li>
			<li>Μια επιχείρηση απασχολεί εργαζομένους σε διάφορα τμήματα. Να γράψετε σύστημα κλάσεων για κάθε εργαζόμενο, όπου θα αποτυπώνονται τα χαρακτηριστικά τους και θα υλοποιούνται δυο βασικές λειτουργίες για την εμφάνιση των στοιχείων τους και την αλλαγή του μισθού τους. Η αλλαγή του μισθού θα πρέπει να γίνεται με ασφάλεια και κατάλληλους ελέγχους. Αυξήσεις δίνονται σ’ αυτούς που έχουν χρόνια υπηρεσίας από 5 μέχρι 10 έτη (10%) και σ’ αυτούς με περισσότερα από 10 έτη (20%).</li>
			<li>Μια βιβλιοθήκη διαθέτει βιβλία και περιοδικά. Να δημιουργήσετε κατάλληλες κλάσεις για αυτά. Τι λειτουργίες θα μπορούσαν να έχουν; Υλοποιήστε μια από αυτές.</li>
			<li>Μια από τις πρώτες κατηγορίες παιχνιδιών για υπολογιστή ήταν εκείνη των text adventures και role playing. Δημιουργήστε ένα παιχνίδι που θα περιλαμβάνει τις κλάσεις: Ήρωας, Κακός και Χάρτης, με αντικείμενα, όπλα και τοποθεσίες που θα μπορεί να συλλέξει και να επισκεφθεί ο παίκτης. Να γίνει υλοποίηση των λειτουργιών: Μετακίνηση του παίκτη στον χάρτη, Συλλογή αντικειμένων και Μάχη με τον εχθρό.</li>
			<li>Να δημιουργηθεί κλάση για την αναπαράσταση ενός ακέραιου αριθμού ως δυαδικού.</li>
			<li>Να δημιουργηθεί κλάση για την κλασματική αναπαράσταση ενός ακέραιου αριθμού.</li>
			<li>Να δημιουργηθεί κλάση που θα περιέχει συμβολοσειρά και λειτουργίες για τη συμπίεσή της σε λίστα της μορφής: [(θέση1, θέση2,…), χαρακτήρας].</li>
			<li>Να δημιουργηθεί κλάση για την κρυπτογράφηση δοσμένου κειμένου.</li>
			<li>Να δημιουργηθεί κλάση για τις συναλλαγές με διάφορα νομίσματα. Η κλάση θα διαχειρίζεται κάθε συναλλαγή, καθώς και τον υπολογισμό της αξίας σε συγκεκριμένο νόμισμα.</li>
			<li>Να δημιουργηθεί πρόγραμμα προσομοίωσης ραδιοφώνου. Οι λειτουργίες του θα αφορούν την αλλαγή σταθμού και την αλλαγή της έντασης του ήχου.</li>
			<li>Να δημιουργηθεί πρόγραμμα που θα διαχειρίζεται καταθέσεις πελατών. Θα αποθηκεύονται στοιχεία όπως: όνομα πελάτη, ποσό, διάρκεια κατάθεσης, ενώ θα υπολογίζει τους τόκους και το τελικό κεφάλαιο.</li>
			<li>Να δημιουργηθεί πρόγραμμα για το παιχνίδι της τρίλιζας. Οι λειτουργίες θα αφορούν την επιλογή του παίκτη, την επιλογή του υπολογιστή, τον έλεγχο για νικητή και την εμφάνιση του πίνακα του παιχνιδιού στην οθόνη.</li>
			<li>Να δημιουργηθεί πρόγραμμα για την παρακολούθηση της αποθήκης μιας εταιρείας με προϊόντα. Για κάθε προϊόν θα υπάρχει πληροφορία ως προς το πλήθος και την τιμή, καθώς και για το πόσα τέτοια αντικείμενα πρέπει να υπάρχουν στην αποθήκη ως απόθεμα. Οι σχετικές λειτουργίες θα αφορούν την εμφάνιση πλεονάσματος ή ελλείμματος, την αξία τους και την πώληση ή αγορά τους.</li>
			<li>Να γράψετε πρόγραμμα για το παιχνίδι της κρεμάλας. Ο υπολογιστής θα επιλέγει τυχαία μια λέξη (από μια έτοιμη για αυτό τον σκοπό λίστα) και ο παίκτης θα επιλέγει γράμματα. Θα πρέπει να υπάρχουν μέθοδοι για την εύρεση γραμμάτων ή όχι μέσα στη λέξη, εμφάνιση της κρεμάλας στην οθόνη και έλεγχο τερματισμού του παιχνιδιού.</li>
		</ol></section>
	</section>
	<section role="chapter" id="ch14">
		<h1><span role="label">ΚΕΦΑΛΑΙΟ 12</span> Διαχείριση Αρχείων</h1>
		<section role="section" id="ch14se1">
			<h1><span role="label">12.1</span> Εισαγωγή</h1>
			<img src="media/chapter_12_image_0.jpg" alt=""/>
			<p class="no-indent"><i>Στο τελευταίο κεφάλαιο του βιβλίου, παρουσιάζονται μερικοί από τους τρόπους διαχείρισης αρχείων στην Python. </i><i>Περιγράφεται ο τρόπος χειρισμού αρχείων και φακέλων μέσα από ένα πρόγραμμα ή από το περιβάλλον του διερμηνευτή, που επίσης</i><i> παρέχει πρόσβαση στο σύστημα διαχείρισης αρχείων. Περιγράφονται οι δυο βασικοί και πιο συχνά χρησιμοποιούμενοι τύποι</i><i> αρχείων: τα αρχεία κειμένου και τα δυαδικά αρχεία. Με τη βοήθεια μικρών σεναρίων παρουσιάζονται</i><i> διάφοροι τρόποι πρόσβασης στο περιεχόμενο αρχείων και αποθήκευσής του σε δομές της γλώσσας, ώστε να μπορεί να γίνει η </i><i>επεξεργασία του. Γίνεται χρήση και ανάλυση της μεθόδου διαχείρισης περιεχομένου της Python, η οποία προσφέρει έναν ιδιαίτερο</i><i> μηχανισμό για την εύκολη πρόσβαση σε δομές αρχείων και όχι μόνο. Το υλικό του κεφαλαίου </i><i>συνοδεύεται με την περιγραφή της δομής και του τρόπου διαχείρισης μιας ειδικής κατηγορίας αρχείων που ονομάζονται CSV.</i></p>
		</section>
		<section role="section" id="ch14se2">
			<h1><span role="label">12.2</span> Μορφές αρχείων</h1>
			<p class="no-indent">Όλες οι πληροφορίες και τα δεδομένα που χειριζόμαστε και χρησιμοποιούμε καθημερινά υπάρχουν με τη μορφή κάποιου αρχείου. Είτε πρόκειται για κείμενα, φωτογραφίες ή ταινίες, είτε για κάποιο πρόγραμμα που τα χειρίζεται, όλα βρίσκονται κάπου αποθηκευμένα – σε κάποιο αρχείο, σε κάποια μονάδα αποθήκευσης. Το ίδιο το λειτουργικό σύστημα (Windows, Mac OS, Linux) είναι μια τεράστια συλλογή αρχείων. Κάθε πρόγραμμα, σε οποιαδήποτε υπολογιστική συσκευή, είναι ένα ή περισσότερα αρχεία. Τα προγράμματα σε Python αποθηκεύονται σε αρχεία, είτε με την επέκταση <span class="courier-code">.py</span> στο όνομά τους, που δηλώνει ότι πρόκειται για αρχεία πηγαίου κώδικα, είτε με την επέκταση <span class="courier-code">.pyc</span>, που δείχνει ότι είναι αρχεία μεταφρασμένου <i>δυαδικού κώδικα (byte code)</i>. Αντίστοιχα, ένα πρόγραμμα γραμμένο σε γλώσσα C, στο λειτουργικό σύστημα των Windows, έχει την επέκταση .<span class="courier-code">exe</span>, που σημαίνει ότι είναι ένα εκτελέσιμο αρχείο. Κάθε αρχείο έχει το όνομά του και, συνήθως, μια επέκταση ή κατάληξη, για να γνωρίζει το λειτουργικό σύστημα με ποιο πρόγραμμα θα μπορέσει να το ανοίξει και να χειριστεί ό,τι περιέχει αυτό. </p>
			<p>Ένα αρχείο, ανάλογα με το περιεχόμενό του, μπορεί να πάρει τη μορφή <i>αρχείου κειμένου (text)</i> ή <i>δυαδικού αρχείου (binary file)</i>. Το πρώτο είδος χρησιμεύει για την αποθήκευση <i>απλού κειμένου (plain text)</i>, ενώ κάποιες φορές μπορεί να περιέχει και στοιχεία σχετικά με τη <i>μορφοποίησή του (rich text)</i>. Αποτελείται από μια σειρά χαρακτήρες σε συγκεκριμένη κωδικοποίηση, ASCII, UTF-8 κ.λπ. και κάποιους ειδικούς χαρακτήρες οριοθέτησης. </p>
			<p>Η διαχείριση κειμένου έχει ήδη παρουσιαστεί στο Κεφάλαιο 6 και ορισμένα από τα στοιχεία που μελετήθηκαν θα χρησιμοποιηθούν και εδώ. Οι ειδικοί χαρακτήρες που υπάρχουν σε τέτοια αρχεία είναι <i>χαρακτήρες διαφυγής (escape characters)</i>, όπως αλλαγής γραμμής ή δημιουργίας εσοχών. Για το άνοιγμα τέτοιων αρχείων, το μόνο που χρειάζεται είναι ένας απλός (χωρίς μορφοποιήσεις) επεξεργαστής κειμένου, όπως το Σημειωματάριο (Notepad ή το Notepad++, που εξειδικεύεται στη συγγραφή κώδικα) στα Windows ή το Nano editor σε κονσόλα Linux. </p>
			<p>Τα δυαδικά αρχεία από την άλλη είναι αρχεία που περιέχουν πληροφορίες με μορφή δυαδικών ψηφίων. Μπορεί, στην κυριολεξία, να περιέχουν οτιδήποτε: από τις πληροφορίες που έχει καταγράψει μια φωτογραφική μηχανή σε μια εικόνα μέχρι τον ήχο ενός μουσικού κομματιού. Κάθε αρχείο αυτής της μορφής έχει συγκεκριμένη δομή ώστε να είναι προσβάσιμο από κατάλληλο πρόγραμμα, σε πολλές και διαφορετικές συσκευές.</p>
			<p>Η Python δίνει τη δυνατότητα πρόσβασης και στα δυο αυτά είδη αρχείων, και όχι μόνο: υπάρχουν έτοιμες βιβλιοθήκες κώδικα για το άνοιγμα και τη διαχείριση του περιεχομένου για πάρα πολλά γνωστά είδη αρχείων, όπως csv, xml, json, excel, zip, jpg, avi, mp3, mp4, mkv κ.λπ.</p>
			<p>Τα αρχεία είναι απαραίτητα σε κάθε πρόγραμμα που διαχειρίζεται είτε μικρό είτε πολύ μεγαλύτερο όγκο δεδομένων. Οι εντολές εισόδου δεδομένων, όπως η (συνάρτηση) <span class="courier-code">input</span>, μπορούν να λειτουργήσουν για μικρές ποσότητες πληροφορίας, τις οποίες όμως, αφού περάσουν σε ένα πρόγραμμα, για να μη χαθούν οριστικά με το κλείσιμο του προγράμματος ή του υπολογιστή, θα πρέπει να τις αποθηκεύσουν σε κάποιο αρχείο. Όταν το πρόγραμμα τις ξαναχρειαστεί, θα πρέπει να μπορεί να τις διαβάσει από το αρχείο όπου τις είχε αποθηκεύσει, ώστε να μη χρειάζεται να πληκτρολογηθούν πάλι και να γίνει η εισαγωγή των δεδομένων στο πρόγραμμα ξανά από την αρχή. Στη συνέχεια του κεφαλαίου, όλα τα παραδείγματα δίνονται με απλά αρχεία κειμένου, με επέκταση ονόματος συνήθως <span class="courier-code">.txt</span>, καθώς και σε δυαδικά αρχεία με διάφορες επεκτάσεις (όπως <span class="courier-code">.dat</span> <span class="courier-code">.bin</span> κ.λπ.).</p>
		</section>
		<section role="section" id="ch14se3">
			<h1><span role="label">12.3</span> Άνοιγμα &amp; κλείσιμο αρχείων</h1>
			<p class="no-indent">Για να μπορέσει κάποιος να ανοίξει ένα αρχείο και να ξεκινήσει να δουλεύει με το περιεχόμενό του, αρκεί να δώσει την εντολή:</p>
			<p><span class="courier-code">μεταβλητή=open(&quot;όνομα αρχείου&quot;)</span></p>
			<p class="no-indent">Η μεταβλητή στην προηγούμενη εντολή χρησιμεύει για τον ορισμό αντικειμένου υπεύθυνου για τη διαχείριση του αρχείου στον κώδικα, όσο χρονικό διάστημα θα είναι ανοικτό. Αυτό το αντικείμενο είναι γνωστό ως <i>αντικείμενο τύπου αρχείου (file </i><i>object)</i>.</p>
			<p>Αν για παράδειγμα υπάρχει στον τρέχοντα κατάλογο (εκεί δηλαδή που βρίσκεται το πρόγραμμα ή εκεί απ’ όπου ξεκίνησε ο διερμηνευτής) ένα αρχείο με όνομα <span class="courier-code">data.txt</span>, τότε η παρακάτω εντολή:</p>
			<p><span class="courier-code">file=open(&apos;data.txt&apos;)</span></p>
			<p class="no-indent">θα ανοίξει το αρχείο <span class="courier-code">data.txt</span> και θα «ετοιμάσει» την επεξεργασία του, δημιουργώντας ένα αντικείμενο τύπου αρχείου, που εδώ του δόθηκε απλά το όνομα <span class="courier-code">file</span>. Από εδώ και πέρα, όλες οι ενέργειες πάνω στο περιεχόμενο του αρχείου θα γίνονται με τη βοήθεια του αντικειμένου <span class="courier-code">file</span> και με τις συναρτήσεις-μεθόδους που αυτό διαθέτει. Η επόμενη εντολή, η οποία περιλαμβάνει τη μέθοδο <span class="courier-code">read</span> του αντικειμένου <span class="courier-code">file</span>:</p>
			<p><span class="courier-code">data=file.read()</span></p>
			<p class="no-indent">θα διαβάσει τα περιεχόμενα του αρχείου και θα τα εκχωρήσει στη μεταβλητή <span class="courier-code">data</span> ως κείμενο. Σε δυο μόλις γραμμές κώδικα, το αρχείο έχει ανοίξει, και τα δεδομένα του είναι διαθέσιμα για επεξεργασία.</p>
			<p>Μετά τον κατάλληλο χειρισμό των δεδομένων (ό,τι κι αν περιέχει αυτός ο χειρισμός), το αρχείο θα πρέπει να κλείσει με την παρακάτω εντολή:</p>
			<p><span class="courier-code">file.close()</span></p>
			<p class="no-indent">Το κλείσιμο του αρχείου είναι απαραίτητο στο τέλος της διαδικασίας, ώστε όχι μόνο να αποφευχθούν περιπτώσεις αλλοίωσης του περιεχομένου του ή απώλειας δεδομένων, αλλά και για να αποδεσμεύονται από τη μνήμη πολύτιμοι πόροι της μνήμης, που ίσως απαιτηθούν για άλλες λειτουργίες. </p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.1</b> Να δημιουργηθεί αρχείο με το Σημειωματάριο, με όνομα <span class="courier-code">sales.txt</span>, και να δοθούν ως περιεχόμενό του τα παρακάτω στοιχεία:</p>
			</blockquote>
			<img src="media/example-12-1_fmt.png" alt=""/>
			<p class="no-indent">Αφού αποθηκευτεί στον τρέχοντα κατάλογο, να γραφτεί πρόγραμμα (Λίστα Κώδικα 12-1) που θα ανοίγει το αρχείο και θα εμφανίζει τα περιεχόμενά του στην οθόνη.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-1 | Ανάγνωση αρχείου με τη <span class="courier-code">read</span></figcaption><img src="media/ListaKodika-12-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Μόλις εκτελεστεί το παραπάνω πρόγραμμα, θα πρέπει να εμφανιστεί το περιεχόμενό του στην οθόνη. Αν εμφανιστεί το μήνυμα: </p>
			<p><span class="courier-code">FileNotFoundError:[Errno 2]No such file or directory: &apos;sales.txt&apos;</span></p>
			<p class="no-indent">τότε θα πρέπει να ελεγχθεί αν το όνομα του αρχείου δόθηκε σωστά, αν το αρχείο δεν υπάρχει ή αν βρίσκεται σε άλλον φάκελο. Για τη διαχείριση σφαλμάτων σε εργασίες με αρχεία, υπάρχουν αρκετοί τρόποι διαθέσιμοι. Η πιο απλή μορφή είναι με τον έλεγχο και τη διαχείριση εξαιρέσεων. Ο τρόπος ελέγχου και διαχείρισης εξαιρέσεων εμφανίζεται στη Λίστα Κώδικα 12-2.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-2 | Διαχείριση εξαιρέσεων κατά το άνοιγμα αρχείου</figcaption><img src="media/ListaKodika-12-2_fmt.png" alt=""/></figure>
			<p class="no-indent">Εκτελώντας ξανά το πρόγραμμα, αν όλα πάνε καλά, θα εμφανιστούν τα περιεχόμενα του αρχείου στην οθόνη. Αν υπάρξει κάποιο πρόβλημα κατά το άνοιγμα του αρχείου, η εξαίρεση θα εντοπιστεί και θα εμφανιστεί το μήνυμα:</p>
			<p><span class="courier-code">Υπάρχει πρόβλημα με το αρχείο</span><span class="courier-code">!</span></p>
			<p class="no-indent">Προβλήματα κατά το άνοιγμα του αρχείου μπορεί να προκύψουν και με την κωδικοποίησή του. Για παράδειγμα, στην κονσόλα των Windows, με τις παρακάτω εντολές:</p>
			<p><span class="courier-code">C:\Python code&gt;copy con dosfile.txt</span></p>
			<p><span class="courier-code">Γεια σου κόσμε!</span></p>
			<p><span class="courier-code">^Ζ</span></p>
			<p><span class="courier-code">1 file copied</span></p>
			<p><span class="courier-code">C:\Python code&gt;</span></p>
			<p class="no-indent">θα δημιουργηθεί αρχείο με όνομα <span class="courier-code">dosfile</span>.<span class="courier-code">txt</span>. Αν επιχειρηθεί το άνοιγμα και η ανάγνωση του αρχείου, θα εμφανιστεί το σφάλμα:</p>
			<p><span class="courier-code">UnicodeDecodeError: &apos;charmap&apos; codec can&apos;t decode byte 0x9c in position 1: character maps to &lt;undefined&gt;</span></p>
			<p class="no-indent">Σε αυτή την περίπτωση, θα πρέπει να οριστεί ακριβώς η κωδικοποίηση του αρχείου με το όρισμα: </p>
			<p><span class="courier-code">encoding=&apos;όνομα κωδικοσελίδας&apos;</span></p>
			<p class="no-indent">Η κωδικοσελίδα είναι απλά η ονομασία του συστήματος κωδικοποίησης χαρακτήρων. Στην περίπτωση του αρχείου <span class="courier-code">dosfile.txt</span>, είναι η ‘<span class="courier-code">cp737</span>’.</p>
			<p class="no-indent">Έτσι, η εντολή <span class="courier-code">open</span> θα έχει τη μορφή που φαίνεται στη Λίστα Κώδικα 12-3.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-3 | Άνοιγμα αρχείου με συγκεκριμένη κωδικοποίηση</figcaption><img src="media/ListaKodika-12-3_fmt.png" alt=""/></figure>
			<p class="no-indent">Εκτελώντας το πιο πάνω πρόγραμμα, το άνοιγμα, η ανάγνωση και η εκτύπωση του περιεχομένου του αρχείου θα γίνουν κανονικά, εμφανίζοντας στην οθόνη:</p>
			<p><span class="courier-code">Γεια σου κόσμε!</span></p>
		</section>
		<section role="section" id="ch14se4">
			<h1><span role="label">12.4</span> Ανάγνωση αρχείου</h1>
			<p class="no-indent">Η μέθοδος <span class="courier-code">read</span> που χρησιμοποιείται για την ανάγνωση δεδομένων από αρχείο μπορεί να δεχθεί ένα ακόμα όρισμα. Μέσα στις παρενθέσεις της μπορεί να δηλωθεί το πλήθος των στοιχείων που θα διαβάσει από το αρχείο. Οι παρακάτω εντολές (Λίστα Κώδικα 12-4) θα διαβάσουν τμήμα του αρχείου <span class="courier-code">sales.txt</span>:</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-4 | Ανάγνωση αρχείου με πλήθος χαρακτήρων</figcaption><img src="media/ListaKodika-12-4_fmt.png" alt=""/></figure>
			<p class="no-indent">και θα το εμφανίσουν στην οθόνη:</p>
			<p><span class="courier-code">Έσοδα</span></p>
			<p class="no-indent">Αφού δόθηκε ο αριθμός <span class="courier-code">5</span>, η <span class="courier-code">read</span> θα διαβάσει τους 5 πρώτους χαρακτήρες του αρχείου ξεκινώντας από την αρχή του. Επόμενες εντολές <span class="courier-code">read</span> (Λίστα Κώδικα 12-5) θα συνεχίσουν από το σημείο όπου σταμάτησε η τελευταία <span class="courier-code">read</span>. </p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-5 | Συνεχόμενη ανάγνωση αρχείου με πλήθος χαρακτήρων</figcaption><img src="media/ListaKodika-12-5_fmt.png" alt=""/></figure>
			<p class="no-indent">Έτσι, το πρόγραμμα θα εμφανίσει τους επομένους 3 χαρακτήρες του αρχείου (στην αρχή υπάρχει και ένα κενό):</p>
			<p><span class="courier-code"> Ημ</span></p>
			<p class="no-indent">Την παραπάνω πορεία παρακολουθεί εσωτερικά ένας δείκτης, που «δείχνει» σε ποιο σημείο βρίσκεται ο έλεγχος κάθε φορά, ώστε να εντοπίζει το σημείο απ’ όπου πρέπει να συνεχίσει. </p>
			<p>Για την αλλαγή του σημείου όπου βρίσκεται ο δείκτης, μπορεί να γίνει χρήση της μεθόδου <span class="courier-code">seek</span>. Η εντολή:</p>
			<p><span class="courier-code">f.seek(0)</span></p>
			<p class="no-indent">επαναφέρει τον δείκτη του αρχείου στην αρχή του, ενώ επόμενες εντολές <span class="courier-code">read</span> θα ξεκινήσουν πάλι από την αρχή.</p>
			<p>Εκτός από τη <span class="courier-code">read</span>, υπάρχουν άλλες δυο μέθοδοι για την ανάγνωση του περιεχομένου αρχείων.</p>
			<section role="subsection" id="ch14se4ss1">
				<h1><span role="label">12.4.1</span> Η μέθοδος <span class="courier-code">readline</span></h1>
				<p class="no-indent">Για την τμηματική ανάγνωση του αρχείου χρησιμοποιείται η <span class="courier-code">readline</span>. Διαβάζει το αρχείο ανά γραμμή, μία κάθε φορά που χρησιμοποιείται, και επιστρέφει κείμενο τύπου <span class="courier-code">str</span>. </p>
				<p>Η παρακάτω εντολή, που χρησιμοποιεί τη <span class="courier-code">readline</span>, θα διαβάσει την πρώτη γραμμή του αρχείου (μετά το άνοιγμά του):</p>
				<p><span class="courier-code">&gt;&gt;&gt; f=open(&quot;sales.txt&quot;)</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; line=f.readline()</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; print(line)</span></p>
				<p><span class="courier-code">Έσοδα Ημέρας</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; line</span></p>
				<p><span class="courier-code">&apos;Έσοδα Ημέρας\n&apos;</span></p>
				<p class="no-indent">Η τελευταία γραμμή, που δείχνει το περιεχόμενο της μεταβλητής <span class="courier-code">line</span>, εμφανίζει και τον τρόπο που τελειώνει κάθε γραμμή στο αρχείο <span class="courier-code">(&apos;\n&apos;).</span></p>
				<p>Με παρόμοιο τρόπο, λειτουργεί και το ίδιο το αντικείμενο τύπου αρχείου που μπορεί να παίξει τον ρόλο του επαναλήπτη. Για την καλύτερη κατανόησή του, δίνεται το επόμενο παράδειγμα.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.2</b> Να γραφτεί πρόγραμμα που θα ανοίγει το αρχείο <span class="courier-code">sales</span><b>.</b><span class="courier-code">txt</span><b> </b>και θα εμφανίζει τις πωλήσεις και το πλήθος τους. </p>
				</blockquote>
				<p class="no-indent">Το αρχείο <span class="courier-code">sales</span>.<span class="courier-code">txt</span> περιέχει, εκτός από την 1η γραμμή που είναι τίτλος, την αξία των πωλήσεων σε κάθε γραμμή. Άρα, αρκεί να μετρηθεί το πλήθος των γραμμών του μείον τη γραμμή του τίτλου (Λίστα Κώδικα 12-6).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-6 | Ανάγνωση αρχείου μέσω της <span class="courier-code">for</span></figcaption><img src="media/ListaKodika-12-6_fmt.png" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">readline</span> διαβάζει την 1η γραμμή του αρχείου – που δεν χρειάζεται όμως, γιατί αφορά τον τίτλο και όχι τις πωλήσεις. Η <span class="courier-code">for</span> δίνει επαναληπτικά στη μεταβλητή <span class="courier-code">line</span> το περιεχόμενο κάθε γραμμής του αρχείου. Για κάθε γραμμή αυξάνεται ο δείκτης <span class="courier-code">i</span>, που εκφράζει στο τέλος το πλήθος των γραμμών (εκτός της 1ης). </p>
				<p>Το πρόγραμμα θα τυπώσει τα παρακάτω:</p>
				<p><span class="courier-code">120</span></p>
				<p><span class="courier-code">240</span></p>
				<p><span class="courier-code">150</span></p>
				<p><span class="courier-code">300</span></p>
				<p><span class="courier-code">Το αρχείο περιέχει 4 πωλήσεις.</span></p>
				<p class="no-indent">Η <span class="courier-code">print</span> στη γραμμή 5 έχει ως όρισμα το τμήμα <span class="courier-code">end=&apos;&apos;</span>. Αυτό γίνεται γιατί η ανάγνωση από το αρχείο επιστρέφει ολόκληρη την κάθε γραμμή του, μαζί όμως και με τον ειδικό χαρακτήρα αλλαγής γραμμής. Έτσι, η <span class="courier-code">line</span> θα περιλαμβάνει και τον ειδικό χαρακτήρα <span class="courier-code">&apos;\n&apos;</span>. Για να μην τυπωθούν επιπλέον κενές γραμμές, αφαιρείται η αλλαγή γραμμής από την <span class="courier-code">print</span> (εκτός και αν αφαιρεθεί ο τελευταίος χαρακτήρας της <span class="courier-code">line</span>. Αυτό όμως αφήνεται ως άσκηση!).</p>
				<p>Στο τέλος του αρχείου, υπάρχει ένας ειδικός χαρακτήρας για τη σήμανση του τέλους του (End of File – EOF). Γι’ αυτό, η τελευταία εντολή ανάγνωσης <span class="courier-code">readline</span> θα επιστρέψει το κενό <span class="courier-code">string</span>. Αυτό είναι χρήσιμο, ώστε να γίνει λίγο διαφορετικά η ανάγνωση του αρχείου. Στη Λίστα Κώδικα 12-7, παρουσιάζεται ο κώδικας ανάγνωσης αρχείου με τη <span class="courier-code">readline</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-7 | Ανάγνωση αρχείου με τη <span class="courier-code">readline</span></figcaption><img src="media/ListaKodika-12-7_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη γραμμή 4 ο έλεγχος απλοποιείται αρκετά. Όπως είναι ήδη γνωστό, μια μηδενική τιμή, ή το κενό, ισοδυναμούν με τη λογική τιμή <span class="courier-code">False</span>. Έτσι, όταν η ανάγνωση φτάσει στο τέλος του αρχείου, η μεταβλητή <span class="courier-code">line</span> θα είναι ένα κενό <span class="courier-code">string</span>, οπότε ο έλεγχος θα αποτύχει και η επανάληψη θα τερματιστεί.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.3</b> Να βρεθούν οι συνολικές πωλήσεις του αρχείου <span class="courier-code">sales2.</span><span class="courier-code">txt</span><b> </b>και να καταχωρηθούν σε λίστα.</p>
				</blockquote>
				<p class="no-indent">Σημαντική πληροφορία είναι το γεγονός ότι κάθε αριθμός βρίσκεται σε ξεχωριστή γραμμή μέσα στο αρχείο. Είναι κρίσιμης σημασίας να είναι γνωστή η δομή και το είδος των δεδομένων που υπάρχουν ή εγγράφονται σε ένα αρχείο. Αυτό φυσικά δεν σημαίνει ότι δεν θα ήταν δυνατή η επεξεργασία των στοιχείων αν τα δεδομένα είχαν κάποια άλλη διάταξη μέσα στο αρχείο. Για παράδειγμα, έστω ότι τα δεδομένα των πωλήσεων (ακέραιοι αριθμοί) έχουν την παρακάτω μορφή:</p>
				<p><span class="courier-code">Έσοδα Ημέρας 120 240 150 300</span></p>
				<p class="no-indent">Στη Λίστα Κώδικα 12-8, παρουσιάζεται ο κώδικας ανάγνωσης του αρχείου <span class="courier-code">sales2.txt</span> με την εντολή <span class="courier-code">while</span>.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-8 | Ανάγνωση αρχείου με <span class="courier-code">while</span></figcaption><img src="media/ListaKodika-12-8_fmt.png" alt=""/></figure>
				<p class="no-indent">Τα αποτελέσματα που επιστρέφει το πρόγραμμα είναι:</p>
				<p><span class="courier-code">Η λίστα με τις πωλήσεις:[120, 240, 150, 300]</span></p>
				<p><span class="courier-code">Συνολικές πωλήσεις:810</span></p>
				<p class="no-indent">Στη γραμμή 5 η μέθοδος <span class="courier-code">split</span> χωρίζει το περιεχόμενο κάθε γραμμής του αρχείου σε κομμάτια τα οποία καταχωρεί σε λίστα (<span class="courier-code">sales</span>). Μια νέα λίστα (<span class="courier-code">x</span>) δημιουργείται με τη σύνθεση στη γραμμή 7 και περιέχει μόνο τους ακέραιους αριθμούς.</p>
				<p>Ο παραπάνω κώδικας όμως θα είχε πρόβλημα, αν οι αριθμοί δεν ήταν μόνο ακέραιοι. Αν το αρχείο είχε τη μορφή:</p>
				<p><span class="courier-code">Έσοδα Ημέρας 130.45 200.90 150 -300.05</span></p>
				<p class="no-indent">το προηγούμενο πρόγραμμα δεν θα μπορούσε να εκτελεστεί σωστά.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.4</b> Να δημιουργηθεί στο Σημειωματάριο ένα αρχείο (<span class="courier-code">sales3</span><b>.</b><span class="courier-code">txt</span>) με τα παραπάνω περιεχόμενα και να εμφανιστεί η λίστα με τους αριθμούς και το σύνολό τους.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-9 | Ανάγνωση αρχείου και επεξεργασία</figcaption><img src="media/ListaKodika-12-9_fmt.png" alt=""/></figure>
				<p class="no-indent">Τα αποτελέσματα που επιστρέφει το πρόγραμμα, το οποίο παρουσιάζεται στη Λίστα Κώδικα 12-9, είναι:</p>
				<p><span class="courier-code">Η λίστα με τις πωλήσεις</span><span class="courier-code">:[130.45, 200.9, 150.0, -300.05]</span></p>
				<p><span class="courier-code">Συνολικές πωλήσεις:181.3</span></p>
				<p class="no-indent">Το πρόγραμμα είναι παρόμοιο με το προηγούμενο (Λίστα Κώδικα 12-8), με μόνη διαφορά ότι, κατά τη δημιουργία της λίστας, ενσωματώνεται ένας έλεγχος. Ο έλεγχος γίνεται με τη βοήθεια της συνάρτησης <span class="courier-code">isnum</span>, η οποία επιστρέφει <span class="courier-code">True</span> ανάλογα με το αν ο αριθμός που της δίνεται μπορεί να μετατραπεί σε <span class="courier-code">float</span> ή όχι. </p>
			</section>
			<section role="subsection" id="ch14se4ss2">
				<h1><span role="label">12.4.2</span> Η μέθοδος <span class="courier-code">readlines</span></h1>
				<p class="no-indent">Η <span class="courier-code">readlines</span> είναι μια ακόμη μέθοδος που επιτρέπει την ανάγνωση στοιχείων από ένα αρχείο. Διαβάζει όλο το περιεχόμενό του και δημιουργεί λίστα με τις γραμμές που υπάρχουν στο αρχείο. Κάθε γραμμή έχει τη μορφή κειμένου και διατηρεί τον χαρακτήρα αλλαγής γραμμής <span class="courier-code">&apos;\n&apos;</span>. Η χρήση της <span class="courier-code">readlines</span> είναι βολική, γιατί σε μια μόνο γραμμή πετυχαίνει την ανάγνωση όλου του περιεχομένου του αρχείου. </p>
				<p>Χρειάζεται όμως ιδιαίτερη προσοχή γιατί, αν το αρχείο είναι πολύ μεγάλο, μπορεί να οδηγήσει σε σφάλμα υπέρβασης χώρου μνήμης. Η λύση του Παραδείγματος 12-1 με τη χρήση της <span class="courier-code">readlines</span> (Λίστα Κώδικα 12-10) θα ήταν ως εξής:</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-10 | Ανάγνωση αρχείου με τη <span class="courier-code">readlines</span></figcaption><img src="media/ListaKodika-12-10_fmt.png" alt=""/></figure>
				<p class="no-indent">Η <span class="courier-code">len</span> επιστρέφει το μέγεθος της λίστας, με τις γραμμές του αρχείου που έχει δημιουργήσει η <span class="courier-code">readlines</span>. Το <span class="courier-code">-1</span> έχει μπει για να αφαιρέσει τη γραμμή επικεφαλίδας του αρχείου. Ο κώδικας αυτός θα εμφανίσει την τιμή <span class="courier-code">4</span>.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.5</b> Να δημιουργηθεί αρχείο <span class="courier-code">quiz</span>.<span class="courier-code">txt</span> που θα περιέχει τις ερωτήσεις ενός κουίζ γνώσεων. Τα στοιχεία του αρχείου θα είναι στη μορφή:</p>
				</blockquote>
				<img src="media/example-12-5a_fmt.png" alt=""/>
				<p class="no-indent">Το αρχείο θα περιέχει τόσες πεντάδες γραμμών όσες θα είναι και οι ερωτήσεις του κουίζ. Να γραφτεί πρόγραμμα που θα εμφανίζει τις ερωτήσεις, θα ζητάει την απάντηση και θα εμφανίζει αν ήταν σωστή ή όχι. Στο τέλος να εμφανίζει τον αριθμό σωστών και λανθασμένων απαντήσεων.</p>
				<p>Δίνεται δοκιμαστικά το περιεχόμενο του αρχείου <span class="courier-code">quiz</span>.<span class="courier-code">txt</span>:</p>
				<img src="media/example-12-5b_fmt.png" alt=""/>
				<p class="no-indent">Το αντίστοιχο πρόγραμμα που απαντάει στα ερωτήματα του παραδείγματος παρουσιάζεται στη Λίστα Κώδικα 12-11.</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-11 | Μια εφαρμογή κουίζ</figcaption><img src="media/ListaKodika-12-11_fmt.png" alt=""/></figure>
				<p class="no-indent">Το πρόγραμμα ανοίγει σε κατάσταση ανάγνωσης (γραμμή 1) και το περιεχόμενό του φορτώνεται με τη μορφή λίστας από συμβολοσειρές στη μεταβλητή <span class="courier-code">lines</span> (γραμμή 2). Μετά την αρχικοποίηση των μεταβλητών για την καταμέτρηση σωστών ή λανθασμένων απαντήσεων (γραμμή 3), ξεκινάει μια επανάληψη <span class="courier-code">for</span> για την εμφάνιση των ερωτήσεων και τη λήψη απαντήσεων από τον χρήστη. Η γραμμή 5 ελέγχει αν η τρέχουσα γραμμή του αρχείου αφορά την απάντηση. Σ’ αυτή την περίπτωση ζητείται η απάντηση στην ερώτηση (γραμμή 8). Ο έλεγχος στη γραμμή 9 αφορά την επιτυχή ή λάθος απάντηση στην ερώτηση και γίνεται η ενημέρωση των κατάλληλων μεταβλητών. Το πρόγραμμα τελειώνει με την εμφάνιση των αποτελεσμάτων στις γραμμές 16 έως 19. Οι παρακάτω γραμμές:</p>
				<img src="media/example-12-5c_fmt.png" alt=""/>
				<p class="no-indent">θα εμφανιστούν στην οθόνη μόλις τρέξει το πρόγραμμα.</p>
			</section>
		</section>
		<section role="section" id="ch14se5">
			<h1><span role="label">12.5</span> Εγγραφή σε αρχείο</h1>
			<p class="no-indent">Η συνάρτηση <span class="courier-code">open</span> δέχεται περισσότερα ορίσματα (παραμέτρους), εκτός από το όνομα του αρχείου, και καλύπτει πολύ περισσότερες περιπτώσεις, οι οποίες ξεφεύγουν από τον σκοπό αυτού του βιβλίου:</p>
			<p><span class="courier-code">open(file, mode=&apos;rt&apos;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</span></p>
			<p class="no-indent">Στον Πίνακα 12-1 φαίνεται μια σύντομη περιγραφή της λειτουργίας των παραμέτρων της συνάρτησης <span class="courier-code">open</span>.</p>
			<figure role="table" id="tb30">
				<figcaption><span role="label">Πίνακας 12-1</span> | Παράμετροι <span class="courier-code">open</span></figcaption>
				<table id="table046">
					<tbody>
						<tr>
							
								<th>Παράμετρος</th>
							
							
								<th>Λειτουργία</th>
							
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">mode</span></p>
							</td>
							<td>
								<p>Ορισμός κατάστασης λειτουργίας για το άνοιγμα αρχείου</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">buffering</span></p>
							</td>
							<td>
								<p>Οδηγίες για τη χρήση ενδιάμεσης μνήμης</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">encoding</span></p>
							</td>
							<td>
								<p>Η κωδικοποίηση του αρχείου</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">errors</span></p>
							</td>
							<td>
								<p>Διαχείριση σφαλμάτων</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">newline</span></p>
							</td>
							<td>
								<p>Διαχείριση χαρακτήρα αλλαγής γραμμής</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">closefd</span></p>
							</td>
							<td>
								<p>Σχετικά με το κλείσιμο αρχείου και τη διαχείριση των file descriptors</p>
							</td>
						</tr>
						<tr>
							<td>
								<p><span class="courier-code">opener</span></p>
							</td>
							<td>
								<p>Σχετικό με ειδικά τροποποιημένα αντικείμενα διαχείρισης αρχείου</p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Το κυριότερο όρισμα που μπορεί να οριστεί έχει να κάνει με τον τρόπο που θα ανοίξει το αρχείο, για το αν δηλαδή θα ανοίξει για <i>ανάγνωση (read)</i> ή <i>εγγραφή (write)</i> ή και για τα δύο – και σε ποια μορφή (δυαδική ή ως κείμενο). Αυτό καθορίζεται από την παράμετρο <span class="courier-code">mode</span>.</p>
			<p>Ο Πίνακας 12-2 περιέχει όλες τις διαθέσιμες τιμές που μπορούν να δοθούν στην παράμετρο <span class="courier-code">mode</span>, μαζί με τα χαρακτηριστικά κάθε τιμής. </p>
			<figure role="table" id="tb31">
				<figcaption><span role="label">Πίνακας 12-2</span> | Τιμές της παραμέτρου <span class="courier-code">mode</span></figcaption>
				<table id="table047">
					<tbody>
						<tr>
							
								<th>ΛΕΙΤΟΥΡΓΙΑ</th>
							
							
								<th><span class="courier-code"><b>r</b></span></th>
							
							
								<th><span class="courier-code"><b>w</b></span></th>
							
							
								<th><span class="courier-code"><b>a</b></span></th>
							
							
								<th><span class="courier-code"><b>x</b></span></th>
							
							
								<th><span class="courier-code"><b>r+</b></span></th>
							
							
								<th><span class="courier-code"><b>w+</b></span></th>
							
							
								<th><span class="courier-code"><b>a+</b></span></th>
							
							
								<th><span class="courier-code"><b>x+</b></span></th>
							
						</tr>
						<tr>
							<td colspan="3">
								<p>ΑΝΑΓΝΩΣΗ</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✘</p>
							</td>
							<td>
								<p>✘</p>
							</td>
							<td>
								<p>✘</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
						</tr>
						<tr>
							<td colspan="3">
								<p>ΕΓΓΡΑΦΗ</p>
							</td>
							<td>
								<p>✘</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
						</tr>
						<tr>
							<td rowspan="2">
								<p>ΤΟΠΟΘΕΤΗΣΗ ΔΕΙΚΤΗ</p>
							</td>
							<td colspan="2">
								<p>ΣΤΟ ΤΕΛΟΣ</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
						</tr>
						<tr>
							<td colspan="2">
								<p>ΣΤΗΝ ΑΡΧΗ</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td rowspan="5">
								<p>ΥΠΑΡΧΕΙ ΤΟ ΑΡΧΕΙΟ;</p>
							</td>
							<td rowspan="3">
								<p>ΝΑΙ</p>
							</td>
							<td>
								<p>ΥΠΑΡΧΟΝ</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td>
								<p>ΝΕΟ</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td>
								<p>ΣΦΑΛΜΑ</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
						</tr>
						<tr>
							<td rowspan="2">
								<p>ΟΧΙ</p>
							</td>
							<td>
								<p>ΣΦΑΛΜΑ</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
							</td>
							<td>
							</td>
						</tr>
						<tr>
							<td>
								<p>ΝΕΟ</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
							<td>
								<p>✔</p>
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
			<p class="no-indent">Για παράδειγμα, αν χρησιμοποιηθεί στη <span class="courier-code">mode</span> η τιμή ‘<span class="courier-code">a</span>’, τότε θα μπορεί να γίνει εγγραφή αλλά όχι ανάγνωση του αρχείου, ο δείκτης θα τοποθετηθεί στο τέλος και, αν δεν υπάρχει το αρχείο, θα το δημιουργήσει.</p>
			<p>Οι χαρακτήρες αυτοί μπορούν να χρησιμοποιηθούν και συνδυαστικά ή κατά ομάδες. Η εξ ορισμού επιλεγμένη λειτουργία είναι η ‘<span class="courier-code">r</span>’ για ανάγνωση του αρχείου και ‘<span class="courier-code">t</span>’ για κείμενο ή συνδυαστικά ‘<span class="courier-code">rt&apos;</span>. Έτσι, αν πρόκειται να ανοίξει αρχείο κειμένου για ανάγνωση, το όρισμα ‘<span class="courier-code">rt&apos;</span> μπορεί και να παραλειφθεί, όπως έγινε σε όλα τα παραδείγματα μέχρι τώρα.</p>
			<img src="media/icon-6_fmt.png" alt=""/>
			
			<aside>
				<h1 class="aside-title"><span class="bold-italics">Αλλαγή γραμμής</span></h1>
				<p>Αρχεία κειμένου που έχουν δημιουργηθεί σε διαφορετικά λειτουργικά συστήματα περιέχουν διαφορετικούς ειδικούς χαρακτήρες αλλαγής γραμμής. Σε συστήματα Unix υπάρχει ο χαρακτήρας ‘<span class="courier-code">\</span><span class="courier-code">n</span>’, σε Windows οι χαρακτήρες ‘<span class="courier-code">\r\n</span>’ ενώ σε Mac ο ‘<span class="courier-code">\r</span>’. Σύμφωνα με την τεκμηρίωση της γλώσσας<sup class="superscript CharOverride-1"><span id="footnote-006-backlink"><a href="#footnote-006">88</a></span></sup>, όταν επιχειρείται άνοιγμα αρχείου σε <i>κατάσταση κειμένου (text mode)</i>, όλες οι διαφορετικές μορφές αλλαγής γραμμής αλλάζουν σε ‘<span class="courier-code">\n</span>’, ενώ όταν επιχειρείται αποθήκευση σε ένα αρχείο χρησιμοποιείται η μέθοδος ανάλογα με το υπάρχον λειτουργικό σύστημα. Αυτή η μετατροπή που γίνεται αυτόματα, στο παρασκήνιο, μπορεί να οδηγήσει σε προβλήματα αν δεν προσχεδιαστεί κατάλληλα. Για παράδειγμα, ένα αρχείο εικόνας δεν θα πρέπει να ανοίξει σε text mode, γιατί τότε πιθανή εγγραφή στοιχείων σε αυτό θα προκαλέσει την αλλοίωσή τους. Για τον έλεγχο του τρόπου αλλαγής γραμμής υπάρχει ένα ακόμη όρισμα στην <span class="courier-code">open</span>, το όρισμα <span class="courier-code">newline</span>= ‘<span class="courier-code">\</span><span class="courier-code">r</span>’, ‘<span class="courier-code">\n</span>’ ή ‘<span class="courier-code">\r\n</span>’ που ορίζει τον τρόπο διαχείρισης αλλαγής γραμμής σε αρχείο. Σε <i>δυαδική κατάσταση (binary mode)</i>, δεν υπάρχει πρόβλημα αλλαγής γραμμής, αφού το περιεχόμενο του αρχείου επιστρέφει απλά ως ακολουθία από <span class="courier-code">bytes</span>.</p>
				</aside>
			
			<p class="no-indent">Για την εγγραφή δεδομένων σε αρχείο κειμένου, θα πρέπει το αρχείο να ανοίξει με τη λειτουργία ‘<span class="courier-code">w</span>’ (ή ‘<span class="courier-code">wt</span>’, αλλά το ‘<span class="courier-code">t</span>’ μπορεί να παραλειφθεί):</p>
			<p><span class="courier-code">file=open(&apos;out.txt&apos;,&apos;w&apos;)</span></p>
			<p class="no-indent">χωρίς τη χρήση της λέξης <span class="courier-code">mode</span>.<sup class="superscript CharOverride-1"><span id="footnote-005-backlink"><a href="#footnote-005">89</a></span></sup></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.6</b> Να γράψετε πρόγραμμα που θα διαβάζει από το πληκτρολόγιο τις ημερήσιες εισπράξεις της τελευταίας εβδομάδας και θα τις αποθηκεύει στο αρχείο <span class="courier-code">wsales.txt</span>.</p>
			</blockquote>
		
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-12 | Εγγραφή αρχείου με τη <span class="courier-code">write</span></figcaption><img src="media/ListaKodika-12-12_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη Λίστα Κώδικα 12-12, το αρχείο ανοίγει στην 1η γραμμή με το όρισμα ‘<span class="courier-code">w</span>’, για να σηματοδοτήσει τη λειτουργία εγγραφής σε αρχείο. Το αρχείο ‘<span class="courier-code">wsales</span>.<span class="courier-code">txt</span>’, αν δεν υπάρχει, δημιουργείται με την εντολή <span class="courier-code">open</span>. Αν υπάρχει ήδη, τότε δημιουργείται ξανά. Χρειάζεται επομένως προσοχή, γιατί, αν υπάρχει αρχείο με το ίδιο όνομα, το παλιό αρχείο θα διαγραφεί. Το νέο αρχείο θα δημιουργηθεί στον τρέχοντα κατάλογο.</p>
			<p>Το όρισμα της <span class="courier-code">write</span> θα πρέπει να είναι κείμενο. Γι’ αυτό, οι τιμές που επιστρέφει η <span class="courier-code">input</span> δεν χρειάζεται να μετατραπούν σε αριθμούς. Αυτό θα ήταν απαραίτητο μόνο αν έπρεπε να γίνουν πράξεις με τους συγκεκριμένους αριθμούς, πριν την αποθήκευσή τους στο αρχείο.</p>
			<p>Επειδή η <span class="courier-code">write</span> δεν δημιουργεί νέα γραμμή στο αρχείο όπου γράφει τα δεδομένα της, είναι απαραίτητη η προσθήκη του χαρακτήρα ‘\<span class="courier-code">n</span>’ σε κάθε εγγραφή.</p>
			<p>Αν τρέξουμε με μερικές δοκιμαστικές τιμές το παραπάνω πρόγραμμα, θα εμφανιστούν οι παρακάτω πληροφορίες:</p>
			<p><span class="courier-code">Δώσε τις πωλήσεις της 1ης ημέρας:</span><span class="courier-code"><b>100</b></span></p>
			<p><span class="courier-code">Δώσε τις πωλήσεις της 2ης ημέρας:</span><span class="courier-code"><b>200</b></span></p>
			<p><span class="courier-code">Δώσε τις πωλήσεις της 3ης ημέρας:</span><span class="courier-code"><b>352.0564</b></span></p>
			<p><span class="courier-code">Δώσε τις πωλήσεις της 4ης ημέρας:</span><span class="courier-code"><b>-123.34</b></span></p>
			<p><span class="courier-code">Δώσε τις πωλήσεις της 5ης ημέρας:</span><span class="courier-code"><b>1000</b></span></p>
			<p class="no-indent">Η τιμή <span class="courier-code">i+1</span> στη γραμμή 4 δίνεται ώστε το μήνυμα που θα εμφανίσει η <span class="courier-code">input</span> να ξεκινάει την αρίθμηση των ημερών από το 1, και όχι από το 0.</p>
			<section role="subsection" id="ch14se5ss1">
				<h1><span role="label">12.5.1</span> Η μέθοδος <span class="courier-code">writelines</span></h1>
				<p class="no-indent">Η μέθοδος <span class="courier-code">writelines</span> λειτουργεί με τον αντίστροφο ακριβώς τρόπο από ό,τι η <span class="courier-code">readlines</span>. Δέχεται λίστα με συμβολοσειρές και τη γράφει στο αρχείο. Υπάρχει όμως μια διαφορά στον τρόπο που λειτουργεί η <span class="courier-code">writelines</span>. Δεν περιέχει στις γραμμές της τον χαρακτήρα αλλαγής γραμμής. Έτσι, αν πρέπει να γράψει κάθε στοιχείο της (κάθε συμβολοσειρά που περιέχει) σε ξεχωριστή γραμμή, τη μια μετά την άλλη, σε ένα αρχείο, θα πρέπει να προστεθούν στο τέλος της κάθε γραμμής και οι χαρακτήρες ‘\<span class="courier-code">n</span>’. Διαφορετικά, όλα τα στοιχεία θα τοποθετηθούν σε μια γραμμή μέσα στο αρχείο.</p>
				<p>Η γενική μορφή της είναι: </p>
				<p><span class="courier-code">αρχείο.writelines(δεδομένα)</span></p>
				<p class="no-indent">Τα δεδομένα είναι μια επαναληπτική δομή (συνήθως λίστα) με μια σειρά από συμβολοσειρές.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.7</b> Να γράψετε πρόγραμμα που θα δημιουργεί αντίγραφο ασφαλείας του αρχείου <span class="courier-code">data.txt</span>, με όνομα <span class="courier-code">data.back.txt</span>.</p>
				</blockquote>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-13 | Εγγραφή αρχείου με τη <span class="courier-code">writelines</span></figcaption><img src="media/ListaKodika-12-13_fmt.png" alt=""/></figure>
				<p class="no-indent">Στη Λίστα Κώδικα 12-13, οι δυο πρώτες γραμμές ανοίγουν τα δυο αρχεία, το 1ο για ανάγνωση και το 2ο για εγγραφή. Η <span class="courier-code">writelines</span> στη γραμμή 4 γράφει στο αρχείο ό,τι διάβασε η <span class="courier-code">readlines</span> στη γραμμή 3. Μετά το κλείσιμο των αρχείων, το πρόγραμμα ανοίγει ξανά το 2ο αρχείο, ώστε να τυπώσει στην οθόνη τα περιεχόμενά του. Αν το αρχείο ‘<span class="courier-code">data</span>.<span class="courier-code">txt</span>’ έχει το ίδιο περιεχόμενο με το αρχείο ‘<span class="courier-code">wsales</span>.<span class="courier-code">txt&apos;</span> του Παραδείγματος 12-6, η εντολή στη γραμμή 9 θα εμφανίσει στην οθόνη:</p>
				<p><span class="courier-code">[&apos;Ημερήσιες Πωλήσεις\n&apos;, &apos;100\n&apos;, &apos;200\n&apos;, &apos;352.0564\n&apos;, &apos;-123.34\</span><span class="courier-code">n&apos;, &apos;1000\n&apos;]</span></p>
				<p class="no-indent">τη λίστα με τα περιεχόμενα του νέου αρχείου, έτσι όπως τα διάβασε η <span class="courier-code">readlines</span>.</p>
				<p>Η λειτουργία των <span class="courier-code">readlines</span> και <span class="courier-code">writelines</span> είναι τέτοια που επιτρέπει την ανάγνωση και εγγραφή αρχείων χωρίς τη μεσολάβηση επαναληπτικών ή άλλων εντολών. Η λίστα με τις γραμμές ενός αρχείου μπορεί να αποθηκευτεί κατευθείαν σε ένα άλλο.</p>
				<blockquote>
					<p class="blockquote-no-indent"><b>Παράδειγμα 12.8</b> Στο αρχείο <span class="courier-code">invoices</span><b>.</b><span class="courier-code">txt</span> υπάρχουν τα ποσά τιμολογίων (ένα ποσό σε κάθε γραμμή). Να γραφτεί πρόγραμμα που θα διαβάζει τα ποσά αυτά από το αρχείο και θα υπολογίζει τον ΦΠΑ 24% για κάθε τιμή. Τις νέες αυτές τιμές θα τις προσθέτει σε ξεχωριστές γραμμές στο τέλος του αρχείου.</p>
				</blockquote>
				<p class="no-indent">Ακολουθεί το αντίστοιχο πρόγραμμα (Λίστα Κώδικα 12-14).</p>
				
				<figure class="lista-kodika">
					<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-14 | Πολλαπλή λειτουργία</figcaption><img src="media/ListaKodika-12-14_fmt.png" alt=""/></figure>
				<p class="no-indent">Η κατάσταση λειτουργίας (<span class="courier-code">mode</span>) για το άνοιγμα του αρχείου είναι η ‘<span class="courier-code">r+</span>’, γιατί θα πρέπει να γίνει ανάγνωση των στοιχείων και, στη συνέχεια, εγγραφή των αποτελεσμάτων στο αρχείο. Η κατάσταση ‘<span class="courier-code">r+</span>’ τοποθετεί τον δείκτη στην αρχή του αρχείου, οπότε η <span class="courier-code">readlines</span> στη γραμμή 2 θα διαβάσει όλο το περιεχόμενο, θα το αποθηκεύσει σε λίστα, θα τοποθετήσει τον δείκτη αρχείου στο τέλος – ώστε να μπορέσει μετά να γίνει εγγραφή στοιχείων στο αρχείο, ενώ παράλληλα συμμετέχει με το περιεχόμενό της στη συνάρτηση <span class="courier-code">map</span>. Η <span class="courier-code">map</span> εφαρμόζει τη συνάρτηση <span class="courier-code">float</span> σε κάθε στοιχείο του αρχείου, μετατρέποντας κάθε συμβολοσειρά σε πραγματικό αριθμό, προκειμένου να γίνουν οι απαραίτητοι υπολογισμοί για τον ΦΠΑ. </p>
				<p>H <span class="courier-code">for</span> στη γραμμή 3 θα χρησιμοποιήσει τα ποσά της λίστας <span class="courier-code">invoices</span> και στη γραμμή 4 θα υπολογίσει το 24% του κάθε ποσού, θα το μετατρέψει σε κείμενο (μέσω της συνάρτησης <span class="courier-code">str</span>), θα προσθέσει σ’ αυτό και τον χαρακτήρα αλλαγής γραμμής και θα το αποθηκεύσει (μέσω της <span class="courier-code">write</span>) σε νέα γραμμή, στο τέλος του αρχείου. Το αρχείο ανοίγει στη γραμμή 6 πάλι, απλά για να διαβάσει το νέο περιεχόμενό του και να το εμφανίσει με τη γραμμή 7 στην οθόνη.</p>
				<p>Αν τα αρχικά περιεχόμενα του αρχείου <span class="courier-code">invoices</span>.<span class="courier-code">txt</span> ήταν 100, 200, 300, 400, 500, θα εμφανιστούν τα παρακάτω μετά την εκτέλεση του προγράμματος:</p>
				<p><span class="courier-code">[&apos;100\n&apos;, &apos;200\n&apos;, &apos;300\n&apos;, &apos;400\n&apos;, &apos;500\n&apos;, &apos;24.0\n&apos;, &apos;48.0\n&apos;, &apos;72.0\n&apos;, &apos;96.0\n&apos;, &apos;120.0\n&apos;]</span></p>
				<p class="no-indent">όπου οι πέντε πρώτες τιμές της λίστας αναφέρονται στα αρχικά δεδομένα, ενώ οι επόμενες πέντε στα νέα ποσά (του ΦΠΑ) που προστέθηκαν.</p>
				<img src="media/icon-6_fmt.png" alt=""/>

				<p>Η συνάρτηση <span class="courier-code">map</span> δέχεται μια συνάρτηση και μια δομή ακολουθίας που μπορεί να χρησιμοποιηθεί επαναληπτικά, όπως η λίστα, ενώ μέσα από μια εσωτερική επαναληπτική διαδικασία εφαρμόζει τη συνάρτηση που δέχθηκε σε κάθε στοιχείο της ακολουθίας. Επιστρέφει ένα αντικείμενο τύπου <span class="courier-code">map</span>, το οποίο μπορεί να χρησιμοποιηθεί σε κάποια επαναληπτική δομή ή να μετατραπεί σε λίστα ή κάτι άλλο. Για παράδειγμα:</p>
				<p><span class="courier-code">&gt;&gt;&gt; list(map(abs, [-1,-2,3]))</span></p>
				<p><span class="courier-code">[1, 2, 3]</span></p>
				<p><span class="courier-code">&gt;&gt;&gt; for i in map(abs, [-1,-2,3]):</span></p>
				<p><span class="courier-code"> … print(i**3, end=&apos; &apos;)</span></p>
				<p><span class="courier-code">1 8 27</span></p>
				<p class="aside-end"><span>[aside-end]</span> </p>
			</section>
		</section>
		<section role="section" id="ch14se6">
			<h1><span role="label">12.6</span> Δυαδικά αρχεία</h1>
			<p class="no-indent">Η δεύτερη κατηγορία αρχείων που μπορεί να διαχειριστεί κανείς στην Python είναι τα δυαδικά αρχεία – τα οποία περιέχουν δεδομένα στη δυαδική αναπαράστασή τους. Αν τα ανοίξει κανείς με κάποιον επεξεργαστή κειμένου, το μόνο που θα δει είναι διάφορα σύμβολα τα οποία αναπαριστούν χαρακτήρα που προέκυψε από την ανά 8 Bit ομαδοποίηση των στοιχείων του. Υπάρχουν ειδικά προγράμματα που μπορούν να διαβάσουν και να εμφανίσουν τη δεκαεξαδική, συνήθως, αλλά όχι μόνο, αναπαράσταση του περιεχομένου τους<sup class="superscript CharOverride-1"><span id="footnote-004-backlink"><a href="#footnote-004">90</a></span></sup>. </p>
			<p>Η κύρια διαφορά τους από τα αρχεία κειμένου, σχετικά με την ανάγνωση και την εγγραφή, είναι ότι εδώ ο τύπος για τα δεδομένα είναι ο τύπος <span class="courier-code">bytes</span> (ή <span class="courier-code">bytearray</span>) και όχι ο τύπος <span class="courier-code">str</span>. Για το άνοιγμα δυαδικού αρχείου ισχύουν τα ίδια σύμβολα με του Πίνακα 12-2. Θα πρέπει όμως να προστεθεί ο χαρακτήρας ‘<span class="courier-code">b</span>’ στην κατάσταση λειτουργίας (<span class="courier-code">mode</span>) κατά το άνοιγμα του αρχείου.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.9</b> Να δημιουργηθεί πρόγραμμα που θα γράφει μια λίστα αριθμών σε δυαδικό αρχείο και, στη συνέχεια, θα ανοίγει το αρχείο, θα διαβάζει το περιεχόμενό του και θα το εμφανίζει στην οθόνη.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-15 | Δυαδικά αρχεία</figcaption><img src="media/ListaKodika-12-15_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος που παρουσιάζεται στη Λίστα Κώδικα 12-15, θα εμφανιστούν τα αποτελέσματα:</p>
			<p><span class="courier-code">bytearray(b&apos;\x05\x96\x14\xfa&apos;)</span></p>
			<p><span class="courier-code">[5, 150, 20, 250]</span></p>
			<p class="no-indent">Αφού δημιουργηθεί το αρχείο <span class="courier-code">data</span>.<span class="courier-code">bin</span>, ξεκινάει η διαδικασία εγγραφής δυαδικών στοιχείων. Η συνάρτηση <span class="courier-code">bytearray</span> δέχεται την ακολουθία <span class="courier-code">numbers</span>, τη μετατρέπει σε μορφή σειρών από bytes και τα γράφει στο αρχείο. Στη γραμμή 7 ανοίγει ξανά το αρχείο, αλλά σε κατάσταση ‘<span class="courier-code">rb</span>’ (ανάγνωσης δυαδικής μορφής). Η <span class="courier-code">read</span> στη γραμμή 8 διαβάζει το περιεχόμενο του αρχείου, το οποίο μετατρέπεται σε λίστα αριθμών και τυπώνεται στην οθόνη.</p>
		</section>
		<section role="section" id="ch14se7">
			<h1><span role="label">12.7</span> Συντήρηση – <span class="courier-code">Pickling</span></h1>
			<p class="no-indent">Για την αποθήκευση σύνθετων δομών με δεδομένα, όπως λίστες ή λεξικά, και την άμεση ανάκτησή τους, η Python διαθέτει ένα πολύ εύχρηστο εργαλείο, που ονομάζεται <span class="courier-code">pickle</span> (διατήρηση – συντήρηση). Έρχεται φυσικά με τη μορφή ενσωματωμένης βιβλιοθήκης και είναι διαθέσιμο με την εντολή:</p>
			<p><span class="courier-code">import pickle</span></p>
			<p class="no-indent">Παρέχει δυο βασικές εντολές, την <span class="courier-code">dump</span> και τη <span class="courier-code">load</span>. Η <span class="courier-code">dump</span> χρησιμοποιείται για την αποθήκευση των δεδομένων σε αρχεία, συνήθως δυαδικά, ενώ η <span class="courier-code">load</span> για τη φόρτωση ή την ανάγνωση των δομών που έχουν ήδη αποθηκευτεί σε κάποιο αρχείο.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.10</b> Δίνονται δυο δομές, μια λίστα και ένα λεξικό. Να αποθηκευτούν σε ένα αρχείο. Στη συνέχεια να γίνει η ανάκτηση και η εκτύπωσή τους στην οθόνη.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-16 | Διαχείριση <span class="courier-code">pickle</span></figcaption><img src="media/ListaKodika-12-16_fmt.png" alt=""/></figure>
			<p class="no-indent">Στη γραμμή 1 γίνεται η εισαγωγή της βιβλιοθήκης <span class="courier-code">pickle</span>, στον κώδικα του προγράμματος (Λίστα Κώδικα 12-16). Οι γραμμές 2 και 3 δημιουργούν τις δυο δομές που θα αποθηκευτούν στο αρχείο <span class="courier-code">pickle</span>.<span class="courier-code">bin</span>, το οποίο δημιουργείται στη γραμμή 4. Με τις γραμμές 5 και 6, οι εντολές <span class="courier-code">dump</span> γράφουν τα δεδομένα στο αρχείο διατηρώντας την αρχική μορφή τους και κάπου εκεί τελειώνει η διαδικασία!</p>
			<p>Για την ανάκτηση των δεδομένων στην αρχική τους μορφή, χρειάζεται να ανοίξει το αρχείο (γραμμή 8) σε κατάσταση ‘<span class="courier-code">rb</span>’ (ανάγνωσης δυαδικής μορφής αρχείου) και να γίνουν τόσα <span class="courier-code">load</span> όσες ήταν και οι δομές που αποθηκεύτηκαν αρχικά.</p>
			<p>Όπως φαίνεται και από τα αποτελέσματα που τυπώνονται στην οθόνη: </p>
			<p><span class="courier-code">[(&apos;π&apos;, 3.14), [&apos;</span><span class="courier-code">e&apos;, 2.72]] </span></p>
			<p><span class="courier-code"> {&apos;π&apos;: 3.14, &apos;e&apos;: 2.72}</span></p>
			<p class="no-indent">οι αρχικές δομές (η λίστα και το λεξικό) αποθηκεύτηκαν στο αρχείο και ανακτήθηκαν ξανά στην αρχική τους μορφή, χωρίς να χρειαστεί κάποια επιπλέον εργασία σ’ αυτά.</p>
			<p>Η μέθοδος <span class="courier-code">dump</span> δέχεται δυο ορίσματα και δεν επιστρέφει τίποτα. Το ένα όρισμα είναι η μεταβλητή που περιέχει τα δεδομένα (π.χ. <span class="courier-code">list1</span>) και μπορεί να είναι οποιοδήποτε αντικείμενο. Το άλλο όρισμά της είναι το αντικείμενο τύπου αρχείου.</p>
			<p>Η μέθοδος <span class="courier-code">load</span> δέχεται ένα μόνο όρισμα, το αντικείμενο τύπου αρχείου, και επιστρέφει σε μια μεταβλητή τη δομή που διάβασε από το αρχείο.</p>
		</section>
		<section role="section" id="ch14se8">
			<h1><span role="label">12.8</span> Αρχεία csv</h1>
			<p class="no-indent">Στην κατηγορία των αρχείων κειμένου ανήκουν και τα αρχεία csv. Το όνομά τους, που δηλώνει και τον τρόπο οργάνωσης των δεδομένων που περιέχουν, προέρχεται από τις λέξεις <i>Comma Separated Values (τιμές χωρισμένες με </i><i>κόμμα)</i>. Τέτοια αρχεία συνήθως αναφέρονται και ως <i>οριοθετημένα αρχεία (delimited)</i>, γιατί εκτός από το κόμμα μπορεί να διαθέτουν κάποιον άλλο χαρακτήρα διαχωρισμού και διάκρισης των δεδομένων τους.</p>
			<p>Τα αρχεία αυτά έχουν οργανωμένα τα δεδομένα σε στήλες και γραμμές. Κάθε στήλη ξεχωρίζει από τη διπλανή της με έναν χαρακτήρα (π.χ. το κόμμα) που χρησιμεύει ως διαχωριστικό. Σε πραγματικά δεδομένα, κάθε στήλη αφορά ένα συγκεκριμένο χαρακτηριστικό του αρχείου (π.χ. το τηλέφωνο κάθε πελάτη από το αρχείο πελατών ή την τιμή ενός προϊόντος στο αρχείο με τα προϊόντα μιας επιχείρησης).</p>
			<p>Συνήθως η πρώτη γραμμή περιέχει τους τίτλους των στηλών, που συχνά αναφέρονται ως <i>πεδία (fields)</i>. Κάθε γραμμή του αρχείου περιέχει δεδομένα που συνήθως αφορούν μια συγκεκριμένη ομάδα πληροφοριών (π.χ. έναν πελάτη, ένα τιμολόγιο κ.λπ.). Κάθε γραμμή καλείται <i>εγγραφή (record)</i>. Τα αρχεία αυτά είναι ο πιο συνηθισμένος τρόπος διαμοιρασμού δεδομένων σε προγράμματα λογιστικής διαχείρισης και, βέβαια, όχι μόνο.</p>
			<p>Η ενσωματωμένη βιβλιοθήκη <span class="courier-code">csv</span> κάνει εύκολη τη διαδικασία επεξεργασίας τέτοιων αρχείων και, όπως όλες οι εργασίες με πακέτα κώδικα στην Python, η χρήση της ξεκινάει με την εισαγωγή της μέσω της εντολής <span class="courier-code">import</span>:</p>
			<p><span class="courier-code">import csv</span></p>
			<p class="no-indent">Η εργασία με ένα αρχείο <span class="courier-code">csv</span> μπορεί να γίνει είτε με έναν διαχειριστή περιεχομένου (περιγράφεται στη συνέχεια) είτε με μεμονωμένες εντολές <span class="courier-code">open</span>. Σε κάθε περίπτωση θα πρέπει να δημιουργηθεί ένα αντικείμενο τύπου αρχείου το οποίο θα αρχικοποιήσει δυο οντότητες του πακέτου που ονομάζονται <i>αναγνώστης (reader)</i> και <i>συντάκτης (writer)</i> για την ανάγνωση και την εγγραφή στο αρχείο αντίστοιχα.</p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.11</b> Δίνεται ένα αρχείο με τα τιμολόγια πωλήσεων. Η μορφή κάθε γραμμής είναι:</p>
			</blockquote>
			<p><span class="courier-code">α/α</span><span class="courier-code">, προϊόν, τιμή, τεμάχια</span></p>
			<p class="no-indent">Αυτοί είναι και οι τίτλοι των στηλών του. Το περιεχόμενο του αρχείου είναι:</p>
			<img src="media/example-12-11_fmt.png" alt=""/>
			<p class="no-indent">Όπως φαίνεται και από το αρχείο, το διαχωριστικό ανάμεσα στα στοιχεία του είναι ο χαρακτήρας ‘,’.</p>
			<p>Ζητείται πρόγραμμα που θα διαβάζει αυτό το αρχείο και θα εμφανίζει κάθε γραμμή του στην οθόνη.</p>
			<p>Το παράδειγμα θα λυθεί με δυο τρόπους.</p>
			<ul><li><b>Με τα δεδομένα σε μορφή λίστας</b></li></ul>
			<p class="no-indent">Το πρόγραμμα για αυτή την εργασία φαίνεται στη Λίστα Κώδικα 12-17.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-17 | Ανάγνωση αρχείου csv σε λίστα</figcaption><img src="media/ListaKodika-12-17_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εισαγωγή της βιβλιοθήκης (γραμμή 1) ανοίγει το αρχείο σε κατάσταση ανάγνωσης κειμένου (γραμμή 2) και δημιουργείται ένα αντικείμενο αρχείου (<span class="courier-code">f</span>). Το αντικείμενο <span class="courier-code">f </span>θα οδηγήσει τον αναγνώστη (μέθοδος <span class="courier-code">reader</span>) στη γραμμή 3 ώστε να διαχειριστεί τα περιεχόμενα του αρχείου, δημιουργώντας ένα αντικείμενο τύπου <span class="courier-code">reader</span> (<span class="courier-code">rdr</span>). Η μέθοδος <span class="courier-code">reader</span> δέχεται όρισμα, εκτός από το <span class="courier-code">f</span>, και έναν χαρακτήρα οριοθέτησης (π.χ. <span class="courier-code">delimiter=&apos;,&apos;</span>). Με τη <span class="courier-code">for</span> γίνεται η σάρωση του αρχείου, γραμμή προς γραμμή, με τα στοιχεία σε μορφή λίστας. Στη λίστα αποθηκεύεται κάθε τιμή μιας γραμμής του αρχείου ως ξεχωριστό στοιχείο. Αυτές οι τιμές τυπώνονται στη συνέχεια στην οθόνη:</p>
			<p><span class="courier-code">[&apos;α/α&apos;</span><span class="courier-code">, &apos;Προϊόν&apos;, &apos;Τιμή&apos;, &apos;Ποσότητα&apos;]</span></p>
			<p><span class="courier-code">[&apos; 1 &apos;, &apos;α&apos;, &apos;5&apos;, &apos;10&apos;]</span></p>
			<p><span class="courier-code">[&apos; 2 &apos;, &apos;δ&apos;, &apos;5&apos;, &apos;20&apos;]</span></p>
			<p><span class="courier-code">[&apos; 3 &apos;, &apos;β&apos;, &apos;3&apos;, &apos;10&apos;]</span></p>
			<p><span class="courier-code">[&apos; 4 &apos;, &apos;γ&apos;, &apos;8&apos;, &apos;30&apos;]</span></p>
			<p><span class="courier-code">[&apos; 5 &apos;, &apos;</span><span class="courier-code">ε&apos;, &apos;5&apos;, &apos;5&apos;]</span></p>
			<p class="no-indent">Κάθε γραμμή παίρνει τη μορφή λίστας.</p>
			<ul><li><b>Με τα δεδομένα σε μορφή λεξικού</b></li></ul>
			<p class="no-indent">Το πρόγραμμα για το άνοιγμα και την αποθήκευση των δεδομένων του αρχείου σε ένα λεξικό φαίνεται στη Λίστα Κώδικα 12-18.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-18 | Ανάγνωση αρχείου csv σε λεξικό</figcaption><img src="media/ListaKodika-12-18_fmt.png" alt=""/></figure>
			<p class="no-indent">Η διαδικασία είναι παρόμοια με πριν, με μόνη διαφορά ότι χρησιμοποιείται η μέθοδος <span class="courier-code">DictReader</span> για την ανάγνωση κάθε γραμμής. Αυτό έχει ως αποτέλεσμα, στη γραμμή 5, να τυπώνεται ένα λεξικό αντί για λίστα. Το αξιοσημείωτο της διαδικασίας είναι ότι τα κλειδιά του λεξικού είναι οι επικεφαλίδες των στηλών. Αυτό αποδεικνύεται χρήσιμο για την περαιτέρω επεξεργασία του περιεχομένου του αρχείου. Στη γραμμή 5 υπάρχει η συνάρτηση <span class="courier-code">dict</span> που μετατρέπει το περιεχόμενο κάθε σειράς σε λεξικό. Η αρχική μορφή κάθε γραμμής, έτσι όπως επιστρέφεται μέσω του <span class="courier-code">rdr</span>, είναι τύπου <span class="courier-code">OrderedDict</span>, η οποία είναι μια λίστα με πλειάδες που περιέχουν τα ζεύγη κλειδιού και τιμής. Στην περίπτωση αυτή η πρόσβαση στα επιμέρους στοιχεία γίνεται μέσω του κλειδιού.</p>
			<p>Μέσα στη <span class="courier-code">for</span> θα μπορούσε να χρησιμοποιηθεί και η παρακάτω εντολή, για την πρόσβαση σε επιμέρους πληροφορίες:</p>
			<p><span class="courier-code">print(record[&quot;Προϊόν&quot;],&apos;-&apos;,record[&quot;Τιμή&quot;])</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.12</b> Για το προηγούμενο παράδειγμα θα πρέπει να γραφτεί πρόγραμμα που, αφού διαβάσει και φορτώσει τα περιεχόμενα του αρχείου σε λίστα, θα προσθέσει μια καινούργια στήλη με την ‘<span class="courier-code">Αξία</span>’. Η αξία θα υπολογιστεί ως τιμή × ποσότητα.</p>
			</blockquote>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-19 | Εγγραφή σε αρχείο csv</figcaption><img src="media/ListaKodika-12-19_fmt.png" alt=""/></figure>
			<p class="no-indent">Μετά την εκτέλεση του προγράμματος (Λίστα Κώδικα 12-19) δημιουργείται νέο αρχείο με όνομα <span class="courier-code">csv2.txt</span> το οποίο περιέχει μια νέα στήλη με τις αξίες των πωλήσεων.</p>
			<p>Το όρισμα <span class="courier-code">newline=&apos;&apos;</span> στη συνάρτηση <span class="courier-code">open</span> χρησιμεύει ώστε να μην τοποθετείται επιπλέον χαρακτήρας ‘<span class="courier-code">\n</span>’ στο τέλος κάθε γραμμής.</p>
		</section>
		<section role="section" id="ch14se9">
			<h1><span role="label">12.9</span> Διαχείριση περιεχομένου</h1>
			<p class="no-indent">Ένας ακόμα εύκολος τρόπος χειρισμού αρχείων είναι μέσω ενός <i>διαχειριστή περιεχομένου (context manager)</i>. Οι διαχειριστές είναι ειδικά διαμορφωμένα αντικείμενα για να χειρίζονται άλλα αντικείμενα. Υλοποιούν δυο κατάλληλες ειδικές μεθόδους, την <span class="courier-code">__enter__</span> και την <span class="courier-code">__exit__</span>, που ορίζουν ακριβώς τι θα γίνεται κατά την έναρξη και τον τερματισμό της εργασίας του διαχειριστή. Υπάρχει έτοιμος διαχειριστής αντικειμένων τύπου αρχείου, οπότε μπορεί αυτός να αναλάβει την εργασία για το άνοιγμα και το κλείσιμο ενός αρχείου. Οι διαχειριστές αρχείων έχουν το πλεονέκτημα ότι περιλαμβάνουν διαδικασίες ελέγχου σφαλμάτων, γι’ αυτό και συνήθως προτιμώνται στις εργασίες με αρχεία.</p>
			<p>Ο τρόπος εργασίας με έναν διαχειριστή είναι ο ακόλουθος:</p>
			<p><span class="courier-code">with open(&apos;αρχείο&apos;) as μεταβλητή:</span></p>
			<p><span class="courier-code">&#9;#και ακολουθούν όλες οι εργασίες με το αρχείο</span></p>
			<blockquote>
				<p class="blockquote-no-indent"><b>Παράδειγμα 12.13</b> Δίνεται αρχείο κειμένου με όνομα <span class="courier-code">calls</span>.<span class="courier-code">txt</span> το οποίο περιέχει τις κλήσεις που έχουν γίνει από ένα τηλεφωνικό κέντρο. Το αρχείο περιέχει τα στοιχεία:</p>
			</blockquote>
			<p class="no-indent">Είδος κλήσης (<span class="courier-code">in</span> ή <span class="courier-code">out</span>), αριθμός, διάρκεια και ώρα. Δίνεται ένα παράδειγμα του περιεχομένου του:</p>
			<img src="media/example-12-13_fmt.png" alt=""/>
			<p class="no-indent">Να γράψετε πρόγραμμα που θα διαβάζει και θα εμφανίζει τις εξερχόμενες κλήσεις.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα 12-20 | Διαχειριστής περιεχομένου</figcaption><img src="media/ListaKodika-12-20_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα (Λίστα Κώδικα 12-20) ανοίγει για ανάγνωση το αρχείο <span class="courier-code">calls</span>.<span class="courier-code">txt</span> με τη βοήθεια και τον έλεγχο του διαχειριστή στη γραμμή 1. Η συνέχεια της εργασίας γίνεται με ό,τι αναφέρθηκε στις προηγούμενες παραγράφους σχετικά με την επεξεργασία του περιεχομένου αρχείων. Η εντολή <span class="courier-code">for</span> αναλαμβάνει να σαρώσει τις γραμμές του αρχείου, τη μια μετά την άλλη. Κάθε γραμμή που περιέχει το λεκτικό ‘<span class="courier-code">out</span>’ που αφορά εξερχόμενες κλήσεις τυπώνεται στην οθόνη. Η διαδικασία τερματίζεται με την έξοδο από την εντολή <span class="courier-code">for</span>, ενώ δεν είναι απαραίτητο το κλείσιμο του αρχείου, αφού αυτή την εργασία την αναλαμβάνει ο διαχειριστής. Το αποτέλεσμα που θα επιστρέψει το πρόγραμμα για τα δοκιμαστικά δεδομένα είναι:</p>
			<p><span class="courier-code">out 2310235254 3:27 11:47</span></p>
			<p><span class="courier-code">out 2101234567 5:48 13:23</span></p>
			<p><span class="courier-code">out 2310987654 23:18 15:27</span></p>
		</section>
		<section role="section" id="ch14se10">
			<h1><span role="label">12.10</span> Αρχεία &amp; κατάλογοι</h1>
			<p class="no-indent">Βασική προϋπόθεση για να μπορέσει να γίνει η επεξεργασία ενός αρχείου είναι να μπορέσει να ανοίξει μέσω της <span class="courier-code">open</span>. Αν το αρχείο βρίσκεται στον ίδιο κατάλογο με τον τρέχοντα, όπως και στα προηγούμενα παραδείγματα, δεν θα υπάρχει πρόβλημα. Αν όμως το αρχείο βρίσκεται σε κάποιον άλλο φάκελο ή σε κάποιον άλλο δίσκο, τότε θα πρέπει να οριστεί ολόκληρη η διαδρομή του (που συχνά αναφέρεται ως μονοπάτι ή path). Έστω ότι το αρχείο <span class="courier-code">data</span>.<span class="courier-code">txt</span> βρίσκεται στον κατάλογο <span class="courier-code">c</span><span class="courier-code">:\datafiles\</span>. Για να μπορέσει να «βρει» το αρχείο αυτό η <span class="courier-code">open</span>, θα πρέπει να δοθεί μαζί με το όνομα του αρχείου και η διαδρομή του σ’ αυτό:</p>
			<p><span class="courier-code">f=open(&apos;c:\\datafiles\\data.txt&apos;,&apos;r&apos;)</span></p>
			<p class="no-indent">Η μορφή αυτή δόθηκε γιατί ο χαρακτήρας ‘<span class="courier-code">\</span>’ είναι <i>χαρακτήρας διαφυγής (escape character)</i> και θα πρέπει να δοθεί δυο φορές προκειμένου να το δεχθεί η συμβολοσειρά. Δίνοντας την παρακάτω εντολή στην κονσόλα φαίνεται τι ακριβώς συμβαίνει όταν δέχεται μια συνάρτηση (όπως η <span class="courier-code">open</span> ή η <span class="courier-code">print</span>) μια τέτοια συμβολοσειρά:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(&apos;c:\\datafiles\\data.txt&apos;)</span></p>
			<p><span class="courier-code">c:\datafiles\data</span><span class="courier-code">.txt</span></p>
			<p class="no-indent">Για να μη χρειάζεται να μπαίνει ο διπλός χαρακτήρας ‘<span class="courier-code">\</span>’, συνήθως, όταν χρειάζεται να οριστούν διαδρομές καταλόγων, γίνεται χρήση της συμβολοσειράς τύπου ‘<span class="courier-code">r</span>’:</p>
			<p><span class="courier-code">&gt;&gt;&gt; print(r&apos;c:\datafiles\data.txt&apos;)</span></p>
			<p><span class="courier-code">c:\</span><span class="courier-code">datafiles\data.txt</span></p>
			<p class="no-indent">αφού με το πρόθεμα ‘<span class="courier-code">r</span>’ η συμβολοσειρά θα αγνοήσει οποιαδήποτε ειδικά σύμβολα διαφυγής. Έτσι, η <span class="courier-code">open</span> θα μπορεί να δοθεί πιο απλά ως:</p>
			<p><span class="courier-code">f=open</span><span class="courier-code">(r&apos;c:\datafiles\data.txt&apos;,&apos;r&apos;)</span></p>
			<p class="no-indent">Το μονοπάτι προς το αρχείο μπορεί να είναι και σχετικό με αυτό στο οποίο γίνεται η εργασία μας με τη χρήση του ειδικού συμβολισμού με τις δυο τελείες ‘<span class="courier-code">..</span>’. Αν, για παράδειγμα, το πρόγραμμα βρίσκεται στον φάκελο: </p>
			<p><span class="courier-code">c:\Python\files\code </span></p>
			<p class="no-indent">ενώ το αρχείο που πρέπει να ανοίξει βρίσκεται στον φάκελο: </p>
			<p><span class="courier-code">c:\Python\files\data</span></p>
			<p class="no-indent">η επόμενη εντολή θα ανοίξει το αρχείο ψάχνοντας με βάση τη θέση του προγράμματος:</p>
			<p><span class="courier-code">f=open(r&apos;..\data\data.txt&apos;,&apos;r&apos;)</span></p>
			<p class="no-indent">Η διπλή τελεία καθοδηγεί τον διερμηνευτή έναν κατάλογο πιο επάνω στη δομή καταλόγων σε σχέση με τον τρέχοντα κατάλογο. Στην προκειμένη περίπτωση από τον φάκελο <span class="courier-code">code</span> επιστρέφει στον φάκελο <span class="courier-code">files</span> και συνεχίζει στον φάκελο <span class="courier-code">data</span>.</p>
			<p>Στο περιβάλλον του διερμηνευτή, στο σήμα προτροπής ‘<span class="courier-code">&gt;&gt;&gt;</span>’, αλλά και μέσα σε ένα πρόγραμμα, υπάρχει η δυνατότητα πρόσβασης στο σύστημα αρχείων του υπολογιστή. Αυτό γίνεται με τη χρήση της βιβλιοθήκης <span class="courier-code">os</span>. Δίνονται μερικά παραδείγματα (Λίστα Κώδικα 12-21) με τα εργαλεία που διαθέτει η βιβλιοθήκη.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-2_fmt.png" alt=""/>Λίστα Κώδικα 12-21 | Η βιβλιοθήκη <span class="courier-code">os</span></figcaption><img src="media/ListaKodika-12-21_fmt.png" alt=""/></figure>
			<p class="no-indent">Οι εντολές 10 και 11, αφού αποθηκεύσουν τα περιεχόμενα του ενεργού καταλόγου σε μια μεταβλητή τύπου λίστας, δημιουργούν μια νέα λίστα (<span class="courier-code">d</span>) μέσω σύνθεσης, η οποία περιλαμβάνει συμβολοσειρές με τα ονόματα μόνο των αρχείων κειμένου.</p>
		</section>
		<section role="section" id="ch14se11">
			<h1><span role="label">12.11</span> IPython κονσόλα</h1>
			<p class="no-indent">Για την κονσόλα IPython υπάρχουν οι λεγόμενες <i>μαγικές εντολές (magic commands)</i> που επιτρέπουν την επικοινωνία της κονσόλας με το κέλυφος του λειτουργικού συστήματος (command line σε Windows και shell σε Unix). Ξεκινά να εκτελείται μια εντολή του λειτουργικού βάζοντας πριν την εντολή το σύμβολο ‘<span class="courier-code">!</span>’ ή το σύμβολο ‘<span class="courier-code">%</span>’<sup class="superscript CharOverride-1"><span id="footnote-003-backlink"><a href="#footnote-003">91</a></span></sup> (Λίστα Κώδικα 12-22).</p>
			<img src="media/icon-3_fmt.png" alt=""/>
			<figure class="lista-kodika">
				<figcaption>Λίστα Κώδικα 12-22 | Εντολές της κονσόλας IPython</figcaption><img src="media/ListaKodika-12-22_fmt.png" alt=""/></figure>
			<p class="no-indent">Μπορεί μάλιστα να γίνει ανακατεύθυνση των αποτελεσμάτων σε δομές όπως η λίστα (γραμμή 1). Έτσι, η μεταβλητή <span class="courier-code">a</span> θα περιέχει μια λίστα με συμβολοσειρές που περιέχουν τα αποτελέσματα της εντολής <span class="courier-code">dir</span>. Στη γραμμή 2 εκτελείται η εντολή <span class="courier-code">ping</span>, τα αποτελέσματα της οποίας εμφανίζονται αμέσως στην οθόνη. Οι εντολές στις γραμμές 5 και 7 εμφανίζουν τον τρέχοντα κατάλογο, ενώ εντολές όπως των γραμμών 9 και 11 επιτρέπουν την πλοήγηση σε διαφορετικό σημείο στο σύστημα αρχείων του υπολογιστή. Η εντολή <span class="courier-code">type</span> (γραμμή 13) της κονσόλας των Windows εμφανίζει τα περιεχόμενα του αρχείου <span class="courier-code">calls</span>.<span class="courier-code">txt</span> στην κονσόλα του διερμηνευτή.</p>
			<p>Για τη χρήση μεταβλητών που υπάρχουν στον χώρο ονομάτων της κονσόλας και την ενσωμάτωσή τους σε εντολές του λειτουργικού μπορεί να γίνει χρήση του χαρακτήρα ‘<span class="courier-code">$</span>’ μπροστά από τη μεταβλητή (γραμμές 15 και 16).</p>
		</section>
		<section role="section" id="ch14se12" data-featured="chapter-review">
			<h1><span role="label">12.12</span> Περίληψη</h1>
			<p class="no-indent">Στο τελευταίο κομμάτι του βιβλίου παρουσιάστηκαν οι βασικές λειτουργίες διαχείρισης αρχείων στην Python. Έγινε περιγραφή των μεθόδων ανάγνωσης του περιεχομένου αρχείων ανά χαρακτήρα, γραμμή ή ολόκληρου του αρχείου, αλλά και εγγραφής στοιχείων σε αυτό. Έγινε διάκριση και περιγραφή των διαφορετικών μορφών αρχείου που μπορεί να διαχειριστεί η γλώσσα, δηλαδή τα αρχεία κειμένου και τα δυαδικά αρχεία.</p>
			<p>Παρουσιάστηκαν επίσης οι μέθοδοι διαχείρισης αρχείων με δυο γνωστές βιβλιοθήκες, την <span class="courier-code">pickle</span> και τη <span class="courier-code">csv</span>. Τέλος έγινε αναφορά σε στοιχεία που αφορούν τη διαχείριση φακέλων και αρχείων μέσα από την κονσόλα ή κατά την εκτέλεση ενός προγράμματος.</p>
			
		</section>
		<section role="section" id="ch14se13" data-featured="chapter-questions">
			<h1><span role="label">12.13</span> Ερωτήσεις κατανόησης</h1>
			<img src="media/icon-4_fmt.png" alt=""/>
			<ol><li>Για ποιους λόγους είναι απαραίτητα τα αρχεία;</li>
			<li>Ποιες βασικές κατηγορίες αρχείων υποστηρίζει η Python χωρίς τη χρήση επιπλέον βιβλιοθηκών;</li>
			<li>Για ποιους λόγους πρέπει να κλείνει ένα αρχείο μετά το άνοιγμά του και τον τερματισμό των εργασιών με αυτό;</li>
			<li>Σε ποιες περιπτώσεις επιλέγεται η χρήση αρχείων κειμένου και σε ποιες η χρήση δυαδικών αρχείων;</li>
			<li>Ποια είναι η λειτουργία της βιβλιοθήκης <span class="courier-code">pickle</span>; Σε τι χρησιμεύει αυτή;</li>
			<li>Τι είναι τα αρχεία <span class="courier-code">csv</span>; Ποια είναι τα χαρακτηριστικά τους; Πότε και πώς χρησιμοποιούνται;</li>
			<li>Σε τι μορφές μπορεί να γίνει η ανάγνωση του περιεχομένου ενός αρχείου <span class="courier-code">csv</span>;</li>
			<li>Υπάρχει τρόπος πρόσβασης σε αρχεία και φακέλους του υπολογιστή μέσα από ένα πρόγραμμα γραμμένο σε Python;</li></ol>
			
		</section>
		<section role="section" id="ch14se14" data-featured="chapter-assess">
			<h1><span role="label">12.14</span> Ασκήσεις</h1>
			<img src="media/icon-5_fmt.png" alt=""/>
			<ol><li>Να γράψετε πρόγραμμα που θα ανοίγει ένα αρχείο κειμένου και θα μετράει το πλήθος των λέξεων. Εξαιρούνται οι χαρακτήρες ‘,’ και ‘.’.</li>
			<li>Να γράψετε πρόγραμμα που θα ανοίγει ένα αρχείο κειμένου και θα μετράει το πλήθος των χαρακτήρων που περιέχει.</li>
			<li>Να γράψετε πρόγραμμα που θα ανοίγει ένα αρχείο κειμένου και θα εμφανίζει μόνο το κείμενο που είναι μέσα σε διπλά εισαγωγικά.</li>
			<li>Να γράψετε πρόγραμμα που θα διαβάζει ένα κείμενο, θα το κρυπτογραφεί με την κρυπτογράφηση του Καίσαρα (βλ. Κεφάλαιο 6) και θα το αποθηκεύει σε νέο δυαδικό αρχείο. Να γράψετε και την αντίστροφη εργασία ανάγνωσης του κρυπτογραφημένου κειμένου και την αποθήκευσή του σε νέο αρχείο.</li>
			<li>Δίνεται ένα αρχείο ιστοσελίδας html. Να γράψετε πρόγραμμα που θα εμφανίζει πόσους υπερσυνδέσμους (links) περιέχει και ποιες είναι οι διευθύνσεις στις οποίες παραπέμπουν. Ένα link έχει τη μορφή <span class="courier-code">&lt;a </span><span class="courier-code">href=&quot;url&quot;&gt;κείμενο&lt;/a&gt;</span></li>
			<li>Ένα αρχείο περιέχει τις παραγγελίες προϊόντων μιας επιχείρησης. Έχει τη μορφή: όνομα προϊόντος, τεμάχια.
			<p>Ένα προϊόν μπορεί να εμφανίζεται πολλές φορές. Να γράψετε πρόγραμμα που θα διαβάζει τις παραγγελίες, θα αθροίζει τον αριθμό τεμαχίων για κάθε προϊόν και θα αποθηκεύει σε νέο αρχείο τις πιο κάτω πληροφορίες.</p>
			<p>Όνομα προϊόντος, αριθμός παραγγελιών, συνολικά τεμάχια</p>
			</li>
			<li>Ένα αρχείο περιέχει τα ονόματα χρηστών ενός υπολογιστή. Να γράψετε πρόγραμμα που θα ζητάει το όνομα ενός χρήστη και θα εμφανίζει αν αυτό αντιστοιχεί σε όνομα χρήστη που υπάρχει ήδη. Αν δεν υπάρχει, θα το προσθέτει στο τέλος του.</li>
			<li>Τα e-mail του προσωπικού μιας εταιρείας βρίσκονται σε ένα αρχείο και έχουν διάφορες μορφές. Σε ένα άλλο αρχείο βρίσκεται το όνομα χρήστη που έχει το προσωπικό για το δίκτυο της εταιρείας, με την ίδια σειρά με το πρώτο αρχείο. Σε ένα τρίτο αρχείο βρίσκεται το τμήμα στο οποίο ανήκει κάθε υπάλληλος, στα αγγλικά. Τα τμήματα είναι sales, it, prd και fin. Να δημιουργηθούν νέα e-mail με τη μορφή:
			<p><span class="courier-code">ονομα_χρηστη@τμημα.ονομαεταιρειας</span><span class="courier-code">.com</span></p>
			<p class="no-indent">και να αποθηκευτούν σε νέο αρχείο που θα περιέχει σε κάθε γραμμή το ήδη υπάρχον e-mail και δίπλα του το καινούργιο.</p>
			</li>
			<li>Να γράψετε πρόγραμμα που θα ζητάει ένα μονοπάτι καταλόγου και θα εμφανίζει τα αρχεία που υπάρχουν σ’ αυτό.</li>
			<li>Ένα αρχείο περιέχει γραμμές με αριθμούς χωρισμένους με κόμμα μεταξύ τους. Να γράψετε πρόγραμμα που θα διαβάζει αυτούς τους αριθμούς και θα τους τοποθετεί σε μια λίστα με τέτοιο τρόπο, ώστε κάθε γραμμή του αρχείου να είναι και μια υπολίστα.</li>
			<li>Ένα αρχείο περιέχει γραμμές με αριθμούς οι οποίοι βρίσκονται στις θέσεις 1, 11, 21, 31 κ.λπ. Να γράψετε πρόγραμμα που θα διαβάζει τους αριθμούς και θα τους αποθηκεύει σε λίστα με μια υπολίστα για κάθε γραμμή του αρχείου.</li>
		</ol>
		</section>
	</section>
	<section role="chapter" id="ch15">
		<h1>ΠΑΡΑΡΤΗΜΑ Α Μαθηματικοί Τύποι</h1>
		<figure role="table" id="tb32">
			<figcaption><span role="label">Πίνακας A-1</span> | Γενικοί συμβολισμοί</figcaption>
			<table id="table048">
				<tbody>
					<tr>
						<th>Συμβολισμός</th>
						<th class="indd_tables-header ParaOverride-1">Ερμηνεία</th>
					</tr>
					<tr>
						<td>
							<p><span class="math-font">∀</span></p>
						</td>
						<td>
							<p>Για κάθε ή για όλα</p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>a</i> <span class="math-font">∈</span> <i>A</i></p>
						</td>
						<td>
							<p>To <i>a</i> είναι ένα στοιχείο του συνόλου <i>A</i></p>
							<p>ή το <i>a</i> ανήκει στο σύνολο <i>A</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>a</i> <span class="math-font">∉</span> <i>A</i></p>
						</td>
						<td>
							<p>Το <i>a </i>δεν ανήκει στο σύνολο <i>A</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>A</i> <span class="math-font">⊆</span> <i>B</i></p>
						</td>
						<td>
							<p>Το σύνολο <i>A </i>είναι υποσύνολο του συνόλου <i>B</i></p>
							<p>ή <span class="math-font">∀</span><i>x</i>,<span class="math-font"> </span><i>x</i> <span class="math-font">∈</span> <i>A </i><span class="math-font">⇒</span><i> x</i> <span class="math-font">∈</span> <i>B</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>A</i> <span class="math-font">∪</span> <i>B</i></p>
						</td>
						<td>
							<p>Ένωση των συνόλων <i>A </i>και <i>B </i>ή <span class="math-font">{</span><i>x</i><span class="math-font">: </span><i>x</i> <span class="math-font">∈</span> <i>A </i>ή<i> x</i> <span class="math-font">∈</span> <i>B</i><span class="math-font">}</span></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>A</i> <span class="math-font">∩</span> <i>B</i></p>
						</td>
						<td>
							<p>Τομή των συνόλων <i>A </i>και <i>B </i>ή <span class="math-font">{</span><i>x</i><span class="math-font">: </span><i>x</i> <span class="math-font">∈</span> <i>A </i>και<i> x</i> <span class="math-font">∈</span> <i>B</i><span class="math-font">}</span></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>A</i> <span class="math-font">∖</span> <i>B</i></p>
						</td>
						<td>
							<p>Διαφορά των συνόλων <i>A </i>και <i>B </i>ή <span class="math-font">{</span><i>x</i><span class="math-font">: </span><i>x</i> <span class="math-font">∈</span> <i>A </i>και<i> x</i> <span class="math-font">∉</span> <i>B</i><span class="math-font">}</span></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><span class="math-font">{</span><i>a</i><sub class="subscript CharOverride-1">1</sub>, <i>a</i><sub class="subscript CharOverride-1">2</sub>, <i>…</i><sub class="subscript CharOverride-1"> </sub>, <i>an</i><span class="math-font">}</span></p>
						</td>
						<td>
							<p>Το σύνολο με τα στοιχεία <i>a</i><sub class="subscript CharOverride-1">1</sub>, <i>a</i><sub class="subscript CharOverride-1">2</sub>, <i>…</i><sub class="subscript CharOverride-1"> </sub>, <i>an</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><span class="math-font">∅</span></p>
						</td>
						<td>
							<p>Το κενό σύνολο</p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>P</i><span class="math-font">(</span><i>A</i><span class="math-font">)</span></p>
						</td>
						<td>
							<p>Η πιθανότητα ενός συνόλου <i>A</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><i>P</i><span class="math-font">(</span><i>A</i><span class="math-font">∖</span><i>B</i><span class="math-font">)</span></p>
						</td>
						<td>
							<p>Η δεσμευμένη πιθανότητα του <i>A </i>δοθέντος του <i>B</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><span class="math-font">(</span><i>n mod m</i><span class="math-font">) </span>ή <i>mod</i><span class="math-font">(</span><i>n</i>,<i> m</i><span class="math-font">)</span></p>
						</td>
						<td>
							<p>Το ακέραιο υπόλοιπο της διαίρεσης του <i>n</i> με το <i>m</i></p>
						</td>
					</tr>
					<tr>
						<td>
							<p><span class="math-font">(</span><i>n div m</i><span class="math-font">) </span>ή <span class="math-font">(</span><i>n</i>,<i> m</i><span class="math-font">)</span></p>
						</td>
						<td>
							<p>Το ακέραιο πηλίκο της διαίρεσης του <i>n </i>με το <i>m</i></p>
						</td>
					</tr>
				</tbody>
			</table>
		</figure>
		<figure role="table" id="tb33">
			<figcaption><span role="label">Πίνακας A-2</span> | Δυνάμεις</figcaption>
			
			<table>
				<tbody><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Header Texts _idGenCellOverride-1"><p class="indd_tables-header" lang="el-GR">Τύπος</p></td><td class="Table-Style Header Texts _idGenCellOverride-1"><p class="indd_tables-header ParaOverride-34" lang="el-GR">Παράδειγμα</p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts _idGenCellOverride-2"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">a</i><span class="CharOverride-3">0</span> <span class="indd_mathematical-font">=</span> 1</p></td><td class="Table-Style Texts Texts _idGenCellOverride-2"><p class="indd_tables" lang="el-GR">3<span class="CharOverride-3">0</span> <span class="indd_mathematical-font">=</span> 1</p></td></tr><tr class="Table-Style _idGenTableRowColumn-110"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-46" lang="el-GR">￼</p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">α</i><i class="none CharOverride-3">k</i><i class="none">α</i><i class="none CharOverride-3">n</i> <span class="indd_mathematical-font">=</span> <i class="none">α</i><i class="none CharOverride-3">k</i><span class="indd_mathematical-font CharOverride-3">+</span><i class="none CharOverride-3">n</i></p></td><td class="Table-Style Texts Texts"><p class="indd_tables" lang="el-GR">3<span class="CharOverride-3">2</span>3<span class="CharOverride-3">3</span> <span class="indd_mathematical-font">=</span> 3<span class="CharOverride-3">2</span><span class="indd_mathematical-font CharOverride-3">+</span><span class="CharOverride-3">3 </span><span class="indd_mathematical-font">=</span> 3<span class="CharOverride-3">5</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-111"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-46" lang="el-GR">￼</p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">(</span><i class="none">α</i><i class="none CharOverride-3">k</i><span class="indd_mathematical-font">)</span><i class="none CharOverride-3">n</i> <span class="indd_mathematical-font">=</span> <i class="none">α</i><i class="none CharOverride-3">k</i><span class="indd_mathematical-font CharOverride-3">⋅</span><i class="none CharOverride-3">n</i></p></td><td class="Table-Style Texts Texts"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">(</span>3<sup class="superscript _idGenCharOverride-1">2</sup><span class="indd_mathematical-font">)</span><sup class="superscript _idGenCharOverride-1">3</sup> <span class="indd_mathematical-font">=</span> 3<sup class="superscript _idGenCharOverride-1">2</sup><span class="indd_mathematical-font CharOverride-3">⋅</span><sup class="superscript _idGenCharOverride-1">3 </sup><span class="indd_mathematical-font">=</span> 3<sup class="superscript _idGenCharOverride-1">6</sup></p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">(</span><i class="none">α </i><span class="indd_mathematical-font">⋅ </span><i class="none">b</i><span class="indd_mathematical-font">)</span><i class="none CharOverride-3">k</i> <span class="indd_mathematical-font">=</span> <i class="none">α</i><i class="none CharOverride-3">k</i><i class="none"> </i><span class="indd_mathematical-font">⋅ </span><i class="none">b</i><i class="none CharOverride-3">k</i></p></td><td class="Table-Style Texts Texts"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">(</span>3<i class="none"> </i><span class="indd_mathematical-font">⋅ </span>4<span class="indd_mathematical-font">)</span><sup class="superscript _idGenCharOverride-1">2</sup> <span class="indd_mathematical-font">=</span> 3<sup class="superscript _idGenCharOverride-1">2</sup><i class="none"> </i><span class="indd_mathematical-font">⋅ </span>4<sup class="superscript _idGenCharOverride-1">2</sup></p></td></tr></tbody></table>
		</figure>
		<figure role="table" id="tb34">
			<figcaption><span role="label">Πίνακας A-3</span> | Λογικές συναρτήσεις</figcaption>
			<table id="table050">
					<tbody>
						<tr class="Table-Style _idGenTableRowColumn-5">
							<td class="Table-Style Header Texts _idGenCellOverride-1" colspan="9">
								<p class="indd_tables-header" lang="el-GR">Συμβολισμός</p></td>
						</tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts _idGenCellOverride-3" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Λογική άρνηση <span class="indd_mathematical-font">(~</span><i class="none">p</i><span class="indd_mathematical-font">)</span> ή <span class="indd_mathematical-font">(</span><i class="none">NOT p</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">P</i></p></td><td class="Table-Style Texts Texts CellOverride-15"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">~</span><i class="none">P</i></p></td><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15" /><td class="Table-Style Texts Texts CellOverride-15" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-115"><td class="Table-Style Texts Texts CellOverride-16" colspan="9" /></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Λογική σύζευξη <span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">)</span> ή <span class="indd_mathematical-font">(</span><i class="none">p AND q</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i></p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-115"><td class="Table-Style Texts Texts CellOverride-16" colspan="9" /></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Λογική διάζευξη <span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q</i><span class="indd_mathematical-font">)</span> ή <span class="indd_mathematical-font">(</span><i class="none">p OR q</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i></p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-115"><td class="Table-Style Texts Texts CellOverride-16" colspan="9" /></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Λογική αποκλειστική διάζευξη <span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">∧~ (</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">)</span> ή <span class="indd_mathematical-font">(</span><i class="none">p XOR q</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i></p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-115"><td class="Table-Style Texts Texts CellOverride-16" colspan="9" /></tr><tr class="Table-Style _idGenTableRowColumn-44"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Κανόνες De Morgan&#9;<span class="indd_mathematical-font">(~(</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">≡~ </span><i class="none">p </i><span class="indd_mathematical-font">∨~</span><i class="none"> q</i><span class="indd_mathematical-font">)</span> ή </p><p class="indd_tables" lang="el-GR">&#9;&#9;&#9;<span class="indd_mathematical-font">(~(</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">≡~ </span><i class="none">p </i><span class="indd_mathematical-font">∧~</span><i class="none"> q</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-114"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">~</span><i class="none">p</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">~</span><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">~(</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">)</span></p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR"><span class="indd_mathematical-font">~ </span><i class="none">p </i><span class="indd_mathematical-font">∨~ </span><i class="none">q</i></p></td><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">T</p></td><td class="Table-Style Texts Texts CellOverride-16"><p class="indd_tables ParaOverride-11" lang="el-GR">F</p></td><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /><td class="Table-Style Texts Texts CellOverride-16" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">•</span> Λογικές ισοδυναμίες</p></td></tr><tr class="Table-Style _idGenTableRowColumn-44"><td class="Table-Style Texts Texts CellOverride-16" colspan="9"><p class="indd_tables" lang="el-GR">Έστω <i class="none">p</i> και <i class="none">q</i> λογικές μεταβλητές, <i class="none">t</i> μια ταυτολογία και <i class="none">c</i> μια </p><p class="indd_tables" lang="el-GR">αντίφαση, τότε ισχύουν οι παρακάτω ισοδυναμίες.</p></td></tr><tr class="Table-Style _idGenTableRowColumn-44"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Αντιμεταθετική ιδιότητα</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q </i><span class="indd_mathematical-font">≡ </span><i class="none">q </i><span class="indd_mathematical-font">∧</span><i class="none"> r</i>,</p><p class="indd_tables" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q </i><span class="indd_mathematical-font">≡ </span><i class="none">q </i><span class="indd_mathematical-font">∨</span><i class="none"> r</i></p></td></tr><tr class="Table-Style _idGenTableRowColumn-44"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Επιμεριστική ιδιότητα</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">q </i><span class="indd_mathematical-font">∨</span><i class="none"> r</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">≡ (</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">) ∨</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> r</i><span class="indd_mathematical-font">)</span>,</p><p class="indd_tables" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">q </i><span class="indd_mathematical-font">∧</span><i class="none"> r</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">≡ (</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q</i><span class="indd_mathematical-font">) ∧</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> r</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-44"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Προσεταιριστική ιδιότητα</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> q</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">∧</span><i class="none"> r </i><span class="indd_mathematical-font">≡ </span><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">q </i><span class="indd_mathematical-font">∧</span><i class="none"> r</i><span class="indd_mathematical-font">)</span>,</p><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">(</span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> q</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">∨</span><i class="none"> r </i><span class="indd_mathematical-font">≡ </span><i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">q </i><span class="indd_mathematical-font">∨</span><i class="none"> r</i><span class="indd_mathematical-font">)</span></p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="9" /></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Διπλή άρνηση</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">~(~</span><i class="none">p</i><span class="indd_mathematical-font">)</span><i class="none"> </i><span class="indd_mathematical-font">≡ </span><i class="none">p</i></p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Μοναδιαία ποσότητα</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><i class="none">p </i><span class="indd_mathematical-font">∧</span><i class="none"> p </i><span class="indd_mathematical-font">≡ </span><i class="none">p</i>, <i class="none">p </i><span class="indd_mathematical-font">∨</span><i class="none"> p </i><span class="indd_mathematical-font">≡ </span><i class="none">p</i> </p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Άρνηση ταυτολογίας</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">~</span><i class="none">t </i><span class="indd_mathematical-font">≡ </span><i class="none">c</i></p></td></tr><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Texts Texts CellOverride-16" colspan="5"><p class="indd_tables" lang="el-GR">Άρνηση αντίφασης</p></td><td class="Table-Style Texts Texts CellOverride-16" colspan="4"><p class="indd_tables" lang="el-GR"><span class="indd_mathematical-font">~</span><i class="none">c </i><span class="indd_mathematical-font">≡ </span><i class="none">t</i></p></td></tr></tbody>
			</table>
		</figure>
		<figure role="table" id="tb36">
			<figcaption><span role="label">Πίνακας A-4</span> | Λογάριθμοι</figcaption>
			<table><tbody><tr class="Table-Style _idGenTableRowColumn-5"><td class="Table-Style Header Texts _idGenCellOverride-1"><p class="indd_tables-header" lang="el-GR">Τύπος</p></td><td class="Table-Style Header Texts _idGenCellOverride-1"><p class="indd_tables-header" lang="el-GR">Παράδειγμα</p></td></tr><tr class="Table-Style _idGenTableRowColumn-116"><td class="Table-Style Texts Texts _idGenCellOverride-2"><p class="indd_tables ParaOverride-11" lang="el-GR">log<i class="none CharOverride-9">a</i><i class="none"> x</i> <span class="indd_mathematical-font">=</span> <i class="none">y</i> <span class="indd_mathematical-font">⇔</span> <i class="none">a</i><i class="none CharOverride-3">y</i> <span class="indd_mathematical-font">=</span> <i class="none">x</i></p></td><td class="Table-Style Texts Texts _idGenCellOverride-2"><p class="indd_tables ParaOverride-11" lang="el-GR">log<sub class="subscript _idGenCharOverride-1">2</sub> 4 <span class="indd_mathematical-font">=</span> 2 <span class="indd_mathematical-font">⇔</span> 2<sup class="superscript _idGenCharOverride-1">2</sup> <span class="indd_mathematical-font">=</span> 4</p></td></tr><tr class="Table-Style _idGenTableRowColumn-116"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR">log<i class="none CharOverride-9">a</i><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">x</i> <span class="indd_mathematical-font">⋅</span> <i class="none">y</i><span class="indd_mathematical-font">)</span> <span class="indd_mathematical-font">=</span> log<i class="none CharOverride-9">a</i><i class="none"> x </i><span class="indd_mathematical-font">+</span> log<i class="none CharOverride-9">a</i><i class="none"> y</i></p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR">log<sub class="subscript _idGenCharOverride-1">2</sub> <span class="indd_mathematical-font">(</span>4 <span class="indd_mathematical-font">⋅</span> 2<span class="indd_mathematical-font">)</span> <span class="indd_mathematical-font">=</span> log<sub class="subscript _idGenCharOverride-1">2</sub> 4 <span class="indd_mathematical-font">+</span> log<sub class="subscript _idGenCharOverride-1">2</sub> 2</p></td></tr><tr class="Table-Style _idGenTableRowColumn-116"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR">log<i class="none CharOverride-9">a</i><i class="none"> </i><span class="indd_mathematical-font">(</span><i class="none">x</i><i class="none CharOverride-3">b</i><span class="indd_mathematical-font">)</span> <span class="indd_mathematical-font">=</span> <i class="none">b </i><span class="indd_mathematical-font">⋅ </span>log<i class="none CharOverride-9">a</i><i class="none"> x</i></p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-11" lang="el-GR">log<sub class="subscript _idGenCharOverride-1">2</sub> <span class="indd_mathematical-font">(</span>4<sup class="superscript CharOverride-2">3</sup><span class="indd_mathematical-font">)</span> <span class="indd_mathematical-font">=</span> 3 <span class="indd_mathematical-font">⋅</span> log<sub class="subscript _idGenCharOverride-1">2</sub> 4</p></td></tr><tr class="Table-Style _idGenTableRowColumn-117"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td></tr><tr class="Table-Style _idGenTableRowColumn-118"><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td><td class="Table-Style Texts Texts"><p class="indd_tables ParaOverride-45" lang="el-GR">￼</p></td></tr></tbody></table>
		</figure>
		<figure role="table" id="tb37">
			<figcaption><span role="label">Πίνακας A-5</span> | Ακολουθίες - σειρές</figcaption>
			<img src="media/tba5.png" />
		</figure>
	</section>
	<section role="chapter" id="ch16">
		<h1>ΠΑΡΑΡΤΗΜΑ B Πίνακες Χαρακτήρων</h1>
		<figure role="table" id="tb39">
			<figcaption>ΠΙΝΑΚΑΣ Β-1 | Ascii - κωδικοί 32 έως 127</figcaption>
			<table id="table053">
				<tbody>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">!</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">&quot;</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">#</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">$</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">%</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">&amp;</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">&apos;</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">(</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">)</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">*</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">+</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">32</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">33</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">34</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">35</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">36</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">37</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">38</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">39</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">40</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">41</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">42</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">43</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">40</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">41</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">42</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">43</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">44</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">45</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">46</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">47</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">50</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">51</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">52</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">53</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">20</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">21</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">22</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">23</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">24</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">25</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">26</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">27</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">28</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">29</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">2a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">2b</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100000</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100001</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100010</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100011</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100100</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100101</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100110</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">100111</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">101000</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">101001</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">101010</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">101011</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">,</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">-</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">.</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">/</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">0</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">1</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">2</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">3</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">4</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">5</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">6</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">7</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">44</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">45</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">46</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">47</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">48</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">49</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">50</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">51</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">52</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">53</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">54</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">55</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">54</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">55</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">56</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">57</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">60</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">61</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">62</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">63</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">64</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">65</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">66</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">67</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">2c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">2d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">2e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">2f</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">30</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">31</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">32</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">33</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">34</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">35</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">36</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">37</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">101100</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">101101</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">101110</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">101111</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110000</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110001</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110010</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110011</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110100</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110101</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110110</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">110111</span></p>
						</td>
					</tr>
					<tr>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">8</span></p>
						</td>
						<td>
							<p><span class="courier-code">9</span></p>
						</td>
						<td>
							<p><span class="courier-code">:</span></p>
						</td>
						<td>
							<p><span class="courier-code">;</span></p>
						</td>
						<td>
							<p><span class="courier-code">&lt;</span></p>
						</td>
						<td>
							<p><span class="courier-code">=</span></p>
						</td>
						<td>
							<p><span class="courier-code">&gt;</span></p>
						</td>
						<td>
							<p><span class="courier-code">?</span></p>
						</td>
						<td>
							<p><span class="courier-code">@</span></p>
						</td>
						<td>
							<p><span class="courier-code">A</span></p>
						</td>
						<td>
							<p><span class="courier-code">B</span></p>
						</td>
						<td>
							<p><span class="courier-code">C</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">56</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">57</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">58</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">59</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">60</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">61</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">62</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">63</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">64</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">65</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">66</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">67</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">70</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">71</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">72</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">73</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">74</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">75</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">76</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">77</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">100</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">101</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">102</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">103</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">38</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">39</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">3f</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">40</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">41</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">42</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">43</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">111000</span></p>
						</td>
						<td>
							<p><span class="courier-code">111001</span></p>
						</td>
						<td>
							<p><span class="courier-code">111010</span></p>
						</td>
						<td>
							<p><span class="courier-code">111011</span></p>
						</td>
						<td>
							<p><span class="courier-code">111100</span></p>
						</td>
						<td>
							<p><span class="courier-code">111101</span></p>
						</td>
						<td>
							<p><span class="courier-code">111110</span></p>
						</td>
						<td>
							<p><span class="courier-code">111111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000011</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">D</span></p>
						</td>
						<td>
							<p><span class="courier-code">E</span></p>
						</td>
						<td>
							<p><span class="courier-code">F</span></p>
						</td>
						<td>
							<p><span class="courier-code">G</span></p>
						</td>
						<td>
							<p><span class="courier-code">H</span></p>
						</td>
						<td>
							<p><span class="courier-code">I</span></p>
						</td>
						<td>
							<p><span class="courier-code">J</span></p>
						</td>
						<td>
							<p><span class="courier-code">K</span></p>
						</td>
						<td>
							<p><span class="courier-code">L</span></p>
						</td>
						<td>
							<p><span class="courier-code">M</span></p>
						</td>
						<td>
							<p><span class="courier-code">N</span></p>
						</td>
						<td>
							<p><span class="courier-code">O</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">68</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">69</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">70</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">71</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">72</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">73</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">74</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">75</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">76</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">77</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">78</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">79</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">104</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">105</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">106</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">107</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">110</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">111</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">112</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">113</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">114</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">115</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">116</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">117</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">44</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">45</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">46</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">47</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">48</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">49</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">4f</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001011</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001111</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">P</span></p>
						</td>
						<td>
							<p><span class="courier-code">Q</span></p>
						</td>
						<td>
							<p><span class="courier-code">R</span></p>
						</td>
						<td>
							<p><span class="courier-code">S</span></p>
						</td>
						<td>
							<p><span class="courier-code">T</span></p>
						</td>
						<td>
							<p><span class="courier-code">U</span></p>
						</td>
						<td>
							<p><span class="courier-code">V</span></p>
						</td>
						<td>
							<p><span class="courier-code">W</span></p>
						</td>
						<td>
							<p><span class="courier-code">X</span></p>
						</td>
						<td>
							<p><span class="courier-code">Y</span></p>
						</td>
						<td>
							<p><span class="courier-code">Z</span></p>
						</td>
						<td>
							<p><span class="courier-code">[</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">80</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">81</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">82</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">83</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">84</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">85</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">86</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">87</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">88</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">89</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">90</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">91</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">120</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">121</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">122</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">123</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">124</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">125</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">126</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">127</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">130</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">131</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">132</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">133</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">50</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">51</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">52</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">53</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">54</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">55</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">56</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">57</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">58</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">59</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5b</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010011</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011011</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">\</span></p>
						</td>
						<td>
							<p><span class="courier-code">]</span></p>
						</td>
						<td>
							<p><span class="courier-code">^</span></p>
						</td>
						<td>
							<p><span class="courier-code">_</span></p>
						</td>
						<td>
							<p><span class="courier-code">&apos;</span></p>
						</td>
						<td>
							<p><span class="courier-code">a</span></p>
						</td>
						<td>
							<p><span class="courier-code">b</span></p>
						</td>
						<td>
							<p><span class="courier-code">c</span></p>
						</td>
						<td>
							<p><span class="courier-code">d</span></p>
						</td>
						<td>
							<p><span class="courier-code">e</span></p>
						</td>
						<td>
							<p><span class="courier-code">f</span></p>
						</td>
						<td>
							<p><span class="courier-code">g</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">92</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">93</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">94</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">95</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">96</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">97</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">98</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">99</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">100</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">101</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">102</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">103</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">134</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">135</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">136</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">137</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">140</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">141</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">142</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">143</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">144</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">145</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">146</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">147</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">5f</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">60</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">61</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">62</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">63</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">64</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">65</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">66</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">67</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100011</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1100111</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">h</span></p>
						</td>
						<td>
							<p><span class="courier-code">i</span></p>
						</td>
						<td>
							<p><span class="courier-code">j</span></p>
						</td>
						<td>
							<p><span class="courier-code">k</span></p>
						</td>
						<td>
							<p><span class="courier-code">l</span></p>
						</td>
						<td>
							<p><span class="courier-code">m</span></p>
						</td>
						<td>
							<p><span class="courier-code">n</span></p>
						</td>
						<td>
							<p><span class="courier-code">o</span></p>
						</td>
						<td>
							<p><span class="courier-code">p</span></p>
						</td>
						<td>
							<p><span class="courier-code">q</span></p>
						</td>
						<td>
							<p><span class="courier-code">r</span></p>
						</td>
						<td>
							<p><span class="courier-code">s</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">104</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">105</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">106</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">107</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">108</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">109</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">110</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">111</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">112</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">113</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">114</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">115</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">150</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">151</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">152</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">153</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">154</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">155</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">156</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">157</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">160</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">161</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">162</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">163</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">68</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">69</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">6f</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">70</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">71</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">72</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">73</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101011</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1101111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110011</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">t</span></p>
						</td>
						<td>
							<p><span class="courier-code">u</span></p>
						</td>
						<td>
							<p><span class="courier-code">v</span></p>
						</td>
						<td>
							<p><span class="courier-code">w</span></p>
						</td>
						<td>
							<p><span class="courier-code">x</span></p>
						</td>
						<td>
							<p><span class="courier-code">y</span></p>
						</td>
						<td>
							<p><span class="courier-code">z</span></p>
						</td>
						<td>
							<p><span class="courier-code">{</span></p>
						</td>
						<td>
							<p><span class="courier-code">|</span></p>
						</td>
						<td>
							<p><span class="courier-code">}</span></p>
						</td>
						<td>
							<p><span class="courier-code">~</span></p>
						</td>
						<td>
							<p><span class="courier-code">□</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">116</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">117</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">118</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">119</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">120</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">121</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">122</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">123</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">124</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">125</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">126</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">127</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Oct:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">164</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">165</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">166</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">167</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">170</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">171</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">172</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">173</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">174</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">175</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">176</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">177</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">74</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">75</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">76</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">77</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">78</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">79</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">7f</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Bin:</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1110111</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111000</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111001</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111010</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111011</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111100</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111101</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111110</span></p>
						</td>
						<td>
							<p><span class="courier-code">1111111</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-124">
						<td colspan="13">
							<p><span class="courier-code">Chr: Ο χαρακτήρας ASCII</span></p>
							<p><span class="courier-code">Dec: Ο Δεκαδικός κωδικός ASCII</span></p>
							<p><span class="courier-code">Oct: Ο Οκταδικός κωδικός ASCII</span></p>
							<p><span class="courier-code">Hex: Ο Δεκαεξαδικός κωδικός ASCII</span></p>
							<p><span class="courier-code">Bin: Ο Δυαδικός κωδικός ASCII</span></p>
						</td>
					</tr>
				</tbody>
			</table>
		</figure>
		<figure role="table" id="tb40">
			<figcaption>ΠΙΝΑΚΑΣ Β-2 | Unicode χαρακτήρες στα greek - coptic blocks</figcaption>
			<table id="table054">
				<tbody>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">Ͱ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͱ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">Ͳ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͳ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ʹ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">͵</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">Ͷ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͷ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">͸</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">͹</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͺ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͻ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͼ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">ͽ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">;</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-18">
							<p><span class="courier-code">Ϳ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">880</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">881</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">882</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">883</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">884</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">885</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">886</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">887</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">888</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">889</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">890</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">891</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">892</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">893</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">894</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-19">
							<p><span class="courier-code">895</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">370</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">371</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">372</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">373</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">374</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">375</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">376</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">377</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">378</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">379</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37c</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37d</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37e</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-20">
							<p><span class="courier-code">37f</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
						<td class="No-Table-Style Texts CellOverride-22">
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΀</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΁</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΂</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΃</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΄</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΅</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ά</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">·</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Έ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ή</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ί</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΋</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ό</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">΍</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ύ</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-23">
							<p><span class="courier-code">Ώ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">896</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">897</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">898</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">899</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">900</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">901</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">902</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">903</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">904</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">905</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">906</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">907</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">908</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">909</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">910</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-24">
							<p><span class="courier-code">911</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">380</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">381</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">382</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">383</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">384</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">385</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">386</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">387</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">388</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">389</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">38a</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p><span class="courier-code">38b</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p>38c</p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p>38d</p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p>38e</p>
						</td>
						<td class="No-Table-Style Texts CellOverride-25">
							<p>38f</p>
						</td>
					</tr>
					<tr>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
						<td class="No-Table-Style Texts CellOverride-26">
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">ΐ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Α</span></p>
						</td>
						<td>
							<p><span class="courier-code">Β</span></p>
						</td>
						<td>
							<p><span class="courier-code">Γ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Δ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ε</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ζ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Η</span></p>
						</td>
						<td>
							<p><span class="courier-code">Θ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ι</span></p>
						</td>
						<td>
							<p><span class="courier-code">Κ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Λ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Μ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ν</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ξ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ο</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">912</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">913</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">914</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">915</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">916</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">917</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">918</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">919</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">920</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">921</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">922</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">923</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">924</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">925</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">926</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">927</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">390</span></p>
						</td>
						<td>
							<p><span class="courier-code">391</span></p>
						</td>
						<td>
							<p><span class="courier-code">392</span></p>
						</td>
						<td>
							<p><span class="courier-code">393</span></p>
						</td>
						<td>
							<p><span class="courier-code">394</span></p>
						</td>
						<td>
							<p><span class="courier-code">395</span></p>
						</td>
						<td>
							<p><span class="courier-code">396</span></p>
						</td>
						<td>
							<p><span class="courier-code">397</span></p>
						</td>
						<td>
							<p><span class="courier-code">398</span></p>
						</td>
						<td>
							<p><span class="courier-code">399</span></p>
						</td>
						<td>
							<p><span class="courier-code">39a</span></p>
						</td>
						<td>
							<p><span class="courier-code">39b</span></p>
						</td>
						<td>
							<p><span class="courier-code">39c</span></p>
						</td>
						<td>
							<p><span class="courier-code">39d</span></p>
						</td>
						<td>
							<p><span class="courier-code">39e</span></p>
						</td>
						<td>
							<p><span class="courier-code">39f</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">Π</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ρ</span></p>
						</td>
						<td>
							<p><span class="courier-code">΢</span></p>
						</td>
						<td>
							<p><span class="courier-code">Σ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Τ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Υ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Φ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Χ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ψ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ω</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϊ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϋ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ά</span></p>
						</td>
						<td>
							<p><span class="courier-code">έ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ή</span></p>
						</td>
						<td>
							<p><span class="courier-code">ί</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">928</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">929</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">930</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">931</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">932</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">933</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">934</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">935</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">936</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">937</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">938</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">939</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">940</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">941</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">942</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">943</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3a9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3aa</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ab</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ac</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ad</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ae</span></p>
						</td>
						<td>
							<p><span class="courier-code">3af</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">ΰ</span></p>
						</td>
						<td>
							<p><span class="courier-code">α</span></p>
						</td>
						<td>
							<p><span class="courier-code">β</span></p>
						</td>
						<td>
							<p><span class="courier-code">γ</span></p>
						</td>
						<td>
							<p><span class="courier-code">δ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ε</span></p>
						</td>
						<td>
							<p><span class="courier-code">ζ</span></p>
						</td>
						<td>
							<p><span class="courier-code">η</span></p>
						</td>
						<td>
							<p><span class="courier-code">θ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ι</span></p>
						</td>
						<td>
							<p><span class="courier-code">κ</span></p>
						</td>
						<td>
							<p><span class="courier-code">λ</span></p>
						</td>
						<td>
							<p><span class="courier-code">μ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ν</span></p>
						</td>
						<td>
							<p><span class="courier-code">ξ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ο</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">944</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">945</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">946</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">947</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">948</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">949</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">950</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">951</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">952</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">953</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">954</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">955</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">956</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">957</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">958</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">959</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3b9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ba</span></p>
						</td>
						<td>
							<p><span class="courier-code">3bb</span></p>
						</td>
						<td>
							<p><span class="courier-code">3bc</span></p>
						</td>
						<td>
							<p><span class="courier-code">3bd</span></p>
						</td>
						<td>
							<p><span class="courier-code">3be</span></p>
						</td>
						<td>
							<p><span class="courier-code">3bf</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">π</span></p>
						</td>
						<td>
							<p><span class="courier-code">ρ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ς</span></p>
						</td>
						<td>
							<p><span class="courier-code">σ</span></p>
						</td>
						<td>
							<p><span class="courier-code">τ</span></p>
						</td>
						<td>
							<p><span class="courier-code">υ</span></p>
						</td>
						<td>
							<p><span class="courier-code">φ</span></p>
						</td>
						<td>
							<p><span class="courier-code">χ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ψ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ω</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϊ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϋ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ό</span></p>
						</td>
						<td>
							<p><span class="courier-code">ύ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ώ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϗ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">960</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">961</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">962</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">963</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">964</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">965</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">966</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">967</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">968</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">969</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">970</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">971</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">972</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">973</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">974</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">975</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3c9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ca</span></p>
						</td>
						<td>
							<p><span class="courier-code">3cb</span></p>
						</td>
						<td>
							<p><span class="courier-code">3cc</span></p>
						</td>
						<td>
							<p><span class="courier-code">3cd</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ce</span></p>
						</td>
						<td>
							<p><span class="courier-code">3cf</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϐ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϑ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϒ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϓ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϔ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϕ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϖ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϗ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϙ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϙ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϛ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϛ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϝ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϝ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϟ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϟ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">976</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">977</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">978</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">979</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">980</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">981</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">982</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">983</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">984</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">985</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">986</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">987</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">988</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">989</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">990</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">991</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3d9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3da</span></p>
						</td>
						<td>
							<p><span class="courier-code">3db</span></p>
						</td>
						<td>
							<p><span class="courier-code">3dc</span></p>
						</td>
						<td>
							<p><span class="courier-code">3dd</span></p>
						</td>
						<td>
							<p><span class="courier-code">3de</span></p>
						</td>
						<td>
							<p><span class="courier-code">3df</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϡ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϡ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϣ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϣ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϥ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϥ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϧ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϧ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϩ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϩ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϫ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϫ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϭ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϭ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϯ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϯ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">992</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">993</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">994</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">995</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">996</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">997</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">998</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">999</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1000</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1001</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1002</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1003</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1004</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1005</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1006</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1007</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3e9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ea</span></p>
						</td>
						<td>
							<p><span class="courier-code">3eb</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ec</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ed</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ee</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ef</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">chr:</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϰ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϱ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϲ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϳ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϴ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϵ</span></p>
						</td>
						<td>
							<p><span class="courier-code">϶</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϸ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϸ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϲ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϼ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͼ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͽ</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">Dec:</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1008</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1009</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1010</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1011</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1012</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1013</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1014</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1015</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1016</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1017</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1018</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1019</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1020</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1021</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1022</span></p>
						</td>
						<td class="No-Table-Style Texts CellOverride-27">
							<p><span class="courier-code">1023</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-123">
						<td>
							<p><span class="courier-code">Hex:</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f0</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f1</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f2</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f3</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f4</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f5</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f6</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f7</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f8</span></p>
						</td>
						<td>
							<p><span class="courier-code">3f9</span></p>
						</td>
						<td>
							<p><span class="courier-code">3fa</span></p>
						</td>
						<td>
							<p><span class="courier-code">3fb</span></p>
						</td>
						<td>
							<p><span class="courier-code">3fc</span></p>
						</td>
						<td>
							<p><span class="courier-code">3fd</span></p>
						</td>
						<td>
							<p><span class="courier-code">3fe</span></p>
						</td>
						<td>
							<p><span class="courier-code">3ff</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td colspan="17">
							<p><span class="courier-code">chr: Ο χαρακτήρας Unicode</span></p>
							<p><span class="courier-code">Dec: Ο Δεκαδικός κωδικός Unicode</span></p>
							<p><span class="courier-code">Hex: Ο Δεκαεξαδικός κωδικός Unicode</span></p>
						</td>
					</tr>
				</tbody>
			</table>
		</figure>
		<figure role="table"  id="tb41">
			<figcaption>ΠΙΝΑΚΑΣ Β-3 | Περιγραφή των ελληνικών χαρακτήρων</figcaption>
			<table id="table055">
				<tbody>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">A/A</span></p>
						</td>
						<td>
							<p><span class="courier-code">Hex</span></p>
						</td>
						<td>
							<p><span class="courier-code">Dec</span></p>
						</td>
						<td>
							<p><span class="courier-code">Κ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Γρ</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ονομασία - Περιγραφή</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">0</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x370</span></p>
						</td>
						<td>
							<p><span class="courier-code">880</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͱ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER HETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">1</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x371</span></p>
						</td>
						<td>
							<p><span class="courier-code">881</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͱ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER HETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">2</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x372</span></p>
						</td>
						<td>
							<p><span class="courier-code">882</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͳ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ARCHAIC SAMPI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">3</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x373</span></p>
						</td>
						<td>
							<p><span class="courier-code">883</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͳ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ARCHAIC SAMPI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">4</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x374</span></p>
						</td>
						<td>
							<p><span class="courier-code">884</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lm</span></p>
						</td>
						<td>
							<p><span class="courier-code">ʹ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK NUMERAL SIGN</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">5</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x375</span></p>
						</td>
						<td>
							<p><span class="courier-code">885</span></p>
						</td>
						<td>
							<p><span class="courier-code">Sk</span></p>
						</td>
						<td>
							<p><span class="courier-code">͵</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LOWER NUMERAL SIGN</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">6</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x376</span></p>
						</td>
						<td>
							<p><span class="courier-code">886</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͷ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">7</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x377</span></p>
						</td>
						<td>
							<p><span class="courier-code">887</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͷ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER PAMPHYLIAN DIGAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">10</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37a</span></p>
						</td>
						<td>
							<p><span class="courier-code">890</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lm</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͺ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK YPOGEGRAMMENI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">11</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37b</span></p>
						</td>
						<td>
							<p><span class="courier-code">891</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL REVERSED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">12</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37c</span></p>
						</td>
						<td>
							<p><span class="courier-code">892</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͼ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL DOTTED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">13</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37d</span></p>
						</td>
						<td>
							<p><span class="courier-code">893</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ͽ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">14</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37e</span></p>
						</td>
						<td>
							<p><span class="courier-code">894</span></p>
						</td>
						<td>
							<p><span class="courier-code">Po</span></p>
						</td>
						<td>
							<p><span class="courier-code">;</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK QUESTION MARK</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">15</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x37f</span></p>
						</td>
						<td>
							<p><span class="courier-code">895</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϳ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER YOT</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">20</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x384</span></p>
						</td>
						<td>
							<p><span class="courier-code">900</span></p>
						</td>
						<td>
							<p><span class="courier-code">Sk</span></p>
						</td>
						<td>
							<p><span class="courier-code">΄</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">21</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x385</span></p>
						</td>
						<td>
							<p><span class="courier-code">901</span></p>
						</td>
						<td>
							<p><span class="courier-code">Sk</span></p>
						</td>
						<td>
							<p><span class="courier-code">΅</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK DIALYTIKA TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">22</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x386</span></p>
						</td>
						<td>
							<p><span class="courier-code">902</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ά</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ALPHA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">23</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x387</span></p>
						</td>
						<td>
							<p><span class="courier-code">903</span></p>
						</td>
						<td>
							<p><span class="courier-code">Po</span></p>
						</td>
						<td>
							<p><span class="courier-code">·</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK ANO TELEIA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">24</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x388</span></p>
						</td>
						<td>
							<p><span class="courier-code">904</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Έ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER EPSILON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">25</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x389</span></p>
						</td>
						<td>
							<p><span class="courier-code">905</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ή</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ETA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">26</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x38a</span></p>
						</td>
						<td>
							<p><span class="courier-code">906</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ί</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER IOTA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">28</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x38c</span></p>
						</td>
						<td>
							<p><span class="courier-code">908</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ό</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER OMICRON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">30</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x38e</span></p>
						</td>
						<td>
							<p><span class="courier-code">910</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ύ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER UPSILON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">31</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x38f</span></p>
						</td>
						<td>
							<p><span class="courier-code">911</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ώ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER OMEGA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">32</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x390</span></p>
						</td>
						<td>
							<p><span class="courier-code">912</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ΐ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">33</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x391</span></p>
						</td>
						<td>
							<p><span class="courier-code">913</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Α</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ALPHA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">34</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x392</span></p>
						</td>
						<td>
							<p><span class="courier-code">914</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Β</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER BETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">35</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x393</span></p>
						</td>
						<td>
							<p><span class="courier-code">915</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Γ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER GAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">36</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x394</span></p>
						</td>
						<td>
							<p><span class="courier-code">916</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Δ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER DELTA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">37</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x395</span></p>
						</td>
						<td>
							<p><span class="courier-code">917</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ε</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER EPSILON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">38</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x396</span></p>
						</td>
						<td>
							<p><span class="courier-code">918</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ζ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ZETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">39</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x397</span></p>
						</td>
						<td>
							<p><span class="courier-code">919</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Η</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER ETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">40</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x398</span></p>
						</td>
						<td>
							<p><span class="courier-code">920</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Θ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER THETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">41</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x399</span></p>
						</td>
						<td>
							<p><span class="courier-code">921</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ι</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER IOTA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">42</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39a</span></p>
						</td>
						<td>
							<p><span class="courier-code">922</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Κ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER KAPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">43</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39b</span></p>
						</td>
						<td>
							<p><span class="courier-code">923</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Λ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER LAMDA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">44</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39c</span></p>
						</td>
						<td>
							<p><span class="courier-code">924</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Μ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER MU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">45</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39d</span></p>
						</td>
						<td>
							<p><span class="courier-code">925</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ν</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER NU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">46</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39e</span></p>
						</td>
						<td>
							<p><span class="courier-code">926</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ξ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER XI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">47</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x39f</span></p>
						</td>
						<td>
							<p><span class="courier-code">927</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ο</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER OMICRON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">48</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a0</span></p>
						</td>
						<td>
							<p><span class="courier-code">928</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Π</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER PI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">49</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a1</span></p>
						</td>
						<td>
							<p><span class="courier-code">929</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ρ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER RHO</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">51</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a3</span></p>
						</td>
						<td>
							<p><span class="courier-code">931</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Σ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER SIGMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">52</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a4</span></p>
						</td>
						<td>
							<p><span class="courier-code">932</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Τ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER TAU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">53</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a5</span></p>
						</td>
						<td>
							<p><span class="courier-code">933</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Υ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER UPSILON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">54</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a6</span></p>
						</td>
						<td>
							<p><span class="courier-code">934</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Φ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER PHI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">55</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a7</span></p>
						</td>
						<td>
							<p><span class="courier-code">935</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Χ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER CHI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">56</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a8</span></p>
						</td>
						<td>
							<p><span class="courier-code">936</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ψ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER PSI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">57</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3a9</span></p>
						</td>
						<td>
							<p><span class="courier-code">937</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ω</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER OMEGA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">58</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3aa</span></p>
						</td>
						<td>
							<p><span class="courier-code">938</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϊ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER IOTA WITH DIALYTIKA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">59</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ab</span></p>
						</td>
						<td>
							<p><span class="courier-code">939</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϋ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">60</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ac</span></p>
						</td>
						<td>
							<p><span class="courier-code">940</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ά</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ALPHA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">61</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ad</span></p>
						</td>
						<td>
							<p><span class="courier-code">941</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">έ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER EPSILON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">62</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ae</span></p>
						</td>
						<td>
							<p><span class="courier-code">942</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ή</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ETA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">63</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3af</span></p>
						</td>
						<td>
							<p><span class="courier-code">943</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ί</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER IOTA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">64</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b0</span></p>
						</td>
						<td>
							<p><span class="courier-code">944</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ΰ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">65</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b1</span></p>
						</td>
						<td>
							<p><span class="courier-code">945</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">α</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ALPHA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">66</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b2</span></p>
						</td>
						<td>
							<p><span class="courier-code">946</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">β</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER BETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">67</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b3</span></p>
						</td>
						<td>
							<p><span class="courier-code">947</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">γ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER GAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">68</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b4</span></p>
						</td>
						<td>
							<p><span class="courier-code">948</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">δ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER DELTA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">69</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b5</span></p>
						</td>
						<td>
							<p><span class="courier-code">949</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ε</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER EPSILON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">70</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b6</span></p>
						</td>
						<td>
							<p><span class="courier-code">950</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ζ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ZETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">71</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b7</span></p>
						</td>
						<td>
							<p><span class="courier-code">951</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">η</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">72</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b8</span></p>
						</td>
						<td>
							<p><span class="courier-code">952</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">θ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER THETA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">73</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3b9</span></p>
						</td>
						<td>
							<p><span class="courier-code">953</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ι</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER IOTA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">74</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ba</span></p>
						</td>
						<td>
							<p><span class="courier-code">954</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">κ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER KAPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">75</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3bb</span></p>
						</td>
						<td>
							<p><span class="courier-code">955</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">λ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER LAMDA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">76</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3bc</span></p>
						</td>
						<td>
							<p><span class="courier-code">956</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">μ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER MU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">77</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3bd</span></p>
						</td>
						<td>
							<p><span class="courier-code">957</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ν</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER NU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">78</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3be</span></p>
						</td>
						<td>
							<p><span class="courier-code">958</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ξ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER XI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">79</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3bf</span></p>
						</td>
						<td>
							<p><span class="courier-code">959</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ο</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER OMICRON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">80</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c0</span></p>
						</td>
						<td>
							<p><span class="courier-code">960</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">π</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER PI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">81</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c1</span></p>
						</td>
						<td>
							<p><span class="courier-code">961</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ρ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER RHO</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">82</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c2</span></p>
						</td>
						<td>
							<p><span class="courier-code">962</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ς</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER FINAL SIGMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">83</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c3</span></p>
						</td>
						<td>
							<p><span class="courier-code">963</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">σ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER SIGMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">84</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c4</span></p>
						</td>
						<td>
							<p><span class="courier-code">964</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">τ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER TAU</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">85</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c5</span></p>
						</td>
						<td>
							<p><span class="courier-code">965</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">υ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER UPSILON</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">86</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c6</span></p>
						</td>
						<td>
							<p><span class="courier-code">966</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">φ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER PHI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">87</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c7</span></p>
						</td>
						<td>
							<p><span class="courier-code">967</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">χ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER CHI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">88</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c8</span></p>
						</td>
						<td>
							<p><span class="courier-code">968</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ψ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER PSI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">89</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3c9</span></p>
						</td>
						<td>
							<p><span class="courier-code">969</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ω</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER OMEGA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">90</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ca</span></p>
						</td>
						<td>
							<p><span class="courier-code">970</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϊ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER IOTA WITH DIALYTIKA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">91</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3cb</span></p>
						</td>
						<td>
							<p><span class="courier-code">971</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϋ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER UPSILON WITH DIALYTIKA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">92</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3cc</span></p>
						</td>
						<td>
							<p><span class="courier-code">972</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ό</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER OMICRON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">93</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3cd</span></p>
						</td>
						<td>
							<p><span class="courier-code">973</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ύ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER UPSILON WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">94</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ce</span></p>
						</td>
						<td>
							<p><span class="courier-code">974</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ώ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER OMEGA WITH TONOS</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">95</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3cf</span></p>
						</td>
						<td>
							<p><span class="courier-code">975</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϗ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL KAI SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">96</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d0</span></p>
						</td>
						<td>
							<p><span class="courier-code">976</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϐ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK BETA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">97</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d1</span></p>
						</td>
						<td>
							<p><span class="courier-code">977</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϑ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK THETA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">98</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d2</span></p>
						</td>
						<td>
							<p><span class="courier-code">978</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϒ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK UPSILON WITH HOOK SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">99</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d3</span></p>
						</td>
						<td>
							<p><span class="courier-code">979</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϓ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK UPSILON WITH ACUTE AND HOOK SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">100</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d4</span></p>
						</td>
						<td>
							<p><span class="courier-code">980</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϔ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">101</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d5</span></p>
						</td>
						<td>
							<p><span class="courier-code">981</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϕ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK PHI SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">102</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d6</span></p>
						</td>
						<td>
							<p><span class="courier-code">982</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϖ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK PI SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">103</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d7</span></p>
						</td>
						<td>
							<p><span class="courier-code">983</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϗ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK KAI SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">104</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d8</span></p>
						</td>
						<td>
							<p><span class="courier-code">984</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϙ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER ARCHAIC KOPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">105</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3d9</span></p>
						</td>
						<td>
							<p><span class="courier-code">985</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϙ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER ARCHAIC KOPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">106</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3da</span></p>
						</td>
						<td>
							<p><span class="courier-code">986</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϛ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER STIGMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">107</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3db</span></p>
						</td>
						<td>
							<p><span class="courier-code">987</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϛ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER STIGMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">108</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3dc</span></p>
						</td>
						<td>
							<p><span class="courier-code">988</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϝ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER DIGAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">109</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3dd</span></p>
						</td>
						<td>
							<p><span class="courier-code">989</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϝ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER DIGAMMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">110</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3de</span></p>
						</td>
						<td>
							<p><span class="courier-code">990</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϟ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER KOPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">111</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3df</span></p>
						</td>
						<td>
							<p><span class="courier-code">991</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϟ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER KOPPA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">112</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e0</span></p>
						</td>
						<td>
							<p><span class="courier-code">992</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϡ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER SAMPI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">113</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e1</span></p>
						</td>
						<td>
							<p><span class="courier-code">993</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϡ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER SAMPI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">114</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e2</span></p>
						</td>
						<td>
							<p><span class="courier-code">994</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϣ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER SHEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">115</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e3</span></p>
						</td>
						<td>
							<p><span class="courier-code">995</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϣ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER SHEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">116</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e4</span></p>
						</td>
						<td>
							<p><span class="courier-code">996</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϥ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER FEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">117</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e5</span></p>
						</td>
						<td>
							<p><span class="courier-code">997</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϥ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER FEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">118</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e6</span></p>
						</td>
						<td>
							<p><span class="courier-code">998</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϧ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER KHEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">119</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e7</span></p>
						</td>
						<td>
							<p><span class="courier-code">999</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϧ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER KHEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">120</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e8</span></p>
						</td>
						<td>
							<p><span class="courier-code">1000</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϩ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER HORI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">121</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3e9</span></p>
						</td>
						<td>
							<p><span class="courier-code">1001</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϩ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER HORI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">122</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ea</span></p>
						</td>
						<td>
							<p><span class="courier-code">1002</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϫ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER GANGIA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">123</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3eb</span></p>
						</td>
						<td>
							<p><span class="courier-code">1003</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϫ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER GANGIA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">124</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ec</span></p>
						</td>
						<td>
							<p><span class="courier-code">1004</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϭ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER SHIMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">125</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ed</span></p>
						</td>
						<td>
							<p><span class="courier-code">1005</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϭ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER SHIMA</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">126</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ee</span></p>
						</td>
						<td>
							<p><span class="courier-code">1006</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϯ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC CAPITAL LETTER DEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">127</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ef</span></p>
						</td>
						<td>
							<p><span class="courier-code">1007</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϯ</span></p>
						</td>
						<td>
							<p><span class="courier-code">COPTIC SMALL LETTER DEI</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">128</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f0</span></p>
						</td>
						<td>
							<p><span class="courier-code">1008</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϰ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK KAPPA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">129</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f1</span></p>
						</td>
						<td>
							<p><span class="courier-code">1009</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϱ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK RHO SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">130</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f2</span></p>
						</td>
						<td>
							<p><span class="courier-code">1010</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϲ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">131</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f3</span></p>
						</td>
						<td>
							<p><span class="courier-code">1011</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϳ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LETTER YOT</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">132</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f4</span></p>
						</td>
						<td>
							<p><span class="courier-code">1012</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϴ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL THETA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">133</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f5</span></p>
						</td>
						<td>
							<p><span class="courier-code">1013</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϵ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK LUNATE EPSILON SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">134</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f6</span></p>
						</td>
						<td>
							<p><span class="courier-code">1014</span></p>
						</td>
						<td>
							<p><span class="courier-code">Sm</span></p>
						</td>
						<td>
							<p><span class="courier-code">϶</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK REVERSED LUNATE EPSILON SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">135</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f7</span></p>
						</td>
						<td>
							<p><span class="courier-code">1015</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϸ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER SHO</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">136</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f8</span></p>
						</td>
						<td>
							<p><span class="courier-code">1016</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϸ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER SHO</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">137</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3f9</span></p>
						</td>
						<td>
							<p><span class="courier-code">1017</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϲ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">138</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3fa</span></p>
						</td>
						<td>
							<p><span class="courier-code">1018</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ϻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL LETTER SAN</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">139</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3fb</span></p>
						</td>
						<td>
							<p><span class="courier-code">1019</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK SMALL LETTER SAN</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">140</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3fc</span></p>
						</td>
						<td>
							<p><span class="courier-code">1020</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ll</span></p>
						</td>
						<td>
							<p><span class="courier-code">ϼ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK RHO WITH STROKE SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">141</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3fd</span></p>
						</td>
						<td>
							<p><span class="courier-code">1021</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͻ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">142</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3fe</span></p>
						</td>
						<td>
							<p><span class="courier-code">1022</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͼ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-131">
						<td>
							<p><span class="courier-code">143</span></p>
						</td>
						<td>
							<p><span class="courier-code">0x3ff</span></p>
						</td>
						<td>
							<p><span class="courier-code">1023</span></p>
						</td>
						<td>
							<p><span class="courier-code">Lu</span></p>
						</td>
						<td>
							<p><span class="courier-code">Ͽ</span></p>
						</td>
						<td>
							<p><span class="courier-code">GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL</span></p>
						</td>
					</tr>
					<tr>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
						<td>
						</td>
					</tr>
					<tr class="No-Table-Style _idGenTableRowColumn-132">
						<td colspan="6">
							<p><span class="courier-code">A/A: Αύξοντας Αριθμός</span></p>
							<p><span class="courier-code">Hex: Δεκαεξαδικός Κωδικός</span></p>
							<p><span class="courier-code">Dec: Δεκαδικός Κωδικός</span></p>
							<p><span class="courier-code">Κ: Ομάδα</span></p>
							<p><span class="courier-code">Γρ: Χαρακτήρας</span></p>
						</td>
					</tr>
				</tbody>
			</table>
		</figure>
		
		<figure class="lista-kodika">
			<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα Β-1 | Εμφάνιση χαρακτήρων ascii<sup class="superscript CharOverride-1"><span id="footnote-002-backlink"><a href="#footnote-002">92</a></span></sup> και unicode<sup class="superscript CharOverride-1"><span id="footnote-001-backlink"><a href="#footnote-001">93</a></span></sup></figcaption><img src="media/ListaKodika-B-1_fmt.png" alt=""/></figure>
	</section>
	<section role="chapter" id="ch17">
		<h1>ΠΑΡΑΡΤΗΜΑ Γ Μια Σελίδα π</h1>
		<section role="section" id="ch17se1">
			<h1><span role="label">Γ.1</span> Τα πρώτα 3,141 ψηφία του π</h1>
			<p class="no-indent"><span class="courier-code">3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196156794520809514655022523160388193014209376213785595663893778708303906979207734672218256259966150142150306803844773454920260541466592520149744</span></p>
			<p class="no-indent">Για τον υπολογισμό των πρώτων 3,141 ψηφίων του <i>π</i>, χρησιμοποιήθηκε το πρόγραμμα της Λίστας Κώδικα Γ-1.</p>
			
			<figure class="lista-kodika">
				<figcaption><img src="media/icon-1_fmt.png" alt=""/>Λίστα Κώδικα Γ-1 | Υπολογισμός των πρώτων 3,141 ψηφίων του <i>π</i></figcaption><img src="media/ListaKodika-C-1_fmt.png" alt=""/></figure>
			<p class="no-indent">Το πρόγραμμα υλοποιεί την αριθμητική σειρά των Bailey–Borwein–Plouffe<sup class="superscript CharOverride-1"><span id="footnote-000-backlink"><a href="#footnote-000">94</a></span></sup>:</p>
			<p class="no-indent"><img src="media/pg569.png" />￼</p>
			<p class="no-indent">Για την επίτευξη της επιθυμητής ακρίβειας χρησιμοποιήθηκε το module <span class="courier-code">decimal</span>. Στη γραμμή 1, ορίζεται το πλήθος των επαναλήψεων, <span class="courier-code">n</span>, σε 3,141, ενώ στη γραμμή 3 ορίζεται η ακρίβεια των υπολογισμών σε 3,141 ψηφία. Ο υπολογισμός είναι αρκετά γρήγορος και το αποτέλεσμα της εκτέλεσης του κώδικα φαίνεται στην προηγούμενη σελίδα.</p>
		</section>
	</section>
	<section role="chapter" id="ch18">
		<h1>Βιβλιογραφία</h1>
		<p class="bibliography">Hans Petter Langtangen, <i>Python Scripting for Computational Science</i>, Third Edition, Springer, 2008</p>
		<p class="bibliography">James Payne, <i>Beginning Python: Using Python 2.6 and Python 3.1</i>, Wiley Publishing, 2010</p>
		<p class="bibliography">Mark Summerfield, <i>Programming in Python 3 - A Complete Introduction to the Python Language</i>, Second Edition, Pearson, 2010 </p>
		<p class="bibliography">Michael Dawson, <i>Python Programming for the Absolute Beginner</i>, Third Edition, Course Technology, 2010</p>
		<p class="bibliography">Vernon L. Ceder, <i>The Quick Python Book</i>, Second Edition, By Manning Publications, 2010</p>
		<p class="bibliography">Hans Petter Langtangen, <i>A Primer on Scientific Programming with Python</i>, Springer, 2011</p>
		<p class="bibliography">Tony Gaddis, <i>Starting Out With Python</i>, Addison-Wesley, 2012</p>
		<p class="bibliography">Y. Daniel Liang, <i>Introduction To Programming Using Python</i>, Pearson Education, 2013</p>
		<p class="bibliography">David Beazley and Brian K. Jones, <i>Python Cookbook</i>, Third Edition, O’Reilly, 2013</p>
		<p class="bibliography">Mark Lutz, <i>Learning Python</i>, Fifth Edition, O’Reilly, 2013</p>
		<p class="bibliography">Micha Gorelick, Ian Ozsvald, <i>High Performance Python</i>, O’Reilly, 2014</p>
		<p class="bibliography">John Paul Mueller, <i>Beginning Programming with Python For Dummies</i>, Wiley Publishing, Inc., 2014</p>
	</section>
	<section role="chapter" id="ch19">
		<h1>Γλωσσάρι</h1>
		<p class="no-indent"><span class="bold-italics">Ακολουθία – Sequence: </span>Αποτελεί μια από τις μορφές δεδομένων της γλώσσας. Μπορεί να περιέχει δεδομένα κάθε είδους. Οι κύριες ακολουθιακές δομές είναι η Λίστα, η Πλειάδα, η Συμβολοσειρά. Μπορούν να αποτελέσουν ορίσματα για ενσωματωμένες συναρτήσεις της Python, ενώ διαθέτουν κοινά χαρακτηριστικά, όπως η δεικτοδότηση και ο τεμαχισμός.</p>
		<p class="no-indent"><span class="bold-italics">Αλγόριθμος – Algorithm: </span>Είναι ο τρόπος επίλυσης ενός προβλήματος. Πριν γίνει η κωδικοποίηση της λύσης του σε κάποια γλώσσα προγραμματισμού, θα πρέπει να δημιουργηθεί ο αλγόριθμος. Αυτός περιλαμβάνει τη λογική και τα βήματα που θα πρέπει να ακολουθήσει κάποιος για να φτάσει στην επίλυση ενός προβλήματος. Η λέξη προέρχεται από τον Πέρση μαθηματικό al-Ḵwārizmī, Abū Ja‘far Muhammad ibn Mūsa που έζησε τον 8ο αιώνα μ.Χ. Παρουσίασε για πρώτη φορά έναν συστηματικό τρόπο επίλυσης μιας πρωτοβάθμιας και δευτεροβάθμιας εξίσωσης. Δίνοντας έναν ορισμό για τον αλγόριθμο θα λέγαμε ότι είναι: ένας πεπερασμένος αριθμός βημάτων-ενεργειών, που είναι εκτελέσιμα και καθορισμένα αυστηρά και με ρητό τρόπο και εκτελούνται σε πεπερασμένο χρόνο. </p>
		<p class="no-indent"><span class="bold-italics">Αλληλεπιδραστική κατάσταση – Interactive Mode:</span> Χαρακτηρίζει τον τρόπο εργασίας του χρήστη με τον διερμηνευτή της γλώσσας στο περιβάλλον της κονσόλας. Δίνοντας μια εντολή, ο διερμηνευτής ανταποκρίνεται με την εκτέλεσή της και την εμφάνιση του αποτελέσματος ή κάποιου μηνύματος σφάλματος στην οθόνη. Με αυτό τον τρόπο οι διερμηνευόμενες γλώσσες προγραμματισμού μπορούν να εκτελούνται άμεσα, πραγματοποιώντας δοκιμές γρήγορα και αναπτύσσοντας εύκολα τα αρχικά πρωτότυπα προγραμμάτων.</p>
		<p class="no-indent"><span class="bold-italics">Αλυσιδωτή σύγκριση – Chain Comparison:</span> Αφορά τον μηχανισμό με τον οποίο είναι δυνατή η σύγκριση στοιχείων χωρίς τη χρήση του λογικού τελεστή <span class="courier-code">and</span>. Μοιάζει με τον τρόπο που γίνονται οι συγκρίσεις στα μαθηματικά. Αρκεί να δοθούν τα στοιχεία προς σύγκριση (τελεστέοι) και να τοποθετηθούν ανάμεσά τους κατάλληλοι σχεσιακοί τελεστές. Ένα παράδειγμα είναι <span class="courier-code">a&gt;b&lt;c</span>.</p>
		<p class="no-indent"><span class="bold-italics">Αλφαριθμητικό – Alphanumeric, String:</span> Μια από τις βασικές δομές της γλώσσας είναι το αλφαριθμητικό ή συμβολοσειρά ή, απλά, κείμενο. Είναι ένα αντικείμενο ακολουθίας χαρακτήρων, τύπου <span class="courier-code">str</span>. Μπορεί να περιέχει οποιοδήποτε χαρακτήρα Unicode, είναι αμετάβλητο αντικείμενο, δεικτοδοτείται και μπορεί να γίνει κατάτμηση (τεμαχισμός) σ’ αυτό. Ενσωματώνει μια σειρά από μεθόδους και χρησιμοποιείται σε συνδυασμό με άλλες συναρτήσεις της Python. Περικλείεται μέσα σε μονά, διπλά ή τριπλά εισαγωγικά.</p>
		<p class="no-indent"><span class="bold-italics">Αμετάβλητα αντικείμενα – Immutable Objects:</span> Επειδή τα πάντα στην Python είναι αντικείμενα, θα πρέπει να γνωρίζουμε ότι υπάρχουν δυο κατηγορίες αντικειμένων, σύμφωνα με τη δυνατότητά τους να μεταβάλλονται κατά την εκτέλεση ενός προγράμματος. Τα μεταβλητά ή μεταβαλλόμενα και τα αμετάβλητα. Τα αμετάβλητα αντικείμενα είναι αυτά των οποίων η τιμή δεν μπορεί να αλλάξει μετά τη δημιουργία τους. Τέτοια είναι η Πλειάδα, η Συμβολοσειρά, τα Frozenset και τα κλειδιά Λεξικών. </p>
		<p class="no-indent"><span class="bold-italics">Αναγνωριστικό – Identifier:</span> Αφορά διάφορα στοιχεία της γλώσσας που ορίζονται από τον χρήστη και στα οποία δίνεται κάποιο όνομα. Αυτό το όνομα πρέπει να ακολουθεί τους κανόνες ονοματοδοσίας που ορίζει η Python. </p>
		<p class="no-indent"><span class="bold-italics">Αναγωγή τύπων – Type Casting:</span> Πρόκειται για τη διαδικασία που επιτρέπει τη μετατροπή τύπων. Αυτό γίνεται είτε με τη χρήση συναρτήσεων, είτε με αυτόματο τρόπο, όπως στην πραγματοποίηση πράξεων με αριθμούς διαφορετικού τύπου.</p>
		<p class="no-indent"><span class="bold-italics">Αναδρομή – Recursion:</span> Είναι η διαδικασία κατά την οποία ένα τμήμα προγράμματος, όπως μια συνάρτηση στην Python, καλεί τον εαυτό του. Αυτό γίνεται για την εφαρμογή μεθόδων επίλυσης προβλημάτων που ονομάζονται «διαίρει και βασίλευε». Σε κάθε αναδρομική κλήση μιας συνάρτησης, το αρχικό πρόβλημα διασπάται σε μικρότερα τμήματα και ένα από αυτά αποστέλλεται προς επίλυση στην ίδια τη συνάρτηση. Η αναδρομή ολοκληρώνεται ορίζοντας κάποιο κριτήριο, που συνήθως είναι ο έλεγχος για το αν το πρόβλημα δεν μπορεί να διασπαστεί περισσότερο. </p>
		<p class="no-indent"><span class="bold-italics">Αναφορά μνήμης – Memory Reference:</span> Είναι η διεύθυνση της μνήμης όπου παραπέμπει μια μεταβλητή, ή γενικότερα το όνομα ενός αντικειμένου. Σ’ αυτή τη διεύθυνση βρίσκονται αποθηκευμένα τα δεδομένα του αντικειμένου.</p>
		<p class="no-indent"><span class="bold-italics">Αντικείμενο – Object:</span> Είναι το βασικό δομικό στοιχείο στον αντικειμενοστραφή προγραμματισμό. Αλλάζει η θεώρηση του προγράμματος ως ένα σύνολο από οδηγίες-εντολές που χειρίζονται δεδομένα και τοποθετείται στο προσκήνιο μια οντότητα, το αντικείμενο, που ενσωματώνει μέσα του δεδομένα αλλά και κώδικα για τον χειρισμό τους.</p>
		<p class="no-indent"><span class="bold-italics">Αντικείμενο αντιστοίχισης – Mapping Object:</span> Υλοποιείται στη γλώσσα με τη δομή του λεξικού. Κάθε τιμή αντιστοιχεί σε ένα μοναδικό κλειδί. Υποστηρίζει μεθόδους για την ενημέρωση των στοιχείων του, ενώ χρησιμοποιείται και σε περιπτώσεις σύνθετων λογικών δομών.</p>
		<p class="no-indent"><span class="bold-italics">Αντικειμενοστραφής προγραμματισμός – Object-oriented Programming:</span> Αναφέρεται στα Προγραμματιστικά Υποδείγματα που χαρακτηρίζουν μια γλώσσα προγραμματισμού. Είναι το μοντέλο όπου κυρίαρχο στοιχείο του είναι το αντικείμενο, το οποίο χαρακτηρίζεται από τις ιδιότητες της κληρονομικότητας, του πολυμορφισμού και της ενθυλάκωσης.</p>
		<p class="no-indent"><span class="bold-italics">Ανώνυμη συνάρτηση – Anonymous, Lambda Functions:</span> Είναι βασικό στοιχείο του συναρτησιακού μοντέλου προγραμματισμού. Επιτρέπει την κατασκευή μηχανισμών που ενσωματώνονται σε άλλες εντολές ή συναρτήσεις της Python. Έχει τη μορφή συναρτήσεων μιας γραμμής.</p>
		<p class="no-indent"><span class="bold-italics">Άρθρωμα – Module:</span> Είναι αρχεία πηγαίου κώδικα που δημιουργούνται ώστε να χρησιμοποιηθούν από άλλα προγράμματα. Δημιουργούνται όπως τα κανονικά αρχεία εντολών της Python. Ενσωματώνονται σε ένα πρόγραμμα και γίνονται διαθέσιμα σ’ αυτό με την εντολή <span class="courier-code">import</span>.</p>
		<p class="no-indent"><span class="bold-italics">Αρχικοποίηση – Initialization</span>: Κάθε μεταβλητή της Python θα πρέπει να πάρει μια αρχική τιμή πριν χρησιμοποιηθεί σε κάποια έκφραση ή εντολή για πρώτη φορά. Παίρνοντας μια τιμή, δημιουργείται η μεταβλητή και ξεκινά να υπάρχει στον χώρο μνήμης της γλώσσας.</p>
		<p class="no-indent"><span class="bold-italics">Ατέρμων βρόχος – Infinite Loop:</span> Είναι μια δομή επαναληπτική που δεν τελειώνει, δεν τερματίζεται ποτέ. Αν δεν υπάρχει κάποιο κατάλληλο κριτήριο τερματισμού της επαναληπτικής διαδικασίας, το πρόγραμμα θα εγκλωβιστεί εκεί. Είναι μια καλή πρακτική όταν χρησιμοποιείται σε online συστήματα ή σε τεχνικές κατασκευές όπου χρειάζεται συνεχώς το πρόγραμμα να συλλέγει και να επεξεργάζεται στοιχεία.</p>
		<p class="no-indent"><span class="bold-italics">Βασική κλάση – Base Class</span>: Είναι η μορφή κλάσης αντικειμένων που κληρονομεί τα χαρακτηριστικά και τις ιδιότητές της σε άλλες κλάσεις που ονομάζονται παιδιά ή υποκλάσεις.</p>
		<p class="no-indent"><span class="bold-italics">Βιβλιοθήκη – Module:</span> <i>βλ. Άρθρωμα – Module</i></p>
		<p class="no-indent"><span class="bold-italics">Βραχυκύκλωμα – Short Circuit:</span> Είναι ο σύντομος τρόπος της Python να πραγματοποιεί λογικούς ελέγχους. Η αποτίμηση μιας λογικής έκφρασης γίνεται μόνο όταν το αποτέλεσμα δεν είναι ήδη γνωστό. Για παράδειγμα, σε μια έκφραση λογικής σύζευξης όπως η <span class="courier-code">a</span> <span class="courier-code">and b</span>, αν το <span class="courier-code">a</span> είναι ήδη <span class="courier-code">False</span>, τότε ο έλεγχος για το <span class="courier-code">b</span> δεν θα γίνει ποτέ. Αυτό γίνεται γιατί ήδη το αποτέλεσμα της έκφρασης είναι <span class="courier-code">False</span> και αυτό δεν πρόκειται να αλλάξει, οποιαδήποτε τιμή κι αν έχει το <span class="courier-code">b</span>.</p>
		<p class="no-indent"><span class="bold-italics">Βρόχος – Loop:</span> Αποτελεί μια από τις βασικές δομές μιας γλώσσας προγραμματισμού. Υλοποιείται στην Python με τις εντολές <span class="courier-code">for</span> και <span class="courier-code">while</span>. Επιτρέπει την επαναληπτική εκτέλεση εντολών με βάση κάποια κριτήρια. Ο τερματισμός της επαναληπτικής διαδικασίας θα πρέπει να εξασφαλίζεται ώστε το πρόγραμμα να εκτελείται σε πεπερασμένο χρόνο.</p>
		<p class="no-indent"><span class="bold-italics">Γεννήτριες εκφράσεις, συναρτήσεις – Generator Expressions, Functions:</span> Πρόκειται για μηχανισμούς που διαθέτει η Python για την παραγωγή τιμών τη στιγμή που ζητείται αυτό. Υπάρχουν οι γεννήτριες εκφράσεις και συναρτήσεις. Η πρώτη κατηγορία είναι η πιο απλή, μοιάζει με τη διαδικασία της σύνθεσης, γίνεται σε μια γραμμή και περιέχει δομές <span class="courier-code">if</span> και <span class="courier-code">for</span>. Η δεύτερη κατηγορία είναι στην ουσία ειδικές συναρτήσεις που περιέχουν εντολές <span class="courier-code">yield</span>. Μπορούν να χρησιμοποιηθούν ως αυτόνομοι επαναλήπτες ή να ενσωματωθούν σε δομές επανάληψης <span class="courier-code">for</span>.</p>
		<p class="no-indent"><span class="bold-italics">Δείκτης – Index, Pointer:</span> Είναι οι μεταβλητές, εκφράσεις ή συγκεκριμένοι ακέραιοι αριθμοί που χρησιμοποιούνται για την προσπέλαση ενός στοιχείου μέσα σε ένα αντικείμενο ακολουθίας. Τίθενται μέσα σε αγκύλες και ακολουθούν το όνομα του αντικειμένου. Στην έκφραση <span class="courier-code">a[i]&gt;0</span>, το <span class="courier-code">a</span> είναι το αντικείμενο (λίστα, πλειάδα κ.λπ.) και το <span class="courier-code">i</span> είναι ο δείκτης που παραπέμπει σε ένα συγκεκριμένο στοιχείο στην <span class="courier-code">i</span> θέση του αντικειμένου.</p>
		<p class="no-indent"><span class="bold-italics">Δεικτοδότηση – Indexing:</span> Είναι η διαδικασία με την οποία παραχωρείται πρόσβαση σε κάποιο στοιχείο μιας ακολουθίας. Η χρήση ενός δείκτη μέσα σε αγκύλες ορίζει αυτή τη λειτουργία.</p>
		<p class="no-indent"><span class="bold-italics">Δεσμευμένες λέξεις – Reserved Words:</span> Είναι όλες οι λέξεις-ονόματα τα οποία χρησιμοποιούνται στο λεξιλόγιο μιας γλώσσας. Έχουν συγκεκριμένη λειτουργία και δεν πρέπει να χρησιμοποιούνται για την ονομασία αντικειμένων οριζόμενων από τον χρήστη.</p>
		<p class="no-indent"><span class="bold-italics">Δημιουργός – Constructor:</span> Αφορά τη συνάρτηση ή μέθοδο με την οποία δημιουργείται ένα αντικείμενο κάποιου τύπου. Κάθε φορά που καλείται, κατασκευάζει ένα νέο αντικείμενο. </p>
		<p class="no-indent"><span class="bold-italics">Διακόσμηση, διακοσμητές – Decoration, Decorators</span>: Είναι η τεχνική εμπλουτισμού ενός τμήματος κώδικα, είτε αυτό είναι μια συνάρτηση είτε μια κλάση αντικειμένων, με νέες διαφορετικές λειτουργίες από αυτές που διαθέτει ήδη. Αυτό επιτυγχάνεται με τη χρήση κατάλληλων διακοσμητών. Είναι ένας καλός τρόπος επέκτασης των δυνατοτήτων του κώδικα.</p>
		<p class="no-indent"><span class="bold-italics">Διατεταγμένος – Ordered:</span> Κάθε διατεταγμένο αντικείμενο περιέχει στοιχεία που είναι γνωστή και ορισμένη η σειρά τους μέσα σ’ αυτό. Αυτή η σειρά καθορίζεται κατά τη δημιουργία του αντικειμένου ή κατά τη φάση ενημέρωσης του περιεχομένου του.</p>
		<p class="no-indent"><span class="bold-italics">Διαχείριση εξαιρέσεων – Exceptions Handling: </span>Κάθε φορά που ο διερμηνευτής αδυνατεί να εκτελέσει μια εντολή ενός προγράμματος, προκαλείται η εξαίρεση εκτέλεσης. Εμφανίζεται ένα μήνυμα σφάλματος και η εκτέλεση σταματά. Για την αποτροπή διακοπής της εκτέλεσης ενός προγράμματος η Python (όπως και άλλες γλώσσες) διαθέτει μηχανισμό παγίδευσης και ανίχνευσης τέτοιων σφαλμάτων.</p>
		<p class="no-indent"><span class="bold-italics">Διερμηνευτής – Interpreter:</span> Είναι το πρόγραμμα που πραγματοποιεί τον έλεγχο ορθότητας και την εκτέλεση των εντολών ενός προγράμματος σε μια γλώσσα σεναρίων όπως η Python. Εγκαθίσταται με την εγκατάσταση της γλώσσας και είναι διαθέσιμος μέσα από το περιβάλλον της κονσόλας με το σήμα ‘<span class="courier-code">&gt;&gt;&gt;</span>’.</p>
		<p class="no-indent"><span class="bold-italics">Δομές επιλογής – Selection Structures:</span> Μια ακόμη βασική προγραμματιστική δομή, η <span class="courier-code">if</span>, που επιτρέπει την υπό συνθήκη εκτέλεση μιας ή περισσότερων εντολών. Έχει διάφορες μορφές και χρησιμοποιείται όταν πρέπει να ληφθεί μια απόφαση μέσα σε ένα πρόγραμμα. Συνοδεύεται από μια συνθήκη ή λογικό έλεγχο. Οι εντολές που περιέχει μπορεί να είναι οποιοδήποτε στοιχείο της Python.</p>
		<p class="no-indent"><span class="bold-italics">Δυαδικό αρχείο – Binary File:</span> Είναι αρχείο που περιέχει δεδομένα σε δυαδική μορφή. Τέτοια αρχεία είναι τα αρχεία video, ήχου, φωτογραφιών κ.λπ. Για τη διαχείρισή τους η Python προσφέρει μια σειρά από συναρτήσεις και μεθόδους.</p>
		<p class="no-indent"><span class="bold-italics">Δυαδικοί τελεστές – Binary Operators:</span> Είναι ειδικά σύμβολα που χρησιμεύουν για την πραγματοποίηση πράξεων και τον χειρισμό δεδομένων σε επίπεδο bit. </p>
		<p class="no-indent"><span class="bold-italics">Δυαδικός κώδικας – Byte Code:</span> Είναι το αποτέλεσμα της μετάφρασης των εντολών μιας γλώσσας προγραμματισμού σε γλώσσα μηχανής ή σε ενδιάμεσο κώδικα που χειρίζεται μια εικονική μηχανή εκτέλεσης όπως γίνεται σε γλώσσες όπως η Python και η Java. Ο κώδικας αυτής της μορφής παράγεται με το πρόγραμμα μετάφρασης που χρησιμοποιεί η γλώσσα (compiler ή interpreter). </p>
		<p class="no-indent"><span class="bold-italics">Δυναμική – Dynamic:</span> Έχει να κάνει με τον τρόπο με τον οποίο μια γλώσσα προγραμματισμού διαχειρίζεται τα δεδομένα και τις δομές της. Στην Python είναι δυνατή η δυναμική διαχείριση της μνήμης, τόσο στη δημιουργία όσο και στον χειρισμό των αντικειμένων κατά τη διάρκεια εκτέλεσης προγραμμάτων.</p>
		<p class="no-indent"><span class="bold-italics">Ειδικές μέθοδοι – Special Methods: </span>Είναι μέθοδοι κλάσεων που προσθέτουν ειδικά χαρακτηριστικά στα αντικείμενα τους. Κάνουν δυνατή τη σύγκριση, τη δεικτοδότηση, την πραγματοποίηση πράξεων κ.λπ. Το όνομά τους ξεκινάει και τελειώνει με τη διπλή υπογράμμιση ‘<span class="courier-code">__</span>’.</p>
		<p class="no-indent"><span class="bold-italics">Εκσφαλμάτωση ή αποσφαλμάτωση – Debugging:</span> Αφορά τη διαδικασία εύρεσης λαθών στον κώδικα. Σ’ αυτό βοηθούν τα ολοκληρωμένα περιβάλλοντα ανάπτυξης προγραμμάτων που περιέχουν εργαλεία για την εμφάνιση των τιμών των μεταβλητών, τη δημιουργία <i>σημείων διακοπής (breakpoints)</i>, τη βηματική εκτέλεση κ.λπ. </p>
		<p class="no-indent"><span class="bold-italics">Έλεγχος εγκυρότητας – Validity Check: </span>Είναι ο έλεγχος των τιμών που δέχεται το πρόγραμμα από εξωτερικές πηγές. Αποφεύγεται η εισαγωγή μη έγκυρων ή λανθασμένων δεδομένων. Αυτό διασφαλίζει τη σωστή λειτουργία του προγράμματος σε κάθε περίπτωση.</p>
		<p class="no-indent"><span class="bold-italics">Εμβέλεια – Scope: </span>Ορίζει σε ποια σημεία μέσα στον κώδικα είναι προσβάσιμη η τιμή μιας μεταβλητής. </p>
		<p class="no-indent"><span class="bold-italics">Ένθετες ή εμφωλευμένες δομές – Nested Inner Structures: </span>Είναι στοιχεία της γλώσσας που βρίσκονται ενσωματωμένα μέσα σε άλλα (που μπορεί να είναι μέσα σε άλλα κ.ο.κ.). Τα στοιχεία αυτά μπορεί να είναι εντολές επιλογής ή/και επανάληψης, συναρτήσεις ή και δομές δεδομένων όπως λίστες, πλειάδες κ.λπ. </p>
		<p class="no-indent"><span class="bold-italics">Ενθυλάκωση – Encapsulation:</span> Η δυνατότητα απόκρυψης και προστασίας των ιδιωτικών στοιχείων ενός αντικειμένου. </p>
		<p class="no-indent"><span class="bold-italics">Ενσωματωμένα στοιχεία – Built-In Elements: </span>Αφορά στοιχεία της γλώσσας που είναι ενσωματωμένα σ’ αυτήν. Είναι συναρτήσεις, αντικείμενα κλάσεων, βιβλιοθήκες που είναι έτοιμα για χρήση. </p>
		<p class="no-indent"><span class="bold-italics">Εντολές χωρίς εκχώρηση – In-Place Commands:</span> Συνήθως είναι μέθοδοι που χειρίζονται τις ιδιότητες ή αλλάζουν την κατάσταση ενός αντικειμένου. Δεν χρειάζεται να τεθούν ως τμήμα κάποιας εντολής εκχώρησης ή μιας δομής ελέγχου. Συνήθως ακολουθούν το όνομα του αντικειμένου στο οποίο ενεργούν και χωρίζονται από αυτό με τον χαρακτήρα ‘<span class="courier-code">.</span>’.</p>
		<p class="no-indent"><span class="bold-italics">Εξαίρεση εκτέλεσης – Runtime Exception: </span>Είναι σφάλματα που συμβαίνουν κατά την εκτέλεση και οδηγούν στον αιφνίδιο τερματισμό ενός προγράμματος. Τέτοια σφάλματα είναι διαιρέσεις με το μηδέν, μη έγκυρες πράξεις κ.λπ. Τέτοιες περιπτώσεις αντιμετωπίζονται στην Python με τα κατάλληλα εργαλεία που διαθέτει η γλώσσα (βλ. <i>Διαχείριση Εξαιρέσεων - Exceptions Handling</i>).</p>
		<p class="no-indent"><span class="bold-italics">Επαναλήπτης – Iterator: </span>Επιτρέπει την επαναληπτική σάρωση αντικειμένων ακολουθίας ή συλλογών. Ενσωματώνεται σε δομές <span class="courier-code">for</span> με αυτόματο τρόπο, μπορεί να οριστεί και από τον χρήστη, στα δικά του αντικείμενα.</p>
		<p class="no-indent"><span class="bold-italics">Επαναλήπτης με άπειρες τιμές – Infinite Iterator: </span>Επιτρέπει την εφαρμογή επαναληπτικών διαδικασιών πάνω σε αντικείμενα της γλώσσας και δεν τερματίζει ποτέ. </p>
		<p class="no-indent"><span class="bold-italics">Επαναληπτικό αντικείμενο – Iterable: </span>Κάθε αντικείμενο που μπορεί να γίνει η προσπέλαση των στοιχείων του μέσα από επαναληπτικές δομές όπως η <span class="courier-code">for</span>. Από αυτά τα αντικείμενα μπορεί να παραχθεί ένας επαναλήπτης που να μπορεί να τα χειριστεί.</p>
		<p class="no-indent"><span class="bold-italics">Επεκτεταμένο ξεπακετάρισμα – Extended Unpacking: </span>Είναι η διαδικασία κατά την οποία εκχωρούνται στοιχεία από ένα αντικείμενο σε κάποια άλλα. Πραγματοποιείται με τη μορφή μιας εντολής εκχώρησης. Τα στοιχεία που θα λάβουν τιμές βρίσκονται αριστερά από το ‘<span class="courier-code">=</span>’ και μπορεί να είναι λιγότερα από τα στοιχεία που περιλαμβάνει το αντικείμενο στα δεξιά.</p>
		<p class="no-indent"><span class="bold-italics">Ιδιότητα – Attribute: </span>Αφορά τα χαρακτηριστικά ενσωματωμένων ή οριζόμενων από τον χρήστη αντικειμένων. Σε κάθε περίπτωση ορίζεται ο τρόπος πρόσβασης σ’ αυτά.</p>
		<p class="no-indent"><span class="bold-italics">Καθολικό – Global: </span>Αφορά στοιχεία της γλώσσας που η πρόσβαση στις τιμές τους γίνεται από οποιοδήποτε σημείο μέσα στο πρόγραμμα. </p>
		<p class="no-indent"><span class="bold-italics">Κατασκευαστής – Constructor: </span>Βλ. <i>Δημιουργός - Constructor</i></p>
		<p class="no-indent"><span class="bold-italics">Κατάτμηση ή τεμαχισμός – Slicing: </span>Είναι η δυνατότητα τμηματικής προσπέλασης των στοιχείων μιας ακολουθίας. Για τον ορισμό αυτών των τμημάτων χρησιμοποιούνται έως τρεις δείκτες μέσα σε αγκύλες αμέσως μετά το όνομα του αντικειμένου.</p>
		<p class="no-indent"><span class="bold-italics">Κείμενο – String: </span>βλ. <i>Αλφαριθμητικό – Alphanumeric, String</i></p>
		<p class="no-indent"><span class="bold-italics">Κέλυφος – Shell: </span>Αναφέρεται και ως κονσόλα και αφορά τόσο το περιβάλλον του διερμηνευτή της γλώσσας όσο και τη γραμμή εντολών του λειτουργικού συστήματος.</p>
		<p class="no-indent"><span class="bold-italics">Κλάση – Class: </span>Είναι το βασικό δομικό στοιχείο ενός προγράμματος βασισμένου σε αντικείμενα. Αποτελεί τη γενική περιγραφή μιας οντότητας, που θα ξεκινήσει να υπάρχει μέσα στο πρόγραμμα με τη δημιουργία αντίστοιχων αντικειμένων. </p>
		<p class="no-indent"><span class="bold-italics">Κλείσιμο – Closure: </span>Μια από τις λειτουργίες που μπορεί να επιτελέσει μια συνάρτηση είναι το κλείσιμο. Αυτή η διαδικασία επιτρέπει την απομνημόνευση τιμών που παράγονται σε μια συνάρτηση, ακόμη και μετά τον τερματισμό της. Χρησιμοποιείται σε συνδυασμό με τις ένθετες συναρτήσεις.</p>
		<p class="no-indent"><span class="bold-italics">Κληρονομικότητα – Inheritance: </span>Αποτελεί ένα από τα χαρακτηριστικά του αντικειμενοστραφούς προγραμματισμού. Είναι η ιδιότητα μιας κλάσης να κληρονομεί τις ιδιότητες και τις λειτουργίες της σε άλλα αντικείμενα ή άλλες κλάσεις.</p>
		<p class="no-indent"><span class="bold-italics">Κύρια ή βασική κλάση – Base Class: </span>Είναι η κλάση με βάση την οποία θα δημιουργηθούν άλλες υποκλάσεις.</p>
		<p class="no-indent"><span class="bold-italics">Κωδικοσελίδα – Code Page:</span> Είναι το σύνολο των χαρακτήρων που ενσωματώνονται σε μια συλλογή από σύμβολα. Τα ελληνικά, για παράδειγμα, υπάρχουν σε συγκεκριμένες κωδικοσελίδες.</p>
		<p class="no-indent"><span class="bold-italics">Λάθη στον κώδικα – Bugs: </span>Είναι λάθη κυρίως συντακτικά που αφορούν λανθασμένη χρήση των στοιχείων της γλώσσας. Εντοπίζονται κατά τη διαδικασία του ελέγχου και της μετάφρασης που πραγματοποιεί ο διερμηνευτής προτού εκτελέσει τις εντολές του προγράμματος. Μπορεί να αφορούν όμως και μια άλλη κατηγορία σφαλμάτων, τα λογικά λάθη τα οποία εμφανίζονται κατά την εκτέλεση ενός προγράμματος.</p>
		<p class="no-indent"><span class="bold-italics">Λέξη κλειδί – Keyword: </span>Είναι στοιχεία της γλώσσας που χρησιμοποιούνται για συγκεκριμένο σκοπό και λειτουργία και με συγκεκριμένο τρόπο. </p>
		<p class="no-indent"><span class="bold-italics">Λεξικό – Dictionary: </span>Αποτελεί μια από τις βασικές δομές της Python. Είναι μεταβαλλόμενο αντικείμενο, το οποίο αποτελείται από ζεύγη στοιχείων, που ονομάζονται κλειδιά και τιμές. Τα κλειδιά πρέπει να είναι μοναδικά και αμετάβλητα αντικείμενα.</p>
		<p class="no-indent"><span class="bold-italics">Λίστα – List: </span>Ίσως η πιο βασική δομή στην Python. Μοιάζει με τη δομή του πίνακα που χρησιμοποιείται σε άλλες διαδικαστικές γλώσσες. Είναι μεταβλητό αντικείμενο, που σημαίνει ότι μπορεί να αλλάζει, με δυναμικό τρόπο, το μέγεθος και το περιεχόμενό του, κατά την εκτέλεση του προγράμματος. Υποστηρίζει δεικτοδότηση, κατάτμηση, και εμφώλευση άλλων δομών.</p>
		<p class="no-indent"><span class="bold-italics">Λογικές τιμές – Boolean: </span>Είναι υποκλάση των ακέραιων αριθμών. Αφορά τις λογικές τιμές <span class="courier-code">True</span> και <span class="courier-code">False</span> (<span class="courier-code">1</span> και <span class="courier-code">0</span> αντίστοιχα). Χρησιμοποιείται για λογικούς ελέγχους και συνθήκες και προκύπτει ως αποτέλεσμα από τη χρήση σχεσιακών τελεστών.</p>
		<p class="no-indent"><span class="bold-italics">Λογικοί τελεστές – Logical Operators:</span> Είναι οι λέξεις <span class="courier-code">and</span>, <span class="courier-code">or</span> και <span class="courier-code">not</span>, που επιτρέπουν την πραγματοποίηση λογικών πράξεων (σύζευξη, διάζευξη και άρνηση). Χρησιμοποιούνται για τη δημιουργία σύνθετων λογικών εκφράσεων. </p>
		<p class="no-indent"><span class="bold-italics">Μέθοδος – Method: </span>Είναι τμήμα κώδικα που συνοδεύει μια κλάση αντικειμένων και προσδιορίζει τη συμπεριφορά της. Ορίζεται με σκοπό τον χειρισμό των ιδιοτήτων μιας κλάσης. Συνοδεύει κάθε δομή της γλώσσας και είναι απαραίτητη για τον χειρισμό της.</p>
		<p class="no-indent"><span class="bold-italics">Μέθοδος της τελείας – Dot Notation: </span>Αφορά τον τρόπο με τον οποίο παρέχεται πρόσβαση στα στοιχεία (μέθοδοι και ιδιότητες) ενός αντικειμένου ή στα αντικείμενα μιας κλάσης ή μιας βιβλιοθήκης.</p>
		<p class="no-indent"><span class="bold-italics">Μεταβλητά αντικείμενα – Mutable Objects: </span>Είναι τα αντικείμενα των οποίων η δομή και το περιεχόμενο μπορούν και αλλάζουν κατά την εκτέλεση του προγράμματος. Τέτοια αντικείμενα είναι οι λίστες, τα σύνολα και τα λεξικά. </p>
		<p class="no-indent"><span class="bold-italics">Μεταβλητές με αστερίσκο – Starred Variables: </span>Χρησιμοποιούνται για το ξεπακετάρισμα τιμών από σύνθετες δομές. Επίσης τις συναντάμε ως παραμέτρους συναρτήσεων που λαμβάνουν πολλαπλές και άγνωστες σε πλήθος τιμές.</p>
		<p class="no-indent"><span class="bold-italics">Μεταγλωττιστής – Compiler: </span>Το πρόγραμμα που είναι υπεύθυνο για τον έλεγχο συντακτικών σφαλμάτων και τη μεταγλώττιση των εντολών ενός προγράμματος σε γλώσσα μηχανής.</p>
		<p class="no-indent"><span class="bold-italics">Μετατροπή τύπου – Type Casting: </span><i>Βλ. Αναγωγή Τύπων - Type Casting</i></p>
		<p class="no-indent"><span class="bold-italics">Μη διατεταγμένη – Unordered: </span>Μια συλλογή δεδομένων όπου η σειρά των στοιχείων της δεν είναι συγκεκριμένη και καθορισμένη από τον χρήστη.</p>
		<p class="no-indent"><span class="bold-italics">Μη μεταβαλλόμενη ή αμετάβλητη – Immutable: </span>Μια δομή δεδομένων που δεν μπορεί να αλλάξει μορφή και περιεχόμενο αφού δημιουργηθεί. Τέτοιες δομές στην Python είναι η πλειάδα, η συμβολοσειρά και οι αριθμοί.</p>
		<p class="no-indent"><span class="bold-italics">Μονάδα – Module:</span><i> βλ. Άρθρωμα – Module</i></p>
		<p class="no-indent"><span class="bold-italics">Ξεπακετάρισμα – Unpacking: </span>Η διαδικασία εκχώρησης τιμών από μια δομή σε μια σειρά από άλλες δομές. </p>
		<p class="no-indent"><span class="bold-italics">Ολοκληρωμένο περιβάλλον ανάπτυξης λογισμικού – IDE, Integrated Development Environment: </span>Ένα γραφικό περιβάλλον που επιτρέπει τη συγγραφή και την εκτέλεση προγραμμάτων. Συνήθως περιλαμβάνει έναν κειμενογράφο, τον διερμηνευτή ή μεταγλωττιστή και μια σειρά από βοηθητικές λειτουργίες. Τέτοιες λειτουργίες είναι η χρωματική απόδοση κώδικα, η αυτόματη συμπλήρωση λέξεων κλειδιών, η παρακολούθηση αλλαγών των μεταβλητών κ.ά.</p>
		<p class="no-indent"><span class="bold-italics">Ονομαστικές παράμετροι, ορίσματα – Named, Keyword Arguments, Parameters: </span>Είναι παράμετροι που έχουν κάποιο όνομα. Αυτό επιτρέπει τη χρήση τους με βάση το όνομά τους και όχι με βάση τη θέση στην οποία βρίσκονται.</p>
		<p class="no-indent"><span class="bold-italics">Οριζόμενο από τον χρήστη – User-defined: </span>Κάθε στοιχείο σε ένα πρόγραμμα που δημιουργείται από τον προγραμματιστή. Τέτοια στοιχεία είναι οι συναρτήσεις, οι βιβλιοθήκες, οι κλάσεις αντικειμένων κ.λπ.</p>
		<p class="no-indent"><span class="bold-italics">Ορίσματα, παράμετροι κατά θέση – Positional Argument, Parameters: </span>Είναι παράμετροι που ορίζονται με βάση τη θέση τους στη δήλωση μιας συνάρτησης. Η σειρά τους καθορίζει τις τιμές τις οποίες δέχονται.</p>
		<p class="no-indent"><span class="bold-italics">Παιδιά ή υποκλάσεις – Children, Subclasses: </span>Είναι κλάσεις οι οποίες κληρονομούν χαρακτηριστικά από άλλες κλάσεις, τις υπερκλάσεις.</p>
		<p class="no-indent"><span class="bold-italics">Πακέτα – Packages: </span>Είναι συλλογές βιβλιοθηκών κώδικα, οργανωμένες σε ιεραρχικές δομές φακέλων. Είναι διαθέσιμες με την εντολή <span class="courier-code">import</span>.</p>
		<p class="no-indent"><span class="bold-italics">Πακετάρισμα – Packing: </span>Αφορά την εκχώρηση πολλαπλών τιμών σε μια δομή όπως η πλειάδα.</p>
		<p class="no-indent"><span class="bold-italics">Παράμετρος διπλού αστερίσκου – Double Starred**Kwargs Arguments-Parameters: </span>Χρησιμεύει για το πέρασμα, άγνωστων σε πλήθος και είδος, τιμών σε παραμέτρους μιας συνάρτησης. Παίρνει τη μορφή λεξικού.</p>
		<p class="no-indent"><span class="bold-italics">Παράμετρος μονού αστερίσκου – Starred ή *Args Arguments-Parameters: </span>Είναι το πέρασμα πολλαπλών τιμών, άγνωστων σε μέγεθος και είδος, μέσα σε μια συνάρτηση. Παίρνει τη μορφή μιας πλειάδας. </p>
		<p class="no-indent"><span class="bold-italics">Πέρασμα αναφορών αντικειμένων – Pass By Object Reference: </span>Αφορά το πέρασμα τιμών μέσα σε μια συνάρτηση. Δεν αποστέλλεται σε αυτήν μια τιμή ή ένα αντικείμενο, αλλά η αναφορά τους.</p>
		<p class="no-indent"><span class="bold-italics">Πηγαίος κώδικας – Source Code: </span>Είναι το σύνολο των εντολών ενός προγράμματος σε μια γλώσσα προγραμματισμού. Για την εκτέλεσή του απαιτείται η παρουσία και η χρήση ενός διερμηνευτή ή μεταγλωττιστή.</p>
		<p class="no-indent"><span class="bold-italics">Πίνακας κατακερματισμού – Hash Table: </span>Είναι η τεχνική αποθήκευσης και οργάνωσης των δεδομένων με βάση την τιμή τους. Βοηθάει στην πιο αποτελεσματική λειτουργία της αναζήτησης στοιχείων που υπάρχουν μέσα σ’ αυτήν.</p>
		<p class="no-indent"><span class="bold-italics">Πλειάδα – Tuple: </span>Μια δομή της Python, παρόμοια με τη λίστα, για τη διατεταγμένη αποθήκευση στοιχείων διαφορετικού είδους. Είναι αμετάβλητη δομή, δεικτοδοτείται και τα στοιχεία της διατίθενται κατά τμήματα.</p>
		<p class="no-indent"><span class="bold-italics">Πρωτόκολλο επαναλήπτη – Iteration Protocol: </span>Είναι ο μηχανισμός που επιτρέπει την επαναληπτική προσπέλαση τιμών αντικειμένων.</p>
		<p class="no-indent"><span class="bold-italics">Σενάριο – Script: </span>Είναι τα προγράμματα που δημιουργούνται με γλώσσες όπως η Python. Οι εντολές που περιέχουν μπορούν, συνήθως, να τρέξουν άμεσα, μεμονωμένα και ανεξάρτητα από άλλες. </p>
		<p class="no-indent"><span class="bold-italics">Σήμα προτροπής – Command Prompt: </span>Μπορεί να αφορά το σήμα ενός τερματικού του λειτουργικού συστήματος (όπως τα <span class="courier-code">$</span>, <span class="courier-code">c:&gt;</span>) ή της κονσόλας του διερμηνευτή της γλώσσας (‘<span class="courier-code">&gt;&gt;&gt;</span>’). Σε κάθε περίπτωση, το σύστημα αναμένει εντολές από τον χρήστη και τις εκτελεί μόλις πατηθεί το πλήκτρο <img src="media/enter.png" class="enter"/>.</p>
		<p class="no-indent"><span class="bold-italics">Στιγμιότυπο – Instance: </span>Είναι ένα αντικείμενο-αντίγραφο που βασίζεται σε μια κλάση και αποκτά συγκεκριμένη μορφή και ιδιότητες. </p>
		<p class="no-indent"><span class="bold-italics">Συγκριτικοί ή σχεσιακοί τελεστές – Comparison Operators: </span>Πρόκειται για ειδικά σύμβολα (όπως τα &gt;, &lt;, &lt;= κ.λπ.) που χρησιμοποιούνται για την πραγματοποίηση συγκρίσεων ανάμεσα σε ομοειδή δεδομένα. Το αποτέλεσμα που επιστρέφουν είναι μια λογική τιμή <span class="courier-code">True</span>/<span class="courier-code">False</span>. Η λειτουργία των τελεστών αυτών μπορεί να δοθεί και σε αντικείμενα οριζόμενα από τον χρήστη, υλοποιώντας κατάλληλες ειδικές μεθόδους.</p>
		<p class="no-indent"><span class="bold-italics">Συλλογή – Collection:</span> Πρόκειται για αποθηκευμένα δεδομένα σε μια από τις δομές της γλώσσας, όπως το σύνολο. </p>
		<p class="no-indent"><span class="bold-italics">Συνάρτηση – Function: </span>Μια αυτόνομη ενότητα κώδικα, που επιτελεί συγκεκριμένο έργο μέσα σε ένα πρόγραμμα. Η επικοινωνία της με τα υπόλοιπα τμήματα του προγράμματος γίνεται μέσω ειδικών μεταβλητών, που ονομάζονται παράμετροι. Μπορεί να πάρει διάφορες μορφές, όπως αυτή της γεννήτριας, ή να εκτελεί ειδικές εργασίες όπως το «κλείσιμο».</p>
		<p class="no-indent"><span class="bold-italics">Σύνθεση λίστας – List Comprehension: </span>Αφορά τη διαδικασία δημιουργίας νέας λίστας, σε μόλις μια γραμμή κώδικα. Ενσωματώνει μια ή περισσότερες δομές επανάληψης ή επιλογής και χρησιμοποιεί συναρτήσεις για το φιλτράρισμα ή την επεξεργασία των δεδομένων.</p>
		<p class="no-indent"><span class="bold-italics">Σύνολο – Set: </span>Είναι μια από τις ενσωματωμένες δομές της Python. Αποτελείται από μοναδικά στοιχεία αμετάβλητων τύπων. Είναι ένα μεταβλητό αντικείμενο και περιέχει μη διατεταγμένα στοιχεία.</p>
		<p class="no-indent"><span class="bold-italics">Συντακτικά σφάλματα – Syntax Errors: </span>Είναι μια κατηγορία σφαλμάτων που οφείλονται σε λανθασμένη σύνταξη των εντολών της γλώσσας ή τη μη έγκυρη χρήση τους.</p>
		<p class="no-indent"><span class="bold-italics">Σφάλμα χρόνου εκτέλεσης – Run-time Error: </span>Είναι σφάλματα τα οποία προκύπτουν κατά την εκτέλεση του προγράμματος. </p>
		<p class="no-indent"><span class="bold-italics">Τεκμηρίωση – Docstring: </span>Μια καλή πρακτική, κατά τη συγγραφή προγραμμάτων, είναι η δημιουργία σχολίων για την περιγραφή της λειτουργίας του κώδικα. </p>
		<p class="no-indent"><span class="bold-italics">Τελεστέοι – Operands: </span>Είναι στοιχεία της γλώσσας (μεταβλητές, εκφράσεις κ.λπ.) που συνοδεύουν (από δεξιά και αριστερά) έναν τελεστή.</p>
		<p class="no-indent"><span class="bold-italics">Τελεστές – Operators: </span>Είναι ειδικά σύμβολα ή λέξεις που πραγματοποιούν ειδικές λειτουργίες ανάμεσα σε στοιχεία ενός προγράμματος. Τέτοιες λειτουργίες είναι οι αριθμητικές πράξεις, οι λογικοί έλεγχοι, οι συγκρίσεις κ.ά.</p>
		<p class="no-indent"><span class="bold-italics">Τελικός χρήστης – End User: </span>Συνήθως αφορά αυτόν ή αυτήν που θα τρέχει το πρόγραμμα που έχουμε κατασκευάσει. </p>
		<p class="no-indent"><span class="bold-italics">Τερματικό – Terminal: </span>Αναφέρεται στο περιβάλλον εντολών του λειτουργικού συστήματος ή του διερμηνευτή. </p>
		<p class="no-indent"><span class="bold-italics">Τμήμα κώδικα – Code Block:</span> Μια εντολή που τελειώνει με το σύμβολο ‘<span class="courier-code">:</span>’, σηματοδοτεί τη δημιουργία ενός τμήματος εντολών. Οι εντολές που βρίσκονται στο ίδιο τμήμα εντολών έχουν όλες τους την ίδια εσοχή από τα αριστερά.</p>
		<p class="no-indent"><span class="bold-italics">Τμήμα λίστας – Slice: </span>Αφορά την κατάτμηση μιας λίστας, πλειάδας ή συμβολοσειράς. Αυτή η λειτουργία γίνεται με κατάλληλη χρήση ενός έως και τριών δεικτών μέσα σε αγκύλες.</p>
		<p class="no-indent"><span class="bold-italics">Τοπική εμβέλεια – Local Scope:</span> Είναι ο χώρος όπου η τιμή μιας τοπικής μεταβλητής είναι διαθέσιμη σε άλλα στοιχεία του κώδικα. Συνήθως έχει να κάνει με μεταβλητές που δημιουργούνται μέσα σε κάποια συνάρτηση.</p>
		<p class="no-indent"><span class="bold-italics">Τοπικός – Local: </span>Κάθε στοιχείο της γλώσσας θεωρείται τοπικό όταν δημιουργείται και υπάρχει μέσα σε ένα τμήμα προγράμματος και έχει τοπική εμβέλεια.</p>
		<p class="no-indent"><span class="bold-italics">Τύπος «μη αριθμού» – Not A Number (ΝΑΝ): </span>Είναι μια τιμή αριθμητικού τύπου δεδομένων που αντιπροσωπεύει τιμές που δεν ορίζονται ή που δεν έχουν φυσική αναπαράσταση. Δίνοντας για παράδειγμα την εντολή <span class="courier-code">float(&apos;inf&apos;)/float(&apos;-inf&apos;)</span>, που εκφράζει τη διαίρεση απείρου προς άπειρο, προκύπτει ως αποτέλεσμα μια τιμή <span class="courier-code">nan</span>.</p>
		<p class="no-indent"><span class="bold-italics">Υπέρβαση – Override: </span>Αναφέρεται στη δημιουργία μεθόδων υποκλάσεων που αλλάζουν τη λειτουργικότητα μεθόδων κάποιας υπερκλάσης.</p>
		<p class="no-indent"><span class="bold-italics">Υπερκλάση – Super Class: </span>Αφορά την κλάση η οποία κληρονομεί τα χαρακτηριστικά της σε άλλες κλάσεις, που ονομάζονται υποκλάσεις.</p>
		<p class="no-indent"><span class="bold-italics">Υπερφόρτωση τελεστών – Operator Overloading: </span>Είναι η αλλαγή του τρόπου λειτουργίας ενός τελεστή όταν αυτός χρησιμοποιείται για διαφορετικό είδος δεδομένων. </p>
		<p class="no-indent"><span class="bold-italics">Υποκλάση – Subclass: </span>Είναι μια κλάση που κληρονομεί τα χαρακτηριστικά της από μια άλλη.</p>
		<p class="no-indent"><span class="bold-italics">Χαρακτήρες διαφυγής – Escape Characters: </span>Είναι ειδικοί χαρακτήρες που έχουν συγκεκριμένη λειτουργία. Τέτοιοι χαρακτήρες χρησιμεύουν για την αλλαγή γραμμής ‘<span class="courier-code">\n</span>’, για τον ορισμό διαστήματος με τη χρήση του πλήκτρου <img class="tab" src="media/tab.png"/> ‘<span class="courier-code">\t</span>’ κ.ά.</p>
		<p class="no-indent"><span class="bold-italics">Χώρος ονομάτων – Namespace: </span>Είναι τμήματα του χώρου μνήμης, που διαχειρίζεται ο διερμηνευτής της γλώσσας και αποθηκεύει αντικείμενα που έχουν διαφορετική εμβέλεια.</p>
	</section>
	<section role="chapter" id="ch20">
		<h1>Ευρετήριο όρων</h1>
		<section role="section" id="ch20se01">
		<h1>ΞΕΝΟΓΛΩΣΣΟΙ ΟΡΟΙ</h1>
		<p class="bold">A</p>
		<p>ASCII 268</p>
		<p><span class="courier-code">assert</span></p>
		<p><span class="courier-code">AssertionError</span></p>
		<p class="bold">B</p>
		<p>Bit</p>
		<p>Boolean</p>
		<p><span class="courier-code">break</span></p>
		<p><span class="courier-code">bytearray</span></p>
		<p><span class="courier-code">bytes</span></p>
		<p class="bold">C</p>
		<p><span class="courier-code">coding</span></p>
		<p><span class="courier-code">continue</span></p>
		<p class="bold">D</p>
		<p><span class="courier-code">decimal</span></p>
		<p><span class="courier-code">deep</span> <span class="courier-code">copy</span></p>
		<p><span class="courier-code">difference</span></p>
		<p><span class="courier-code">division</span> <span class="courier-code">by</span> <span class="courier-code">zero</span></p>
		<p class="bold">E</p>
		<p>Eastern egg</p>
		<p><span class="courier-code">else</span></p>
		<p><span class="courier-code">enumerate</span></p>
		<p class="bold">F</p>
		<p><span class="courier-code">finally</span></p>
		<p><span class="courier-code">for</span></p>
		<p><span class="courier-code">fractions</span></p>
		<p class="bold">G</p>
		<p>Getters-setters</p>
		<p class="bold">H</p>
		<p><span class="courier-code">hash</span></p>
		<p class="bold">I</p>
		<p><span class="courier-code">import</span></p>
		<p><span class="courier-code">input</span></p>
		<p class="bold">L</p>
		<p><span class="courier-code">lambda</span></p>
		<p><span class="courier-code">load</span></p>
		<p class="bold">M</p>
		<p><span class="courier-code">map</span></p>
		<p>Mersenne-Twister</p>
		<p>Modules</p>
		<p>Multi-Paradigm</p>
		<p class="bold">N</p>
		<p><span class="courier-code">NoneType</span></p>
		<p class="bold">P</p>
		<p><span class="courier-code">pass</span></p>
		<p>Peps – Python Enhancements Proposals</p>
		<p><span class="courier-code">pickle</span></p>
		<p><span class="courier-code">pip</span></p>
		<p>Prototyping</p>
		<p class="bold">R</p>
		<p><span class="courier-code">random</span></p>
		<p><span class="courier-code">range</span></p>
		<p><span class="courier-code">reverse</span></p>
		<p><span class="courier-code">reversed</span></p>
		<p class="bold">S</p>
		<p><span class="courier-code">self</span></p>
		<p><span class="courier-code">sort</span></p>
		<p><span class="courier-code">sorted</span></p>
		<p><span class="courier-code">str</span></p>
		<p><span class="courier-code">string</span></p>
		<p><span class="courier-code">symmetric</span> <span class="courier-code">difference</span></p>
		<p><span class="courier-code">sys</span></p>
		<p class="bold">T</p>
		<p>Ternary if</p>
		<p><span class="courier-code">timeit</span></p>
		<p><span class="courier-code">try</span></p>
		<p class="bold">U</p>
		<p>Unicode</p>
		<p>UTF</p>
		<p class="bold">W</p>
		<p><span class="courier-code">while</span></p>
		<p class="bold">Z</p>
		<p><span class="courier-code">Zen</span> <span class="courier-code">of</span> <span class="courier-code">Python</span></p>
		<p><span class="courier-code">zip</span></p>
		</section>
	   <section role="section" id="ch20se02">
		<h1>ΕΛΛΗΝΙΚΟΙ ΟΡΟΙ</h1>
		<p class="bold">Α</p>
		<p>Άδειασμα λίστας </p>
		<p>Ακέραια διαίρεση  </p>
		<p>Ακέραιοι αριθμοί  </p>
		<p>Ακολουθία χαρακτήρων   </p>
		<p>Ακρίβεια αριθμητικών υπολογισμών </p>
		<p>Αλγόριθμοι (algorithms)         </p>
		<p>Αλγόριθμος στρογγυλοποίησης του τραπεζίτη (banker’s rounding) </p>
		<p>Αλλαγή γραμμής   </p>
		<p>Αλληλεπιδραστικό περιβάλλον (interactive) </p>
		<p>Αλυσίδωση (chaining) </p>
		<p>Αλυσιδωτή σύγκριση (chain comparison)  </p>
		<p>Αλφαριθμητική τιμή (string)  </p>
		<p>Αμετάβλητο (immutable)      </p>
		<p>Αναγνωριστικό (identifier)   </p>
		<p>Ανάγνωση αρχείου </p>
		<p>Αναγωγή τύπων (type casting)  </p>
		<p>Αναδρομή (recursion)      </p>
		<p>Αναδρομική κλήση (recursive function call)       </p>
		<p>Αναφορά   </p>
		<p>Άνοιγμα αρχείου </p>
		<p>Αντιγραφή λίστας </p>
		<p>Αντικείμενο (object)         </p>
		<p>Αντικείμενο αντιστοίχισης (mapping) </p>
		<p>Αντικειμενοστραφές μοντέλο (Object-oriented paradigm) </p>
		<p>Αντικειμενοστραφής προγραμματισμός (Object-oriented Programming)    </p>
		<p>Αντικείμενο τύπου αρχείου (file object)   </p>
		<p>Aντικείμενο τύπου λίστας (list object) </p>
		<p>Αντιστροφή λίστας </p>
		<p>Ανώνυμη συνάρτηση     </p>
		<p>Απλή δομή επιλογής </p>
		<p>Αριθμητικές πράξεις  </p>
		<p>Αριθμητικοί τελεστές  </p>
		<p>Αριθμοί κινητής υποδιαστολής (floating point)  </p>
		<p>Αρχεία   </p>
		<p>Αρχεία csv </p>
		<p>Αρχείο κειμένου (text file)   -</p>
		<p>Αρχικές τιμές (default values)    </p>
		<p>Αρχικοποίηση (initialization)     </p>
		<p>Αστερίσκος ‘*’    </p>
		<p>Ατέρμων βρόχος (infinite loop)    </p>
		<p>Αφαιρετική ικανότητα / αφαιρετικότητα (abstraction)  </p>
		<p class="bold">Β</p>
		<p>«Βαθιά» αντιγραφή (deep copy) </p>
		<p>Βάσει των αναφορών (pass by reference) </p>
		<p>Βάσει των τιμών (pass by value) </p>
		<p>Βιβλιοθήκες ή αρθρώματα       </p>
		<p>Βραχυκύκλωμα (short circuit)   </p>
		<p>Βρόχος (loop)  </p>
		<p class="bold">Γ</p>
		<p>Γεννήτρια ψευδοτυχαίων αριθμών (pseudorandom number generator – PRNG) </p>
		<p>Γεννήτριες (generators)       </p>
		<p>Γεννήτριες εκφράσεις  </p>
		<p>Γλώσσα μηχανής  </p>
		<p>Γραμμή εντολών (command line)     </p>
		<p class="bold">Δ</p>
		<p>Δείκτης (pointer)       </p>
		<p>Δεικτοδότηση (indexing)       </p>
		<p>Δεκαδική αναπαράσταση  </p>
		<p>Δεκαεξαδική μορφή  </p>
		<p>Δημιουργία λεξικού </p>
		<p>Δημόσια χαρακτηριστικά </p>
		<p>Διαγραφή λίστας </p>
		<p>Διαδικαστικός προγραμματισμός (Procedural Programming)   </p>
		<p>Διαίρεση πατώματος (floor division)  </p>
		<p>Διακόσμηση (decoration)  </p>
		<p>Διακοσμητές (decorators)   </p>
		<p>Διάκριση μεταξύ πεζών και κεφαλαίων (case sensitivity) </p>
		<p>Διατήρηση – συντήρηση </p>
		<p>Διαφορά (difference) </p>
		<p>Διαχείριση βιβλιοθηκών  </p>
		<p>Διαχείριση εξαιρέσεων  </p>
		<p>Διαχειριστής περιεχομένου (context manager)  </p>
		<p>Διένεξη ή σύγκρουση (collision) </p>
		<p>Διερμηνευτής    </p>
		<p>Διπλά εισαγωγικά   </p>
		<p>Διπλή υπογράμμιση (double underscore)   </p>
		<p>Διπλός αστερίσκος ‘**’  </p>
		<p>Δομή επιλογής <span class="courier-code">if</span> </p>
		<p>Δομημένος προγραμματισμός (Structured Programming) </p>
		<p>Δομές επανάληψης  </p>
		<p>Δομές επιλογής (selection structures)  </p>
		<p>Δυαδική αναπαράσταση     </p>
		<p>Δυαδικό αρχείο (binary file)  -</p>
		<p>Δυαδικό σύστημα αρίθμησης  </p>
		<p>Δυαδικοί τελεστές (bitwise operators)  </p>
		<p>Δυαδικός κώδικας (binary code)   </p>
		<p>Δυναμικός  </p>
		<p class="bold">Ε</p>
		<p>Εγγραφή (record) </p>
		<p>Εγγραφή σε αρχείο </p>
		<p>Εγκατάσταση (installation – setup)   </p>
		<p>Είδη κειμένου  </p>
		<p>Ειδικές μέθοδοι     </p>
		<p>Εικονικό περιβάλλον (virtual environment) </p>
		<p>Εισαγωγικά (quotes)  </p>
		<p>Εκσφαλμάτωση ή αποσφαλμάτωση (debugging)  </p>
		<p>Εκτελέσιμο αρχείο (executable file)   </p>
		<p>Έλεγχος εγκυρότητας (validity check)   </p>
		<p>Εμβέλεια (scope)  </p>
		<p>Εμφωλευμένες επαναληπτικές δομές </p>
		<p>Εμφωλευμένες <span class="courier-code">if</span> (nested <span class="courier-code">if</span>) </p>
		<p>Εναλλακτική εκχώρηση </p>
		<p>Ενημέρωση συνόλων  </p>
		<p>Ένθετες συναρτήσεις (inner functions)    </p>
		<p>Ενθυλάκωση (encapsulation)  </p>
		<p>Ενσωματωμένες βιβλιοθήκες    </p>
		<p>Ενσωματωμένες συναρτήσεις    </p>
		<p>Εντολές <span class="courier-code">if</span> μιας γραμμής  </p>
		<p>Εντολές χωρίς εκχώρηση (in-place)   </p>
		<p>Ένωση (union)  </p>
		<p>Εξαίρεση (exception)   </p>
		<p>Εξωτερικές βιβλιοθήκες  </p>
		<p>Επαναλήπτης (iterator)      </p>
		<p>Επαναληπτικό αντικείμενο (iterable)    </p>
		<p>Επεκτάσεις κώδικα (extensions οf code) </p>
		<p>Επέκταση (extend) </p>
		<p>Επεκτάσιμη (extendable) </p>
		<p>Επικεφαλίδα (header)   </p>
		<p>Εσωτερικές συναρτήσεις  </p>
		<p class="bold">Ι</p>
		<p>Ιδιότητες (attributes – properties)       </p>
		<p>Ιδιωτικά χαρακτηριστικά  </p>
		<p>Ίδρυμα της Python </p>
		<p>Ιεραρχία των τελεστών  </p>
		<p>Ινστιτούτο Ηλεκτρονικών &amp; Ηλεκτρολόγων Μηχανικών (Institute of Electrical and Electronics Engineering) </p>
		<p class="bold">Κ</p>
		<p>Καθολικές μεταβλητές (global variables)   </p>
		<p>Καθολικό επίπεδο (module scope) </p>
		<p>Κατάλογοι   </p>
		<p>Καταμέτρηση τιμών </p>
		<p>Κατασκευαστής (constructor)   </p>
		<p>Κατασκευή (construction)  </p>
		<p>Κατάτμηση (slicing)    </p>
		<p>Κατηγοριοποίηση ειδών (classification)  </p>
		<p>Κέλυφος (shell)     </p>
		<p>Κενό σύνολο  </p>
		<p>Κλάση (class)      </p>
		<p>Κλειδί  </p>
		<p>«Κλειδωμένο» σύνολο (frozenset) </p>
		<p>Κλείσιμο (closure)   </p>
		<p>Κλείσιμο αρχείου </p>
		<p>Κληρονομικότητα (inheritance)  </p>
		<p>Κονσόλα IPython   </p>
		<p>Κυκλικές αναφορές </p>
		<p>Κύριες ή βασικές κλάσεις (base classes)  </p>
		<p>Κωδικοί στοίχισης </p>
		<p>Κωδικοποίηση   </p>
		<p>Κωδικό σημείο (code point) </p>
		<p class="bold">Λ</p>
		<p>Λεκτικό <span class="courier-code">pass</span>   </p>
		<p>Λέξη κλειδί  </p>
		<p>Λεξικό (dictionary)      </p>
		<p>Λεξικογραφική σύγκριση (lexicographical)   </p>
		<p>Λίστες     </p>
		<p>Λογικές τιμές   </p>
		<p>Λογικοί τελεστές (logical operators)  </p>
		<p>Λογικός τύπος </p>
		<p class="bold">Μ</p>
		<p>Μέγεθος − μήκος λίστας </p>
		<p>Μέθοδοι (methods) </p>
		<p>Μέθοδοι κλάσης </p>
		<p>Μέθοδος (ή τρόπος) της τελείας (dot notation)  </p>
		<p>Μεικτοί υπολογισμοί (mixed operations)  </p>
		<p>Μεταβαλλόμενο αντικείμενο (mutable object)    </p>
		<p>Μεταβλητή    </p>
		<p>Μετατροπές δομών <span class="courier-code">if</span> </p>
		<p>Μετατροπές τύπων  </p>
		<p>Μη κατακερματιζόμενο (unhashable) </p>
		<p>Μήνυμα σφάλματος </p>
		<p>Μη σύνθετη εντολή (non-compound) </p>
		<p>Μιγαδικός αριθμός   </p>
		<p>Μονά εισαγωγικά   </p>
		<p>Μονάδα κώδικα  </p>
		<p>Μοναδιαίοι τελεστές (unary)  </p>
		<p>Μοναδικό κλειδί (hash key)  </p>
		<p>Μορφές αριθμών  </p>
		<p>Μορφοποίηση εμφάνισης </p>
		<p>Μορφοποίηση με format </p>
		<p>Μορφοποίηση υπολοίπου </p>
		<p>Μπλοκ εντολών   </p>
		<p class="bold">Ξ</p>
		<p>Ξένα μεταξύ τους σύνολα </p>
		<p>Ξεπακετάρισμα (unpacking)   </p>
		<p class="bold">Ο</p>
		<p>Όνομα (name – label)     </p>
		<p>Ονομασία (ή ονοματοδοσία)    </p>
		<p>Ονομαστικές παράμετροι </p>
		<p>Ορίσματα   </p>
		<p>Όψη λεξικού (dictionary view) </p>
		<p class="bold">Π</p>
		<p>Πακέτα (packages)   </p>
		<p>Πακετάρισμα (packing)   </p>
		<p>Πακετάρισμα παραμέτρων </p>
		<p>Παραδοχές (assertions)  </p>
		<p>Παράμετροι (parameters)     </p>
		<p>Παράμετροι θέσης  </p>
		<p>Παράμετροι <span class="courier-code">open</span> </p>
		<p>Παραμόρφωση ονόματος (name mangling) -</p>
		<p>Πεδία (fields) </p>
		<p>Πέρασμα αντικειμένων (pass by object) </p>
		<p>Πηγαίος κώδικας     </p>
		<p>Πίνακας (array)  </p>
		<p>Πίνακας αληθείας (truth table) </p>
		<p>Πίνακας κατακερματισμού (hash table)   </p>
		<p>Πλειάδα (tuple)  </p>
		<p>Πλειάδα με όνομα (named tuple) </p>
		<p>Πολλαπλά προγραμματιστικά υποδείγματα (multi-programming paradigm)   </p>
		<p>Πολλαπλή δομή επιλογής </p>
		<p>Πολλαπλή κληρονομικότητα  </p>
		<p>Πολυεπίπεδη κληρονομικότητα </p>
		<p>Πολυμορφισμός    </p>
		<p>Πραγματική διαίρεση (true division)  </p>
		<p>Πραγματικοί αριθμοί </p>
		<p>Πράξεις συνόλων  </p>
		<p>Προβλήματα ακρίβειας  </p>
		<p>Προγραμματιστικά υποδείγματα </p>
		<p>Προσομοίωση Monte Carlo </p>
		<p>Προσπέλαση λίστας </p>
		<p>Προσπέλαση string </p>
		<p>Προστακτικός προγραμματισμός (Imperative Programming) </p>
		<p>Προτεραιότητα τελεστών  </p>
		<p>Πρότυπα της γλώσσας </p>
		<p>Πρωτόκολλο επαναλήπτη (iteration protocol)  </p>
		<p>Πρώτος αριθμός (prime number) </p>
		<p class="bold">Ρ</p>
		<p>Ρολόι του συστήματος (system clock) </p>
		<p class="bold">Σ</p>
		<p>Σενάρια (scripts)   </p>
		<p>Σήμα προτροπής (command prompt)    </p>
		<p>Σημαίες μορφοποίησης </p>
		<p>Στατικές μέθοδοι  </p>
		<p>Στατική δομή </p>
		<p>Στιγμιότυπο (instance)   </p>
		<p>Στοίβα (stack)  </p>
		<p>Στρογγυλοποίηση προς τον πλησιέστερο άρτιο (half round even)    </p>
		<p>Συγκρίσεις     </p>
		<p>Συγκριτικοί ή σχεσιακοί τελεστές (comparison operators)     </p>
		<p>Συλλογή (collection)  </p>
		<p>Συμβολοσειρές  </p>
		<p>Συμμετρική διαφορά (symmetric difference)  </p>
		<p>Συνάρτηση (function)     </p>
		<p>Συνάρτηση κατακερματισμού (hash function) </p>
		<p>Συνάρτηση <span class="courier-code">main</span>    </p>
		<p>Συνάρτηση πρώτης ή υψηλής τάξης (high-order function) </p>
		<p>Συναρτησιακός προγραμματισμός (Functional Programming) </p>
		<p>Σύνδεση (link)  </p>
		<p>Συνεδρία (session)  </p>
		<p>Σύνθεση λεξικού </p>
		<p>Σύνθεση λίστας (list comprehension)     </p>
		<p>Σύνθεση συνόλων </p>
		<p>Σύνθετη δομή επιλογής </p>
		<p>Σύνθετοι τελεστές εκχώρησης  </p>
		<p>Σύνολο (set)    </p>
		<p>Συντάκτης (editor)  </p>
		<p>Συντακτικά σφάλματα (syntax errors)  </p>
		<p>Σύστημα συλλογής απορριμμάτων (garbage collector) </p>
		<p>Σφάλμα χρόνου εκτέλεσης    </p>
		<p>Σχόλια </p>
		<p class="bold">Τ</p>
		<p>Ταξινόμηση λίστας  </p>
		<p>Ταξινόμηση με συγχώνευση (timsort)  </p>
		<p>Τεκμηρίωση (documentation, docstring)       </p>
		<p>Τελεστές (οperators)       </p>
		<p>Τελεστές σύγκρισης συνόλων  </p>
		<p>Τελεστές ταυτότητας (<span class="courier-code">is – is not</span>)   </p>
		<p>Τελεστές υποσυνόλων (<span class="courier-code">in – not in</span>) </p>
		<p>Τελεστής <span class="courier-code">and</span> </p>
		<p>Τελεστής εκχώρησης   </p>
		<p>Τελεστής <span class="courier-code">in</span>    </p>
		<p>Τελεστής <span class="courier-code">not</span> </p>
		<p>Τελεστής <span class="courier-code">or</span> </p>
		<p>Τερματικό (terminal)    </p>
		<p>Τιμές χωρισμένες με κόμμα (Comma Separated Values) </p>
		<p>Τιμή <span class="courier-code">None</span>  </p>
		<p>Τμήμα κώδικα (block code)   </p>
		<p>Τμηματικός προγραμματισμός (modular programming)  </p>
		<p>Τομή (intersection)    </p>
		<p>Τοπικός χώρος ονομάτων    </p>
		<p>Τριπλά εισαγωγικά  </p>
		<p>Τύποι δεδομένων     </p>
		<p class="bold">Υ</p>
		<p>Υβριδικός αλγόριθμος  </p>
		<p>Υλοποιήσεις (implementations)  </p>
		<p>Υπέρβαση (override)  </p>
		<p>Υπερκλάση (superclass) </p>
		<p>Υπερσύνολo (superset) </p>
		<p>Υπερφόρτωση τελεστών (operator overloading)     </p>
		<p>Υπερχείλιση της στοίβας (stack overflow) </p>
		<p>Υπογράμμιση (underscore) </p>
		<p>Υποκλάση (subclass)    </p>
		<p>Υποσύνολο (subset) </p>
		<p>Υψηλού επιπέδου </p>
		<p class="bold">Φ</p>
		<p>Φόρτωση (load)   </p>
		<p class="bold">Χ</p>
		<p>Χαρακτήρες διαφυγής (escape characters)    </p>
		<p>Χαρακτήρες μορφοποίησης </p>
		<p>Χώρος ονομάτων (namespace)     </p>
		<p class="bold">Ψ</p>
		<p>Ψευδώνυμο  </p>
		</section>
	</section>
	<section role="notes" data-restrict="bookplayer microsite">
			<h1>Υποσημειώσεις</h1>
			<aside role="footnote" id="footnote-093">
				<p class="first"><a href="#footnote-093-backlink">1</a>. <a rel="external" href="https://docs.python.org/3/faq/general.html#why-was-python-created-in-the-first-place">https://docs.python.org/3/faq/general.html#why-was-python-created-in-the-first-place</a></p>
			</aside>
			<aside role="footnote" id="footnote-092">
				<p class="first"><a href="#footnote-092-backlink">2</a>. <a rel="external" href="https://www.python.org/psf-landing/">https://www.python.org/psf-landing/</a></p>
			</aside>
			<aside role="footnote" id="footnote-091">
				<p class="first"><a href="#footnote-091-backlink">3</a>. CPython, περισσότερα στοιχεία για τις διαφορετικές υλοποιήσεις της γλώσσας δίνονται στη συνέχεια.</p>
			</aside>
			<aside role="footnote" id="footnote-090">
				<p class="first"><a href="#footnote-090-backlink">4</a>. <a rel="external" href="https://opensource.org/licenses/Python-2.0">https://opensource.org/licenses/Python-2.0</a></p>
			</aside>
			<aside role="footnote" id="footnote-089">
				<p class="first"><a href="#footnote-089-backlink">5</a>. Ένα IDE, όπως το περιβάλλον Spyder που περιγράφεται αμέσως μετά, προσφέρει έναν χώρο για τη συγγραφή προγραμμάτων, όπου ενσωματώνεται ένας <i>συντάκτης (</i><i>editor)</i> για τη συγγραφή των εντολών αλλά και ο διερμηνευτής για την εκτέλεσή τους. Παρέχει συνήθως διάφορα εργαλεία και βοηθητικές λειτουργίες. Οι λειτουργίες αυτές περιλαμβάνουν τη χρωματική απόδοση του κώδικα, την αρίθμηση των εντολών-γραμμών του προγράμματος, τη βηματική εκτέλεση, την παροχή βοήθειας για τη σύνταξη των στοιχείων της γλώσσας, την αυτόματη συμπλήρωση εντολών, την παρακολούθηση των τιμών των στοιχείων της γλώσσας κ.λπ.</p>
			</aside>
			<aside role="footnote" id="footnote-088">
				<p class="first"><a href="#footnote-088-backlink">6</a>. Η γραμμή εντολών είναι γνωστή και ως <i>τερματικό (terminal)</i> ή <i>κέλυφος (shell)</i>, ανάλογα με το <i>λειτουργικό σύστημα (Operating </i><i>System)</i> που χρησιμοποιείται.</p>
			</aside>
			<aside role="footnote" id="footnote-087">
				<p class="first"><a href="#footnote-087-backlink">7</a>. <a rel="external" href="https://docs.python.org/3/tutorial/modules.html#compiled-python-files">https://docs.python.org/3/tutorial/modules.html#compiled-python-files</a></p>
			</aside>
			<aside role="footnote" id="footnote-086">
				<p class="first"><a href="#footnote-086-backlink">8</a>. Κάθε υλοποίηση (βλ. επόμενη παράγραφο) της γλώσσας χρησιμοποιεί διαφορετικό τρόπο παραγωγής δυαδικού κώδικα. Τα συγκεκριμένα αρχεία χρησιμοποιούνται στην έκδοση CPython που χρησιμοποιείται στο βιβλίο. Αντίθετα, η Jython, για παράδειγμα, παράγει κώδικα που τρέχει με την <i>εικονική μηχανή της Java (</i><i>JVM, Java Virtual Machine)</i>.</p>
			</aside>
			<aside role="footnote" id="footnote-085">
				<p class="first"><a href="#footnote-085-backlink">9</a>. Πρόκειται για διαφορά στη φιλοσοφία της γλώσσας σε σχέση με άλλες (όπως η C++ και η Java). Στον αντίποδα των διαφωνιών, στη Mailing List της Python γίνεται αναφορά για την ομοιότητά της με τη γλώσσα Perl, όπως διατυπώνεται στο βιβλίο Programming Perl (γνωστό και ως Camel Book): &quot;a Perl module would prefer that you stayed out of its living room because you weren’t invited, not because it has a shotgun.&quot;</p>
			</aside>
			<aside role="footnote" id="footnote-084">
				<p class="first"><a href="#footnote-084-backlink">10</a>. <a rel="external" href="http://flask.pocoo.org">http://flask.pocoo.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-083">
				<p class="first"><a href="#footnote-083-backlink">11</a>. <a rel="external" href="https://www.djangoproject.com">https://www.djangoproject.com</a></p>
			</aside>
			<aside role="footnote" id="footnote-082">
				<p class="first"><a href="#footnote-082-backlink">12</a>. <a rel="external" href="https://www.python.org">https://www.python.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-081">
				<p class="first"><a href="#footnote-081-backlink">13</a>. <a rel="external" href="https://www.fullstackpython.com/companies-using-python.html">https://www.fullstackpython.com/companies-using-python.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-080">
				<p class="first"><a href="#footnote-080-backlink">14</a>. <a rel="external" href="https://stackoverflow.com/questions/2560310/heavy-usage-of-python-at-google">https://stackoverflow.com/questions/2560310/heavy-usage-of-python-at-google</a></p>
			</aside>
			<aside role="footnote" id="footnote-079">
				<p class="first"><a href="#footnote-079-backlink">15</a>. <a rel="external" href="https://www.python.org">https://www.python.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-078">
				<p class="first"><a href="#footnote-078-backlink">16</a>. <a rel="external" href="https://www.python.org">https://www.python.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-077">
				<p class="first"><a href="#footnote-077-backlink">17</a>. Ονομάζονται σενάρια γιατί, λόγω της φύσης τους, τα προγράμματα σε τέτοιες γλώσσες μπορούν να αποτελούνται από μικρά τμήματα, τα οποία μπορούν να λειτουργούν αυτόνομα και να εκτελούνται άμεσα για την πραγματοποίηση δοκιμών.</p>
			</aside>
			<aside role="footnote" id="footnote-076">
				<p class="first"><a href="#footnote-076-backlink">18</a>. <a rel="external" href="https://www.anaconda.com/distribution/#download-section">https://www.anaconda.com/distribution/#download-section</a></p>
			</aside>
			<aside role="footnote" id="footnote-075">
				<p class="first"><a href="#footnote-075-backlink">19</a>. <a rel="external" href="https://virtualenv.pypa.io/en/latest/">https://virtualenv.pypa.io/en/latest/</a> που μπορεί να εγκατασταθεί μέσω του πακέτου <span class="courier-code">pip</span> που περιγράφεται αμέσως μετά.</p>
			</aside>
			<aside role="footnote" id="footnote-074">
				<p class="first"><a href="#footnote-074-backlink">20</a>. <a rel="external" href="http://docs.python-guide.org/en/latest/starting/install3/osx/">http://docs.python-guide.org/en/latest/starting/install3/osx/</a></p>
			</aside>
			<aside role="footnote" id="footnote-073">
				<p class="first"><a href="#footnote-073-backlink">21</a>. Στη διεύθυνση <a rel="external" href="http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html">http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html</a> ο δημιουργός της γλώσσας δηλώνει όχι και τόσο χαρούμενος, σχετικά με κάποια χαρακτηριστικά που ενσωμάτωσε, μετά από πολλές εκδόσεις, η Python.</p>
			</aside>
			<aside role="footnote" id="footnote-072">
				<p class="first"><a href="#footnote-072-backlink">22</a>. <a href="">http://bit.ly/2oAGywj</a>. Ενδιαφέρον παρουσιάζουν τα σχόλια αναγνωστών, μεταξύ άλλων και του Tim Peters, δημιουργού ενός υβριδικού αλγόριθμου ταξινόμησης με <i>συγχώνευση </i>(<i>timsort</i>) που χρησιμοποιείται εσωτερικά (για ταξινόμηση λίστας-πίνακα) εξ ορισμού στην Python και στην Java.</p>
			</aside>
			<aside role="footnote" id="footnote-071">
				<p class="first"><a href="#footnote-071-backlink">23</a>. Ένα byte αποτελείται από 8 bit και κάθε bit μπορεί να περιέχει τη δυαδική τιμή 1 ή 0.</p>
			</aside>
			<aside role="footnote" id="footnote-070">
				<p class="first"><a href="#footnote-070-backlink">24</a>. <a rel="external" href="http://bit.ly/2x34tuE">http://bit.ly/2x34tuE</a></p>
			</aside>
			<aside role="footnote" id="footnote-069">
				<p class="first"><a href="#footnote-069-backlink">25</a>. Είναι μια διάκριση στον χρόνο που ο μαθητευόμενος προγραμματιστής θα πρέπει να κάνει από πολύ νωρίς, στα πρώτα του βήματα. Αρχικά, κατά τη διάρκεια ανάλυσης του προβλήματος και συγγραφής του κώδικα, θα πρέπει να συμπεριληφθούν όλες οι πιθανές περιπτώσεις και ενδεχόμενα που θα προκύψουν όταν, σε μελλοντικό χρόνο πια, θα κληθεί, ο τελικός χρήστης, να εκτελέσει (να «τρέξει») το πρόγραμμα.</p>
			</aside>
			<aside role="footnote" id="footnote-068">
				<p class="first"><a href="#footnote-068-backlink">26</a>. <i>Αναγνωριστικό – identifier</i>: Είναι η ονομασία που δίνεται σε διάφορες οντότητες της γλώσσας όπως μεταβλητές, κλάσεις, συναρτήσεις κ.λπ.</p>
			</aside>
			<aside role="footnote" id="footnote-067">
				<p class="first"><a href="#footnote-067-backlink">27</a>. Η πράξη ‘5’*5 θα μπορούσε να γίνει και θα είχε ως αποτέλεσμα το κείμενο ‘55555’.</p>
			</aside>
			<aside role="footnote" id="footnote-066">
				<p class="first"><a href="#footnote-066-backlink">28</a>. <a rel="external" href="https://bit.ly/2Z3he2A">https://bit.ly/2Z3he2A</a></p>
			</aside>
			<aside role="footnote" id="footnote-065">
				<p class="first"><a href="#footnote-065-backlink">29</a>. <a rel="external" href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a></p>
			</aside>
			<aside role="footnote" id="footnote-064">
				<p class="first"><a href="#footnote-064-backlink">30</a>. <a rel="external" href="https://pip.pypa.io/en/stable/quickstart/">https://pip.pypa.io/en/stable/quickstart/</a></p>
			</aside>
			<aside role="footnote" id="footnote-063">
				<p class="first"><a href="#footnote-063-backlink">31</a>. <a rel="external" href="http://bit.ly/2zdCWos">http://bit.ly/2zdCWos</a></p>
			</aside>
			<aside role="footnote" id="footnote-062">
				<p class="first"><a href="#footnote-062-backlink">32</a>. <a rel="external" href="http://bit.ly/2BVMQyu">http://bit.ly/2BVMQyu</a></p>
			</aside>
			<aside role="footnote" id="footnote-061">
				<p class="first"><a href="#footnote-061-backlink">33</a>. Ο εξ ορισμού επιλεγμένος αλγόριθμος κατά το πρότυπο ΙΕΕΕ 754, στρογγυλοποίηση στον <i>πλησιέστερο αριθμό </i>(<i>round to nearest number</i>, ties to even).</p>
			</aside>
			<aside role="footnote" id="footnote-060">
				<p class="first"><a href="#footnote-060-backlink">34</a>. <a rel="external" href="https://docs.python.org/dev/library/stdtypes.html#comparisons">https://docs.python.org/dev/library/stdtypes.html#comparisons</a></p>
			</aside>
			<aside role="footnote" id="footnote-059">
				<p class="first"><a href="#footnote-059-backlink">35</a>. <a rel="external" href="https://docs.python.org/dev/library/stdtypes.html#truth-value-testing">https://docs.python.org/dev/library/stdtypes.html#truth-value-testing</a></p>
			</aside>
			<aside role="footnote" id="footnote-058">
				<p class="first"><a href="#footnote-058-backlink">36</a>. <a rel="external" href="https://docs.python.org/dev/library/stdtypes.html#boolean-operations-and-or-not">https://docs.python.org/dev/library/stdtypes.html#boolean-operations-and-or-not</a></p>
			</aside>
			<aside role="footnote" id="footnote-057">
				<p class="first"><a href="#footnote-057-backlink">37</a>. Η τιμή <span class="courier-code">None</span> είναι αντίστοιχη με την τιμή <span class="courier-code">null</span> που υπάρχει σε άλλες γλώσσες προγραμματισμού και δηλώνει την απουσία ύπαρξης τιμής.</p>
			</aside>
			<aside role="footnote" id="footnote-056">
				<p class="first"><a href="#footnote-056-backlink">38</a>. <a rel="external" href="https://docs.python.org/3/reference/expressions.html#operator-precedence">https://docs.python.org/3/reference/expressions.html#operator-precedence</a></p>
			</aside>
			<aside role="footnote" id="footnote-055">
				<p class="first"><a href="#footnote-055-backlink">39</a>. <a rel="external" href="https://docs.python.org/dev/library/stdtypes.html#comparisons">https://docs.python.org/dev/library/stdtypes.html#comparisons</a></p>
			</aside>
			<aside role="footnote" id="footnote-054">
				<p class="first"><a href="#footnote-054-backlink">40</a>. <a rel="external" href="https://bit.ly/1mu6Mgu">https://bit.ly/1mu6Mgu</a></p>
			</aside>
			<aside role="footnote" id="footnote-053">
				<p class="first"><a href="#footnote-053-backlink">41</a>. <a rel="external" href="https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock">https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock</a></p>
			</aside>
			<aside role="footnote" id="footnote-052">
				<p class="first"><a href="#footnote-052-backlink">42</a>. <a rel="external" href="https://bit.ly/2IRUeNv">https://bit.ly/2IRUeNv</a></p>
			</aside>
			<aside role="footnote" id="footnote-051">
				<p class="first"><a href="#footnote-051-backlink">43</a>. Αυτού του είδους οι βρόχοι γίνονται κυρίως σε <i>συστήματα πραγματικού χρόνου (real time systems)</i> που χρησιμοποιούνται σε κατασκευές <i>ΙοΤ (Internet </i><i>of Things)</i>. Συσκευές όπως το Arduino ή το Raspberry Pi λειτουργούν με προγράμματα γραμμένα, κυρίως, σε C και Python αντίστοιχα. Τέτοια συστήματα, με αισθητήρες και κυκλώματα, είναι συνέχεια σε λειτουργία, σε βρόχους όπως αυτός που υλοποιείται στην Python με την εντολή <span class="courier-code">while True</span>. Κάτι αντίστοιχο στο Arduino περιλαμβάνει μια συνάρτηση <span class="courier-code">void loop()</span>, σε μια C/C++ διάλεκτο που χρησιμοποιεί ο <i>μικροελεγκτής (microcontroller)</i>.</p>
			</aside>
			<aside role="footnote" id="footnote-050">
				<p class="first"><a href="#footnote-050-backlink">44</a>. <a rel="external" href="https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock">https://bigbangtheory.fandom.com/wiki/Rock,_Paper,_Scissors,_Lizard,_Spock</a></p>
			</aside>
			<aside role="footnote" id="footnote-049">
				<p class="first"><a href="#footnote-049-backlink">45</a>. Ένα κριτήριο θα μπορούσε να είναι η «μη σημαντική» βελτίωση της υπολογιζόμενης τιμής από την προσθήκη ενός νέου όρου της σειράς.</p>
			</aside>
			<aside role="footnote" id="footnote-048">
				<p class="first"><a href="#footnote-048-backlink">46</a>. <a rel="external" href="https://www.mathsisfun.com/algebra/sequences-sums-geometric.html">https://www.mathsisfun.com/algebra/sequences-sums-geometric.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-047">
				<p class="first"><a href="#footnote-047-backlink">47</a>. <a rel="external" href="https://en.wikipedia.org/wiki/Approximations_of_π">https://en.wikipedia.org/wiki/Approximations_of_π</a></p>
			</aside>
			<aside role="footnote" id="footnote-046">
				<p class="first"><a href="#footnote-046-backlink">48</a>. <a rel="external" href="https://en.wikipedia.org/wiki/James_Stirling_(mathematician)">https://en.wikipedia.org/wiki/James_Stirling_(mathematician)</a></p>
			</aside>
			<aside role="footnote" id="footnote-045">
				<p class="first"><a href="#footnote-045-backlink">49</a>. Η μέθοδος <span class="courier-code">sort</span> χρησιμοποιεί τον αλγόριθμο ταξινόμησης Timsort. Είναι ένας <i>υβριδικός αλγόριθμος (hybrid algorithm)</i> που συνδυάζει τους αλγόριθμους <i>συγχώνευσης (merge)</i> και <i>εισαγωγής (insertion)</i>. Υλοποιήθηκε από τον Tim Peters το 2002 για να χρησιμοποιηθεί στη γλώσσα Python. Υπολογιστικά, έχει πολύ καλή απόδοση σε πραγματικά προβλήματα και χρησιμοποιείται σε πολλά συστήματα, όπως στην Java, σε τμήματα του Android, στο Google Chrome, στο Octave κ.ά.</p>
			</aside>
			<aside role="footnote" id="footnote-044">
				<p class="first"><a href="#footnote-044-backlink">50</a>. Αυτό ισχύει λόγω της κωδικοποίησης των χαρακτήρων στο σύστημα Unicode. Περιγράφεται στο Κεφάλαιο 6.</p>
			</aside>
			<aside role="footnote" id="footnote-043">
				<p class="first"><a href="#footnote-043-backlink">51</a>. Οι συγκρίσεις αυτές αφορούν τον εσωτερικό μηχανισμό που χρησιμοποιεί ο διερμηνευτής για την εφαρμογή του αλγόριθμου ταξινόμησης της λίστας.</p>
			</aside>
			<aside role="footnote" id="footnote-042">
				<p class="first"><a href="#footnote-042-backlink">52</a>. <a rel="external" href="https://docs.python.org/3.3/tutorial/datastructures.html">https://docs.python.org/3.3/tutorial/datastructures.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-041">
				<p class="first"><a href="#footnote-041-backlink">53</a>. Είναι ονομασίες «ειδικών» μεταβλητών με συγκεκριμένο ρόλο μέσα σε ένα πρόγραμμα. Ένας μετρητής χρησιμεύει στο να καταμετρά τιμές που έχουν κάποιο χαρακτηριστικό γνώρισμα, ενώ μια σημαία αντιπροσωπεύει την ύπαρξη ή την απουσία ενός χαρακτηριστικού μέσα στον κώδικα. Στο Κεφάλαιο 4 δίνονται αντίστοιχα παραδείγματα.</p>
			</aside>
			<aside role="footnote" id="footnote-040">
				<p class="first"><a href="#footnote-040-backlink">54</a>. Η μεταβλητή αυτή είναι προσωρινή με την έννοια ότι έξω από την εντολή σύνθεσης παύει να υπάρχει.</p>
			</aside>
			<aside role="footnote" id="footnote-039">
				<p class="first"><a href="#footnote-039-backlink">55</a>. <a rel="external" href="https://docs.python.org/3/library/array.html">https://docs.python.org/3/library/array.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-038">
				<p class="first"><a href="#footnote-038-backlink">56</a>. <a rel="external" href="https://en.wikipedia.org/wiki/ASCII ">https://en.wikipedia.org/wiki/ASCII </a>και είναι ακρωνύμιο των λέξεων American Standard Code for Information Interchange.</p>
			</aside>
			<aside role="footnote" id="footnote-037">
				<p class="first"><a href="#footnote-037-backlink">57</a>. <a rel="external" href="https://en.wikipedia.org/wiki/Extended_ASCII">https://en.wikipedia.org/wiki/Extended_ASCII</a></p>
			</aside>
			<aside role="footnote" id="footnote-036">
				<p class="first"><a href="#footnote-036-backlink">58</a>. <a rel="external" href="https://en.wikipedia.org/wiki/Unicode">https://en.wikipedia.org/wiki/Unicode</a></p>
			</aside>
			<aside role="footnote" id="footnote-035">
				<p class="first"><a href="#footnote-035-backlink">59</a>. <a rel="external" href="https://en.wikipedia.org/wiki/UTF-8">https://en.wikipedia.org/wiki/UTF-8</a></p>
			</aside>
			<aside role="footnote" id="footnote-034">
				<p class="first"><a href="#footnote-034-backlink">60</a>. <a rel="external" href="https://bit.ly/2hgMd9t">https://bit.ly/2hgMd9t</a></p>
			</aside>
			<aside role="footnote" id="footnote-033">
				<p class="first"><a href="#footnote-033-backlink">61</a>. <a rel="external" href="https://bit.ly/2COIjOi">https://bit.ly/2COIjOi</a></p>
			</aside>
			<aside role="footnote" id="footnote-032">
				<p class="first"><a href="#footnote-032-backlink">62</a>. <a rel="external" href="https://bit.ly/2EtTRrf">https://bit.ly/2EtTRrf</a></p>
			</aside>
			<aside role="footnote" id="footnote-031">
				<p class="first"><a href="#footnote-031-backlink">63</a>. <a rel="external" href="https://bit.ly/2U7rjNE">https://bit.ly/2U7rjNE</a></p>
			</aside>
			<aside role="footnote" id="footnote-030">
				<p class="first"><a href="#footnote-030-backlink">64</a>. <a rel="external" href="https://bit.ly/2TFPGgw">https://bit.ly/2TFPGgw</a></p>
			</aside>
			<aside role="footnote" id="footnote-029">
				<p class="first"><a href="#footnote-029-backlink">65</a>. <a rel="external" href="https://bit.ly/29oQu40">https://bit.ly/29oQu40</a></p>
			</aside>
			<aside role="footnote" id="footnote-028">
				<p class="first"><a href="#footnote-028-backlink">66</a>. <a rel="external" href="https://bit.ly/2cZxvip">https://bit.ly/2cZxvip</a></p>
			</aside>
			<aside role="footnote" id="footnote-027">
				<p class="first"><a href="#footnote-027-backlink">67</a>. <a rel="external" href="https://bit.ly/2UkTpnX">https://bit.ly/2UkTpnX</a></p>
			</aside>
			<aside role="footnote" id="footnote-026">
				<p class="first"><a href="#footnote-026-backlink">68</a>. Σύμφωνα με τον Σουητώνιο, ο Ιούλιος Καίσαρας κρυπτογραφούσε τα μηνύματά του με μετατόπιση τριών θέσεων. Δηλαδή το γράμμα «Α» το αντιστοιχούσε με το γράμμα «Δ», το γράμμα «Β» με το γράμμα «Ε», κ.ο.κ.</p>
			</aside>
			<aside role="footnote" id="footnote-025">
				<p class="first"><a href="#footnote-025-backlink">69</a>. Περισσότερα στοιχεία για τις <i>ονομαστικές παραμέτρους (named parameters)</i> δίνονται στο Κεφάλαιο 10 των συναρτήσεων.</p>
			</aside>
			<aside role="footnote" id="footnote-024">
				<p class="first"><a href="#footnote-024-backlink">70</a>. Ο επαναλήπτης είναι μηχανισμός που επιτρέπει την επαναληπτική σάρωση ενός αντικειμένου και περιγράφεται στο Κεφάλαιο 11.</p>
			</aside>
			<aside role="footnote" id="footnote-023">
				<p class="first"><a href="#footnote-023-backlink">71</a>. Η επιστροφή μιας τιμής γίνεται είτε στην κονσόλα, είτε σε άλλη μεταβλητή με τη μορφή εκχώρησης.</p>
			</aside>
			<aside role="footnote" id="footnote-022">
				<p class="first"><a href="#footnote-022-backlink">72</a>. <a rel="external" href="https://github.com">https://github.com</a></p>
			</aside>
			<aside role="footnote" id="footnote-021">
				<p class="first"><a href="#footnote-021-backlink">73</a>. <a rel="external" href="https://docs.python.org/3/library/time.html">https://docs.python.org/3/library/time.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-020">
				<p class="first"><a href="#footnote-020-backlink">74</a>. <a rel="external" href="https://www.scipy.org">https://www.scipy.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-019">
				<p class="first"><a href="#footnote-019-backlink">75</a>. <a rel="external" href="https://www.numpy.org">https://www.numpy.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-018">
				<p class="first"><a href="#footnote-018-backlink">76</a>. <a rel="external" href="https://pypi.org">https://pypi.org</a></p>
			</aside>
			<aside role="footnote" id="footnote-017">
				<p class="first"><a href="#footnote-017-backlink">77</a>. <a rel="external" href="https://anaconda.org/anaconda/repo">https://anaconda.org/anaconda/repo</a></p>
			</aside>
			<aside role="footnote" id="footnote-016">
				<p class="first"><a href="#footnote-016-backlink">78</a>. <a rel="external" href="https://github.com">https://github.com</a></p>
			</aside>
			<aside role="footnote" id="footnote-015">
				<p class="first"><a href="#footnote-015-backlink">79</a>. <a rel="external" href="https://el.wikipedia.org/wiki/Κόσκινο_του_Ερατοσθένη">https://el.wikipedia.org/wiki/Κόσκινο_του_Ερατοσθένη</a></p>
			</aside>
			<aside role="footnote" id="footnote-014">
				<p class="first"><a href="#footnote-014-backlink">80</a>. <a rel="external" href="https://en.wikipedia.org/wiki/Pascal%27s_triangle">https://en.wikipedia.org/wiki/Pascal%27s_triangle</a></p>
			</aside>
			<aside role="footnote" id="footnote-013">
				<p class="first"><a href="#footnote-013-backlink">81</a>. <a rel="external" href="https://www.retrogames.cc/arcade-games/pang-world.html">https://www.retrogames.cc/arcade-games/pang-world.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-012">
				<p class="first"><a href="#footnote-012-backlink">82</a>. <a rel="external" href="https://bit.ly/2JQxeRc">https://bit.ly/2JQxeRc</a></p>
			</aside>
			<aside role="footnote" id="footnote-011">
				<p class="first"><a href="#footnote-011-backlink">83</a>. Περισσότερα στοιχεία για τη λειτουργία των <i>διακοσμητών (decorators)</i> δίνονται στο Κεφάλαιο 10 με τις συναρτήσεις.</p>
			</aside>
			<aside role="footnote" id="footnote-010">
				<p class="first"><a href="#footnote-010-backlink">84</a>. Συχνά, και για λόγους συντομίας, η διπλή υπογράμμιση, αντί “double underscore”, αναφέρεται και ως “dunder”, ενώ οι ειδικές μέθοδοι ως “dunder methods”.</p>
			</aside>
			<aside role="footnote" id="footnote-009">
				<p class="first"><a href="#footnote-009-backlink">85</a>. <a rel="external" href="https://docs.python.org/dev/howto/functional.html#iterators">https://docs.python.org/dev/howto/functional.html#iterators</a></p>
			</aside>
			<aside role="footnote" id="footnote-008">
				<p class="first"><a href="#footnote-008-backlink">86</a>. <a rel="external" href="https://docs.python.org/3/tutorial/classes.html#iterators">https://docs.python.org/3/tutorial/classes.html#iterators</a></p>
			</aside>
			<aside role="footnote" id="footnote-007">
				<p class="first"><a href="#footnote-007-backlink">87</a>. <a rel="external" href="https://bit.ly/2N3Uv54">https://bit.ly/2N3Uv54</a></p>
			</aside>
			<aside role="footnote" id="footnote-006">
				<p class="first"><a href="#footnote-006-backlink">88</a>. <a rel="external" href="https://bit.ly/2mN7RBb">https://bit.ly/2mN7RBb</a></p>
			</aside>
			<aside role="footnote" id="footnote-005">
				<p class="first"><a href="#footnote-005-backlink">89</a>. Η <span class="courier-code">open</span> είναι συνάρτηση και μπορεί να δέχεται <i>ορίσματα κατά θέση </i>(<i>positional</i>) ή <i>ονομαστικά </i>(<i>named</i>), όπως παρουσιάστηκε ήδη στο Κεφάλαιο 10 με τις συναρτήσεις, οπότε το λεκτικό <span class="courier-code">mode</span> μπορεί και να παραλειφθεί.</p>
			</aside>
			<aside role="footnote" id="footnote-004">
				<p class="first"><a href="#footnote-004-backlink">90</a>. Ένα δωρεάν λογισμικό για την ανάγνωση δυαδικών αρχείων είναι και το HxD, ελεύθερα διαθέσιμο από τη διεύθυνση <a rel="external" href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a></p>
			</aside>
			<aside role="footnote" id="footnote-003">
				<p class="first"><a href="#footnote-003-backlink">91</a>. <a rel="external" href="https://bit.ly/2VuP8uA">https://bit.ly/2VuP8uA</a></p>
			</aside>
			<aside role="footnote" id="footnote-002">
				<p class="first"><a href="#footnote-002-backlink">92</a>. <a rel="external" href="https://bit.ly/2KQJO3a">https://bit.ly/2KQJO3a</a></p>
			</aside>
			<aside role="footnote" id="footnote-001">
				<p class="first"><a href="#footnote-001-backlink">93</a>. <a rel="external" href="https://docs.python.org/3/howto/unicode.html">https://docs.python.org/3/howto/unicode.html</a></p>
			</aside>
			<aside role="footnote" id="footnote-000">
				<p class="first"><a href="#footnote-000-backlink">94</a>. <a rel="external" href="http://plouffe.fr/Simon%20Plouffe.htm">http://plouffe.fr/Simon%20Plouffe.htm</a></p>
			</aside>
		</section>
	<section role="colophon" id="colophon" data-restrict="bookplayer microsite">
		<h1>Κολοφώνας</h1>
		<p>ΤΟ ΒΙΒΛΙΟ ΤΩΝ ΝΙΚΟΛΑΟΥ ΣΑΜΑΡΑ ΚΑΙ ΚΩΝΣΤΑΝΤΙΝΟΥ ΤΣΙΠΛΙΔΗ <i>ΤΟ ΒΙΒΛΙΟ ΤΗΣ PYTHON - ΓΡΑΦΟΝΤΑΣ ΚΩΔΙΚΑ</i> ΜΕ ΔΙΟΡΘΩΣΕΙΣ ΤΟΥ ΚΩΣΤΑ ΣΙΜΟΥ ΚΑΙ ΥΠΕΥΘΥΝΗ ΕΚΔΟΣΗΣ ΤΗ ΜΑΓΔΑ ΚΑΡΑΒΙΩΤΗ ΣEΛIΔOΠOIHΘHKE ΨΗΦΙΑΚΑ AΠO ΤΗ <a href="http://thinking.gr">THINKING</a> ΓIA ΛOΓAPIAΣMO TΩN EKΔOΣEΩN <a href="http://kritiki.gr">KPITIKH</a></p>
	</section>
</body>

</html>
